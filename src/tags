!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
0	html/search/search.js	/^{$/;"	p	class:indexSectionNames
0	html/search/search.js	/^{$/;"	p	class:indexSectionsWithContent
1	html/search/search.js	/^  0: "abcdefghilmnoprstuvwz",$/;"	p	class:indexSectionsWithContent
1	html/search/search.js	/^  0: "all",$/;"	p	class:indexSectionNames
2	html/search/search.js	/^  1: "abcdefghilmnoprstuvwz",$/;"	p	class:indexSectionsWithContent
2	html/search/search.js	/^  1: "classes",$/;"	p	class:indexSectionNames
3	html/search/search.js	/^  2: "dl",$/;"	p	class:indexSectionsWithContent
3	html/search/search.js	/^  2: "namespaces",$/;"	p	class:indexSectionNames
4	html/search/search.js	/^  3: "cghmnpstu",$/;"	p	class:indexSectionsWithContent
4	html/search/search.js	/^  3: "functions",$/;"	p	class:indexSectionNames
ABORT	g_heap/dlmalloc.h.c	618;"	d	file:
ABORT_ON_ASSERT_FAILURE	g_heap/dlmalloc.h.c	621;"	d	file:
ACCESS_TRACING_H_	access_tracing.h	27;"	d
ACQUIRE_LOCK	g_heap/dlmalloc.h.c	1748;"	d	file:
ACQUIRE_LOCK	g_heap/dlmalloc.h.c	1849;"	d	file:
ACQUIRE_LOCK	g_heap/dlmalloc.h.c	1915;"	d	file:
ACQUIRE_LOCK	g_heap/dlmalloc.h.c	1947;"	d	file:
ACQUIRE_MALLOC_GLOBAL_LOCK	g_heap/dlmalloc.h.c	1999;"	d	file:
ACQUIRE_MALLOC_GLOBAL_LOCK	g_heap/dlmalloc.h.c	2005;"	d	file:
ANNULLED	ddr_mem.cpp	/^        enum State { IDLE, QUEUED, RUNNING, ANNULLED };$/;"	e	enum:SchedEvent::State	file:
ATTR_LINE_ALIGNED	mutex.h	/^class aligned_mutex : public mutex {} ATTR_LINE_ALIGNED;$/;"	v	typeref:class:aligned_mutex
ATTR_LINE_ALIGNED	null_core.h	/^} ATTR_LINE_ALIGNED; \/\/This needs to take up a whole cache line, or false sharing will be extremely frequent$/;"	v	typeref:class:NullCore
ATTR_LINE_ALIGNED	ooo_core.h	/^} ATTR_LINE_ALIGNED;  \/\/ Take up an int number of cache lines$/;"	v	typeref:class:OOOCore
ATTR_LINE_ALIGNED	pad.h	42;"	d
ATTR_LINE_ALIGNED	simple_core.h	/^}  ATTR_LINE_ALIGNED; \/\/This needs to take up a whole cache line, or false sharing will be extremely frequent$/;"	v	typeref:class:SimpleCore
ATTR_LINE_ALIGNED	timing_core.h	/^} ATTR_LINE_ALIGNED;$/;"	v	typeref:class:TimingCore
ATTR_LINE_ALIGNED	zsim.cpp	/^InstrFuncPtrs fPtrs[MAX_THREADS] ATTR_LINE_ALIGNED; \/\/minimize false sharing$/;"	v
AccTimes	repl_policies.h	/^        struct AccTimes {$/;"	s	class:ProfViolReplPolicy
Access  -Record Struct Reference	latex/structAccessRecord.tex	/^\\hypertarget{structAccessRecord}{\\section{Access\\-Record Struct Reference}$/;"	s
Access  -Trace  -Reader Class Reference	latex/classAccessTraceReader.tex	/^\\hypertarget{classAccessTraceReader}{\\section{Access\\-Trace\\-Reader Class Reference}$/;"	s
Access  -Trace  -Writer Class Reference	latex/classAccessTraceWriter.tex	/^\\hypertarget{classAccessTraceWriter}{\\section{Access\\-Trace\\-Writer Class Reference}$/;"	s
AccessRecord	access_tracing.h	/^struct AccessRecord {$/;"	s
AccessTimes	prefetcher.h	/^            struct AccessTimes {$/;"	s	struct:StreamPrefetcher::Entry
AccessTraceReader	access_tracing.cpp	/^AccessTraceReader::AccessTraceReader(std::string _fname) : fname(_fname.c_str()) {$/;"	f	class:AccessTraceReader
AccessTraceReader	access_tracing.h	/^class AccessTraceReader {$/;"	c
AccessTraceWriter	access_tracing.cpp	/^AccessTraceWriter::AccessTraceWriter(g_string _fname, uint32_t numChildren) : fname(_fname) {$/;"	f	class:AccessTraceWriter
AccessTraceWriter	access_tracing.h	/^class AccessTraceWriter : public GlobAlloc {$/;"	c
AccessType	memory_hierarchy.h	/^} AccessType;$/;"	t	typeref:enum:__anon4
AccessTypeName	memory_hierarchy.cpp	/^const char* AccessTypeName(AccessType t) {$/;"	f
Act  -Window Class Reference	latex/classActWindow.tex	/^\\hypertarget{classActWindow}{\\section{Act\\-Window Class Reference}$/;"	s
ActWindow	ddr_mem.h	/^class ActWindow {$/;"	c
Activate	html/search/search.js	/^  this.Activate = function(isActive)$/;"	m	class:SearchBox
Adaptive  -Event$  $ G  F $  $ Class Template Reference	latex/classAdaptiveEvent.tex	/^\\hypertarget{classAdaptiveEvent}{\\section{Adaptive\\-Event$<$ G, F $>$ Class Template Reference}$/;"	s
AdaptiveEvent	event_queue.h	/^        AdaptiveEvent(G _get, F _fire, uint64_t _start, uint64_t _target, uint64_t _maxRate) : Event(0), get(_get), fire(_fire), target(_target), maxRate(_maxRate) {$/;"	f	class:AdaptiveEvent
AdaptiveEvent	event_queue.h	/^class AdaptiveEvent : public Event {$/;"	c
Additional Inherited Members	latex/classAdaptiveEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classAggregateStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classClockStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classCounter.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classCrossingEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classCycleBreakdownStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classDDRMemoryAccEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classDelayEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classFilterCache.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classHitEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classLFUReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classLambdaStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classLambdaVectorStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classLegacyReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classLookaheadPartitioner.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classMemAccessEventBase.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classMemSchedulerDefault.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classMissResponseEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classMissStartEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classMissWritebackEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classNRUReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classOOOCore.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classOOODispatchEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classOOOIssueEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classOOORespEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classPartitioner_1_1PartitionEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classPrefetchResponseEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classProcStats_1_1ProcessCounter.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classProcStats_1_1ProcessVectorCounter.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classProxyFuncStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classProxyStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classRandReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classRefreshEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classReplAccessEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classScalarStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classSchedEvent.tex	/^\\begin{DoxyCompactList}\\small\\item\\em for event freelist \\end{DoxyCompactList}\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classSyncEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classTickEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classTimeBreakdownStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classTimingCache.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classTimingCore.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classTimingCoreEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classTracingCache.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classTreeLRUReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classUMonMonitor.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classVantageReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classVectorCounter.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classVectorStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classWayPartReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classWeaveMemAccEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Additional Inherited Members	latex/classaligned__mutex.tex	/^\\end{figure}$/;"	u
AddrLoc	ddr_mem.h	/^        struct AddrLoc {$/;"	s	class:DDRMemory
Address	memory_hierarchy.h	/^typedef uint64_t Address;$/;"	t
AddressMap	detailed_mem.cpp	/^void MemChannelBase::AddressMap(Address addr, uint32_t& row, uint32_t& col, uint32_t& rank, uint32_t& bank) {$/;"	f	class:MemChannelBase
AfterForkInChild	zsim.cpp	/^VOID AfterForkInChild(THREADID tid, const CONTEXT* ctxt, VOID * arg) {$/;"	f
AfterForkInParent	zsim.cpp	/^VOID AfterForkInParent(THREADID tid, const CONTEXT* ctxt, VOID * arg) {$/;"	f
Aggregate  -Stat Class Reference	latex/classAggregateStat.tex	/^\\hypertarget{classAggregateStat}{\\section{Aggregate\\-Stat Class Reference}$/;"	s
AggregateStat	stats.h	/^        explicit AggregateStat(bool isRegular = false) : Stat(), _isMutable(true), _isRegular(isRegular) {}$/;"	f	class:AggregateStat
AggregateStat	stats.h	/^class AggregateStat : public Stat {$/;"	c
AlloyCache	mc.h	/^   AlloyCache,$/;"	e	enum:Scheme
BARRIER_H_	barrier.h	39;"	d
BILLION	locks.h	188;"	d
BINSIZE	ddr_mem.h	/^        static const uint32_t BINSIZE = 10, NUMBINS = 100;$/;"	m	class:DDRMemory
BITHACKS_H_	bithacks.h	27;"	d
BLOCKED	scheduler.h	/^            BLOCKED, \/\/inside a system call, no cid assigned, not in the barrier or the runqueue$/;"	e	enum:Scheduler::ThreadState
BREAKDOWN_STATS_H_	breakdown_stats.h	27;"	d
Bank	ddr_mem.h	/^        struct Bank {$/;"	s	class:DDRMemory
Barrier	barrier.h	/^        Barrier(uint32_t _parallelThreads, Callee* _sched) : parallelThreads(_parallelThreads), rnd(0xBA77137), sched(_sched) {$/;"	f	class:Barrier
Barrier	barrier.h	/^class Barrier : public GlobAlloc {$/;"	c
Barrier Class Reference	latex/classBarrier.tex	/^\\hypertarget{classBarrier}{\\section{Barrier Class Reference}$/;"	s
Base  -Cache Class Reference	latex/classBaseCache.tex	/^\\hypertarget{classBaseCache}{\\section{Base\\-Cache Class Reference}$/;"	s
BaseCache	memory_hierarchy.h	/^class BaseCache : public MemObject {$/;"	c
Bbl  -Info Struct Reference	latex/structBblInfo.tex	/^\\hypertarget{structBblInfo}{\\section{Bbl\\-Info Struct Reference}$/;"	s
BblAndRecordFunc	timing_core.cpp	/^void TimingCore::BblAndRecordFunc(THREADID tid, ADDRINT bblAddr, BblInfo* bblInfo) {$/;"	f	class:TimingCore
BblFunc	null_core.cpp	/^void NullCore::BblFunc(THREADID tid, ADDRINT bblAddr, BblInfo* bblInfo) {$/;"	f	class:NullCore
BblFunc	ooo_core.cpp	/^void OOOCore::BblFunc(THREADID tid, ADDRINT bblAddr, BblInfo* bblInfo) {$/;"	f	class:OOOCore
BblFunc	simple_core.cpp	/^void SimpleCore::BblFunc(THREADID tid, ADDRINT bblAddr, BblInfo* bblInfo) {$/;"	f	class:SimpleCore
BblInfo	core.h	/^struct BblInfo {$/;"	s
BeforeFork	zsim.cpp	/^VOID BeforeFork(THREADID tid, const CONTEXT* ctxt, VOID * arg) {$/;"	f
BitScanForward	g_heap/dlmalloc.h.c	1432;"	d	file:
BitScanReverse	g_heap/dlmalloc.h.c	1433;"	d	file:
Branch  -Predictor  -P  -Ag$  $ N  -B  H  -B  L  -B $  $ Class Template Reference	latex/classBranchPredictorPAg.tex	/^\\hypertarget{classBranchPredictorPAg}{\\section{Branch\\-Predictor\\-P\\-Ag$<$ N\\-B, H\\-B, L\\-B $>$ Class Template Reference}$/;"	s
BranchFunc	null_core.h	/^        static void BranchFunc(THREADID, ADDRINT, BOOL, ADDRINT, ADDRINT) {}$/;"	f	class:NullCore
BranchFunc	ooo_core.cpp	/^void OOOCore::BranchFunc(THREADID tid, ADDRINT pc, BOOL taken, ADDRINT takenNpc, ADDRINT notTakenNpc) {$/;"	f	class:OOOCore
BranchFunc	simple_core.h	/^        static void BranchFunc(THREADID, ADDRINT, BOOL, ADDRINT, ADDRINT) {}$/;"	f	class:SimpleCore
BranchFunc	timing_core.h	/^        static void BranchFunc(THREADID, ADDRINT, BOOL, ADDRINT, ADDRINT) {}$/;"	f	class:TimingCore
BranchPredictorPAg	ooo_core.h	/^        BranchPredictorPAg() {$/;"	f	class:BranchPredictorPAg
BranchPredictorPAg	ooo_core.h	/^class BranchPredictorPAg {$/;"	c
BuildCacheBank	init.cpp	/^BaseCache* BuildCacheBank(Config& config, const string& prefix, g_string& name, uint32_t bankSize, bool isTerminal, uint32_t domain) {$/;"	f
BuildCacheGroup	init.cpp	/^CacheGroup* BuildCacheGroup(Config& config, const string& name, bool isTerminal) {$/;"	f
BuildDDRMemory	init.cpp	/^DDRMemory* BuildDDRMemory(Config& config, uint32_t lineSize, uint32_t frequency, uint32_t domain, g_string name, const string& prefix) {$/;"	f
BuildDDRMemory	mc.cpp	/^MemoryController::BuildDDRMemory(Config& config, uint32_t frequency, $/;"	f	class:MemoryController
BuildMemoryController	init.cpp	/^MemObject* BuildMemoryController(Config& config, uint32_t lineSize, uint32_t frequency, uint32_t domain, g_string& name) {$/;"	f
C  -C Class Reference	latex/classCC.tex	/^\\hypertarget{classCC}{\\section{C\\-C Class Reference}$/;"	s
CACHE_ARRAYS_H_	cache_arrays.h	27;"	d
CACHE_H_	cache.h	27;"	d
CACHE_LINE_BYTES	pad.h	32;"	d
CALLBACK_H	Callback.h	36;"	d
CALL_DIRECT_MMAP	g_heap/dlmalloc.h.c	1631;"	d	file:
CALL_DIRECT_MMAP	g_heap/dlmalloc.h.c	1633;"	d	file:
CALL_DIRECT_MMAP	g_heap/dlmalloc.h.c	1641;"	d	file:
CALL_MMAP	g_heap/dlmalloc.h.c	1621;"	d	file:
CALL_MMAP	g_heap/dlmalloc.h.c	1623;"	d	file:
CALL_MMAP	g_heap/dlmalloc.h.c	1642;"	d	file:
CALL_MORECORE	g_heap/dlmalloc.h.c	1606;"	d	file:
CALL_MORECORE	g_heap/dlmalloc.h.c	1608;"	d	file:
CALL_MORECORE	g_heap/dlmalloc.h.c	1611;"	d	file:
CALL_MREMAP	g_heap/dlmalloc.h.c	1651;"	d	file:
CALL_MREMAP	g_heap/dlmalloc.h.c	1653;"	d	file:
CALL_MREMAP	g_heap/dlmalloc.h.c	1656;"	d	file:
CALL_MUNMAP	g_heap/dlmalloc.h.c	1626;"	d	file:
CALL_MUNMAP	g_heap/dlmalloc.h.c	1628;"	d	file:
CALL_MUNMAP	g_heap/dlmalloc.h.c	1643;"	d	file:
CC	coherence_ctrls.h	/^class CC : public GlobAlloc {$/;"	c
CHUNK_ALIGN_MASK	g_heap/dlmalloc.h.c	1506;"	d	file:
CHUNK_OVERHEAD	g_heap/dlmalloc.h.c	2166;"	d	file:
CHUNK_OVERHEAD	g_heap/dlmalloc.h.c	2168;"	d	file:
CINUSE_BIT	g_heap/dlmalloc.h.c	2210;"	d	file:
CMFAIL	g_heap/dlmalloc.h.c	1527;"	d	file:
COHERENCE_CTRLS_H_	coherence_ctrls.h	27;"	d
CONFIG_H_	config.h	27;"	d
CONSTANTS_H_	constants.h	27;"	d
CONTENTION_SIM_H_	contention_sim.h	27;"	d
CORE_H_	core.h	27;"	d
CORE_RECORDER_H_	core_recorder.h	27;"	d
CORRUPTION_ERROR_ACTION	g_heap/dlmalloc.h.c	2723;"	d	file:
CORRUPTION_ERROR_ACTION	g_heap/dlmalloc.h.c	2729;"	d	file:
CPUENUM_H_	cpuenum.h	27;"	d
CPUID_H_	cpuid.h	27;"	d
CURRENT_THREAD	g_heap/dlmalloc.h.c	1745;"	d	file:
CURRENT_THREAD	g_heap/dlmalloc.h.c	1847;"	d	file:
CURRENT_THREAD	g_heap/dlmalloc.h.c	1913;"	d	file:
CURRENT_THREAD	g_heap/dlmalloc.h.c	1945;"	d	file:
Cache	cache.cpp	/^Cache::Cache(uint32_t _numLines, CC* _cc, CacheArray* _array, ReplPolicy* _rp, uint32_t _accLat, uint32_t _invLat, const g_string& _name)$/;"	f	class:Cache
Cache	cache.h	/^class Cache : public BaseCache {$/;"	c
Cache	latex/classCache.tex	/^\\index{Cache@{Cache}!Cache@{Cache}}$/;"	b
Cache  -Array Class Reference	latex/classCacheArray.tex	/^\\hypertarget{classCacheArray}{\\section{Cache\\-Array Class Reference}$/;"	s
Cache Class Reference	latex/classCache.tex	/^\\hypertarget{classCache}{\\section{Cache Class Reference}$/;"	s
CacheArray	cache_arrays.h	/^class CacheArray : public GlobAlloc {$/;"	c
CacheGroup	init.cpp	/^typedef vector<vector<BaseCache*>> CacheGroup;$/;"	t	file:
CacheOnly	mc.h	/^   CacheOnly,$/;"	e	enum:Scheme
CalcActConst	detailed_mem.cpp	/^uint64_t MemChannelBase::CalcActConst(uint32_t rank, uint32_t bank, uint64_t issuableCycle) {$/;"	f	class:MemChannelBase
CalcDQTermAcc	detailed_mem.cpp	/^uint64_t MemControllerBase::CalcDQTermAcc(uint64_t acc_dq, uint64_t memCycle, uint64_t lastMemCycle) {$/;"	f	class:MemControllerBase
CalcDQTermCur	detailed_mem.cpp	/^uint64_t MemControllerBase::CalcDQTermCur(uint64_t acc_dq, uint64_t last_dq, uint64_t instCycle, uint64_t memCycle, uint64_t lastMemCycle) {$/;"	f	class:MemControllerBase
CalcInterIssueCycle	detailed_mem.cpp	/^uint64_t MemChannelBase::CalcInterIssueCycle(MemAccessType type, uint64_t arrivalCycle) {$/;"	f	class:MemChannelBase
CalcIntraIssueCycle	detailed_mem.cpp	/^uint64_t MemChannelBase::CalcIntraIssueCycle(bool rowHit, uint32_t rank, MemAccessType type, uint64_t arrivalCycle, uint32_t refreshNum) {$/;"	f	class:MemChannelBase
CalcPreConst	detailed_mem.cpp	/^uint64_t MemChannelBase::CalcPreConst(uint32_t rank, uint32_t bank, MemAccessType type, uint64_t issuableCycle) {$/;"	f	class:MemChannelBase
CalcRdWrConst	detailed_mem.cpp	/^uint64_t MemChannelBase::CalcRdWrConst(uint32_t rank, MemAccessType type, uint64_t issuableCycle) {$/;"	f	class:MemChannelBase
Callback	Callback.h	/^	Callback( ConsumerT* const object, PtrMember member) :$/;"	f	class:DRAMSim::Callback
Callback	Callback.h	/^	Callback( const Callback<ConsumerT,ReturnT,Param1T,Param2T,Param3T>& e ) :$/;"	f	class:DRAMSim::Callback
Callback	Callback.h	/^class Callback: public CallbackBase<ReturnT,Param1T,Param2T,Param3T>$/;"	c	namespace:DRAMSim
CallbackBase	Callback.h	/^class CallbackBase$/;"	c	namespace:DRAMSim
Callee	barrier.h	/^class Callee {$/;"	c
Callee Class Reference	latex/classCallee.tex	/^\\hypertarget{classCallee}{\\section{Callee Class Reference}$/;"	s
CheckContinuousAccess	detailed_mem.cpp	/^bool MemChannelBase::CheckContinuousAccess(uint64_t arrivalCycle, uint32_t rank, uint32_t bank, uint32_t row) {$/;"	f	class:MemChannelBase
CheckForMESIRace	coherence_ctrls.h	/^static inline bool CheckForMESIRace(AccessType& type, MESIState* state, MESIState initialState) {$/;"	f
CheckForTermination	zsim.cpp	/^VOID CheckForTermination() {$/;"	f
CheckSetEvent	detailed_mem.cpp	/^bool MemSchedulerDefault::CheckSetEvent(MemAccessEventBase* ev) {$/;"	f	class:MemSchedulerDefault
ChildInfo	trace_driver.h	/^        struct ChildInfo {$/;"	s	class:TraceDriver
Chunk	mem_ctrls.h	/^		struct Chunk {$/;"	s	class:SimpleMemory
ChunkEntry	page_placement.h	/^	struct ChunkEntry $/;"	s	class:PagePlacementPolicy
ChunkInfo	page_placement.h	/^	struct ChunkInfo $/;"	s	class:PagePlacementPolicy
Class Documentation	latex/refman.tex	/^\\input{namespacelibconfig}$/;"	c
Class Hierarchy	latex/hierarchy.tex	/^\\section{Class Hierarchy}$/;"	s
Class Index	latex/refman.tex	/^\\input{hierarchy}$/;"	c
Class List	latex/annotated.tex	/^\\section{Class List}$/;"	s
Classes	latex/classIdealLRUPartReplPolicy.tex	/^\\end{figure}$/;"	u
Classes	latex/classMemControllerBase.tex	/^\\end{figure}$/;"	u
Classes	latex/classMemParam.tex	/^\\end{figure}$/;"	u
Classes	latex/classPartitioner.tex	/^\\end{figure}$/;"	u
Classes	latex/classProcStats.tex	/^\\end{figure}$/;"	u
Classes	latex/classRequestQueue.tex	/^}$/;"	u
Classes	latex/namespaceDRAMSim.tex	/^}$/;"	u
Classes	latex/structSetAssocCands.tex	/^}$/;"	u
Classes	latex/structZCands.tex	/^}$/;"	u
Clock  -Domain  -Info Struct Reference	latex/structClockDomainInfo.tex	/^\\hypertarget{structClockDomainInfo}{\\section{Clock\\-Domain\\-Info Struct Reference}$/;"	s
Clock  -Stat Class Reference	latex/classClockStat.tex	/^\\hypertarget{classClockStat}{\\section{Clock\\-Stat Class Reference}$/;"	s
ClockDomainInfo	zsim.h	/^struct ClockDomainInfo {$/;"	s
ClockStat	profile_stats.h	/^        ClockStat() : ScalarStat(), startNs(0), totalNs(0) {}$/;"	f	class:ClockStat
ClockStat	profile_stats.h	/^class ClockStat : public ScalarStat {$/;"	c
CloseResultsWindow	html/search/search.js	/^  this.CloseResultsWindow = function()$/;"	m	class:SearchBox
CloseSelectionWindow	html/search/search.js	/^  this.CloseSelectionWindow = function()$/;"	m	class:SearchBox
CompareDomains	contention_sim.h	/^        struct CompareDomains : public std::binary_function<DomainData*, DomainData*, bool> {$/;"	s	class:ContentionSim
CompareEvents	contention_sim.h	/^        struct CompareEvents : public std::binary_function<TimingEvent*, TimingEvent*, bool> {$/;"	s	class:ContentionSim
CompareRespEvents	ooo_core_recorder.h	/^        struct CompareRespEvents : public std::binary_function<const FutureResponse&, const FutureResponse&, bool> {$/;"	s	class:OOOCoreRecorder
CompileTimeAsserts	memory_hierarchy.cpp	/^static inline void CompileTimeAsserts() {$/;"	f	file:
Config	config.cpp	/^Config::Config(const char* inFile) {$/;"	f	class:Config
Config	config.h	/^class Config {$/;"	c
Config Class Reference	latex/classConfig.tex	/^\\hypertarget{classConfig}{\\section{Config Class Reference}$/;"	s
Constructor   Destructor Documentation	latex/classCache.tex	/^\\end{DoxyCompactItemize}$/;"	u
Constructor   Destructor Documentation	latex/classH3HashFamily.tex	/^\\end{DoxyCompactItemize}$/;"	u
Constructor   Destructor Documentation	latex/classMemRankBase.tex	/^\\end{DoxyCompactItemize}$/;"	u
Constructor   Destructor Documentation	latex/classSetAssocArray.tex	/^\\end{DoxyCompactItemize}$/;"	u
Constructor   Destructor Documentation	latex/classSimpleCore.tex	/^\\end{DoxyCompactItemize}$/;"	u
Constructor   Destructor Documentation	latex/classTraceDriver.tex	/^\\end{DoxyCompactItemize}$/;"	u
Constructor   Destructor Documentation	latex/classUMonMonitor.tex	/^\\subsection*{Additional Inherited Members}$/;"	u
Contention  -Sim Class Reference	latex/classContentionSim.tex	/^\\hypertarget{classContentionSim}{\\section{Contention\\-Sim Class Reference}$/;"	s
ContentionSim	contention_sim.cpp	/^ContentionSim::ContentionSim(uint32_t _numDomains, uint32_t _numSimThreads) {$/;"	f	class:ContentionSim
ContentionSim	contention_sim.h	/^class ContentionSim : public GlobAlloc {$/;"	c
ContextChange	zsim.cpp	/^VOID ContextChange(THREADID tid, CONTEXT_CHANGE_REASON reason, const CONTEXT* from, CONTEXT* to, INT32 info, VOID* v) {$/;"	f
ContextInfo	scheduler.h	/^        struct ContextInfo : InListNode<ContextInfo> {$/;"	s	class:Scheduler
ContextState	scheduler.h	/^        enum ContextState {$/;"	g	class:Scheduler
Core	core.h	/^        explicit Core(g_string& _name) : lastUpdateCycles(0), lastUpdateInstrs(0), name(_name) {}$/;"	f	class:Core
Core	core.h	/^class Core : public GlobAlloc {$/;"	c
Core  -Part  -Mapper Class Reference	latex/classCorePartMapper.tex	/^\\hypertarget{classCorePartMapper}{\\section{Core\\-Part\\-Mapper Class Reference}$/;"	s
Core  -Recorder Class Reference	latex/classCoreRecorder.tex	/^\\hypertarget{classCoreRecorder}{\\section{Core\\-Recorder Class Reference}$/;"	s
Core Class Reference	latex/classCore.tex	/^\\hypertarget{classCore}{\\section{Core Class Reference}$/;"	s
CorePartMapper	partition_mapper.h	/^        explicit CorePartMapper(uint32_t _numCores) : numCores(_numCores) {}$/;"	f	class:CorePartMapper
CorePartMapper	partition_mapper.h	/^class CorePartMapper : public PartMapper {$/;"	c
CoreRecorder	core_recorder.cpp	/^CoreRecorder::CoreRecorder(uint32_t _domain, g_string& _name)$/;"	f	class:CoreRecorder
CoreRecorder	core_recorder.h	/^class CoreRecorder {$/;"	c
CountActiveThreads	zsim.cpp	/^uint32_t CountActiveThreads() {$/;"	f
Counter	stats.h	/^        Counter() : ScalarStat(), _count(0) {}$/;"	f	class:Counter
Counter	stats.h	/^class Counter : public ScalarStat {$/;"	c
Counter Class Reference	latex/classCounter.tex	/^\\hypertarget{classCounter}{\\section{Counter Class Reference}$/;"	s
Cpu  -Id  -Record Struct Reference	latex/structCpuIdRecord.tex	/^\\hypertarget{structCpuIdRecord}{\\section{Cpu\\-Id\\-Record Struct Reference}$/;"	s
CpuIdRecord	cpuid.h	/^struct CpuIdRecord {$/;"	s
CreateProcessTree	process_tree.cpp	/^void CreateProcessTree(Config& config) {$/;"	f
Crossing  -Event Class Reference	latex/classCrossingEvent.tex	/^\\hypertarget{classCrossingEvent}{\\section{Crossing\\-Event Class Reference}$/;"	s
CrossingEvent	timing_event.cpp	/^CrossingEvent::CrossingEvent(TimingEvent* parent, TimingEvent* child, uint64_t _minStartCycle, EventRecorder* _evRec)$/;"	f	class:CrossingEvent
CrossingEvent	timing_event.h	/^class CrossingEvent : public TimingEvent {$/;"	c
CrossingEventInfo	contention_sim.h	/^        struct CrossingEventInfo {$/;"	s	class:ContentionSim
CrossingSrcEvent	timing_event.h	/^                CrossingSrcEvent(CrossingEvent* _ce, uint32_t dom) : TimingEvent(0, 0, dom), ce(_ce) {$/;"	f	class:CrossingEvent::CrossingSrcEvent
CrossingSrcEvent	timing_event.h	/^        class CrossingSrcEvent : public TimingEvent {$/;"	c	class:CrossingEvent
CrossingStack	event_recorder.h	/^typedef g_vector<CrossingEvent*> CrossingStack;$/;"	t
Cycle  -Breakdown  -Stat Class Reference	latex/classCycleBreakdownStat.tex	/^\\hypertarget{classCycleBreakdownStat}{\\section{Cycle\\-Breakdown\\-Stat Class Reference}$/;"	s
Cycle  -Queue$  $ S  -Z $  $ Class Template Reference	latex/classCycleQueue.tex	/^\\hypertarget{classCycleQueue}{\\section{Cycle\\-Queue$<$ S\\-Z $>$ Class Template Reference}$/;"	s
CycleBreakdownStat	breakdown_stats.h	/^        CycleBreakdownStat() : VectorCounter() {}$/;"	f	class:CycleBreakdownStat
CycleBreakdownStat	breakdown_stats.h	/^class CycleBreakdownStat : public VectorCounter {$/;"	c
CycleQueue	ooo_core.h	/^        CycleQueue() {$/;"	f	class:CycleQueue
CycleQueue	ooo_core.h	/^class CycleQueue {$/;"	c
D  -D  -R  -Memory  -Acc  -Event Class Reference	latex/classDDRMemoryAccEvent.tex	/^\\hypertarget{classDDRMemoryAccEvent}{\\section{D\\-D\\-R\\-Memory\\-Acc\\-Event Class Reference}$/;"	s
D  -D  -R  -Memory Class Reference	latex/classDDRMemory.tex	/^\\hypertarget{classDDRMemory}{\\section{D\\-D\\-R\\-Memory Class Reference}$/;"	s
D  -R  -A  -M  -Sim  -   -  Callback  -Base$  $ Return  -T  Param1  -T  Param2  -T  Param3  -T $  $ Class Template Reference	latex/classDRAMSim_1_1CallbackBase.tex	/^\\hypertarget{classDRAMSim_1_1CallbackBase}{\\section{D\\-R\\-A\\-M\\-Sim\\-:\\-:Callback\\-Base$<$ Return\\-T, Param1\\-T, Param2\\-T, Param3\\-T $>$ Class Template Reference}$/;"	s
D  -R  -A  -M  -Sim  -   -  Callback$  $ Consumer  -T  Return  -T  Param1  -T  Param2  -T  Param3  -T $  $ Class Template Reference	latex/classDRAMSim_1_1Callback.tex	/^\\hypertarget{classDRAMSim_1_1Callback}{\\section{D\\-R\\-A\\-M\\-Sim\\-:\\-:Callback$<$ Consumer\\-T, Return\\-T, Param1\\-T, Param2\\-T, Param3\\-T $>$ Class Template Reference}$/;"	s
D  -R  -A  -M  -Sim  -   -  Multi  -Channel  -Memory  -System Class Reference	latex/classDRAMSim_1_1MultiChannelMemorySystem.tex	/^\\hypertarget{classDRAMSim_1_1MultiChannelMemorySystem}{\\section{D\\-R\\-A\\-M\\-Sim\\-:\\-:Multi\\-Channel\\-Memory\\-System Class Reference}$/;"	s
D  -R  -A  -M  -Sim  -Memory Class Reference	latex/classDRAMSimMemory.tex	/^\\hypertarget{classDRAMSimMemory}{\\section{D\\-R\\-A\\-M\\-Sim\\-Memory Class Reference}$/;"	s
D  -R  -A  -M  -Sim Namespace Reference	latex/namespaceDRAMSim.tex	/^\\hypertarget{namespaceDRAMSim}{\\section{D\\-R\\-A\\-M\\-Sim Namespace Reference}$/;"	s
DBG	prefetcher.cpp	30;"	d	file:
DDRMemory	ddr_mem.cpp	/^DDRMemory::DDRMemory(uint32_t _lineSize, uint32_t _colSize, uint32_t _ranksPerChannel, uint32_t _banksPerRank,$/;"	f	class:DDRMemory
DDRMemory	ddr_mem.h	/^class DDRMemory : public MemObject {$/;"	c
DDRMemoryAccEvent	ddr_mem.cpp	/^        DDRMemoryAccEvent(DDRMemory* _mem, bool _isWrite, Address _addr, uint32_t _data_size, int32_t domain, uint32_t preDelay, uint32_t postDelay)$/;"	f	class:DDRMemoryAccEvent
DDRMemoryAccEvent	ddr_mem.cpp	/^class DDRMemoryAccEvent : public TimingEvent {$/;"	c	file:
DDR_MEM_H_	ddr_mem.h	27;"	d
DEBUG	ddr_mem.cpp	38;"	d	file:
DEBUG	g_heap/dlmalloc.h.c	1361;"	d	file:
DEBUG_BARRIER	barrier.h	58;"	d
DEBUG_FL	scheduler.cpp	45;"	d	file:
DEBUG_FUTEX	scheduler.cpp	48;"	d	file:
DEBUG_HARNESS_H_	debug_harness.h	27;"	d
DEBUG_H_	debug.h	27;"	d
DEBUG_MSG	core_recorder.cpp	30;"	d	file:
DEBUG_MSG	ooo_core.cpp	41;"	d	file:
DEBUG_MSG	ooo_core_recorder.cpp	31;"	d	file:
DEBUG_MSG	timing_core.cpp	30;"	d	file:
DEBUG_UMON	utility_monitor.cpp	29;"	d	file:
DEBUG_ZSIM_H_	debug_zsim.h	27;"	d
DECL_RANK_BINDING	repl_policies.h	64;"	d
DECL_RANK_BINDINGS	ideal_arrays.h	/^        DECL_RANK_BINDINGS;$/;"	m	class:IdealLRUPartReplPolicy
DECL_RANK_BINDINGS	repl_policies.h	/^        DECL_RANK_BINDINGS;$/;"	m	class:LRUReplPolicy
DECL_RANK_BINDINGS	repl_policies.h	/^        DECL_RANK_BINDINGS;$/;"	m	class:LegacyReplPolicy
DECL_RANK_BINDINGS	repl_policies.h	65;"	d
DECODER_H_	decoder.h	27;"	d
DECODE_STAGE	ooo_core.cpp	49;"	d	file:
DEFAULT_GRANULARITY	g_heap/dlmalloc.h.c	672;"	d	file:
DEFAULT_GRANULARITY	g_heap/dlmalloc.h.c	674;"	d	file:
DEFAULT_MMAP_THRESHOLD	g_heap/dlmalloc.h.c	686;"	d	file:
DEFAULT_MMAP_THRESHOLD	g_heap/dlmalloc.h.c	688;"	d	file:
DEFAULT_TRIM_THRESHOLD	g_heap/dlmalloc.h.c	679;"	d	file:
DEFAULT_TRIM_THRESHOLD	g_heap/dlmalloc.h.c	681;"	d	file:
DETAILED_MEM_H_	detailed_mem.h	27;"	d
DETAILED_MEM_PARAMS_H_	detailed_mem_params.h	27;"	d
DIRECT_MMAP	g_heap/dlmalloc.h.c	1640;"	d	file:
DIRECT_MMAP_DEFAULT	g_heap/dlmalloc.h.c	1553;"	d	file:
DIRECT_MMAP_DEFAULT	g_heap/dlmalloc.h.c	1590;"	d	file:
DISPATCH_STAGE	ooo_core.cpp	51;"	d	file:
DLMALLOC_VERSION	g_heap/dlmalloc.h.c	540;"	d	file:
DOMPopupSearchResults	html/search/search.js	/^  this.DOMPopupSearchResults = function()$/;"	m	class:SearchBox
DOMPopupSearchResultsWindow	html/search/search.js	/^  this.DOMPopupSearchResultsWindow = function()$/;"	m	class:SearchBox
DOMSearchBox	html/search/search.js	/^  this.DOMSearchBox = function()$/;"	m	class:SearchBox
DOMSearchClose	html/search/search.js	/^  this.DOMSearchClose = function()$/;"	m	class:SearchBox
DOMSearchField	html/search/search.js	/^  this.DOMSearchField = function()$/;"	m	class:SearchBox
DOMSearchSelect	html/search/search.js	/^  this.DOMSearchSelect = function()$/;"	m	class:SearchBox
DOMSearchSelectWindow	html/search/search.js	/^  this.DOMSearchSelectWindow = function()$/;"	m	class:SearchBox
DRAINING	core_recorder.h	/^            DRAINING \/\/Not scheduled, but events remain. join() --> RUNNING; all events done --> HALTED$/;"	e	enum:CoreRecorder::__anon10
DRAINING	ooo_core_recorder.h	/^            DRAINING \/\/Not scheduled, but events remain. join() --> RUNNING; all events done --> HALTED$/;"	e	enum:OOOCoreRecorder::__anon7
DRAMSIM_H	DRAMSim.h	33;"	d
DRAMSIM_MEM_CTRL_H_	dramsim_mem_ctrl.h	27;"	d
DRAMSim	Callback.h	/^namespace DRAMSim$/;"	n
DRAMSim	DRAMSim.h	/^namespace DRAMSim $/;"	n
DRAMSim	dramsim_mem_ctrl.h	/^namespace DRAMSim {$/;"	n
DRAMSimAccEvent	dramsim_mem_ctrl.cpp	/^        DRAMSimAccEvent(DRAMSimMemory* _dram, bool _write, Address _addr, int32_t domain) :  TimingEvent(0, 0, domain), dram(_dram), write(_write), addr(_addr) {}$/;"	f	class:DRAMSimAccEvent
DRAMSimAccEvent	dramsim_mem_ctrl.cpp	/^class DRAMSimAccEvent : public TimingEvent {$/;"	c	file:
DRAMSimMemory	dramsim_mem_ctrl.cpp	/^DRAMSimMemory::DRAMSimMemory(string& dramTechIni, string& dramSystemIni, string& outputDir, string& traceName,$/;"	f	class:DRAMSimMemory
DRAMSimMemory	dramsim_mem_ctrl.h	/^class DRAMSimMemory : public MemObject { \/\/one DRAMSim controller$/;"	c
DRAM_read_return_cb	dramsim_mem_ctrl.cpp	/^void DRAMSimMemory::DRAM_read_return_cb(uint32_t id, uint64_t addr, uint64_t memCycle) { panic("???"); }$/;"	f	class:DRAMSimMemory
DRAM_read_return_cb	dramsim_mem_ctrl.cpp	/^void DRAMSimMemory::DRAM_read_return_cb(uint32_t id, uint64_t addr, uint64_t memCycle) {$/;"	f	class:DRAMSimMemory
DRAM_write_return_cb	dramsim_mem_ctrl.cpp	/^void DRAMSimMemory::DRAM_write_return_cb(uint32_t id, uint64_t addr, uint64_t memCycle) { panic("???"); }$/;"	f	class:DRAMSimMemory
DRAM_write_return_cb	dramsim_mem_ctrl.cpp	/^void DRAMSimMemory::DRAM_write_return_cb(uint32_t id, uint64_t addr, uint64_t memCycle) {$/;"	f	class:DRAMSimMemory
Decoder	decoder.h	/^class Decoder {$/;"	c
Decoder Class Reference	latex/classDecoder.tex	/^\\hypertarget{classDecoder}{\\section{Decoder Class Reference}$/;"	s
DefaultMaskStr	process_tree.cpp	/^static string DefaultMaskStr() {$/;"	f	file:
Delay  -Event Class Reference	latex/classDelayEvent.tex	/^\\hypertarget{classDelayEvent}{\\section{Delay\\-Event Class Reference}$/;"	s
DelayEvent	timing_event.h	/^        explicit DelayEvent(uint32_t delay) : TimingEvent(delay, 0) {}$/;"	f	class:DelayEvent
DelayEvent	timing_event.h	/^class DelayEvent : public TimingEvent {$/;"	c
Detailed Description	latex/classActWindow.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classCC.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classCacheArray.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classCycleBreakdownStat.tex	/^\\subsection*{Additional Inherited Members}$/;"	u
Detailed Description	latex/classEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classFilterCache.tex	/^\\subsection*{Additional Inherited Members}$/;"	u
Detailed Description	latex/classHDF5BackendImpl.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classHashFamily.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classHitEvent.tex	/^\\subsection*{Additional Inherited Members}$/;"	u
Detailed Description	latex/classIdealLRUArray.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classInList.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classMTRand.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classMemParam.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classNetwork.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classNullCore.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classPartMapper.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classPrioQueue.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classProcStats.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classProcStats_1_1ProcessCounter.tex	/^\\subsection*{Additional Inherited Members}$/;"	u
Detailed Description	latex/classProcessStats.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classSatCounter.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classSchedEvent.tex	/^\\subsection*{Additional Inherited Members}$/;"	u
Detailed Description	latex/classScheduler.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classSimpleMemory.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/classTickEvent.tex	/^\\subsection*{Additional Inherited Members}$/;"	u
Detailed Description	latex/classTracingCache.tex	/^\\subsection*{Additional Inherited Members}$/;"	u
Detailed Description	latex/classWeaveMemAccEvent.tex	/^\\subsection*{Additional Inherited Members}$/;"	u
Detailed Description	latex/classmutex.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/namespaceDRAMSim.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/namespacelibconfig.tex	/^}$/;"	u
Detailed Description	latex/structAccessRecord.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/structBblInfo.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/structCpuIdRecord.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/structLibInfo.tex	/^\\end{DoxyCompactItemize}$/;"	u
Detailed Description	latex/structPartInfo.tex	/^\\end{DoxyCompactItemize}$/;"	u
DomainData	contention_sim.h	/^        struct DomainData : public GlobAlloc {$/;"	s	class:ContentionSim
DumpEventualStats	process_tree.cpp	/^static void DumpEventualStats(uint32_t procIdx, const char* reason) {$/;"	f	file:
DumpWalk	proc_stats.cpp	/^static uint64_t* DumpWalk(Stat* s, uint64_t* curPtr) {$/;"	f	file:
Dyn  -Bbl Struct Reference	latex/structDynBbl.tex	/^\\hypertarget{structDynBbl}{\\section{Dyn\\-Bbl Struct Reference}$/;"	s
Dyn  -Uop Struct Reference	latex/structDynUop.tex	/^\\hypertarget{structDynUop}{\\section{Dyn\\-Uop Struct Reference}$/;"	s
DynBbl	decoder.h	/^struct DynBbl {$/;"	s
DynUop	decoder.h	/^struct DynUop {$/;"	s
DynUopVec	decoder.h	/^typedef std::vector<DynUop> DynUopVec;$/;"	t
E	memory_hierarchy.h	/^    E, \/\/ exclusive and clean$/;"	e	enum:__anon6
EVENT_QUEUE_H_	event_queue.h	27;"	d
EVENT_RECORDER_H_	event_recorder.h	27;"	d
EV_DONE	timing_event.h	/^enum EventState {EV_INVALID, EV_NONE, EV_QUEUED, EV_RUNNING, EV_HELD, EV_DONE};$/;"	e	enum:EventState
EV_HELD	timing_event.h	/^enum EventState {EV_INVALID, EV_NONE, EV_QUEUED, EV_RUNNING, EV_HELD, EV_DONE};$/;"	e	enum:EventState
EV_INVALID	timing_event.h	/^enum EventState {EV_INVALID, EV_NONE, EV_QUEUED, EV_RUNNING, EV_HELD, EV_DONE};$/;"	e	enum:EventState
EV_NONE	timing_event.h	/^enum EventState {EV_INVALID, EV_NONE, EV_QUEUED, EV_RUNNING, EV_HELD, EV_DONE};$/;"	e	enum:EventState
EV_QUEUED	timing_event.h	/^enum EventState {EV_INVALID, EV_NONE, EV_QUEUED, EV_RUNNING, EV_HELD, EV_DONE};$/;"	e	enum:EventState
EV_RUNNING	timing_event.h	/^enum EventState {EV_INVALID, EV_NONE, EV_QUEUED, EV_RUNNING, EV_HELD, EV_DONE};$/;"	e	enum:EventState
EXTERN_BIT	g_heap/dlmalloc.h.c	1663;"	d	file:
EndOfPhaseActions	zsim.cpp	/^VOID EndOfPhaseActions() {$/;"	f
EnterFastForward	zsim.cpp	/^void EnterFastForward() {$/;"	f
Entry	coherence_ctrls.h	/^        struct Entry {$/;"	s	class:MESITopCC
Entry	ideal_arrays.h	/^            Entry(uint32_t _id, uint32_t _p) : lineId(_id), p(_p), used(true) {}$/;"	f	struct:IdealLRUPartReplPolicy::Entry
Entry	ideal_arrays.h	/^            explicit Entry(uint32_t _lineId) : lineAddr(0), lineId(_lineId) {}$/;"	f	struct:IdealLRUArray::Entry
Entry	ideal_arrays.h	/^        struct Entry : InListNode<Entry> {$/;"	s	class:IdealLRUArray
Entry	ideal_arrays.h	/^        struct Entry : InListNode<Entry> {$/;"	s	class:IdealLRUPartReplPolicy
Entry	prefetcher.h	/^        struct Entry {$/;"	s	class:StreamPrefetcher
EstimateBandwidth	detailed_mem.cpp	/^void MemControllerBase::EstimateBandwidth(uint64_t realTime, uint64_t lastTime, bool finish) {$/;"	f	class:MemControllerBase
EstimatePowers	detailed_mem.cpp	/^void MemControllerBase::EstimatePowers(uint64_t sysCycle, bool finish) {$/;"	f	class:MemControllerBase
Event	event_queue.h	/^        explicit Event(uint64_t _period) : period(_period) {} \/\/period == 0 events are one-shot$/;"	f	class:Event
Event	event_queue.h	/^class Event : public GlobAlloc {$/;"	c
Event  -Queue Class Reference	latex/classEventQueue.tex	/^\\hypertarget{classEventQueue}{\\section{Event\\-Queue Class Reference}$/;"	s
Event  -Recorder Class Reference	latex/classEventRecorder.tex	/^\\hypertarget{classEventRecorder}{\\section{Event\\-Recorder Class Reference}$/;"	s
Event Class Reference	latex/classEvent.tex	/^\\hypertarget{classEvent}{\\section{Event Class Reference}$/;"	s
EventQueue	event_queue.h	/^        EventQueue() { futex_init(&qLock); }$/;"	f	class:EventQueue
EventQueue	event_queue.h	/^class EventQueue : public GlobAlloc {$/;"	c
EventRecorder	event_recorder.h	/^        EventRecorder() {$/;"	f	class:EventRecorder
EventRecorder	event_recorder.h	/^class EventRecorder : public GlobAlloc {$/;"	c
EventState	timing_event.h	/^enum EventState {EV_INVALID, EV_NONE, EV_QUEUED, EV_RUNNING, EV_HELD, EV_DONE};$/;"	g
ExitFastForward	zsim.cpp	/^void ExitFastForward() {$/;"	f
FBR	page_placement.h	/^		FBR$/;"	e	enum:PagePlacementPolicy::RepScheme
FEMap	prio_queue.h	/^    typedef g_multimap<uint64_t, T*> FEMap; \/\/far element map$/;"	t	class:PrioQueue
FEMapIterator	prio_queue.h	/^    typedef typename FEMap::iterator FEMapIterator;$/;"	t	class:PrioQueue
FENCEPOST_HEAD	g_heap/dlmalloc.h.c	2216;"	d	file:
FETCH_BYTES_PER_CYCLE	ooo_core.cpp	54;"	d	file:
FETCH_STAGE	ooo_core.cpp	48;"	d	file:
FFBasicBlock	zsim.cpp	/^VOID FFBasicBlock(THREADID tid, ADDRINT bblAddr, BblInfo* bblInfo) {$/;"	f
FFIAdvance	zsim.cpp	/^VOID FFIAdvance() {$/;"	f
FFIBasicBlock	zsim.cpp	/^VOID FFIBasicBlock(THREADID tid, ADDRINT bblAddr, BblInfo* bblInfo) {$/;"	f
FFIEntryBasicBlock	zsim.cpp	/^VOID FFIEntryBasicBlock(THREADID tid, ADDRINT bblAddr, BblInfo* bblInfo) {$/;"	f
FFIInit	zsim.cpp	/^VOID FFIInit() {$/;"	f
FFITrackNFFInterval	zsim.cpp	/^VOID FFITrackNFFInterval() {$/;"	f
FFThread	zsim.cpp	/^VOID FFThread(VOID* arg) {$/;"	f
FILTER_CACHE_H_	filter_cache.h	27;"	d
FJA_NONE	scheduler.h	/^        enum FutexJoinAction {FJA_NONE, FJA_WAKE, FJA_WAIT};$/;"	e	enum:Scheduler::FutexJoinAction
FJA_WAIT	scheduler.h	/^        enum FutexJoinAction {FJA_NONE, FJA_WAKE, FJA_WAIT};$/;"	e	enum:Scheduler::FutexJoinAction
FJA_WAKE	scheduler.h	/^        enum FutexJoinAction {FJA_NONE, FJA_WAKE, FJA_WAIT};$/;"	e	enum:Scheduler::FutexJoinAction
FLAG4_BIT	g_heap/dlmalloc.h.c	2211;"	d	file:
FLAG_BITS	g_heap/dlmalloc.h.c	2213;"	d	file:
FOOTERS	g_heap/dlmalloc.h.c	615;"	d	file:
FORCEINLINE	g_heap/dlmalloc.h.c	780;"	d	file:
FORCEINLINE	g_heap/dlmalloc.h.c	782;"	d	file:
FORCEINLINE	g_heap/dlmalloc.h.c	798;"	d	file:
FORCEINLINE	g_heap/dlmalloc.h.c	802;"	d	file:
FOUR_SIZE_T_SIZES	g_heap/dlmalloc.h.c	1501;"	d	file:
FPTR_ANALYSIS	core.h	58;"	d
FPTR_JOIN	core.h	59;"	d
FPTR_NOP	core.h	60;"	d
FPTR_RETRY	core.h	61;"	d
FWD	memory_hierarchy.h	/^    FWD,  \/\/ don't invalidate, just send up the data (used by directories). Only valid on S lines.$/;"	e	enum:__anon5
FWD_ENTRIES	ooo_core.h	431;"	d
FakeCPUIDPost	zsim.cpp	/^VOID FakeCPUIDPost(THREADID tid, ADDRINT* eax, ADDRINT* ebx, ADDRINT* ecx, ADDRINT* edx) {$/;"	f
FakeCPUIDPre	zsim.cpp	/^VOID FakeCPUIDPre(THREADID tid, REG eax, REG ecx) {$/;"	f
FakeLeaveInfo	scheduler.h	/^            FakeLeaveInfo(uint64_t _pc, ThreadInfo* _th, int _syscallNumber, uint64_t _arg0, uint64_t _arg1) :$/;"	f	struct:Scheduler::FakeLeaveInfo
FakeLeaveInfo	scheduler.h	/^        struct FakeLeaveInfo : GlobAlloc, InListNode<FakeLeaveInfo> {$/;"	s	class:Scheduler
FakeRDTSCPost	zsim.cpp	/^VOID FakeRDTSCPost(THREADID tid, REG* eax, REG* edx) {$/;"	f
Filter  -Cache Class Reference	latex/classFilterCache.tex	/^\\hypertarget{classFilterCache}{\\section{Filter\\-Cache Class Reference}$/;"	s
FilterCache	filter_cache.h	/^        FilterCache(uint32_t _numSets, uint32_t _numLines, CC* _cc, CacheArray* _array,$/;"	f	class:FilterCache
FilterCache	filter_cache.h	/^class FilterCache : public Cache {$/;"	c
FilterEntry	filter_cache.h	/^        struct FilterEntry {$/;"	s	class:FilterCache
FilterStats	stats_filter.cpp	/^AggregateStat* FilterStats(const AggregateStat* rootStat, const char* regexStr) {$/;"	f
FilterStatsLevel	stats_filter.cpp	/^AggregateStat* FilterStatsLevel(const AggregateStat* src, const regex& filter, const char* prefix) {$/;"	f
FindBestRequest	detailed_mem.cpp	/^bool MemSchedulerDefault::FindBestRequest(g_vector<MemSchedQueueElem> *queue, uint32_t& idx) {$/;"	f	class:MemSchedulerDefault
FindChildElement	html/search/search.js	/^    this.FindChildElement = function(id)$/;"	m	class:SearchResults
FindSection	zsim.cpp	/^static Section FindSection(const char* sec) {$/;"	f	file:
Fini	zsim.cpp	/^VOID Fini(int code, VOID * v) {$/;"	f
Flag	memory_hierarchy.h	/^    enum Flag {$/;"	g	struct:MemReq
FollowChild	zsim.cpp	/^BOOL FollowChild(CHILD_PROCESS childProcess, VOID * userData) {$/;"	f
Friends	latex/classCrossingEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Friends	latex/classMTRand.tex	/^\\end{DoxyCompactItemize}$/;"	u
Friends	latex/classOOODispatchEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Friends	latex/classOOOIssueEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Friends	latex/classOOORespEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Friends	latex/classTimingCoreEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Friends	latex/classTimingEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Friends	latex/classslab_1_1SlabAlloc.tex	/^\\end{DoxyCompactItemize}$/;"	u
Functions	latex/namespaceDRAMSim.tex	/^\\end{DoxyCompactItemize}$/;"	u
FutexInfo	virt/timeout.cpp	/^struct FutexInfo {$/;"	s	file:
FutexJoinAction	scheduler.h	/^        enum FutexJoinAction {FJA_NONE, FJA_WAKE, FJA_WAIT};$/;"	g	class:Scheduler
FutexJoinInfo	scheduler.h	/^        struct FutexJoinInfo {$/;"	s	class:Scheduler
FutureResponse	ooo_core_recorder.h	/^        struct FutureResponse {$/;"	s	class:OOOCoreRecorder
FwdEntry	ooo_core.h	/^        struct FwdEntry {$/;"	s	class:OOOCore
GALLOC_H_	galloc.h	27;"	d
GETS	memory_hierarchy.h	/^    GETS, \/\/ get line, exclusive permission not needed (triggered by a processor load)$/;"	e	enum:__anon4
GETX	memory_hierarchy.h	/^    GETX, \/\/ get line, exclusive permission needed (triggered by a processor store o atomic access)$/;"	e	enum:__anon4
GM	galloc.cpp	/^static gm_segment* GM = nullptr;$/;"	v	file:
GM_BASE_ADDR	galloc.cpp	51;"	d	file:
GRACEFUL_TERMINATION	zsim_harness.cpp	/^    GRACEFUL_TERMINATION,$/;"	e	enum:__anon8	file:
G_LIST_H_	g_std/g_list.h	27;"	d
G_MULTIMAP_H_	g_std/g_multimap.h	27;"	d
G_STRING_H_	g_std/g_string.h	27;"	d
G_UNORDERED_MAP_H_	g_std/g_unordered_map.h	27;"	d
G_UNORDERED_SET_H_	g_std/g_unordered_set.h	27;"	d
G_VECTOR_H_	g_std/g_vector.h	27;"	d
GetAccessInRefresh	detailed_mem.h	/^        uint32_t GetAccessInRefresh(void) { return accessInRefresh; }$/;"	f	class:MemRankBase
GetActPreEnergy	detailed_mem.cpp	/^uint64_t MemChannelBase::GetActPreEnergy(void) {$/;"	f	class:MemChannelBase
GetActivateCount	detailed_mem.cpp	/^uint64_t MemChannelBase::GetActivateCount(void) {$/;"	f	class:MemChannelBase
GetActivateCount	detailed_mem.h	/^        uint64_t GetActivateCount(void) { return activateCount; }$/;"	f	class:MemRankBase
GetActiveBankCount	detailed_mem.cpp	/^uint32_t MemRankBase::GetActiveBankCount(void) {$/;"	f	class:MemRankBase
GetActvPowerDownCycle	detailed_mem.h	/^        uint64_t GetActvPowerDownCycle(void) { return actvPowerDownCycle; }$/;"	f	class:MemRankBase
GetBackGroundEnergy	detailed_mem.cpp	/^uint64_t MemChannelBase::GetBackGroundEnergy(uint64_t memCycle, uint64_t lastMemCycle, bool bInstant) {$/;"	f	class:MemChannelBase
GetBankCount	detailed_mem.h	/^        uint32_t GetBankCount(void) {return bankCount; }$/;"	f	class:MemRankBase
GetBankOpen	detailed_mem.h	/^        bool GetBankOpen(uint32_t bank) { return bankinfo[bank]; }$/;"	f	class:MemRankBase
GetBurstEnergy	detailed_mem.cpp	/^uint64_t MemChannelBase::GetBurstEnergy(void) {$/;"	f	class:MemChannelBase
GetDataDelay	detailed_mem_params.cpp	/^uint32_t MemParam::GetDataDelay(uint32_t type)$/;"	f	class:MemParam
GetDataLatency	detailed_mem_params.cpp	/^uint32_t MemParam::GetDataLatency(uint32_t type)$/;"	f	class:MemParam
GetDataSlot	detailed_mem_params.cpp	/^uint32_t MemParam::GetDataSlot(uint32_t type)$/;"	f	class:MemParam
GetEvent	detailed_mem.cpp	/^bool MemSchedulerDefault::GetEvent(MemAccessEventBase*& ev, Address& addr, MemAccessType& type) {$/;"	f	class:MemSchedulerDefault
GetFAWCycle	detailed_mem.h	/^        uint64_t GetFAWCycle(uint32_t bank) { return tFAWCycle[bank]; }$/;"	f	class:MemRankBase
GetFAWCycle	detailed_mem.h	/^        uint64_t GetFAWCycle(void) { return tFAWCycle[tFAWIndex]; }$/;"	f	class:MemRankBase
GetFFPtrs	zsim.cpp	/^static const InstrFuncPtrs& GetFFPtrs() {$/;"	f	file:
GetFuncPtrs	null_core.cpp	/^InstrFuncPtrs NullCore::GetFuncPtrs() {$/;"	f	class:NullCore
GetFuncPtrs	ooo_core.cpp	/^InstrFuncPtrs OOOCore::GetFuncPtrs() {return {LoadFunc, StoreFunc, BblFunc, BranchFunc, PredLoadFunc, PredStoreFunc, FPTR_ANALYSIS, {0}};}$/;"	f	class:OOOCore
GetFuncPtrs	simple_core.cpp	/^InstrFuncPtrs SimpleCore::GetFuncPtrs() {$/;"	f	class:SimpleCore
GetFuncPtrs	timing_core.cpp	/^InstrFuncPtrs TimingCore::GetFuncPtrs() {$/;"	f	class:TimingCore
GetIdlePowerDownCycle	detailed_mem.h	/^        uint64_t GetIdlePowerDownCycle(void) { return idlePowerDownCycle; }$/;"	f	class:MemRankBase
GetIdleStandbyCycle	detailed_mem.h	/^        uint64_t GetIdleStandbyCycle(void) { return idleStandbyCycle; }$/;"	f	class:MemRankBase
GetLastAccessCycle	detailed_mem.h	/^        uint64_t GetLastAccessCycle(void) { return lastAccessCycle; }$/;"	f	class:MemRankBase
GetLastActCycle	detailed_mem.h	/^        uint64_t GetLastActCycle(uint32_t bank) { return lastActCycle[bank]; }$/;"	f	class:MemRankBase
GetLastBank	detailed_mem.h	/^        uint32_t GetLastBank(void) { return lastBank; }$/;"	f	class:MemRankBase
GetLastPreCycle	detailed_mem.h	/^        uint64_t GetLastPreCycle(uint32_t bank) { return lastPreCycle[bank]; }$/;"	f	class:MemRankBase
GetLastRdWrCycle	detailed_mem.h	/^        uint64_t GetLastRdWrCycle(uint32_t bank) { return lastRdWrCycle[bank]; }$/;"	f	class:MemRankBase
GetLastRefreshCycle	detailed_mem.h	/^        uint64_t GetLastRefreshCycle(void) { return lastRefreshCycle; }$/;"	f	class:MemRankBase
GetLastRow	detailed_mem.h	/^        uint32_t GetLastRow(uint32_t bank) { return lastRow[bank]; }$/;"	f	class:MemRankBase
GetLastType	detailed_mem.h	/^        MemAccessType GetLastType(uint32_t bank) { return lastType[bank]; }$/;"	f	class:MemRankBase
GetPowerDownPenalty	detailed_mem.cpp	/^uint32_t MemChannelBase::GetPowerDownPenalty(uint32_t rank, uint64_t arrivalCycle) {$/;"	f	class:MemChannelBase
GetPreDelay	detailed_mem_params.cpp	/^uint32_t MemParam::GetPreDelay(uint32_t type)$/;"	f	class:MemParam
GetPrechargeCount	detailed_mem.cpp	/^uint64_t MemChannelBase::GetPrechargeCount(void) {$/;"	f	class:MemChannelBase
GetPrechargeCount	detailed_mem.h	/^        uint32_t GetPrechargeCount(void) { return prechargeCount; }$/;"	f	class:MemRankBase
GetPrevActvPowerDownCycle	detailed_mem.h	/^        uint64_t GetPrevActvPowerDownCycle(void) { return prevActvPowerDownCycle; }$/;"	f	class:MemRankBase
GetPrevIdlePowerDownCycle	detailed_mem.h	/^        uint64_t GetPrevIdlePowerDownCycle(void) { return prevIdlePowerDownCycle; }$/;"	f	class:MemRankBase
GetPrevIdleStandbyCycle	detailed_mem.h	/^        uint64_t GetPrevIdleStandbyCycle(void) { return prevIdleStandbyCycle; }$/;"	f	class:MemRankBase
GetPrioQueueContainer	ooo_core_recorder.cpp	/^S& GetPrioQueueContainer(std::priority_queue<T, S, C>& q) {$/;"	f
GetRdWrDelay	detailed_mem_params.cpp	/^uint32_t MemParam::GetRdWrDelay(uint32_t type, uint32_t lastType)$/;"	f	class:MemParam
GetReadBurstCount	detailed_mem.h	/^        uint64_t GetReadBurstCount(void) { return readBurstCount; }$/;"	f	class:MemRankBase
GetRefreshCount	detailed_mem.cpp	/^uint64_t MemChannelBase::GetRefreshCount(void) {$/;"	f	class:MemChannelBase
GetRefreshCycle	detailed_mem_params.cpp	/^uint32_t MemParam::GetRefreshCycle(void)$/;"	f	class:MemParam
GetRefreshEnergy	detailed_mem.cpp	/^uint64_t MemChannelBase::GetRefreshEnergy(void) {$/;"	f	class:MemChannelBase
GetRefreshNum	detailed_mem.h	/^        uint32_t GetRefreshNum(void) { return refreshNum; }$/;"	f	class:MemRankBase
GetSockAddr	virt/ports.cpp	/^static struct sockaddr_in* GetSockAddr(ADDRINT guestAddr, size_t guestSize) {$/;"	f	file:
GetWriteBurstCount	detailed_mem.h	/^        uint64_t GetWriteBurstCount(void) { return writeBurstCount; }$/;"	f	class:MemRankBase
Glob  -Alloc Class Reference	latex/classGlobAlloc.tex	/^\\hypertarget{classGlobAlloc}{\\section{Glob\\-Alloc Class Reference}$/;"	s
Glob  -Sim  -Info Struct Reference	latex/structGlobSimInfo.tex	/^\\hypertarget{structGlobSimInfo}{\\section{Glob\\-Sim\\-Info Struct Reference}$/;"	s
GlobAlloc	galloc.h	/^class GlobAlloc {$/;"	c
GlobSimInfo	zsim.h	/^struct GlobSimInfo {$/;"	s
H  -D  -F5  -Backend  -Impl Class Reference	latex/classHDF5BackendImpl.tex	/^\\hypertarget{classHDF5BackendImpl}{\\section{H\\-D\\-F5\\-Backend\\-Impl Class Reference}$/;"	s
H  -D  -F5  -Backend Class Reference	latex/classHDF5Backend.tex	/^\\hypertarget{classHDF5Backend}{\\section{H\\-D\\-F5\\-Backend Class Reference}$/;"	s
H3  -Hash  -Family Class Reference	latex/classH3HashFamily.tex	/^\\hypertarget{classH3HashFamily}{\\section{H3\\-Hash\\-Family Class Reference}$/;"	s
H3 -Hash -Family	latex/classH3HashFamily.tex	/^\\index{H3\\-Hash\\-Family@{H3\\-Hash\\-Family}!H3HashFamily@{H3\\-Hash\\-Family}}$/;"	b
H3HashFamily	hash.cpp	/^H3HashFamily::H3HashFamily(uint32_t numFunctions, uint32_t outputBits, uint64_t randSeed) : numFuncs(numFunctions) {$/;"	f	class:H3HashFamily
H3HashFamily	hash.h	/^class H3HashFamily : public HashFamily {$/;"	c
HALF_MAX_SIZE_T	g_heap/dlmalloc.h.c	1503;"	d	file:
HALTED	core_recorder.h	/^            HALTED, \/\/Not scheduled, no events left. Initial state. join() --> RUNNING$/;"	e	enum:CoreRecorder::__anon10
HALTED	ooo_core_recorder.h	/^            HALTED, \/\/Not scheduled, no events left. Initial state. join() --> RUNNING$/;"	e	enum:OOOCoreRecorder::__anon7
HASH_H_	hash.h	27;"	d
HAVE_MMAP	g_heap/dlmalloc.h.c	37;"	d	file:
HAVE_MMAP	g_heap/dlmalloc.h.c	555;"	d	file:
HAVE_MMAP	g_heap/dlmalloc.h.c	578;"	d	file:
HAVE_MMAP	g_heap/dlmalloc.h.c	640;"	d	file:
HAVE_MORECORE	g_heap/dlmalloc.h.c	36;"	d	file:
HAVE_MORECORE	g_heap/dlmalloc.h.c	556;"	d	file:
HAVE_MORECORE	g_heap/dlmalloc.h.c	577;"	d	file:
HAVE_MORECORE	g_heap/dlmalloc.h.c	657;"	d	file:
HAVE_MORECORE	g_heap/dlmalloc.h.c	659;"	d	file:
HAVE_MREMAP	g_heap/dlmalloc.h.c	38;"	d	file:
HAVE_MREMAP	g_heap/dlmalloc.h.c	647;"	d	file:
HAVE_MREMAP	g_heap/dlmalloc.h.c	649;"	d	file:
HDF5Backend	hdf5_stats.cpp	/^HDF5Backend::HDF5Backend(const char* filename, AggregateStat* rootStat, size_t bytesPerWrite, bool skipVectors, bool sumRegularAggregates) {$/;"	f	class:HDF5Backend
HDF5Backend	stats.h	/^class HDF5Backend : public StatsBackend {$/;"	c
HDF5BackendImpl	hdf5_stats.cpp	/^        HDF5BackendImpl(const char* _filename, AggregateStat* _rootStat, size_t _bytesPerWrite, bool _skipVectors, bool _sumRegularAggregates) :$/;"	f	class:HDF5BackendImpl
HDF5BackendImpl	hdf5_stats.cpp	/^class HDF5BackendImpl : public GlobAlloc {$/;"	c	file:
HMA	mc.h	/^   HMA,$/;"	e	enum:Scheme
HandleMagicOp	zsim.cpp	/^VOID HandleMagicOp(THREADID tid, ADDRINT op) {$/;"	f
Hash  -Family Class Reference	latex/classHashFamily.tex	/^\\hypertarget{classHashFamily}{\\section{Hash\\-Family Class Reference}$/;"	s
HashFamily	hash.h	/^        HashFamily() {}$/;"	f	class:HashFamily
HashFamily	hash.h	/^class HashFamily : public GlobAlloc {$/;"	c
Hierarchical Index	latex/refman.tex	/^\\input{namespaces}$/;"	c
Hit  -Event Class Reference	latex/classHitEvent.tex	/^\\hypertarget{classHitEvent}{\\section{Hit\\-Event Class Reference}$/;"	s
HitEvent	timing_cache.cpp	/^        HitEvent(TimingCache* _cache,  uint32_t postDelay, int32_t domain) : TimingEvent(0, postDelay, domain), cache(_cache) {}$/;"	f	class:HitEvent
HitEvent	timing_cache.cpp	/^class HitEvent : public TimingEvent {$/;"	c	file:
HybridCache	mc.h	/^   HybridCache,$/;"	e	enum:Scheme
I	memory_hierarchy.h	/^    I, \/\/ invalid$/;"	e	enum:__anon6
IDD0	detailed_mem_params.h	/^            uint32_t IDD0;$/;"	m	struct:MemParam::IDDs
IDD2N	detailed_mem_params.h	/^            uint32_t IDD2N;$/;"	m	struct:MemParam::IDDs
IDD2P	detailed_mem_params.h	/^            uint32_t IDD2P;$/;"	m	struct:MemParam::IDDs
IDD3N	detailed_mem_params.h	/^            uint32_t IDD3N;$/;"	m	struct:MemParam::IDDs
IDD3P	detailed_mem_params.h	/^            uint32_t IDD3P;$/;"	m	struct:MemParam::IDDs
IDD4R	detailed_mem_params.h	/^            uint32_t IDD4R;$/;"	m	struct:MemParam::IDDs
IDD4W	detailed_mem_params.h	/^            uint32_t IDD4W;$/;"	m	struct:MemParam::IDDs
IDD5	detailed_mem_params.h	/^            uint32_t IDD5;$/;"	m	struct:MemParam::IDDs
IDD_VDD1	detailed_mem_params.h	/^        IDDs IDD_VDD1;$/;"	m	class:MemParam
IDDs	detailed_mem_params.h	/^        struct IDDs {$/;"	s	class:MemParam
IDEAL_ARRAYS_H_	ideal_arrays.h	27;"	d
IDLE	ddr_mem.cpp	/^        enum State { IDLE, QUEUED, RUNNING, ANNULLED };$/;"	e	enum:SchedEvent::State	file:
IDLE	scheduler.h	/^            IDLE,$/;"	e	enum:Scheduler::ContextState
IFETCH	memory_hierarchy.h	/^        IFETCH        = (1<<1), \/\/For instruction fetches. Purely informative for now, does not imply NOEXCL (but ifetches should be marked NOEXCL)$/;"	e	enum:MemReq::Flag
INITIAL_LOCK	g_heap/dlmalloc.h.c	1747;"	d	file:
INITIAL_LOCK	g_heap/dlmalloc.h.c	1848;"	d	file:
INITIAL_LOCK	g_heap/dlmalloc.h.c	1914;"	d	file:
INITIAL_LOCK	g_heap/dlmalloc.h.c	1946;"	d	file:
INITIAL_LOCK	g_heap/dlmalloc.h.c	1994;"	d	file:
INIT_H_	init.h	27;"	d
INSECURE	g_heap/dlmalloc.h.c	637;"	d	file:
INTRUSIVE_LIST_H_	intrusive_list.h	27;"	d
INUSE_BITS	g_heap/dlmalloc.h.c	2212;"	d	file:
INV	memory_hierarchy.h	/^    INV,  \/\/ fully invalidate this line$/;"	e	enum:__anon5
INVALID_CID	zsim.cpp	107;"	d	file:
INVX	memory_hierarchy.h	/^    INVX, \/\/ invalidate exclusive access to this line (lower level can still keep a non-exclusive copy)$/;"	e	enum:__anon5
ISSUES_PER_CYCLE	ooo_core.cpp	55;"	d	file:
ISSUE_STAGE	ooo_core.cpp	50;"	d	file:
Id  -Hash  -Family Class Reference	latex/classIdHashFamily.tex	/^\\hypertarget{classIdHashFamily}{\\section{Id\\-Hash\\-Family Class Reference}$/;"	s
IdHashFamily	hash.h	/^class IdHashFamily : public HashFamily {$/;"	c
IdPartInfo	ideal_arrays.h	/^        struct IdPartInfo : public PartInfo {$/;"	s	class:IdealLRUPartReplPolicy
Ideal  -L  -R  -U  -Array Class Reference	latex/classIdealLRUArray.tex	/^\\hypertarget{classIdealLRUArray}{\\section{Ideal\\-L\\-R\\-U\\-Array Class Reference}$/;"	s
Ideal  -L  -R  -U  -Part  -Array Class Reference	latex/classIdealLRUPartArray.tex	/^\\hypertarget{classIdealLRUPartArray}{\\section{Ideal\\-L\\-R\\-U\\-Part\\-Array Class Reference}$/;"	s
Ideal  -L  -R  -U  -Part  -Repl  -Policy  -   -  Entry Struct Reference	latex/structIdealLRUPartReplPolicy_1_1Entry.tex	/^\\hypertarget{structIdealLRUPartReplPolicy_1_1Entry}{\\section{Ideal\\-L\\-R\\-U\\-Part\\-Repl\\-Policy\\-:\\-:Entry Struct Reference}$/;"	s
Ideal  -L  -R  -U  -Part  -Repl  -Policy  -   -  Id  -Part  -Info Struct Reference	latex/structIdealLRUPartReplPolicy_1_1IdPartInfo.tex	/^\\hypertarget{structIdealLRUPartReplPolicy_1_1IdPartInfo}{\\section{Ideal\\-L\\-R\\-U\\-Part\\-Repl\\-Policy\\-:\\-:Id\\-Part\\-Info Struct Reference}$/;"	s
Ideal  -L  -R  -U  -Part  -Repl  -Policy Class Reference	latex/classIdealLRUPartReplPolicy.tex	/^\\hypertarget{classIdealLRUPartReplPolicy}{\\section{Ideal\\-L\\-R\\-U\\-Part\\-Repl\\-Policy Class Reference}$/;"	s
IdealLRUArray	ideal_arrays.h	/^        explicit IdealLRUArray(uint32_t _numLines) : numLines(_numLines), cc(nullptr) {$/;"	f	class:IdealLRUArray
IdealLRUArray	ideal_arrays.h	/^class IdealLRUArray : public CacheArray {$/;"	c
IdealLRUPartArray	ideal_arrays.h	/^        IdealLRUPartArray(uint32_t _numLines, IdealLRUPartReplPolicy* _rp) : rp(_rp), numLines(_numLines) {$/;"	f	class:IdealLRUPartArray
IdealLRUPartArray	ideal_arrays.h	/^class IdealLRUPartArray : public CacheArray {$/;"	c
IdealLRUPartReplPolicy	ideal_arrays.h	/^        IdealLRUPartReplPolicy(PartitionMonitor* _monitor, PartMapper* _mapper, uint32_t _numLines, uint32_t _numBuckets) : PartReplPolicy(_monitor, _mapper), numLines(_numLines), numBuckets(_numBuckets) {$/;"	f	class:IdealLRUPartReplPolicy
IdealLRUPartReplPolicy	ideal_arrays.h	/^class IdealLRUPartReplPolicy : public PartReplPolicy {$/;"	c
In  -List  -Node$  $ T $  $ Struct Template Reference	latex/structInListNode.tex	/^\\hypertarget{structInListNode}{\\section{In\\-List\\-Node$<$ T $>$ Struct Template Reference}$/;"	s
In  -List$  $ T $  $ Class Template Reference	latex/classInList.tex	/^\\hypertarget{classInList}{\\section{In\\-List$<$ T $>$ Class Template Reference}$/;"	s
InList	intrusive_list.h	/^        InList() : head(nullptr), tail(nullptr), elems(0) {}$/;"	f	class:InList
InList	intrusive_list.h	/^class InList {$/;"	c
InListNode	intrusive_list.h	/^    InListNode() {$/;"	f	struct:InListNode
InListNode	intrusive_list.h	/^struct InListNode {$/;"	s
IncActivateCount	detailed_mem.h	/^        void IncActivateCount(void) { activateCount++; }$/;"	f	class:MemRankBase
IncPrechargeCount	detailed_mem.h	/^        void IncPrechargeCount(void) { prechargeCount++; }$/;"	f	class:MemRankBase
IncReadBurstCount	detailed_mem.h	/^        void IncReadBurstCount(void) { readBurstCount++; }$/;"	f	class:MemRankBase
IncWalk	proc_stats.cpp	/^static uint64_t* IncWalk(Stat* s, uint64_t* curPtr) {$/;"	f	file:
IncWriteBurstCount	detailed_mem.h	/^        void IncWriteBurstCount(void) { writeBurstCount++; }$/;"	f	class:MemRankBase
IndirectBasicBlock	zsim.cpp	/^VOID PIN_FAST_ANALYSIS_CALL IndirectBasicBlock(THREADID tid, ADDRINT bblAddr, BblInfo* bblInfo) {$/;"	f
IndirectLoadSingle	zsim.cpp	/^VOID PIN_FAST_ANALYSIS_CALL IndirectLoadSingle(THREADID tid, ADDRINT addr) {$/;"	f
IndirectPredLoadSingle	zsim.cpp	/^VOID PIN_FAST_ANALYSIS_CALL IndirectPredLoadSingle(THREADID tid, ADDRINT addr, BOOL pred) {$/;"	f
IndirectPredStoreSingle	zsim.cpp	/^VOID PIN_FAST_ANALYSIS_CALL IndirectPredStoreSingle(THREADID tid, ADDRINT addr, BOOL pred) {$/;"	f
IndirectRecordBranch	zsim.cpp	/^VOID PIN_FAST_ANALYSIS_CALL IndirectRecordBranch(THREADID tid, ADDRINT branchPc, BOOL taken, ADDRINT takenNpc, ADDRINT notTakenNpc) {$/;"	f
IndirectStoreSingle	zsim.cpp	/^VOID PIN_FAST_ANALYSIS_CALL IndirectStoreSingle(THREADID tid, ADDRINT addr) {$/;"	f
InitGlobalStats	init.cpp	/^static void InitGlobalStats() {$/;"	f	file:
InitLog	log.cpp	/^void InitLog(const char* header, const char* file) {$/;"	f
InitSystem	init.cpp	/^static void InitSystem(Config& config) {$/;"	f	file:
Instr	decoder.cpp	/^Decoder::Instr::Instr(INS _ins) : ins(_ins), numLoads(0), numInRegs(0), numOutRegs(0), numStores(0) {$/;"	f	class:Decoder::Instr
Instr	decoder.h	/^        struct Instr {$/;"	s	class:Decoder
Instr  -Data  -Core  -Part  -Mapper Class Reference	latex/classInstrDataCorePartMapper.tex	/^\\hypertarget{classInstrDataCorePartMapper}{\\section{Instr\\-Data\\-Core\\-Part\\-Mapper Class Reference}$/;"	s
Instr  -Data  -Part  -Mapper Class Reference	latex/classInstrDataPartMapper.tex	/^\\hypertarget{classInstrDataPartMapper}{\\section{Instr\\-Data\\-Part\\-Mapper Class Reference}$/;"	s
Instr  -Data  -Process  -Part  -Mapper Class Reference	latex/classInstrDataProcessPartMapper.tex	/^\\hypertarget{classInstrDataProcessPartMapper}{\\section{Instr\\-Data\\-Process\\-Part\\-Mapper Class Reference}$/;"	s
Instr  -Func  -Ptrs Struct Reference	latex/structInstrFuncPtrs.tex	/^\\hypertarget{structInstrFuncPtrs}{\\section{Instr\\-Func\\-Ptrs Struct Reference}$/;"	s
InstrDataCorePartMapper	partition_mapper.h	/^        explicit InstrDataCorePartMapper(uint32_t _numCores) : numCores(_numCores) {}$/;"	f	class:InstrDataCorePartMapper
InstrDataCorePartMapper	partition_mapper.h	/^class InstrDataCorePartMapper : public PartMapper {$/;"	c
InstrDataPartMapper	partition_mapper.h	/^class InstrDataPartMapper : public PartMapper {$/;"	c
InstrDataProcessPartMapper	partition_mapper.h	/^        explicit InstrDataProcessPartMapper(uint32_t _numProcs) : numProcs(_numProcs) {}$/;"	f	class:InstrDataProcessPartMapper
InstrDataProcessPartMapper	partition_mapper.h	/^class InstrDataProcessPartMapper : public PartMapper {$/;"	c
InstrFuncPtrs	core.h	/^struct InstrFuncPtrs {  \/\/ NOLINT(whitespace)$/;"	s
Instruction	zsim.cpp	/^VOID Instruction(INS ins) {$/;"	f
InternalExceptionHandler	zsim.cpp	/^static EXCEPT_HANDLING_RESULT InternalExceptionHandler(THREADID tid, EXCEPTION_INFO *pExceptInfo, PHYSICAL_CONTEXT *pPhysCtxt, VOID *) {$/;"	f	file:
Inv  -Req Struct Reference	latex/structInvReq.tex	/^\\hypertarget{structInvReq}{\\section{Inv\\-Req Struct Reference}$/;"	s
InvReq	memory_hierarchy.h	/^struct InvReq {$/;"	s
InvType	memory_hierarchy.h	/^} InvType;$/;"	t	typeref:enum:__anon5
InvTypeName	memory_hierarchy.cpp	/^const char* InvTypeName(InvType t) {$/;"	f
IsCloseRowBufPolicy	detailed_mem_params.cpp	/^bool MemParam::IsCloseRowBufPolicy() {$/;"	f	class:MemParam
IsGet	memory_hierarchy.h	/^inline bool IsGet(AccessType t) { return t == GETS || t == GETX; }$/;"	f
IsOpenRowBufPolicy	detailed_mem_params.cpp	/^bool MemParam::IsOpenRowBufPolicy() {$/;"	f	class:MemParam
IsPut	memory_hierarchy.h	/^inline bool IsPut(AccessType t) { return t == PUTS || t == PUTX; }$/;"	f
IsRowBufferHit	detailed_mem.cpp	/^bool MemChannelBase::IsRowBufferHit(uint32_t row, uint32_t rank, uint32_t bank) {$/;"	f	class:MemChannelBase
IsSleepingInFutex	scheduler.cpp	/^bool IsSleepingInFutex(uint32_t linuxPid, uint32_t linuxTid, uintptr_t futexAddr) {$/;"	f
IssueActivate	detailed_mem.cpp	/^void MemChannelBase::IssueActivate(uint32_t rank, uint32_t bank, uint64_t issuedCycle) {$/;"	f	class:MemChannelBase
IssuePrecharge	detailed_mem.cpp	/^void MemChannelBase::IssuePrecharge(uint32_t rank, uint32_t bank, uint64_t issuedCycle, bool continuous) {$/;"	f	class:MemChannelBase
JEDEC_BUS_WIDTH	ddr_mem.h	/^        static const uint32_t JEDEC_BUS_WIDTH = 64;$/;"	m	class:DDRMemory
Join	zsim.cpp	/^void Join(uint32_t tid) {$/;"	f
JoinAndBasicBlock	zsim.cpp	/^VOID JoinAndBasicBlock(THREADID tid, ADDRINT bblAddr, BblInfo* bblInfo) {$/;"	f
JoinAndLoadSingle	zsim.cpp	/^VOID JoinAndLoadSingle(THREADID tid, ADDRINT addr) {$/;"	f
JoinAndPredLoadSingle	zsim.cpp	/^VOID JoinAndPredLoadSingle(THREADID tid, ADDRINT addr, BOOL pred) {$/;"	f
JoinAndPredStoreSingle	zsim.cpp	/^VOID JoinAndPredStoreSingle(THREADID tid, ADDRINT addr, BOOL pred) {$/;"	f
JoinAndRecordBranch	zsim.cpp	/^VOID JoinAndRecordBranch(THREADID tid, ADDRINT branchPc, BOOL taken, ADDRINT takenNpc, ADDRINT notTakenNpc) {$/;"	f
JoinAndStoreSingle	zsim.cpp	/^VOID JoinAndStoreSingle(THREADID tid, ADDRINT addr) {$/;"	f
KILL_EM_ALL	zsim_harness.cpp	/^    KILL_EM_ALL,$/;"	e	enum:__anon8	file:
L  -F  -U  -Repl  -Policy Class Reference	latex/classLFUReplPolicy.tex	/^\\hypertarget{classLFUReplPolicy}{\\section{L\\-F\\-U\\-Repl\\-Policy Class Reference}$/;"	s
L  -R  -U  -Repl  -Policy$  $ sharers  -Aware $  $ Class Template Reference	latex/classLRUReplPolicy.tex	/^\\hypertarget{classLRUReplPolicy}{\\section{L\\-R\\-U\\-Repl\\-Policy$<$ sharers\\-Aware $>$ Class Template Reference}$/;"	s
L1D_LAT	ooo_core.cpp	53;"	d	file:
LACKS_ERRNO_H	g_heap/dlmalloc.h.c	563;"	d	file:
LACKS_FCNTL_H	g_heap/dlmalloc.h.c	548;"	d	file:
LACKS_STRINGS_H	g_heap/dlmalloc.h.c	561;"	d	file:
LACKS_STRING_H	g_heap/dlmalloc.h.c	560;"	d	file:
LACKS_SYS_MMAN_H	g_heap/dlmalloc.h.c	559;"	d	file:
LACKS_SYS_PARAM_H	g_heap/dlmalloc.h.c	558;"	d	file:
LACKS_SYS_TYPES_H	g_heap/dlmalloc.h.c	562;"	d	file:
LACKS_UNISTD_H	g_heap/dlmalloc.h.c	557;"	d	file:
LEFT	barrier.h	/^        enum State {OFFLINE, WAITING, RUNNING, LEFT};$/;"	e	enum:Barrier::State
LFUInfo	repl_policies.h	/^        struct LFUInfo {$/;"	s	class:LFUReplPolicy
LFUReplPolicy	repl_policies.h	/^        explicit LFUReplPolicy(uint32_t _numLines) : timestamp(1), bestCandidate(-1), numLines(_numLines) {$/;"	f	class:LFUReplPolicy
LFUReplPolicy	repl_policies.h	/^class LFUReplPolicy : public LegacyReplPolicy {$/;"	c
LIBCONFIG_VERSION	config.cpp	37;"	d	file:
LIBCONFIG_VERSION	config.cpp	39;"	d	file:
LOAD	mc.h	/^	LOAD = 0,$/;"	e	enum:ReqType
LOCKS_H_	locks.h	29;"	d
LOG_Cache	log.h	/^    LOG_Cache,$/;"	e	enum:__anon11
LOG_Config	log.h	/^    LOG_Config,$/;"	e	enum:__anon11
LOG_FSVirt	log.h	/^    LOG_FSVirt,$/;"	e	enum:__anon11
LOG_H_	log.h	29;"	d
LOG_Harness	log.h	/^    LOG_Harness,$/;"	e	enum:__anon11
LOG_Mem	log.h	/^    LOG_Mem,$/;"	e	enum:__anon11
LOG_Process	log.h	/^    LOG_Process,$/;"	e	enum:__anon11
LOG_Sched	log.h	/^    LOG_Sched,$/;"	e	enum:__anon11
LOG_TimeVirt	log.h	/^    LOG_TimeVirt,$/;"	e	enum:__anon11
LRU	page_placement.h	/^		LRU = 0,$/;"	e	enum:PagePlacementPolicy::RepScheme
LRUReplPolicy	repl_policies.h	/^        explicit LRUReplPolicy(uint32_t _numLines) : timestamp(1), numLines(_numLines) {$/;"	f	class:LRUReplPolicy
LRUReplPolicy	repl_policies.h	/^class LRUReplPolicy : public ReplPolicy {$/;"	c
Lambda  -Stat$  $ F $  $ Class Template Reference	latex/classLambdaStat.tex	/^\\hypertarget{classLambdaStat}{\\section{Lambda\\-Stat$<$ F $>$ Class Template Reference}$/;"	s
Lambda  -Vector  -Stat$  $ F $  $ Class Template Reference	latex/classLambdaVectorStat.tex	/^\\hypertarget{classLambdaVectorStat}{\\section{Lambda\\-Vector\\-Stat$<$ F $>$ Class Template Reference}$/;"	s
LambdaStat	stats.h	/^        explicit LambdaStat(F _f) : f(_f) {} \/\/copy the lambda$/;"	f	class:LambdaStat
LambdaStat	stats.h	/^class LambdaStat : public ScalarStat {$/;"	c
LambdaVectorStat	stats.h	/^        LambdaVectorStat(F _f, uint32_t _s) : VectorStat(), f(_f), s(_s) {}$/;"	f	class:LambdaVectorStat
LambdaVectorStat	stats.h	/^class LambdaVectorStat : public VectorStat {$/;"	c
LatencySimulate	detailed_mem.cpp	/^uint64_t MemChannelBase::LatencySimulate(Address lineAddr, uint64_t arrivalCycle, uint64_t lastPhaseCycle, MemAccessType type) {$/;"	f	class:MemChannelBase
LatencySimulate	detailed_mem.cpp	/^uint64_t MemControllerBase::LatencySimulate(Address lineAddr, uint64_t sysCycle, MemAccessType type) {$/;"	f	class:MemControllerBase
LaunchProcess	zsim_harness.cpp	/^void LaunchProcess(uint32_t procIdx) {$/;"	f
Legacy  -Repl  -Policy Class Reference	latex/classLegacyReplPolicy.tex	/^\\hypertarget{classLegacyReplPolicy}{\\section{Legacy\\-Repl\\-Policy Class Reference}$/;"	s
LegacyReplPolicy	repl_policies.h	/^class LegacyReplPolicy : public virtual ReplPolicy {$/;"	c
Lib  -Info Struct Reference	latex/structLibInfo.tex	/^\\hypertarget{structLibInfo}{\\section{Lib\\-Info Struct Reference}$/;"	s
LibInfo	debug.h	/^struct LibInfo {$/;"	s
Line  -Placement  -Policy Class Reference	latex/classLinePlacementPolicy.tex	/^\\hypertarget{classLinePlacementPolicy}{\\section{Line\\-Placement\\-Policy Class Reference}$/;"	s
LineInfo	part_repl_policies.h	/^        struct LineInfo {$/;"	s	class:VantageReplPolicy
LinePlacementPolicy	line_placement.h	/^   LinePlacementPolicy() {}; $/;"	f	class:LinePlacementPolicy
LinePlacementPolicy	line_placement.h	/^class LinePlacementPolicy$/;"	c
LoadAndRecordFunc	timing_core.cpp	/^void TimingCore::LoadAndRecordFunc(THREADID tid, ADDRINT addr) {$/;"	f	class:TimingCore
LoadConfig	detailed_mem_params.cpp	/^void MemParam::LoadConfig(g_string _cfgFile, uint32_t _cacheLineSize)$/;"	f	class:MemParam
LoadConfigMain	detailed_mem_params.cpp	/^void MemParam::LoadConfigMain(Config &cfg, uint32_t _cacheLineSize)$/;"	f	class:MemParam
LoadFunc	null_core.cpp	/^void NullCore::LoadFunc(THREADID tid, ADDRINT addr) {}$/;"	f	class:NullCore
LoadFunc	ooo_core.cpp	/^void OOOCore::LoadFunc(THREADID tid, ADDRINT addr) {static_cast<OOOCore*>(cores[tid])->load(addr);}$/;"	f	class:OOOCore
LoadFunc	simple_core.cpp	/^void SimpleCore::LoadFunc(THREADID tid, ADDRINT addr) {$/;"	f	class:SimpleCore
LoadPower	detailed_mem_params.cpp	/^void MemParam::LoadPower(Config &cfg)$/;"	f	class:MemParam
LoadTiming	detailed_mem_params.cpp	/^void MemParam::LoadTiming(Config &cfg)$/;"	f	class:MemParam
LogType	log.h	/^} LogType;$/;"	t	typeref:enum:__anon11
Lookahead  -Partitioner Class Reference	latex/classLookaheadPartitioner.tex	/^\\hypertarget{classLookaheadPartitioner}{\\section{Lookahead\\-Partitioner Class Reference}$/;"	s
LookaheadPartitioner	lookahead.cpp	/^LookaheadPartitioner::LookaheadPartitioner(PartReplPolicy* _repl, uint32_t _numPartitions, uint32_t _buckets,$/;"	f	class:LookaheadPartitioner
LookaheadPartitioner	partitioner.h	/^class LookaheadPartitioner : public Partitioner {$/;"	c
M	memory_hierarchy.h	/^    M  \/\/ exclusive and dirty$/;"	e	enum:__anon6
M	mtrand.h	/^        enum { M = 397 };  \/\/ period parameter$/;"	e	enum:MTRand::__anon3
M  -D1  -Memory Class Reference	latex/classMD1Memory.tex	/^\\hypertarget{classMD1Memory}{\\section{M\\-D1\\-Memory Class Reference}$/;"	s
M  -E  -S  -I  -Bottom  -C  -C Class Reference	latex/classMESIBottomCC.tex	/^\\hypertarget{classMESIBottomCC}{\\section{M\\-E\\-S\\-I\\-Bottom\\-C\\-C Class Reference}$/;"	s
M  -E  -S  -I  -C  -C Class Reference	latex/classMESICC.tex	/^\\hypertarget{classMESICC}{\\section{M\\-E\\-S\\-I\\-C\\-C Class Reference}$/;"	s
M  -E  -S  -I  -Terminal  -C  -C Class Reference	latex/classMESITerminalCC.tex	/^\\hypertarget{classMESITerminalCC}{\\section{M\\-E\\-S\\-I\\-Terminal\\-C\\-C Class Reference}$/;"	s
M  -E  -S  -I  -Top  -C  -C Class Reference	latex/classMESITopCC.tex	/^\\hypertarget{classMESITopCC}{\\section{M\\-E\\-S\\-I\\-Top\\-C\\-C Class Reference}$/;"	s
M  -T  -Rand Class Reference	latex/classMTRand.tex	/^\\hypertarget{classMTRand}{\\section{M\\-T\\-Rand Class Reference}$/;"	s
MALLINFO_FIELD_TYPE	g_heap/dlmalloc.h.c	708;"	d	file:
MALLOC_ALIGNMENT	g_heap/dlmalloc.h.c	581;"	d	file:
MALLOC_ALIGNMENT	g_heap/dlmalloc.h.c	612;"	d	file:
MALLOC_FAILURE_ACTION	g_heap/dlmalloc.h.c	565;"	d	file:
MALLOC_FAILURE_ACTION	g_heap/dlmalloc.h.c	653;"	d	file:
MAP_ANONYMOUS	g_heap/dlmalloc.h.c	1535;"	d	file:
MAX	bithacks.h	39;"	d
MAX	bithacks.h	41;"	d
MAX_BBLS	decoder.cpp	1251;"	d	file:
MAX_CACHE_CHILDREN	constants.h	35;"	d
MAX_CHILDREN	zsim_harness.cpp	72;"	d	file:
MAX_CLOCK_DOMAINS	constants.h	39;"	d
MAX_INFOS	virt/fs.cpp	/^static const uint32_t MAX_INFOS = 100;$/;"	v	file:
MAX_INSTR_LOADS	decoder.h	85;"	d
MAX_INSTR_REG_READS	decoder.h	86;"	d
MAX_INSTR_REG_WRITES	decoder.h	87;"	d
MAX_INSTR_STORES	decoder.h	88;"	d
MAX_IPC	constants.h	44;"	d
MAX_PARTITIONS	prefetcher.h	/^        static constexpr uint32_t MAX_PARTITIONS = 4;$/;"	m	class:StreamPrefetcher
MAX_PORT_DOMAINS	constants.h	40;"	d
MAX_REGISTERS	decoder.h	98;"	d
MAX_RELEASE_CHECK_RATE	g_heap/dlmalloc.h.c	693;"	d	file:
MAX_RELEASE_CHECK_RATE	g_heap/dlmalloc.h.c	695;"	d	file:
MAX_REQUEST	g_heap/dlmalloc.h.c	2187;"	d	file:
MAX_SIZE_T	g_heap/dlmalloc.h.c	597;"	d	file:
MAX_SMALL_REQUEST	g_heap/dlmalloc.h.c	2534;"	d	file:
MAX_SMALL_SIZE	g_heap/dlmalloc.h.c	2533;"	d	file:
MAX_STEPS	mc.h	11;"	d
MAX_SYSCALLS	virt/virt.cpp	34;"	d	file:
MAX_THREADS	constants.h	32;"	d
MAX_TIMEOUTS	barrier.h	55;"	d
MAX_UOPS_PER_INSTR	decoder.h	90;"	d
MAX_UOP_DST_REGS	decoder.h	40;"	d
MAX_UOP_SRC_REGS	decoder.h	39;"	d
MCHUNK_SIZE	g_heap/dlmalloc.h.c	2163;"	d	file:
MD1Memory	mem_ctrls.cpp	/^MD1Memory::MD1Memory(uint32_t requestSize, uint32_t megacyclesPerSecond, uint32_t megabytesPerSecond, uint32_t _zeroLoadLatency, g_string& _name)$/;"	f	class:MD1Memory
MD1Memory	mem_ctrls.h	/^class MD1Memory : public MemObject {$/;"	c
MEMORY_HIERARCHY_H_	memory_hierarchy.h	27;"	d
MEM_CTRLS_H_	mem_ctrls.h	27;"	d
MESIBottomCC	coherence_ctrls.h	/^        MESIBottomCC(uint32_t _numLines, uint32_t _selfId, bool _nonInclusiveHack) : numLines(_numLines), selfId(_selfId), nonInclusiveHack(_nonInclusiveHack) {$/;"	f	class:MESIBottomCC
MESIBottomCC	coherence_ctrls.h	/^class MESIBottomCC : public GlobAlloc {$/;"	c
MESICC	coherence_ctrls.h	/^        MESICC(uint32_t _numLines, bool _nonInclusiveHack, g_string& _name) : tcc(nullptr), bcc(nullptr),$/;"	f	class:MESICC
MESICC	coherence_ctrls.h	/^class MESICC : public CC {$/;"	c
MESIState	memory_hierarchy.h	/^} MESIState;$/;"	t	typeref:enum:__anon6
MESIStateName	memory_hierarchy.cpp	/^const char* MESIStateName(MESIState s) {$/;"	f
MESITerminalCC	coherence_ctrls.h	/^        MESITerminalCC(uint32_t _numLines, const g_string& _name) : bcc(nullptr), numLines(_numLines), name(_name) {}$/;"	f	class:MESITerminalCC
MESITerminalCC	coherence_ctrls.h	/^class MESITerminalCC : public CC {$/;"	c
MESITopCC	coherence_ctrls.h	/^        MESITopCC(uint32_t _numLines, bool _nonInclusiveHack) : numLines(_numLines), nonInclusiveHack(_nonInclusiveHack) {$/;"	f	class:MESITopCC
MESITopCC	coherence_ctrls.h	/^class MESITopCC : public GlobAlloc {$/;"	c
MFAIL	g_heap/dlmalloc.h.c	1526;"	d	file:
MIN	bithacks.h	44;"	d
MIN	bithacks.h	46;"	d
MIN_CHUNK_SIZE	g_heap/dlmalloc.h.c	2177;"	d	file:
MIN_LARGE_SIZE	g_heap/dlmalloc.h.c	2532;"	d	file:
MIN_REQUEST	g_heap/dlmalloc.h.c	2188;"	d	file:
MIN_SMALL_INDEX	g_heap/dlmalloc.h.c	2776;"	d	file:
MLOCK_T	g_heap/dlmalloc.h.c	1744;"	d	file:
MLOCK_T	g_heap/dlmalloc.h.c	1846;"	d	file:
MLOCK_T	g_heap/dlmalloc.h.c	1912;"	d	file:
MLOCK_T	g_heap/dlmalloc.h.c	1944;"	d	file:
MMAP	g_heap/dlmalloc.h.c	1638;"	d	file:
MMAP_CHUNK_OVERHEAD	g_heap/dlmalloc.h.c	2172;"	d	file:
MMAP_CLEARS	g_heap/dlmalloc.h.c	568;"	d	file:
MMAP_CLEARS	g_heap/dlmalloc.h.c	570;"	d	file:
MMAP_CLEARS	g_heap/dlmalloc.h.c	643;"	d	file:
MMAP_DEFAULT	g_heap/dlmalloc.h.c	1539;"	d	file:
MMAP_DEFAULT	g_heap/dlmalloc.h.c	1547;"	d	file:
MMAP_DEFAULT	g_heap/dlmalloc.h.c	1588;"	d	file:
MMAP_FLAGS	g_heap/dlmalloc.h.c	1538;"	d	file:
MMAP_FLAGS	g_heap/dlmalloc.h.c	1545;"	d	file:
MMAP_FOOT_PAD	g_heap/dlmalloc.h.c	2174;"	d	file:
MMAP_PROT	g_heap/dlmalloc.h.c	1533;"	d	file:
MORECORE_CONTIGUOUS	g_heap/dlmalloc.h.c	663;"	d	file:
MORECORE_CONTIGUOUS	g_heap/dlmalloc.h.c	667;"	d	file:
MORECORE_DEFAULT	g_heap/dlmalloc.h.c	665;"	d	file:
MREMAP_DEFAULT	g_heap/dlmalloc.h.c	1596;"	d	file:
MSPACES	g_heap/dlmalloc.h.c	606;"	d	file:
MSPACES	g_heap/dlmalloc.h.c	608;"	d	file:
MTRAND_H_	mtrand.h	84;"	d
MTRand	mtrand.h	/^class MTRand : public GlobAlloc {$/;"	c
MTRand	mtrand.h	/^inline MTRand::MTRand() { seed(); }$/;"	f	class:MTRand
MTRand	mtrand.h	/^inline MTRand::MTRand(const MTRand& o) {$/;"	f	class:MTRand
MTRand	mtrand.h	/^inline MTRand::MTRand(const uint64_t oneSeed) { seed(oneSeed); }$/;"	f	class:MTRand
MTRand	mtrand.h	/^inline MTRand::MTRand(uint64_t *const bigSeed, const uint64_t seedLength) {$/;"	f	class:MTRand
MUNMAP	g_heap/dlmalloc.h.c	1639;"	d	file:
MUNMAP_DEFAULT	g_heap/dlmalloc.h.c	1532;"	d	file:
MUNMAP_DEFAULT	g_heap/dlmalloc.h.c	1589;"	d	file:
MUTEX_H_	mutex.h	27;"	d
M_GRANULARITY	g_heap/dlmalloc.h.c	722;"	d	file:
M_MMAP_THRESHOLD	g_heap/dlmalloc.h.c	723;"	d	file:
M_TRIM_THRESHOLD	g_heap/dlmalloc.h.c	721;"	d	file:
MakeConstraints	detailed_mem_params.cpp	/^void MemParam::MakeConstraints(void)$/;"	f	class:MemParam
Mem  -Access  -Event  -Base Class Reference	latex/classMemAccessEventBase.tex	/^\\hypertarget{classMemAccessEventBase}{\\section{Mem\\-Access\\-Event\\-Base Class Reference}$/;"	s
Mem  -Channel  -Base Class Reference	latex/classMemChannelBase.tex	/^\\hypertarget{classMemChannelBase}{\\section{Mem\\-Channel\\-Base Class Reference}$/;"	s
Mem  -Controller  -Base  -   -  power  -Value Struct Reference	latex/structMemControllerBase_1_1powerValue.tex	/^\\hypertarget{structMemControllerBase_1_1powerValue}{\\section{Mem\\-Controller\\-Base\\-:\\-:power\\-Value Struct Reference}$/;"	s
Mem  -Controller  -Base Class Reference	latex/classMemControllerBase.tex	/^\\hypertarget{classMemControllerBase}{\\section{Mem\\-Controller\\-Base Class Reference}$/;"	s
Mem  -Object Class Reference	latex/classMemObject.tex	/^\\hypertarget{classMemObject}{\\section{Mem\\-Object Class Reference}$/;"	s
Mem  -Param  -   -  I  -D  -Ds Struct Reference	latex/structMemParam_1_1IDDs.tex	/^\\hypertarget{structMemParam_1_1IDDs}{\\section{Mem\\-Param\\-:\\-:I\\-D\\-Ds Struct Reference}$/;"	s
Mem  -Param Class Reference	latex/classMemParam.tex	/^\\hypertarget{classMemParam}{\\section{Mem\\-Param Class Reference}$/;"	s
Mem  -Rank  -Base Class Reference	latex/classMemRankBase.tex	/^\\hypertarget{classMemRankBase}{\\section{Mem\\-Rank\\-Base Class Reference}$/;"	s
Mem  -Req Struct Reference	latex/structMemReq.tex	/^\\hypertarget{structMemReq}{\\section{Mem\\-Req Struct Reference}$/;"	s
Mem  -Scheduler  -Base Class Reference	latex/classMemSchedulerBase.tex	/^\\hypertarget{classMemSchedulerBase}{\\section{Mem\\-Scheduler\\-Base Class Reference}$/;"	s
Mem  -Scheduler  -Default Class Reference	latex/classMemSchedulerDefault.tex	/^\\hypertarget{classMemSchedulerDefault}{\\section{Mem\\-Scheduler\\-Default Class Reference}$/;"	s
Mem -Rank -Base	latex/classMemRankBase.tex	/^\\index{Mem\\-Rank\\-Base@{Mem\\-Rank\\-Base}!MemRankBase@{Mem\\-Rank\\-Base}}$/;"	b
MemAccessEventBase	detailed_mem.h	/^        MemAccessEventBase(MemControllerBase* _dram, MemAccessType _type, Address _addr, int32_t domain, uint32_t preDelay, uint32_t postDelay)$/;"	f	class:MemAccessEventBase
MemAccessEventBase	detailed_mem.h	/^class MemAccessEventBase : public TimingEvent {$/;"	c
MemAccessType	detailed_mem.h	/^enum MemAccessType { READ, WRITE, NUM_ACCESS_TYPES};$/;"	g
MemChannelBase	detailed_mem.cpp	/^MemChannelBase::MemChannelBase(uint32_t _myId, MemParam *_mParam) {$/;"	f	class:MemChannelBase
MemChannelBase	detailed_mem.h	/^class MemChannelBase : public GlobAlloc {$/;"	c
MemControllerBase	detailed_mem.cpp	/^MemControllerBase::MemControllerBase(g_string _memCfg, uint32_t _cacheLineSize, uint32_t _sysFreqMHz, uint32_t _domain, g_string& _name) {$/;"	f	class:MemControllerBase
MemControllerBase	detailed_mem.h	/^class MemControllerBase : public MemObject {$/;"	c
MemObject	memory_hierarchy.h	/^class MemObject : public GlobAlloc {$/;"	c
MemParam	detailed_mem_params.cpp	/^MemParam::MemParam()$/;"	f	class:MemParam
MemParam	detailed_mem_params.h	/^class MemParam : public GlobAlloc{$/;"	c
MemRankBase	detailed_mem.cpp	/^MemRankBase::MemRankBase(uint32_t _myId, uint32_t _parentId, uint32_t _bankCount) {$/;"	f	class:MemRankBase
MemRankBase	detailed_mem.h	/^class MemRankBase : public GlobAlloc {$/;"	c
MemReq	memory_hierarchy.h	/^struct MemReq {$/;"	s
MemSchedQueueElem	detailed_mem.h	/^        typedef std::pair<MemAccessEventBase*, Address> MemSchedQueueElem;$/;"	t	class:MemSchedulerBase
MemSchedulerBase	detailed_mem.h	/^        MemSchedulerBase(uint32_t id, MemParam* mParam, MemChannelBase* mChnl)$/;"	f	class:MemSchedulerBase
MemSchedulerBase	detailed_mem.h	/^class MemSchedulerBase : public GlobAlloc {$/;"	c
MemSchedulerDefault	detailed_mem.cpp	/^MemSchedulerDefault::MemSchedulerDefault(uint32_t id, MemParam* mParam, MemChannelBase* mChnl)$/;"	f	class:MemSchedulerDefault
MemSchedulerDefault	detailed_mem.h	/^class MemSchedulerDefault : public MemSchedulerBase {$/;"	c
Member Function Documentation	latex/classCorePartMapper.tex	/^\\end{DoxyCompactItemize}$/;"	u
Member Function Documentation	latex/classCrossingEvent.tex	/^\\subsection*{Additional Inherited Members}$/;"	u
Member Function Documentation	latex/classDelayEvent.tex	/^\\subsection*{Additional Inherited Members}$/;"	u
Member Function Documentation	latex/classRefreshEvent.tex	/^\\subsection*{Additional Inherited Members}$/;"	u
Member Function Documentation	latex/classSchedEvent.tex	/^N\\-O\\-T\\-E\\-: This event plus the bit of logic in \\hyperlink{classDDRMemory}{D\\-D\\-R\\-Memory} that deals with event management can be generalized to deal with event-\\\/driven classes that need to be ticked according to varying constraints. $/;"	u
Member Function Documentation	latex/classTimingEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Memory  -Controller Class Reference	latex/classMemoryController.tex	/^\\hypertarget{classMemoryController}{\\section{Memory\\-Controller Class Reference}$/;"	s
MemoryController	mc.cpp	/^MemoryController::MemoryController(g_string& name, uint32_t frequency, uint32_t domain, Config& config)$/;"	f	class:MemoryController
MemoryController	mc.h	/^class MemoryController : public MemObject {$/;"	c
Miss  -Response  -Event Class Reference	latex/classMissResponseEvent.tex	/^\\hypertarget{classMissResponseEvent}{\\section{Miss\\-Response\\-Event Class Reference}$/;"	s
Miss  -Start  -Event Class Reference	latex/classMissStartEvent.tex	/^\\hypertarget{classMissStartEvent}{\\section{Miss\\-Start\\-Event Class Reference}$/;"	s
Miss  -Writeback  -Event Class Reference	latex/classMissWritebackEvent.tex	/^\\hypertarget{classMissWritebackEvent}{\\section{Miss\\-Writeback\\-Event Class Reference}$/;"	s
MissResponseEvent	timing_cache.cpp	/^        MissResponseEvent(TimingCache* _cache, MissStartEvent* _mse, int32_t domain) : TimingEvent(0, 0, domain), cache(_cache), mse(_mse) {}$/;"	f	class:MissResponseEvent
MissResponseEvent	timing_cache.cpp	/^class MissResponseEvent : public TimingEvent {$/;"	c	file:
MissStartEvent	timing_cache.cpp	/^        MissStartEvent(TimingCache* _cache,  uint32_t postDelay, int32_t domain) : TimingEvent(0, postDelay, domain), cache(_cache) {}$/;"	f	class:MissStartEvent
MissStartEvent	timing_cache.cpp	/^class MissStartEvent : public TimingEvent {$/;"	c	file:
MissWritebackEvent	timing_cache.cpp	/^        MissWritebackEvent(TimingCache* _cache,  MissStartEvent* _mse, uint32_t postDelay, int32_t domain) : TimingEvent(0, postDelay, domain), cache(_cache), mse(_mse) {}$/;"	f	class:MissWritebackEvent
MissWritebackEvent	timing_cache.cpp	/^class MissWritebackEvent : public TimingEvent {$/;"	c	file:
MultiChannelMemorySystem	DRAMSim.h	/^	class MultiChannelMemorySystem {$/;"	c	namespace:DRAMSim
N	mtrand.h	/^        enum { N = 624 };       \/\/ length of state vector$/;"	e	enum:MTRand::__anon1
N  -R  -U  -Repl  -Policy Class Reference	latex/classNRUReplPolicy.tex	/^\\hypertarget{classNRUReplPolicy}{\\section{N\\-R\\-U\\-Repl\\-Policy Class Reference}$/;"	s
NEED_GLOBAL_LOCK_INIT	g_heap/dlmalloc.h.c	1950;"	d	file:
NETWORK_H_	network.h	27;"	d
NOEXCL	memory_hierarchy.h	/^        NOEXCL        = (1<<2), \/\/Do not give back E on a GETS request (turns MESI protocol into MSI for this line). Used on e.g., ifetches and NUCA.$/;"	e	enum:MemReq::Flag
NOINLINE	g_heap/dlmalloc.h.c	787;"	d	file:
NOINLINE	g_heap/dlmalloc.h.c	789;"	d	file:
NOINLINE	g_heap/dlmalloc.h.c	791;"	d	file:
NONINCLWB	memory_hierarchy.h	/^        NONINCLWB     = (1<<3), \/\/This is a non-inclusive writeback. Do not assume that the line was in the lower level. Used on NUCA (BankDir).$/;"	e	enum:MemReq::Flag
NOPBasicBlock	zsim.cpp	/^VOID NOPBasicBlock(THREADID tid, ADDRINT bblAddr, BblInfo* bblInfo) {}$/;"	f
NOPLoadStoreSingle	zsim.cpp	/^VOID NOPLoadStoreSingle(THREADID tid, ADDRINT addr) {}$/;"	f
NOPPredLoadStoreSingle	zsim.cpp	/^VOID NOPPredLoadStoreSingle(THREADID tid, ADDRINT addr, BOOL pred) {}$/;"	f
NOPRecordBranch	zsim.cpp	/^VOID NOPRecordBranch(THREADID tid, ADDRINT addr, BOOL taken, ADDRINT takenNpc, ADDRINT notTakenNpc) {}$/;"	f
NO_MALLINFO	g_heap/dlmalloc.h.c	705;"	d	file:
NO_SEGMENT_TRAVERSAL	g_heap/dlmalloc.h.c	711;"	d	file:
NRUReplPolicy	repl_policies.h	/^        NRUReplPolicy(uint32_t _numLines, uint32_t _numCands) :numLines(_numLines), numCands(_numCands), youngLines(0), candIdx(0) {$/;"	f	class:NRUReplPolicy
NRUReplPolicy	repl_policies.h	/^class NRUReplPolicy : public LegacyReplPolicy {$/;"	c
NSMALLBINS	g_heap/dlmalloc.h.c	2527;"	d	file:
NSPS	virt/time_conv.h	35;"	d
NTREEBINS	g_heap/dlmalloc.h.c	2528;"	d	file:
NULL_CORE_H_	null_core.h	27;"	d
NULL_THREAD	g_heap/dlmalloc.h.c	1746;"	d	file:
NUMBINS	ddr_mem.h	/^        static const uint32_t BINSIZE = 10, NUMBINS = 100;$/;"	m	class:DDRMemory
NUM_ACCESS_TYPES	detailed_mem.h	/^enum MemAccessType { READ, WRITE, NUM_ACCESS_TYPES};$/;"	e	enum:MemAccessType
Namespace Documentation	latex/refman.tex	/^\\input{annotated}$/;"	c
Namespace Index	latex/refman.tex	/^\\hypersetup{pageanchor=true}$/;"	c
Namespace List	latex/namespaces.tex	/^\\section{Namespace List}$/;"	s
Nav	html/search/search.js	/^    this.Nav = function(evt,itemIndex) $/;"	m	class:SearchResults
NavChild	html/search/search.js	/^    this.NavChild = function(evt,itemIndex,childIndex)$/;"	m	class:SearchResults
NavNext	html/search/search.js	/^    this.NavNext = function(index)$/;"	m	class:SearchResults
NavPrev	html/search/search.js	/^    this.NavPrev = function(index)$/;"	m	class:SearchResults
Network	network.cpp	/^Network::Network(const char* filename) {$/;"	f	class:Network
Network	network.h	/^class Network {$/;"	c
Network Class Reference	latex/classNetwork.tex	/^\\hypertarget{classNetwork}{\\section{Network Class Reference}$/;"	s
NoCache	mc.h	/^   NoCache,$/;"	e	enum:Scheme
Node	ddr_mem.h	/^        struct Node : InListNode<Node> {$/;"	s	class:RequestQueue
Node	utility_monitor.h	/^        struct Node {$/;"	s	class:UMon
Null  -Core Class Reference	latex/classNullCore.tex	/^\\hypertarget{classNullCore}{\\section{Null\\-Core Class Reference}$/;"	s
NullCore	null_core.cpp	/^NullCore::NullCore(g_string& _name) : Core(_name), instrs(0), curCycle(0), phaseEndCycle(0) {}$/;"	f	class:NullCore
NullCore	null_core.h	/^class NullCore : public Core {$/;"	c
NullPatch	virt/virt.cpp	/^PostPatchFn NullPatch(PrePatchArgs) {$/;"	f
NullPostPatch	virt/virt.cpp	/^const PostPatchFn NullPostPatch = [](PostPatchArgs) {return PPA_NOTHING;};$/;"	v
O  -O  -O  -Core  -Recorder Class Reference	latex/classOOOCoreRecorder.tex	/^\\hypertarget{classOOOCoreRecorder}{\\section{O\\-O\\-O\\-Core\\-Recorder Class Reference}$/;"	s
O  -O  -O  -Core Class Reference	latex/classOOOCore.tex	/^\\hypertarget{classOOOCore}{\\section{O\\-O\\-O\\-Core Class Reference}$/;"	s
O  -O  -O  -Dispatch  -Event Class Reference	latex/classOOODispatchEvent.tex	/^\\hypertarget{classOOODispatchEvent}{\\section{O\\-O\\-O\\-Dispatch\\-Event Class Reference}$/;"	s
O  -O  -O  -Issue  -Event Class Reference	latex/classOOOIssueEvent.tex	/^\\hypertarget{classOOOIssueEvent}{\\section{O\\-O\\-O\\-Issue\\-Event Class Reference}$/;"	s
O  -O  -O  -Resp  -Event Class Reference	latex/classOOORespEvent.tex	/^\\hypertarget{classOOORespEvent}{\\section{O\\-O\\-O\\-Resp\\-Event Class Reference}$/;"	s
O  -S  -Placement  -Policy Class Reference	latex/classOSPlacementPolicy.tex	/^\\hypertarget{classOSPlacementPolicy}{\\section{O\\-S\\-Placement\\-Policy Class Reference}$/;"	s
OFFLINE	barrier.h	/^        enum State {OFFLINE, WAITING, RUNNING, LEFT};$/;"	e	enum:Barrier::State
OK	zsim_harness.cpp	/^    OK,$/;"	e	enum:__anon8	file:
ONLY_MSPACES	g_heap/dlmalloc.h.c	28;"	d	file:
ONLY_MSPACES	g_heap/dlmalloc.h.c	600;"	d	file:
ONLY_MSPACES	g_heap/dlmalloc.h.c	602;"	d	file:
OOOCore	ooo_core.cpp	/^OOOCore::OOOCore(FilterCache* _l1i, FilterCache* _l1d, g_string& _name) : Core(_name), l1i(_l1i), l1d(_l1d), cRec(0, _name) {$/;"	f	class:OOOCore
OOOCore	ooo_core.h	/^class OOOCore : public Core {$/;"	c
OOOCoreRecorder	ooo_core_recorder.cpp	/^OOOCoreRecorder::OOOCoreRecorder(uint32_t _domain, g_string& _name)$/;"	f	class:OOOCoreRecorder
OOOCoreRecorder	ooo_core_recorder.h	/^class OOOCoreRecorder {$/;"	c
OOODispatchEvent	ooo_core_recorder.cpp	/^        OOODispatchEvent(uint64_t preDelay, uint64_t _zllStartCycle, int32_t domain = -1) : TimingEvent(preDelay, 0, domain), zllStartCycle(_zllStartCycle) {}$/;"	f	class:OOODispatchEvent
OOODispatchEvent	ooo_core_recorder.cpp	/^class OOODispatchEvent : public TimingEvent {$/;"	c	file:
OOOIssueEvent	ooo_core_recorder.cpp	/^        OOOIssueEvent(uint32_t preDelay, uint64_t _zllStartCycle, OOOCoreRecorder* _cRec, int32_t domain = -1) : TimingEvent(preDelay, 0, domain), zllStartCycle(_zllStartCycle), cRec(_cRec) {}$/;"	f	class:OOOIssueEvent
OOOIssueEvent	ooo_core_recorder.cpp	/^class OOOIssueEvent : public TimingEvent {$/;"	c	file:
OOORespEvent	ooo_core_recorder.cpp	/^        OOORespEvent(uint64_t preDelay, OOOCoreRecorder* _cRec, int32_t domain = -1) : TimingEvent(preDelay, 0, domain), cRec(_cRec) {}$/;"	f	class:OOORespEvent
OOORespEvent	ooo_core_recorder.cpp	/^class OOORespEvent : public TimingEvent {$/;"	c	file:
OOO_CORE_H_	ooo_core.h	27;"	d
OOO_CORE_RECORDER_H_	ooo_core_recorder.h	27;"	d
OSPlacementPolicy	os_placement.h	/^	OSPlacementPolicy(MemoryController * mc) : _mc(mc) {};$/;"	f	class:OSPlacementPolicy
OSPlacementPolicy	os_placement.h	/^class OSPlacementPolicy$/;"	c
OUT	scheduler.h	/^            OUT, \/\/in leave() this phase, can rejoin immediately$/;"	e	enum:Scheduler::ThreadState
OnSearchFieldChange	html/search/search.js	/^  this.OnSearchFieldChange = function(evt)$/;"	m	class:SearchBox
OnSearchFieldFocus	html/search/search.js	/^  this.OnSearchFieldFocus = function(isActive)$/;"	m	class:SearchBox
OnSearchSelectHide	html/search/search.js	/^  this.OnSearchSelectHide = function()$/;"	m	class:SearchBox
OnSearchSelectKey	html/search/search.js	/^  this.OnSearchSelectKey = function(evt)$/;"	m	class:SearchBox
OnSearchSelectShow	html/search/search.js	/^  this.OnSearchSelectShow = function()$/;"	m	class:SearchBox
OnSelectItem	html/search/search.js	/^  this.OnSelectItem = function(id)$/;"	m	class:SearchBox
PAD	pad.h	37;"	d
PAD_CONCAT	pad.h	35;"	d
PAD_H_	pad.h	27;"	d
PAD_SZ	pad.h	40;"	d
PANIC_EXIT_CODE	log.h	46;"	d
PARTITIONER_H_	partitioner.h	27;"	d
PARTITION_MAPPER_H_	partition_mapper.h	27;"	d
PART_REPL_POLICIES_H_	part_repl_policies.h	27;"	d
PF	virt/virt.cpp	53;"	d	file:
PF	virt/virt.cpp	55;"	d	file:
PF	virt/virt.cpp	68;"	d	file:
PF	virt/virt.cpp	70;"	d	file:
PINUSE_BIT	g_heap/dlmalloc.h.c	2209;"	d	file:
PIN_CMD_H_	pin_cmd.h	27;"	d
PORTS_015	decoder.cpp	54;"	d	file:
PORT_0	decoder.cpp	47;"	d	file:
PORT_1	decoder.cpp	48;"	d	file:
PORT_2	decoder.cpp	49;"	d	file:
PORT_3	decoder.cpp	50;"	d	file:
PORT_4	decoder.cpp	51;"	d	file:
PORT_5	decoder.cpp	52;"	d	file:
POSTACTION	g_heap/dlmalloc.h.c	2694;"	d	file:
POSTACTION	g_heap/dlmalloc.h.c	2702;"	d	file:
POST_MORTEM	contention_sim.cpp	41;"	d	file:
PPA_NOTHING	virt/virt.h	/^    PPA_NOTHING,$/;"	e	enum:PostPatchAction
PPA_USE_JOIN_PTRS	virt/virt.h	/^    PPA_USE_JOIN_PTRS,$/;"	e	enum:PostPatchAction
PPA_USE_RETRY_PTRS	virt/virt.h	/^    PPA_USE_RETRY_PTRS,$/;"	e	enum:PostPatchAction
PQBlock	prio_queue.h	/^        PQBlock() {$/;"	f	struct:PrioQueue::PQBlock
PQBlock	prio_queue.h	/^    struct PQBlock {$/;"	s	class:PrioQueue
PQ_BLOCKS	contention_sim.h	50;"	d
PREACTION	g_heap/dlmalloc.h.c	2693;"	d	file:
PREACTION	g_heap/dlmalloc.h.c	2698;"	d	file:
PREFETCH	memory_hierarchy.h	/^        PREFETCH      = (1<<5), \/\/Prefetch GETS access. Only set at level where prefetch is issued; handled early in MESICC$/;"	e	enum:MemReq::Flag
PREFETCHER_H_	prefetcher.h	22;"	d
PRIO_QUEUE_H_	prio_queue.h	27;"	d
PROCEED_ON_ERROR	g_heap/dlmalloc.h.c	624;"	d	file:
PROCESS_STATS_H_	process_stats.h	27;"	d
PROCESS_TREE_H_	process_tree.h	27;"	d
PROC_EXITED	zsim.h	/^    PROC_EXITED = 1,$/;"	e	enum:ProcExitStatus
PROC_RESTARTME	zsim.h	/^    PROC_RESTARTME  = 2$/;"	e	enum:ProcExitStatus
PROC_RUNNING	zsim.h	/^    PROC_RUNNING = 0,$/;"	e	enum:ProcExitStatus
PROC_STATS_H_	proc_stats.h	27;"	d
PROFILE_CROSSINGS	contention_sim.h	43;"	d
PROFILE_STATS_H_	profile_stats.h	27;"	d
PROF_BOUND	zsim.h	/^    PROF_BOUND = 1,$/;"	e	enum:ProfileStates
PROF_FF	zsim.h	/^    PROF_FF = 3,$/;"	e	enum:ProfileStates
PROF_INIT	zsim.h	/^    PROF_INIT = 0,$/;"	e	enum:ProfileStates
PROF_WEAVE	zsim.h	/^    PROF_WEAVE = 2,$/;"	e	enum:ProfileStates
PS_DONE	zsim_harness.cpp	/^    PS_DONE,$/;"	e	enum:__anon9	file:
PS_INVALID	zsim_harness.cpp	/^    PS_INVALID,$/;"	e	enum:__anon9	file:
PS_RUNNING	zsim_harness.cpp	/^    PS_RUNNING,$/;"	e	enum:__anon9	file:
PTHREAD_MUTEX_RECURSIVE	g_heap/dlmalloc.h.c	1928;"	d	file:
PT_CHUNKSIZE	access_tracing.cpp	31;"	d	file:
PUTS	memory_hierarchy.h	/^    PUTS, \/\/ clean writeback (lower cache is evicting this line, line was not modified)$/;"	e	enum:__anon4
PUTX	memory_hierarchy.h	/^    PUTX  \/\/ dirty writeback (lower cache is evicting this line, line was modified)$/;"	e	enum:__anon4
PUTX_KEEPEXCL	memory_hierarchy.h	/^        PUTX_KEEPEXCL = (1<<4), \/\/Non-relinquishing PUTX. On a PUTX, maintain the requestor's E state instead of removing the sharer (i.e., this is a pure writeback)$/;"	e	enum:MemReq::Flag
Packed  -Access  -Record Struct Reference	latex/structPackedAccessRecord.tex	/^\\hypertarget{structPackedAccessRecord}{\\section{Packed\\-Access\\-Record Struct Reference}$/;"	s
PackedAccessRecord	access_tracing.h	/^struct PackedAccessRecord {$/;"	s
Page  -Placement  -Policy Class Reference	latex/classPagePlacementPolicy.tex	/^\\hypertarget{classPagePlacementPolicy}{\\section{Page\\-Placement\\-Policy Class Reference}$/;"	s
PagePlacementPolicy	page_placement.h	/^	PagePlacementPolicy(MemoryController * mc) : _mc(mc) {};$/;"	f	class:PagePlacementPolicy
PagePlacementPolicy	page_placement.h	/^class PagePlacementPolicy$/;"	c
ParseList	config.cpp	/^std::vector<T> ParseList(const std::string& listStr, const char* delimiters) {$/;"	f
ParseList	config.h	/^template <typename T> std::vector<T> ParseList(const std::string& listStr) { return ParseList<T>(listStr, " "); }$/;"	f
ParseList	config.h	/^template <typename T> std::vector<T> ParseList(const std::string& listStr, uint32_t maxSize, uint32_t fillValue) {$/;"	f
ParseMask	config.cpp	/^std::vector<bool> ParseMask(const std::string& maskStr, uint32_t maskSize) {$/;"	f
Part  -Info Struct Reference	latex/structPartInfo.tex	/^\\hypertarget{structPartInfo}{\\section{Part\\-Info Struct Reference}$/;"	s
Part  -Mapper Class Reference	latex/classPartMapper.tex	/^\\hypertarget{classPartMapper}{\\section{Part\\-Mapper Class Reference}$/;"	s
Part  -Repl  -Policy Class Reference	latex/classPartReplPolicy.tex	/^\\hypertarget{classPartReplPolicy}{\\section{Part\\-Repl\\-Policy Class Reference}$/;"	s
PartInfo	part_repl_policies.h	/^struct PartInfo {$/;"	s
PartMapper	partition_mapper.h	/^class PartMapper : public GlobAlloc {$/;"	c
PartReplPolicy	part_repl_policies.h	/^        PartReplPolicy(PartitionMonitor* _monitor, PartMapper* _mapper) : monitor(_monitor), mapper(_mapper) {}$/;"	f	class:PartReplPolicy
PartReplPolicy	part_repl_policies.h	/^class PartReplPolicy : public virtual ReplPolicy {$/;"	c
Partition  -Monitor Class Reference	latex/classPartitionMonitor.tex	/^\\hypertarget{classPartitionMonitor}{\\section{Partition\\-Monitor Class Reference}$/;"	s
PartitionEvent	partitioner.h	/^                PartitionEvent(Partitioner* _part, uint64_t _period) : Event(_period), part(_part) {}$/;"	f	class:Partitioner::PartitionEvent
PartitionEvent	partitioner.h	/^        class PartitionEvent: public Event {$/;"	c	class:Partitioner
PartitionMonitor	partitioner.h	/^        explicit PartitionMonitor(uint32_t _buckets) : buckets(_buckets) {}$/;"	f	class:PartitionMonitor
PartitionMonitor	partitioner.h	/^class PartitionMonitor : public GlobAlloc {$/;"	c
Partitioner	partitioner.h	/^        Partitioner(uint32_t _minAlloc, double _allocPortion, bool* _forbidden)$/;"	f	class:Partitioner
Partitioner	partitioner.h	/^class Partitioner : public GlobAlloc {$/;"	c
Partitioner  -   -  Partition  -Event Class Reference	latex/classPartitioner_1_1PartitionEvent.tex	/^\\hypertarget{classPartitioner_1_1PartitionEvent}{\\section{Partitioner\\-:\\-:Partition\\-Event Class Reference}$/;"	s
Partitioner Class Reference	latex/classPartitioner.tex	/^\\hypertarget{classPartitioner}{\\section{Partitioner Class Reference}$/;"	s
PatchBind	virt/ports.cpp	/^PostPatchFn PatchBind(PrePatchArgs args) {$/;"	f
PatchClockGettime	virt/time.cpp	/^PostPatchFn PatchClockGettime(PrePatchArgs args) {$/;"	f
PatchConnect	virt/ports.cpp	/^PostPatchFn PatchConnect(PrePatchArgs args) {$/;"	f
PatchGetcpu	virt/cpu.cpp	/^PostPatchFn PatchGetcpu(PrePatchArgs args) {$/;"	f
PatchGetsockname	virt/ports.cpp	/^PostPatchFn PatchGetsockname(PrePatchArgs args) {$/;"	f
PatchGettimeofday	virt/time.cpp	/^PostPatchFn PatchGettimeofday(PrePatchArgs args) {$/;"	f
PatchNanosleep	virt/time.cpp	/^PostPatchFn PatchNanosleep(PrePatchArgs args) {$/;"	f
PatchOpen	virt/fs.cpp	/^PostPatchFn PatchOpen(PrePatchArgs args) {$/;"	f
PatchSchedGetaffinity	virt/cpu.cpp	/^PostPatchFn PatchSchedGetaffinity(PrePatchArgs args) {$/;"	f
PatchSchedSetaffinity	virt/cpu.cpp	/^PostPatchFn PatchSchedSetaffinity(PrePatchArgs args) {$/;"	f
PatchTime	virt/time.cpp	/^PostPatchFn PatchTime(PrePatchArgs args) {$/;"	f
PatchTimeoutSyscall	virt/timeout.cpp	/^PostPatchFn PatchTimeoutSyscall(PrePatchArgs args) {$/;"	f
PeriodicUpdatePower	detailed_mem.cpp	/^void MemChannelBase::PeriodicUpdatePower(uint64_t phaseCycle, uint64_t lastPhaseCycle) {$/;"	f	class:MemChannelBase
Pin  -Cmd Class Reference	latex/classPinCmd.tex	/^\\hypertarget{classPinCmd}{\\section{Pin\\-Cmd Class Reference}$/;"	s
PinCmd	pin_cmd.cpp	/^PinCmd::PinCmd(Config* conf, const char* configFile, const char* outputDir, uint64_t shmid) {$/;"	f	class:PinCmd
PinCmd	pin_cmd.h	/^class PinCmd : public GlobAlloc {$/;"	c
PopulateLevel	process_tree.cpp	/^static void PopulateLevel(Config& config, const std::string& prefix, std::vector<ProcessTreeNode*>& globProcVector, ProcessTreeNode* parent, uint32_t& procIdx, uint32_t& groupIdx) {$/;"	f	file:
PortVirtualizer	virt/port_virtualizer.h	/^        PortVirtualizer() {$/;"	f	class:PortVirtualizer
PortVirtualizer	virt/port_virtualizer.h	/^class PortVirtualizer : public GlobAlloc {$/;"	c
PostInitStats	init.cpp	/^static void PostInitStats(bool perProcessDir, Config& config) {$/;"	f	file:
PostPatchAction	virt/virt.h	/^enum PostPatchAction {$/;"	g
PostPatchArgs	virt/common.h	/^struct PostPatchArgs {$/;"	s
PostPatchFn	virt/common.h	/^typedef std::function<PostPatchAction(PostPatchArgs)> PostPatchFn;$/;"	t
PostPatchFutex	virt/timeout.cpp	/^void PostPatchFutex(uint32_t tid, FutexInfo fi, CONTEXT* ctxt, SYSCALL_STANDARD std) {$/;"	f
PostPatchTimeoutSyscall	virt/timeout.cpp	/^static bool PostPatchTimeoutSyscall(uint32_t tid, CONTEXT* ctxt, SYSCALL_STANDARD std, int syscall, ADDRINT prevIp, ADDRINT timeoutArgVal) {$/;"	f	file:
PreInitStats	init.cpp	/^static void PreInitStats() {$/;"	f	file:
PrePatchArgs	virt/common.h	/^struct PrePatchArgs {$/;"	s
PrePatchFn	virt/common.h	/^typedef PostPatchFn (*PrePatchFn)(PrePatchArgs);$/;"	t
PrePatchFutex	virt/timeout.cpp	/^FutexInfo PrePatchFutex(uint32_t tid, CONTEXT* ctxt, SYSCALL_STANDARD std) {$/;"	f
PrePatchTimeoutSyscall	virt/timeout.cpp	/^static bool PrePatchTimeoutSyscall(uint32_t tid, CONTEXT* ctxt, SYSCALL_STANDARD std, int syscall) {$/;"	f	file:
PredLoadAndRecordFunc	timing_core.cpp	/^void TimingCore::PredLoadAndRecordFunc(THREADID tid, ADDRINT addr, BOOL pred) {$/;"	f	class:TimingCore
PredLoadFunc	null_core.cpp	/^void NullCore::PredLoadFunc(THREADID tid, ADDRINT addr, BOOL pred) {}$/;"	f	class:NullCore
PredLoadFunc	ooo_core.cpp	/^void OOOCore::PredLoadFunc(THREADID tid, ADDRINT addr, BOOL pred) {$/;"	f	class:OOOCore
PredLoadFunc	simple_core.cpp	/^void SimpleCore::PredLoadFunc(THREADID tid, ADDRINT addr, BOOL pred) {$/;"	f	class:SimpleCore
PredStoreAndRecordFunc	timing_core.cpp	/^void TimingCore::PredStoreAndRecordFunc(THREADID tid, ADDRINT addr, BOOL pred) {$/;"	f	class:TimingCore
PredStoreFunc	null_core.cpp	/^void NullCore::PredStoreFunc(THREADID tid, ADDRINT addr, BOOL pred) {}$/;"	f	class:NullCore
PredStoreFunc	ooo_core.cpp	/^void OOOCore::PredStoreFunc(THREADID tid, ADDRINT addr, BOOL pred) {$/;"	f	class:OOOCore
PredStoreFunc	simple_core.cpp	/^void SimpleCore::PredStoreFunc(THREADID tid, ADDRINT addr, BOOL pred) {$/;"	f	class:SimpleCore
Prefetch  -Response  -Event Class Reference	latex/classPrefetchResponseEvent.tex	/^\\hypertarget{classPrefetchResponseEvent}{\\section{Prefetch\\-Response\\-Event Class Reference}$/;"	s
PrefetchResponseEvent	prefetcher.cpp	/^        PrefetchResponseEvent(StreamPrefetcher* _pf, uint32_t _idx, uint32_t _prefetchPos, int32_t domain) :$/;"	f	class:PrefetchResponseEvent
PrefetchResponseEvent	prefetcher.cpp	/^class PrefetchResponseEvent : public TimingEvent {$/;"	c	file:
Print  -Expr Class Reference	latex/classPrintExpr.tex	/^\\hypertarget{classPrintExpr}{\\section{Print\\-Expr Class Reference}$/;"	s
PrintExpr	log.h	/^        PrintExpr(std::stringstream& _ss) : ss(_ss) {}$/;"	f	class:PrintExpr
PrintExpr	log.h	/^class PrintExpr {$/;"	c
Prio  -Queue$  $ T  B $  $ Class Template Reference	latex/classPrioQueue.tex	/^\\hypertarget{classPrioQueue}{\\section{Prio\\-Queue$<$ T, B $>$ Class Template Reference}$/;"	s
PrioQueue	prio_queue.h	/^        PrioQueue() {$/;"	f	class:PrioQueue
PrioQueue	prio_queue.h	/^class PrioQueue {$/;"	c
Proc  -Info Struct Reference	latex/structProcInfo.tex	/^\\hypertarget{structProcInfo}{\\section{Proc\\-Info Struct Reference}$/;"	s
Proc  -Stats  -   -  Process  -Counter Class Reference	latex/classProcStats_1_1ProcessCounter.tex	/^\\hypertarget{classProcStats_1_1ProcessCounter}{\\section{Proc\\-Stats\\-:\\-:Process\\-Counter Class Reference}$/;"	s
Proc  -Stats  -   -  Process  -Vector  -Counter Class Reference	latex/classProcStats_1_1ProcessVectorCounter.tex	/^\\hypertarget{classProcStats_1_1ProcessVectorCounter}{\\section{Proc\\-Stats\\-:\\-:Process\\-Vector\\-Counter Class Reference}$/;"	s
Proc  -Stats Class Reference	latex/classProcStats.tex	/^\\hypertarget{classProcStats}{\\section{Proc\\-Stats Class Reference}$/;"	s
ProcCmdInfo	pin_cmd.h	/^        struct ProcCmdInfo {$/;"	s	class:PinCmd
ProcExitStatus	zsim.h	/^enum ProcExitStatus {$/;"	g
ProcInfo	zsim_harness.cpp	/^struct ProcInfo {$/;"	s	file:
ProcStats	proc_stats.cpp	/^ProcStats::ProcStats(AggregateStat* parentStat, AggregateStat* _coreStats) : coreStats(_coreStats) {$/;"	f	class:ProcStats
ProcStats	proc_stats.h	/^class ProcStats : public GlobAlloc {$/;"	c
ProcStatus	zsim_harness.cpp	/^} ProcStatus;$/;"	t	typeref:enum:__anon9	file:
Process  -Group  -Part  -Mapper Class Reference	latex/classProcessGroupPartMapper.tex	/^\\hypertarget{classProcessGroupPartMapper}{\\section{Process\\-Group\\-Part\\-Mapper Class Reference}$/;"	s
Process  -Part  -Mapper Class Reference	latex/classProcessPartMapper.tex	/^\\hypertarget{classProcessPartMapper}{\\section{Process\\-Part\\-Mapper Class Reference}$/;"	s
Process  -Stats Class Reference	latex/classProcessStats.tex	/^\\hypertarget{classProcessStats}{\\section{Process\\-Stats Class Reference}$/;"	s
Process  -Tree  -Node Class Reference	latex/classProcessTreeNode.tex	/^\\hypertarget{classProcessTreeNode}{\\section{Process\\-Tree\\-Node Class Reference}$/;"	s
ProcessCounter	proc_stats.cpp	/^        ProcessCounter(ProcStats* _ps) : Counter(), ps(_ps) {}$/;"	f	class:ProcStats::ProcessCounter
ProcessCounter	proc_stats.cpp	/^class ProcStats::ProcessCounter : public Counter {$/;"	c	class:ProcStats	file:
ProcessGroupPartMapper	partition_mapper.h	/^        ProcessGroupPartMapper() {}$/;"	f	class:ProcessGroupPartMapper
ProcessGroupPartMapper	partition_mapper.h	/^class ProcessGroupPartMapper : public PartMapper {$/;"	c
ProcessKeys	html/search/search.js	/^    this.ProcessKeys = function(e)$/;"	m	class:SearchResults
ProcessPartMapper	partition_mapper.h	/^        explicit ProcessPartMapper(uint32_t _numProcs) : numProcs(_numProcs) {}$/;"	f	class:ProcessPartMapper
ProcessPartMapper	partition_mapper.h	/^class ProcessPartMapper : public PartMapper {$/;"	c
ProcessStats	process_stats.cpp	/^ProcessStats::ProcessStats(AggregateStat* parentStat) {$/;"	f	class:ProcessStats
ProcessStats	process_stats.h	/^class ProcessStats : public GlobAlloc {$/;"	c
ProcessTreeNode	process_tree.h	/^        ProcessTreeNode(uint32_t _procIdx, uint32_t _groupIdx, bool _inFastForward, bool _inPause, const SyncedFastForwardMode& _syncedFastForward,$/;"	f	class:ProcessTreeNode
ProcessTreeNode	process_tree.h	/^class ProcessTreeNode : public GlobAlloc {$/;"	c
ProcessVectorCounter	proc_stats.cpp	/^        ProcessVectorCounter(ProcStats* _ps) : VectorCounter(), ps(_ps) {}$/;"	f	class:ProcStats::ProcessVectorCounter
ProcessVectorCounter	proc_stats.cpp	/^class ProcStats::ProcessVectorCounter : public VectorCounter {$/;"	c	class:ProcStats	file:
Prof  -Viol  -Repl  -Policy$  $ T $  $ Class Template Reference	latex/classProfViolReplPolicy.tex	/^\\hypertarget{classProfViolReplPolicy}{\\section{Prof\\-Viol\\-Repl\\-Policy$<$ T $>$ Class Template Reference}$/;"	s
ProfViolReplPolicy	repl_policies.h	/^        explicit ProfViolReplPolicy(uint32_t nl) : T(nl) {}$/;"	f	class:ProfViolReplPolicy
ProfViolReplPolicy	repl_policies.h	/^class ProfViolReplPolicy : public T {$/;"	c
ProfileStates	zsim.h	/^enum ProfileStates {$/;"	g
Protected Attributes	latex/classCache.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classCore.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classIdealLRUPartReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classLRUReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classMTRand.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classMemChannelBase.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classMemControllerBase.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classMemParam.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classMemRankBase.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classMemSchedulerBase.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classNullCore.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classPartReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classPartitionMonitor.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classPartitioner.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classSetAssocArray.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classSimpleCore.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Attributes	latex/classVectorStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Member Functions	latex/classCache.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Member Functions	latex/classLegacyReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Member Functions	latex/classMTRand.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Member Functions	latex/classMemChannelBase.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Member Functions	latex/classMemControllerBase.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Member Functions	latex/classMemParam.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Member Functions	latex/classNullCore.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Member Functions	latex/classSimpleCore.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Member Functions	latex/classStat.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Member Functions	latex/classTimingEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Types	latex/classMTRand.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Types	latex/classMemParam.tex	/^\\end{DoxyCompactItemize}$/;"	u
Protected Types	latex/classMemSchedulerBase.tex	/^\\end{DoxyCompactItemize}$/;"	u
Proxy  -Func  -Stat Class Reference	latex/classProxyFuncStat.tex	/^\\hypertarget{classProxyFuncStat}{\\section{Proxy\\-Func\\-Stat Class Reference}$/;"	s
Proxy  -Stat Class Reference	latex/classProxyStat.tex	/^\\hypertarget{classProxyStat}{\\section{Proxy\\-Stat Class Reference}$/;"	s
ProxyFuncStat	stats.h	/^        ProxyFuncStat() : ScalarStat(), _func(nullptr) {}$/;"	f	class:ProxyFuncStat
ProxyFuncStat	stats.h	/^class ProxyFuncStat : public ScalarStat {$/;"	c
ProxyReplPolicy	ideal_arrays.h	/^                explicit ProxyReplPolicy(IdealLRUArray* _a) : a(_a) {}$/;"	f	class:IdealLRUArray::ProxyReplPolicy
ProxyReplPolicy	ideal_arrays.h	/^        class ProxyReplPolicy : public ReplPolicy {$/;"	c	class:IdealLRUArray
ProxyStat	stats.h	/^        ProxyStat() : ScalarStat(), _statPtr(nullptr) {}$/;"	f	class:ProxyStat
ProxyStat	stats.h	/^class ProxyStat : public ScalarStat {$/;"	c
PtrMember	Callback.h	/^	typedef ReturnT (ConsumerT::*PtrMember)(Param1T,Param2T,Param3T);$/;"	t	class:DRAMSim::Callback
Public Attributes	latex/classIdealLRUPartReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/classLRUReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/classLegacyReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/classMemParam.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/classMemoryController.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/classMissStartEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/classPrefetchResponseEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/classReplAccessEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/classSchedEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/classSet.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/classTLBEntry.tex	/^}$/;"	u
Public Attributes	latex/classTagBufferEntry.tex	/^}$/;"	u
Public Attributes	latex/classTimingEvent.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/classWay.tex	/^}$/;"	u
Public Attributes	latex/structAccessRecord.tex	/^{\\ttfamily \\#include $<$access\\-\\_\\-tracing.\\-h$>$}$/;"	u
Public Attributes	latex/structBblInfo.tex	/^{\\ttfamily \\#include $<$core.\\-h$>$}$/;"	u
Public Attributes	latex/structClockDomainInfo.tex	/^}$/;"	u
Public Attributes	latex/structCpuIdRecord.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structDynBbl.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structDynUop.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structGlobSimInfo.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structIdealLRUPartReplPolicy_1_1Entry.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structIdealLRUPartReplPolicy_1_1IdPartInfo.tex	/^\\end{figure}$/;"	u
Public Attributes	latex/structInListNode.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structInstrFuncPtrs.tex	/^}$/;"	u
Public Attributes	latex/structInvReq.tex	/^}$/;"	u
Public Attributes	latex/structLibInfo.tex	/^{\\ttfamily \\#include $<$debug.\\-h$>$}$/;"	u
Public Attributes	latex/structMemControllerBase_1_1powerValue.tex	/^}$/;"	u
Public Attributes	latex/structMemParam_1_1IDDs.tex	/^}$/;"	u
Public Attributes	latex/structMemReq.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structPackedAccessRecord.tex	/^}$/;"	u
Public Attributes	latex/structPartInfo.tex	/^\\end{figure}$/;"	u
Public Attributes	latex/structProcInfo.tex	/^}$/;"	u
Public Attributes	latex/structRange.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structRequestQueue_1_1iterator.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structSection.tex	/^}$/;"	u
Public Attributes	latex/structSetAssocCands.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structSetAssocCands_1_1iterator.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structStreamPrefetcher_1_1Entry_1_1AccessTimes.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structTimingEventBlock.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structTimingRecord.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structVdsoPatchData.tex	/^}$/;"	u
Public Attributes	latex/structZCands.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structZCands_1_1iterator.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structZWalkInfo.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structgm__segment.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Attributes	latex/structslab_1_1Slab.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	latex/classAccessTraceReader.tex	/^}$/;"	u
Public Member Functions	latex/classAccessTraceWriter.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classActWindow.tex	/^{\\ttfamily \\#include $<$ddr\\-\\_\\-mem.\\-h$>$}$/;"	u
Public Member Functions	latex/classAdaptiveEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classAggregateStat.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classBarrier.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classBaseCache.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classBranchPredictorPAg.tex	/^}$/;"	u
Public Member Functions	latex/classCC.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classCache.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classCacheArray.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classCallee.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classClockStat.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classConfig.tex	/^}$/;"	u
Public Member Functions	latex/classContentionSim.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classCore.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classCorePartMapper.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classCoreRecorder.tex	/^}$/;"	u
Public Member Functions	latex/classCounter.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classCrossingEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classCycleBreakdownStat.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classCycleQueue.tex	/^}$/;"	u
Public Member Functions	latex/classDDRMemory.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classDDRMemoryAccEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classDRAMSimMemory.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classDRAMSim_1_1Callback.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classDRAMSim_1_1CallbackBase.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classDRAMSim_1_1MultiChannelMemorySystem.tex	/^}$/;"	u
Public Member Functions	latex/classDelayEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classEventQueue.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classEventRecorder.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classFilterCache.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classGlobAlloc.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classH3HashFamily.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classHDF5Backend.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classHDF5BackendImpl.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classHashFamily.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classHitEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classIdHashFamily.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classIdealLRUArray.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classIdealLRUPartArray.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classIdealLRUPartReplPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	latex/classInList.tex	/^{\\ttfamily \\#include $<$intrusive\\-\\_\\-list.\\-h$>$}$/;"	u
Public Member Functions	latex/classInstrDataCorePartMapper.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classInstrDataPartMapper.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classInstrDataProcessPartMapper.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classLFUReplPolicy.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classLRUReplPolicy.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classLambdaStat.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classLambdaVectorStat.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classLegacyReplPolicy.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classLinePlacementPolicy.tex	/^}$/;"	u
Public Member Functions	latex/classLookaheadPartitioner.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMD1Memory.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMESIBottomCC.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMESICC.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMESITerminalCC.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMESITopCC.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMTRand.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	latex/classMemAccessEventBase.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMemChannelBase.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMemControllerBase.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	latex/classMemObject.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMemParam.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	latex/classMemRankBase.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMemSchedulerBase.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMemSchedulerDefault.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMemoryController.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMissResponseEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMissStartEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classMissWritebackEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classNRUReplPolicy.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classNetwork.tex	/^{\\ttfamily \\#include $<$network.\\-h$>$}$/;"	u
Public Member Functions	latex/classNullCore.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classOOOCore.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classOOOCoreRecorder.tex	/^}$/;"	u
Public Member Functions	latex/classOOODispatchEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classOOOIssueEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classOOORespEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classOSPlacementPolicy.tex	/^}$/;"	u
Public Member Functions	latex/classPagePlacementPolicy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	latex/classPartMapper.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classPartReplPolicy.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classPartitionMonitor.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classPartitioner.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	latex/classPartitioner_1_1PartitionEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classPinCmd.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classPrefetchResponseEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classPrintExpr.tex	/^}$/;"	u
Public Member Functions	latex/classPrioQueue.tex	/^{\\ttfamily \\#include $<$prio\\-\\_\\-queue.\\-h$>$}$/;"	u
Public Member Functions	latex/classProcStats.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	latex/classProcStats_1_1ProcessCounter.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classProcStats_1_1ProcessVectorCounter.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classProcessGroupPartMapper.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classProcessPartMapper.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classProcessStats.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classProcessTreeNode.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classProfViolReplPolicy.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classProxyFuncStat.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classProxyStat.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classRandReplPolicy.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classRefreshEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classReorderBuffer.tex	/^}$/;"	u
Public Member Functions	latex/classReplAccessEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classReplPolicy.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classRequestQueue.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	latex/classSHA1HashFamily.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classSatCounter.tex	/^{\\ttfamily \\#include $<$prefetcher.\\-h$>$}$/;"	u
Public Member Functions	latex/classScalarStat.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classSchedEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classScheduler.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classSet.tex	/^}$/;"	u
Public Member Functions	latex/classSetAssocArray.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classSimpleCore.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classSimpleMemory.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classSplitAddrMemory.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classStat.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classStatsBackend.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classStreamPrefetcher.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classSyncEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classTagBuffer.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classTextBackend.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classTextBackendImpl.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classTickEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classTimeBreakdownStat.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classTimingCache.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classTimingCore.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classTimingCoreEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classTimingEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classTraceDriver.tex	/^}$/;"	u
Public Member Functions	latex/classTraceDriverProxyCache.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classTracingCache.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classTreeLRUReplPolicy.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classUMon.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classUMonMonitor.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classVantageReplPolicy.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classVectorCounter.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classVectorStat.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classWayPartReplPolicy.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classWeaveMD1Memory.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classWeaveMemAccEvent.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classWeaveSimpleMemory.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classWindowStructure.tex	/^}$/;"	u
Public Member Functions	latex/classZArray.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classmutex.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classrwmutex.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classscoped__mutex.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/classslab_1_1SlabAlloc.tex	/^}$/;"	u
Public Member Functions	latex/structCpuIdRecord.tex	/^{\\ttfamily \\#include $<$cpuid.\\-h$>$}$/;"	u
Public Member Functions	latex/structDynBbl.tex	/^}$/;"	u
Public Member Functions	latex/structDynUop.tex	/^}$/;"	u
Public Member Functions	latex/structGlobSimInfo.tex	/^}$/;"	u
Public Member Functions	latex/structIdealLRUPartReplPolicy_1_1Entry.tex	/^\\end{figure}$/;"	u
Public Member Functions	latex/structInListNode.tex	/^}$/;"	u
Public Member Functions	latex/structMemReq.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	latex/structRange.tex	/^}$/;"	u
Public Member Functions	latex/structRequestQueue_1_1iterator.tex	/^}$/;"	u
Public Member Functions	latex/structSetAssocCands.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	latex/structSetAssocCands_1_1iterator.tex	/^}$/;"	u
Public Member Functions	latex/structStreamPrefetcher_1_1Entry_1_1AccessTimes.tex	/^}$/;"	u
Public Member Functions	latex/structTimingEventBlock.tex	/^}$/;"	u
Public Member Functions	latex/structTimingRecord.tex	/^}$/;"	u
Public Member Functions	latex/structZCands.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	latex/structZCands_1_1iterator.tex	/^}$/;"	u
Public Member Functions	latex/structZWalkInfo.tex	/^}$/;"	u
Public Member Functions	latex/structgm__segment.tex	/^}$/;"	u
Public Member Functions	latex/structslab_1_1Slab.tex	/^}$/;"	u
Public Types	latex/classMTRand.tex	/^\\end{figure}$/;"	u
Public Types	latex/classPagePlacementPolicy.tex	/^}$/;"	u
Public Types	latex/structMemReq.tex	/^}$/;"	u
QUEUED	ddr_mem.cpp	/^        enum State { IDLE, QUEUED, RUNNING, ANNULLED };$/;"	e	enum:SchedEvent::State	file:
QUEUED	scheduler.h	/^            QUEUED \/\/in the runqueue$/;"	e	enum:Scheduler::ThreadState
QUOTED	debug_harness.cpp	36;"	d	file:
QUOTED	pin_cmd.cpp	35;"	d	file:
QUOTED	zsim.cpp	1007;"	d	file:
QUOTED_	debug_harness.cpp	35;"	d	file:
QUOTED_	pin_cmd.cpp	34;"	d	file:
QUOTED_	zsim.cpp	1006;"	d	file:
RB_CLOSE	detailed_mem_params.h	/^            RB_CLOSE = 0,$/;"	e	enum:MemParam::eRowBufferPolicy
RB_OPEN	detailed_mem_params.h	/^            RB_OPEN$/;"	e	enum:MemParam::eRowBufferPolicy
RDTSC_H_	rdtsc.h	27;"	d
READ	detailed_mem.h	/^enum MemAccessType { READ, WRITE, NUM_ACCESS_TYPES};$/;"	e	enum:MemAccessType
REG_EXEC_TEMP	decoder.h	96;"	d
REG_LOAD_TEMP	decoder.h	93;"	d
REG_STORE_ADDR_TEMP	decoder.h	95;"	d
REG_STORE_TEMP	decoder.h	94;"	d
RELEASE_LOCK	g_heap/dlmalloc.h.c	1749;"	d	file:
RELEASE_LOCK	g_heap/dlmalloc.h.c	1850;"	d	file:
RELEASE_LOCK	g_heap/dlmalloc.h.c	1916;"	d	file:
RELEASE_LOCK	g_heap/dlmalloc.h.c	1948;"	d	file:
RELEASE_MALLOC_GLOBAL_LOCK	g_heap/dlmalloc.h.c	2002;"	d	file:
RELEASE_MALLOC_GLOBAL_LOCK	g_heap/dlmalloc.h.c	2006;"	d	file:
REPL_POLICIES_H_	repl_policies.h	27;"	d
RF_READS_PER_CYCLE	ooo_core.cpp	56;"	d	file:
RTCHECK	g_heap/dlmalloc.h.c	2985;"	d	file:
RTCHECK	g_heap/dlmalloc.h.c	2987;"	d	file:
RTCHECK	g_heap/dlmalloc.h.c	2990;"	d	file:
RUNNING	barrier.h	/^        enum State {OFFLINE, WAITING, RUNNING, LEFT};$/;"	e	enum:Barrier::State
RUNNING	core_recorder.h	/^            RUNNING, \/\/Scheduled. leave() --> DRAINING$/;"	e	enum:CoreRecorder::__anon10
RUNNING	ddr_mem.cpp	/^        enum State { IDLE, QUEUED, RUNNING, ANNULLED };$/;"	e	enum:SchedEvent::State	file:
RUNNING	ooo_core_recorder.h	/^            RUNNING, \/\/Scheduled. leave() --> DRAINING$/;"	e	enum:OOOCoreRecorder::__anon7
RUNNING	scheduler.h	/^            RUNNING, \/\/has cid assigned, managed by the phase barrier$/;"	e	enum:Scheduler::ThreadState
Rand  -Repl  -Policy Class Reference	latex/classRandReplPolicy.tex	/^\\hypertarget{classRandReplPolicy}{\\section{Rand\\-Repl\\-Policy Class Reference}$/;"	s
RandReplPolicy	repl_policies.h	/^        explicit RandReplPolicy(uint32_t _numCands) : numCands(_numCands), rnd(0x23A5F + (uint64_t)this), candIdx(0) {$/;"	f	class:RandReplPolicy
RandReplPolicy	repl_policies.h	/^class RandReplPolicy : public LegacyReplPolicy {$/;"	c
Range	config.cpp	/^    explicit Range(string r)  {$/;"	f	struct:Range
Range	config.cpp	/^struct Range {$/;"	s	file:
Range Struct Reference	latex/structRange.tex	/^\\hypertarget{structRange}{\\section{Range Struct Reference}$/;"	s
Rank	repl_policies.h	/^        struct Rank {$/;"	s	class:LFUReplPolicy
Refresh  -Event Class Reference	latex/classRefreshEvent.tex	/^\\hypertarget{classRefreshEvent}{\\section{Refresh\\-Event Class Reference}$/;"	s
RefreshEvent	ddr_mem.cpp	/^        RefreshEvent(DDRMemory* _mem, uint32_t _refInterval, int32_t domain) :$/;"	f	class:RefreshEvent
RefreshEvent	ddr_mem.cpp	/^class RefreshEvent : public TimingEvent, public GlobAlloc {$/;"	c	file:
Reorder  -Buffer$  $ S  -Z  W $  $ Class Template Reference	latex/classReorderBuffer.tex	/^\\hypertarget{classReorderBuffer}{\\section{Reorder\\-Buffer$<$ S\\-Z, W $>$ Class Template Reference}$/;"	s
ReorderBuffer	ooo_core.h	/^        ReorderBuffer() {$/;"	f	class:ReorderBuffer
ReorderBuffer	ooo_core.h	/^class ReorderBuffer {$/;"	c
RepScheme	page_placement.h	/^	enum RepScheme $/;"	g	class:PagePlacementPolicy
Repl  -Access  -Event Class Reference	latex/classReplAccessEvent.tex	/^\\hypertarget{classReplAccessEvent}{\\section{Repl\\-Access\\-Event Class Reference}$/;"	s
Repl  -Policy Class Reference	latex/classReplPolicy.tex	/^\\hypertarget{classReplPolicy}{\\section{Repl\\-Policy Class Reference}$/;"	s
ReplAccessEvent	timing_cache.cpp	/^        ReplAccessEvent(TimingCache* _cache, uint32_t _accsLeft, uint32_t preDelay, uint32_t postDelay, int32_t domain) : TimingEvent(preDelay, postDelay, domain), cache(_cache), accsLeft(_accsLeft) {}$/;"	f	class:ReplAccessEvent
ReplAccessEvent	timing_cache.cpp	/^class ReplAccessEvent : public TimingEvent {$/;"	c	file:
ReplPolicy	repl_policies.h	/^        ReplPolicy() : cc(nullptr) {}$/;"	f	class:ReplPolicy
ReplPolicy	repl_policies.h	/^class ReplPolicy : public GlobAlloc {$/;"	c
ReqType	mc.h	/^enum ReqType$/;"	g
Request	ddr_mem.h	/^        struct Request : InListNode<Request> {$/;"	s	class:DDRMemory
Request  -Queue$  $ T $  $  -   -  iterator Struct Reference	latex/structRequestQueue_1_1iterator.tex	/^\\hypertarget{structRequestQueue_1_1iterator}{\\section{Request\\-Queue$<$ T $>$\\-:\\-:iterator Struct Reference}$/;"	s
Request  -Queue$  $ T $  $ Class Template Reference	latex/classRequestQueue.tex	/^\\hypertarget{classRequestQueue}{\\section{Request\\-Queue$<$ T $>$ Class Template Reference}$/;"	s
RequestQueue	ddr_mem.h	/^class RequestQueue {$/;"	c
ReturnChannel	detailed_mem.cpp	/^uint64_t MemControllerBase::ReturnChannel(Address addr) {$/;"	f	class:MemControllerBase
S	memory_hierarchy.h	/^    S, \/\/ shared (and clean)$/;"	e	enum:__anon6
S  -H  -A1  -Hash  -Family Class Reference	latex/classSHA1HashFamily.tex	/^\\hypertarget{classSHA1HashFamily}{\\section{S\\-H\\-A1\\-Hash\\-Family Class Reference}$/;"	s
SAVE	mtrand.h	/^        enum { SAVE = N + 1 };  \/\/ length of array for save()$/;"	e	enum:MTRand::__anon2
SCHEDULER_H_	scheduler.h	28;"	d
SFF_ALWAYS	process_tree.h	/^    SFF_ALWAYS,$/;"	e	enum:SyncedFastForwardMode
SFF_MULTIPROCESS	process_tree.h	/^    SFF_MULTIPROCESS,$/;"	e	enum:SyncedFastForwardMode
SFF_NEVER	process_tree.h	/^    SFF_NEVER$/;"	e	enum:SyncedFastForwardMode
SHA1HashFamily	hash.cpp	/^SHA1HashFamily::SHA1HashFamily(int numFunctions) : numFuncs(numFunctions) {$/;"	f	class:SHA1HashFamily
SHA1HashFamily	hash.cpp	/^SHA1HashFamily::SHA1HashFamily(int numFunctions) {$/;"	f	class:SHA1HashFamily
SHA1HashFamily	hash.h	/^class SHA1HashFamily : public HashFamily {$/;"	c
SIMPLE_CORE_H_	simple_core.h	27;"	d
SIX_SIZE_T_SIZES	g_heap/dlmalloc.h.c	1502;"	d	file:
SIZE_T_BITSIZE	g_heap/dlmalloc.h.c	1492;"	d	file:
SIZE_T_FOUR	g_heap/dlmalloc.h.c	1499;"	d	file:
SIZE_T_ONE	g_heap/dlmalloc.h.c	1497;"	d	file:
SIZE_T_SIZE	g_heap/dlmalloc.h.c	1491;"	d	file:
SIZE_T_TWO	g_heap/dlmalloc.h.c	1498;"	d	file:
SIZE_T_ZERO	g_heap/dlmalloc.h.c	1496;"	d	file:
SLAB_ALLOC_H_	slab_alloc.h	27;"	d
SLAB_MASK	slab_alloc.h	46;"	d
SLAB_SIZE	slab_alloc.h	45;"	d
SLEEPING	scheduler.h	/^            SLEEPING, \/\/inside a patched sleep syscall; no cid assigned, in sleepQueue; it is our responsibility to wake this thread up when its deadline arrives$/;"	e	enum:Scheduler::ThreadState
SMALLBIN_SHIFT	g_heap/dlmalloc.h.c	2529;"	d	file:
SMALLBIN_WIDTH	g_heap/dlmalloc.h.c	2530;"	d	file:
SPINS_PER_YIELD	g_heap/dlmalloc.h.c	1751;"	d	file:
SPINS_PER_YIELD	g_heap/dlmalloc.h.c	1852;"	d	file:
SPIN_LOCKS_AVAILABLE	g_heap/dlmalloc.h.c	591;"	d	file:
SPIN_LOCKS_AVAILABLE	g_heap/dlmalloc.h.c	593;"	d	file:
STARTED	scheduler.h	/^            STARTED, \/\/transient state, thread will do a join immediately after$/;"	e	enum:Scheduler::ThreadState
STATS_FILTER_H_	stats_filter.h	27;"	d
STATS_H_	stats.h	73;"	d
STL_GALLOC_H_	g_std/stl_galloc.h	27;"	d
STORE	mc.h	/^	STORE$/;"	e	enum:ReqType
STRUCT_MALLINFO_DECLARED	g_heap/dlmalloc.h.c	756;"	d	file:
STR_H_	str.h	27;"	d
SType	config.cpp	/^typedef libconfig::Setting::Type SType;$/;"	t	file:
SYS_ALLOC_PADDING	g_heap/dlmalloc.h.c	2635;"	d	file:
Sat  -Counter$  $ M  T  I $  $ Class Template Reference	latex/classSatCounter.tex	/^\\hypertarget{classSatCounter}{\\section{Sat\\-Counter$<$ M, T, I $>$ Class Template Reference}$/;"	s
SatCounter	prefetcher.h	/^        SatCounter() : count(I) {}$/;"	f	class:SatCounter
SatCounter	prefetcher.h	/^class SatCounter {$/;"	c
SaveBackgroundCycles	detailed_mem.cpp	/^void MemRankBase::SaveBackgroundCycles(void) {$/;"	f	class:MemRankBase
Scalar  -Stat Class Reference	latex/classScalarStat.tex	/^\\hypertarget{classScalarStat}{\\section{Scalar\\-Stat Class Reference}$/;"	s
ScalarStat	stats.h	/^        ScalarStat() : Stat() {}$/;"	f	class:ScalarStat
ScalarStat	stats.h	/^class ScalarStat : public Stat {$/;"	c
Sched  -Event Class Reference	latex/classSchedEvent.tex	/^\\hypertarget{classSchedEvent}{\\section{Sched\\-Event Class Reference}$/;"	s
SchedEvent	ddr_mem.cpp	/^        SchedEvent(DDRMemory* _mem, int32_t domain) : TimingEvent(0, 0, domain), mem(_mem) {$/;"	f	class:SchedEvent
SchedEvent	ddr_mem.cpp	/^class SchedEvent : public TimingEvent, public GlobAlloc {$/;"	c	file:
Scheduler	scheduler.h	/^        Scheduler(void (*_atSyncFunc)(void), uint32_t _parallelThreads, uint32_t _numCores, uint32_t _schedQuantum) :$/;"	f	class:Scheduler
Scheduler	scheduler.h	/^class Scheduler : public GlobAlloc, public Callee {$/;"	c
Scheduler Class Reference	latex/classScheduler.tex	/^\\hypertarget{classScheduler}{\\section{Scheduler Class Reference}$/;"	s
Scheme	mc.h	/^enum Scheme$/;"	g
Search	html/search/search.js	/^    this.Search = function(search)$/;"	m	class:SearchResults
Search	html/search/search.js	/^  this.Search = function()$/;"	m	class:SearchBox
SearchBox	html/search/search.js	/^function SearchBox(name, resultsPath, inFrame, label)$/;"	c
SearchResults	html/search/search.js	/^function SearchResults(name)$/;"	c
Section	zsim.cpp	/^struct Section {$/;"	s	file:
Section Struct Reference	latex/structSection.tex	/^\\hypertarget{structSection}{\\section{Section Struct Reference}$/;"	s
SelectItemCount	html/search/search.js	/^  this.SelectItemCount = function(id)$/;"	m	class:SearchBox
SelectItemSet	html/search/search.js	/^  this.SelectItemSet = function(id)$/;"	m	class:SearchBox
Set	mc.h	/^class Set$/;"	c
Set  -Assoc  -Array Class Reference	latex/classSetAssocArray.tex	/^\\hypertarget{classSetAssocArray}{\\section{Set\\-Assoc\\-Array Class Reference}$/;"	s
Set  -Assoc  -Cands  -   -  iterator Struct Reference	latex/structSetAssocCands_1_1iterator.tex	/^\\hypertarget{structSetAssocCands_1_1iterator}{\\section{Set\\-Assoc\\-Cands\\-:\\-:iterator Struct Reference}$/;"	s
Set  -Assoc  -Cands Struct Reference	latex/structSetAssocCands.tex	/^\\hypertarget{structSetAssocCands}{\\section{Set\\-Assoc\\-Cands Struct Reference}$/;"	s
Set -Assoc -Array	latex/classSetAssocArray.tex	/^\\index{Set\\-Assoc\\-Array@{Set\\-Assoc\\-Array}!SetAssocArray@{Set\\-Assoc\\-Array}}$/;"	b
Set Class Reference	latex/classSet.tex	/^\\hypertarget{classSet}{\\section{Set Class Reference}$/;"	s
SetAccessInRefresh	detailed_mem.h	/^        void SetAccessInRefresh(uint32_t num) { accessInRefresh = num; }$/;"	f	class:MemRankBase
SetActvPowerDownCycle	detailed_mem.h	/^        void SetActvPowerDownCycle(uint64_t cycle) { assert(actvPowerDownCycle <= cycle); actvPowerDownCycle = cycle; }$/;"	f	class:MemRankBase
SetAssocArray	cache_arrays.cpp	/^SetAssocArray::SetAssocArray(uint32_t _numLines, uint32_t _assoc, ReplPolicy* _rp, HashFamily* _hf) : rp(_rp), hf(_hf), numLines(_numLines), assoc(_assoc)  {$/;"	f	class:SetAssocArray
SetAssocArray	cache_arrays.h	/^class SetAssocArray : public CacheArray {$/;"	c
SetAssocCands	cache_arrays.h	/^    inline SetAssocCands(uint32_t _b, uint32_t _e) : b(_b), e(_e) {}$/;"	f	struct:SetAssocCands
SetAssocCands	cache_arrays.h	/^struct SetAssocCands {$/;"	s
SetBankClose	detailed_mem.h	/^        void SetBankClose(uint32_t bank) { bankinfo[bank] = false; }$/;"	f	class:MemRankBase
SetBankOpen	detailed_mem.h	/^        void SetBankOpen(uint32_t bank)  { bankinfo[bank] = true; }$/;"	f	class:MemRankBase
SetFAWCycle	detailed_mem.h	/^        void SetFAWCycle(uint32_t bank, uint64_t cycle) { assert(tFAWCycle[bank] <= cycle); tFAWCycle[bank] = cycle; }$/;"	f	class:MemRankBase
SetFAWCycle	detailed_mem.h	/^        void SetFAWCycle(uint64_t cycle) { assert(tFAWCycle[tFAWIndex] <= cycle); tFAWCycle[tFAWIndex++] = cycle; tFAWIndex %= 4; }$/;"	f	class:MemRankBase
SetIdlePowerDownCycle	detailed_mem.h	/^        void SetIdlePowerDownCycle(uint64_t cycle) { assert(idlePowerDownCycle <= cycle); idlePowerDownCycle = cycle; }$/;"	f	class:MemRankBase
SetIdleStandbyCycle	detailed_mem.h	/^        void SetIdleStandbyCycle(uint64_t cycle) { assert(idleStandbyCycle <= cycle); idleStandbyCycle = cycle; }$/;"	f	class:MemRankBase
SetLastActCycle	detailed_mem.h	/^        void SetLastActCycle(uint32_t bank, uint64_t cycle) { assert(lastActCycle[bank] <= cycle); lastActCycle[bank] = cycle; }$/;"	f	class:MemRankBase
SetLastPreCycle	detailed_mem.h	/^        void SetLastPreCycle(uint32_t bank, uint64_t cycle) { assert(lastPreCycle[bank] <= cycle); lastPreCycle[bank] = cycle; }$/;"	f	class:MemRankBase
SetRefreshNum	detailed_mem.h	/^        void SetRefreshNum(uint32_t num) { assert(refreshNum <= num); refreshNum = num;}$/;"	f	class:MemRankBase
SimEnd	zsim.cpp	/^VOID SimEnd() {$/;"	f
SimInit	init.cpp	/^void SimInit(const char* configFile, const char* outputDir, uint32_t shmid) {$/;"	f
SimThreadData	contention_sim.h	/^        struct SimThreadData {$/;"	s	class:ContentionSim
SimThreadFini	zsim.cpp	/^VOID SimThreadFini(THREADID tid) {$/;"	f
SimThreadStart	zsim.cpp	/^void SimThreadStart(THREADID tid) {$/;"	f
SimThreadTrampoline	contention_sim.cpp	/^void ContentionSim::SimThreadTrampoline(void* arg) {$/;"	f	class:ContentionSim
Simple  -Core Class Reference	latex/classSimpleCore.tex	/^\\hypertarget{classSimpleCore}{\\section{Simple\\-Core Class Reference}$/;"	s
Simple  -Memory Class Reference	latex/classSimpleMemory.tex	/^\\hypertarget{classSimpleMemory}{\\section{Simple\\-Memory Class Reference}$/;"	s
Simple -Core	latex/classSimpleCore.tex	/^\\index{Simple\\-Core@{Simple\\-Core}!SimpleCore@{Simple\\-Core}}$/;"	b
SimpleCore	simple_core.cpp	/^SimpleCore::SimpleCore(FilterCache* _l1i, FilterCache* _l1d, g_string& _name) : Core(_name), l1i(_l1i), l1d(_l1d), instrs(0), curCycle(0), haltedCycles(0) {$/;"	f	class:SimpleCore
SimpleCore	simple_core.h	/^class SimpleCore : public Core {$/;"	c
SimpleMemory	mem_ctrls.cpp	/^SimpleMemory::SimpleMemory(uint32_t _latency, g_string& _name, Config& config) $/;"	f	class:SimpleMemory
SimpleMemory	mem_ctrls.h	/^class SimpleMemory : public MemObject {$/;"	c
SkipTimeVirt	virt/time.cpp	/^static bool SkipTimeVirt(PrePatchArgs args) {$/;"	f	file:
SkipTimeoutVirt	virt/timeout.cpp	/^static bool SkipTimeoutVirt(PrePatchArgs args) {$/;"	f	file:
Slab	slab_alloc.h	/^struct Slab {  \/\/ POD type (no constructor)$/;"	s	namespace:slab
SlabAlloc	slab_alloc.h	/^        SlabAlloc() : curSlab(nullptr), liveSlabs(0) {$/;"	f	class:slab::SlabAlloc
SlabAlloc	slab_alloc.h	/^class SlabAlloc {$/;"	c	namespace:slab
Split  -Addr  -Memory Class Reference	latex/classSplitAddrMemory.tex	/^\\hypertarget{classSplitAddrMemory}{\\section{Split\\-Addr\\-Memory Class Reference}$/;"	s
SplitAddrMemory	dramsim_mem_ctrl.h	/^        SplitAddrMemory(const g_vector<MemObject*>& _mems, const char* _name, Config& config) $/;"	f	class:SplitAddrMemory
SplitAddrMemory	dramsim_mem_ctrl.h	/^class SplitAddrMemory : public MemObject {$/;"	c
Stat	stats.h	/^        Stat() : _name(nullptr), _desc(nullptr) {}$/;"	f	class:Stat
Stat	stats.h	/^class Stat : public GlobAlloc {$/;"	c
Stat Class Reference	latex/classStat.tex	/^\\hypertarget{classStat}{\\section{Stat Class Reference}$/;"	s
StatSize	proc_stats.cpp	/^static uint64_t StatSize(Stat* s) {$/;"	f	file:
State	barrier.h	/^        enum State {OFFLINE, WAITING, RUNNING, LEFT};$/;"	g	class:Barrier
State	core_recorder.h	/^        } State;$/;"	t	class:CoreRecorder	typeref:enum:CoreRecorder::__anon10
State	ddr_mem.cpp	/^        enum State { IDLE, QUEUED, RUNNING, ANNULLED };$/;"	g	class:SchedEvent	file:
State	ooo_core_recorder.h	/^        } State;$/;"	t	class:OOOCoreRecorder	typeref:enum:OOOCoreRecorder::__anon7
Static Protected Attributes	latex/classMemControllerBase.tex	/^\\end{DoxyCompactItemize}$/;"	u
Static Protected Member Functions	latex/classMTRand.tex	/^\\end{DoxyCompactItemize}$/;"	u
Static Protected Member Functions	latex/classNullCore.tex	/^\\end{DoxyCompactItemize}$/;"	u
Static Protected Member Functions	latex/classSimpleCore.tex	/^\\end{DoxyCompactItemize}$/;"	u
Static Public Member Functions	latex/classDecoder.tex	/^}$/;"	u
Static Public Member Functions	latex/structDynBbl.tex	/^\\end{DoxyCompactItemize}$/;"	u
Stats  -Backend Class Reference	latex/classStatsBackend.tex	/^\\hypertarget{classStatsBackend}{\\section{Stats\\-Backend Class Reference}$/;"	s
StatsBackend	stats.h	/^        StatsBackend() {}$/;"	f	class:StatsBackend
StatsBackend	stats.h	/^class StatsBackend : public GlobAlloc {$/;"	c
StlGlobAlloc	g_std/stl_galloc.h	/^        StlGlobAlloc() {}$/;"	f	class:StlGlobAlloc
StlGlobAlloc	g_std/stl_galloc.h	/^        StlGlobAlloc(const StlGlobAlloc&) {}$/;"	f	class:StlGlobAlloc
StlGlobAlloc	g_std/stl_galloc.h	/^        template <class U> StlGlobAlloc(const StlGlobAlloc<U>&) {}$/;"	f	class:StlGlobAlloc
StlGlobAlloc	g_std/stl_galloc.h	/^class StlGlobAlloc {$/;"	c
StoreAndRecordFunc	timing_core.cpp	/^void TimingCore::StoreAndRecordFunc(THREADID tid, ADDRINT addr) {$/;"	f	class:TimingCore
StoreFunc	null_core.cpp	/^void NullCore::StoreFunc(THREADID tid, ADDRINT addr) {}$/;"	f	class:NullCore
StoreFunc	ooo_core.cpp	/^void OOOCore::StoreFunc(THREADID tid, ADDRINT addr) {static_cast<OOOCore*>(cores[tid])->store(addr);}$/;"	f	class:OOOCore
StoreFunc	simple_core.cpp	/^void SimpleCore::StoreFunc(THREADID tid, ADDRINT addr) {$/;"	f	class:SimpleCore
Str	str.h	/^template <typename T> std::string Str(T v) {$/;"	f
Str	str.h	/^template <typename T> std::string Str(const g_vector<T>& v) {$/;"	f
Str	str.h	/^template <typename T> std::string Str(const std::vector<T>& v) {$/;"	f
Stream  -Prefetcher  -   -  Entry  -   -  Access  -Times Struct Reference	latex/structStreamPrefetcher_1_1Entry_1_1AccessTimes.tex	/^\\hypertarget{structStreamPrefetcher_1_1Entry_1_1AccessTimes}{\\section{Stream\\-Prefetcher\\-:\\-:Entry\\-:\\-:Access\\-Times Struct Reference}$/;"	s
Stream  -Prefetcher Class Reference	latex/classStreamPrefetcher.tex	/^\\hypertarget{classStreamPrefetcher}{\\section{Stream\\-Prefetcher Class Reference}$/;"	s
StreamPrefetcher	prefetcher.cpp	/^StreamPrefetcher::StreamPrefetcher(const g_string& _name, uint32_t _numBuffers, bool _partitionBuffers)$/;"	f	class:StreamPrefetcher
StreamPrefetcher	prefetcher.h	/^class StreamPrefetcher : public BaseCache {$/;"	c
Sync  -Event Class Reference	latex/classSyncEvent.tex	/^\\hypertarget{classSyncEvent}{\\section{Sync\\-Event Class Reference}$/;"	s
SyncEvent	zsim.cpp	/^        SyncEvent() : Event(0 \/*one-shot*\/) {$/;"	f	class:SyncEvent
SyncEvent	zsim.cpp	/^class SyncEvent: public Event {$/;"	c	file:
SyncedFastForwardMode	process_tree.h	/^enum SyncedFastForwardMode {$/;"	g
SyscallEnter	zsim.cpp	/^VOID SyscallEnter(THREADID tid, CONTEXT *ctxt, SYSCALL_STANDARD std, VOID *v) {$/;"	f
SyscallExit	zsim.cpp	/^VOID SyscallExit(THREADID tid, CONTEXT *ctxt, SYSCALL_STANDARD std, VOID *v) {$/;"	f
T  -L  -B  -Entry Class Reference	latex/classTLBEntry.tex	/^\\hypertarget{classTLBEntry}{\\section{T\\-L\\-B\\-Entry Class Reference}$/;"	s
TICKET_MASK	locks.h	93;"	d
TICK_EVENT_H_	tick_event.h	27;"	d
TIMEOUT_LENGTH	barrier.h	54;"	d
TIMING_BLOCK_EVENTS	timing_event.h	36;"	d
TIMING_CACHE_H_	timing_cache.h	27;"	d
TIMING_CORE_H_	timing_core.h	27;"	d
TIMING_EVENT_H_	timing_event.h	27;"	d
TLBEntry	mc.h	/^class TLBEntry$/;"	c
TOP_FOOT_SIZE	g_heap/dlmalloc.h.c	2679;"	d	file:
TRACE_MSG	ooo_core_recorder.cpp	34;"	d	file:
TREEBIN_SHIFT	g_heap/dlmalloc.h.c	2531;"	d	file:
TRY_LOCK	g_heap/dlmalloc.h.c	1750;"	d	file:
TRY_LOCK	g_heap/dlmalloc.h.c	1851;"	d	file:
TRY_LOCK	g_heap/dlmalloc.h.c	1917;"	d	file:
TRY_LOCK	g_heap/dlmalloc.h.c	1949;"	d	file:
TWO_SIZE_T_SIZES	g_heap/dlmalloc.h.c	1500;"	d	file:
Tag  -Buffer  -Entry Class Reference	latex/classTagBufferEntry.tex	/^\\hypertarget{classTagBufferEntry}{\\section{Tag\\-Buffer\\-Entry Class Reference}$/;"	s
Tag  -Buffer Class Reference	latex/classTagBuffer.tex	/^\\hypertarget{classTagBuffer}{\\section{Tag\\-Buffer Class Reference}$/;"	s
TagBuffer	mc.cpp	/^TagBuffer::TagBuffer(Config & config)$/;"	f	class:TagBuffer
TagBuffer	mc.h	/^class TagBuffer : public GlobAlloc {$/;"	c
TagBufferEntry	mc.h	/^class TagBufferEntry$/;"	c
Tagless	mc.h	/^   Tagless$/;"	e	enum:Scheme
TakeBarrier	zsim.cpp	/^uint32_t TakeBarrier(uint32_t tid, uint32_t cid) {$/;"	f
TerminationStatus	zsim_harness.cpp	/^} TerminationStatus;$/;"	t	typeref:enum:__anon8	file:
Text  -Backend  -Impl Class Reference	latex/classTextBackendImpl.tex	/^\\hypertarget{classTextBackendImpl}{\\section{Text\\-Backend\\-Impl Class Reference}$/;"	s
Text  -Backend Class Reference	latex/classTextBackend.tex	/^\\hypertarget{classTextBackend}{\\section{Text\\-Backend Class Reference}$/;"	s
TextBackend	stats.h	/^class TextBackend : public StatsBackend {$/;"	c
TextBackend	text_stats.cpp	/^TextBackend::TextBackend(const char* filename, AggregateStat* rootStat) {$/;"	f	class:TextBackend
TextBackendImpl	text_stats.cpp	/^        TextBackendImpl(const char* _filename, AggregateStat* _rootStat) :$/;"	f	class:TextBackendImpl
TextBackendImpl	text_stats.cpp	/^class TextBackendImpl : public GlobAlloc {$/;"	c	file:
ThreadFini	zsim.cpp	/^VOID ThreadFini(THREADID tid, const CONTEXT *ctxt, INT32 flags, VOID *v) {$/;"	f
ThreadInfo	scheduler.h	/^            ThreadInfo(uint32_t _gid, uint32_t _linuxPid, uint32_t _linuxTid, const g_vector<bool>& _mask) :$/;"	f	struct:Scheduler::ThreadInfo
ThreadInfo	scheduler.h	/^        struct ThreadInfo : GlobAlloc, InListNode<ThreadInfo> {$/;"	s	class:Scheduler
ThreadStart	zsim.cpp	/^VOID ThreadStart(THREADID tid, CONTEXT *ctxt, INT32 flags, VOID *v) {$/;"	f
ThreadState	scheduler.h	/^        enum ThreadState {$/;"	g	class:Scheduler
ThreadSyncInfo	barrier.h	/^        struct ThreadSyncInfo {$/;"	s	class:Barrier
Tick  -Event$  $ T $  $ Class Template Reference	latex/classTickEvent.tex	/^\\hypertarget{classTickEvent}{\\section{Tick\\-Event$<$ T $>$ Class Template Reference}$/;"	s
TickEvent	tick_event.h	/^        TickEvent(T* _obj, int32_t domain) : TimingEvent(0, 0, domain), obj(_obj), active(false) {$/;"	f	class:TickEvent
TickEvent	tick_event.h	/^class TickEvent : public TimingEvent, public GlobAlloc { \/\/this one should be allocated from glob mem$/;"	c
TickScheduler	detailed_mem.cpp	/^void MemControllerBase::TickScheduler(uint64_t sysCycle) {$/;"	f	class:MemControllerBase
Time  -Breakdown  -Stat Class Reference	latex/classTimeBreakdownStat.tex	/^\\hypertarget{classTimeBreakdownStat}{\\section{Time\\-Breakdown\\-Stat Class Reference}$/;"	s
TimeBreakdownStat	profile_stats.h	/^        TimeBreakdownStat() : VectorCounter() {}$/;"	f	class:TimeBreakdownStat
TimeBreakdownStat	profile_stats.h	/^class TimeBreakdownStat : public VectorCounter {$/;"	c
Timing  -Cache Class Reference	latex/classTimingCache.tex	/^\\hypertarget{classTimingCache}{\\section{Timing\\-Cache Class Reference}$/;"	s
Timing  -Core  -Event Class Reference	latex/classTimingCoreEvent.tex	/^\\hypertarget{classTimingCoreEvent}{\\section{Timing\\-Core\\-Event Class Reference}$/;"	s
Timing  -Core Class Reference	latex/classTimingCore.tex	/^\\hypertarget{classTimingCore}{\\section{Timing\\-Core Class Reference}$/;"	s
Timing  -Event  -Block Struct Reference	latex/structTimingEventBlock.tex	/^\\hypertarget{structTimingEventBlock}{\\section{Timing\\-Event\\-Block Struct Reference}$/;"	s
Timing  -Event Class Reference	latex/classTimingEvent.tex	/^\\hypertarget{classTimingEvent}{\\section{Timing\\-Event Class Reference}$/;"	s
Timing  -Record Struct Reference	latex/structTimingRecord.tex	/^\\hypertarget{structTimingRecord}{\\section{Timing\\-Record Struct Reference}$/;"	s
TimingCache	timing_cache.cpp	/^TimingCache::TimingCache(uint32_t _numLines, CC* _cc, CacheArray* _array, ReplPolicy* _rp,$/;"	f	class:TimingCache
TimingCache	timing_cache.h	/^class TimingCache : public Cache {$/;"	c
TimingCore	timing_core.cpp	/^TimingCore::TimingCore(FilterCache* _l1i, FilterCache* _l1d, uint32_t _domain, g_string& _name)$/;"	f	class:TimingCore
TimingCore	timing_core.h	/^class TimingCore : public Core {$/;"	c
TimingCoreEvent	core_recorder.cpp	/^        TimingCoreEvent(uint64_t _delay, uint64_t _origStartCycle, CoreRecorder* _cRec, int32_t domain = -1) : TimingEvent(0, _delay, domain), origStartCycle(_origStartCycle), cRec(_cRec) {}$/;"	f	class:TimingCoreEvent
TimingCoreEvent	core_recorder.cpp	/^class TimingCoreEvent : public TimingEvent {$/;"	c	file:
TimingEvent	timing_event.h	/^        TimingEvent(uint32_t _preDelay, uint32_t _postDelay, int32_t _domain = -1) : next(nullptr), state(EV_NONE), cycle(0), minStartCycle(-1L), child(nullptr),$/;"	f	class:TimingEvent
TimingEvent	timing_event.h	/^        explicit TimingEvent(int32_t _domain = -1) : next(nullptr), state(EV_NONE), minStartCycle(-1L), child(nullptr),$/;"	f	class:TimingEvent
TimingEvent	timing_event.h	/^class TimingEvent {$/;"	c
TimingEventBlock	timing_event.h	/^    TimingEventBlock() {$/;"	f	struct:TimingEventBlock
TimingEventBlock	timing_event.h	/^struct TimingEventBlock {$/;"	s
TimingRecord	event_recorder.h	/^struct TimingRecord $/;"	s
Toggle	html/search/search.js	/^    this.Toggle = function(id)$/;"	m	class:SearchResults
Tokenize	config.cpp	/^void Tokenize(const string& str, vector<string>& tokens, const string& delimiters) {$/;"	f
Trace	zsim.cpp	/^VOID Trace(TRACE trace, VOID *v) {$/;"	f
Trace  -Driver  -Proxy  -Cache Class Reference	latex/classTraceDriverProxyCache.tex	/^\\hypertarget{classTraceDriverProxyCache}{\\section{Trace\\-Driver\\-Proxy\\-Cache Class Reference}$/;"	s
Trace  -Driver Class Reference	latex/classTraceDriver.tex	/^\\hypertarget{classTraceDriver}{\\section{Trace\\-Driver Class Reference}$/;"	s
Trace -Driver	latex/classTraceDriver.tex	/^\\index{Trace\\-Driver@{Trace\\-Driver}!TraceDriver@{Trace\\-Driver}}$/;"	b
TraceDriver	trace_driver.cpp	/^TraceDriver::TraceDriver(std::string filename, std::string retraceFilename, std::vector<TraceDriverProxyCache*>& proxies, bool _useSkews, bool _playPuts, bool _playAllGets)$/;"	f	class:TraceDriver
TraceDriver	trace_driver.h	/^class TraceDriver {$/;"	c
TraceDriverProxyCache	trace_driver.h	/^        TraceDriverProxyCache(g_string& _name) : drv(nullptr), id(-1), name(_name) {}$/;"	f	class:TraceDriverProxyCache
TraceDriverProxyCache	trace_driver.h	/^class TraceDriverProxyCache : public BaseCache {$/;"	c
Tracing  -Cache Class Reference	latex/classTracingCache.tex	/^\\hypertarget{classTracingCache}{\\section{Tracing\\-Cache Class Reference}$/;"	s
TracingCache	tracing_cache.cpp	/^TracingCache::TracingCache(uint32_t _numLines, CC* _cc, CacheArray* _array, ReplPolicy* _rp, uint32_t _accLat, uint32_t _invLat, g_string& _tracefile, g_string& _name) :$/;"	f	class:TracingCache
TracingCache	tracing_cache.h	/^class TracingCache : public Cache {$/;"	c
TransactionCompleteCB	Callback.h	/^typedef CallbackBase <void, unsigned, uint64_t, uint64_t> TransactionCompleteCB;$/;"	t	namespace:DRAMSim
Tree  -L  -R  -U  -Repl  -Policy Class Reference	latex/classTreeLRUReplPolicy.tex	/^\\hypertarget{classTreeLRUReplPolicy}{\\section{Tree\\-L\\-R\\-U\\-Repl\\-Policy Class Reference}$/;"	s
TreeLRUReplPolicy	repl_policies.h	/^        TreeLRUReplPolicy(uint32_t _numLines, uint32_t _numCands) : LRUReplPolicy<true>(_numLines), numCands(_numCands), candIdx(0) {$/;"	f	class:TreeLRUReplPolicy
TreeLRUReplPolicy	repl_policies.h	/^class TreeLRUReplPolicy : public LRUReplPolicy<true> {$/;"	c
TrueSleep	scheduler.cpp	/^static void TrueSleep(uint32_t usecs) {$/;"	f	file:
Typedefs	latex/namespaceDRAMSim.tex	/^\\end{DoxyCompactItemize}$/;"	u
U  -Mon  -Monitor Class Reference	latex/classUMonMonitor.tex	/^\\hypertarget{classUMonMonitor}{\\section{U\\-Mon\\-Monitor Class Reference}$/;"	s
U  -Mon Class Reference	latex/classUMon.tex	/^\\hypertarget{classUMon}{\\section{U\\-Mon Class Reference}$/;"	s
U -Mon -Monitor	latex/classUMonMonitor.tex	/^\\index{U\\-Mon\\-Monitor@{U\\-Mon\\-Monitor}!UMonMonitor@{U\\-Mon\\-Monitor}}$/;"	b
UBWin	ooo_core.h	/^        typedef g_map<uint64_t, WinCycle> UBWin;$/;"	t	class:WindowStructure
UBWinIterator	ooo_core.h	/^        typedef typename UBWin::iterator UBWinIterator;$/;"	t	class:WindowStructure
UMON_INFO	utility_monitor.h	34;"	d
UMon	utility_monitor.cpp	/^UMon::UMon(uint32_t _bankLines, uint32_t _umonLines, uint32_t _buckets) {$/;"	f	class:UMon
UMon	utility_monitor.h	/^class UMon : public GlobAlloc {$/;"	c
UMonMonitor	monitor.cpp	/^UMonMonitor::UMonMonitor(uint32_t _numLines, uint32_t _umonLines, uint32_t _umonBuckets, uint32_t _numPartitions, uint32_t _buckets)$/;"	f	class:UMonMonitor
UMonMonitor	partitioner.h	/^class UMonMonitor : public PartitionMonitor {$/;"	c
UNINITIALIZED_CID	zsim.cpp	108;"	d	file:
UOP_FENCE	decoder.h	/^enum UopType : uint8_t {UOP_GENERAL, UOP_LOAD, UOP_STORE, UOP_STORE_ADDR, UOP_FENCE};$/;"	e	enum:uint8_t
UOP_GENERAL	decoder.h	/^enum UopType : uint8_t {UOP_GENERAL, UOP_LOAD, UOP_STORE, UOP_STORE_ADDR, UOP_FENCE};$/;"	e	enum:uint8_t
UOP_LOAD	decoder.h	/^enum UopType : uint8_t {UOP_GENERAL, UOP_LOAD, UOP_STORE, UOP_STORE_ADDR, UOP_FENCE};$/;"	e	enum:uint8_t
UOP_STORE	decoder.h	/^enum UopType : uint8_t {UOP_GENERAL, UOP_LOAD, UOP_STORE, UOP_STORE_ADDR, UOP_FENCE};$/;"	e	enum:uint8_t
UOP_STORE_ADDR	decoder.h	/^enum UopType : uint8_t {UOP_GENERAL, UOP_LOAD, UOP_STORE, UOP_STORE_ADDR, UOP_FENCE};$/;"	e	enum:uint8_t
USAGE_ERROR_ACTION	g_heap/dlmalloc.h.c	2724;"	d	file:
USAGE_ERROR_ACTION	g_heap/dlmalloc.h.c	2733;"	d	file:
USED	scheduler.h	/^            USED$/;"	e	enum:Scheduler::ContextState
USE_BUILTIN_FFS	g_heap/dlmalloc.h.c	699;"	d	file:
USE_DEV_RANDOM	g_heap/dlmalloc.h.c	702;"	d	file:
USE_LOCKS	g_heap/dlmalloc.h.c	32;"	d	file:
USE_LOCKS	g_heap/dlmalloc.h.c	627;"	d	file:
USE_LOCK_BIT	g_heap/dlmalloc.h.c	1991;"	d	file:
USE_LOCK_BIT	g_heap/dlmalloc.h.c	1993;"	d	file:
USE_MMAP_BIT	g_heap/dlmalloc.h.c	1618;"	d	file:
USE_MMAP_BIT	g_heap/dlmalloc.h.c	1636;"	d	file:
USE_NONCONTIGUOUS_BIT	g_heap/dlmalloc.h.c	1660;"	d	file:
USE_SPIN_LOCKS	g_heap/dlmalloc.h.c	631;"	d	file:
USE_SPIN_LOCKS	g_heap/dlmalloc.h.c	633;"	d	file:
UTILITY_MONITOR_H_	utility_monitor.h	27;"	d
UnisonCache	mc.h	/^   UnisonCache,$/;"	e	enum:Scheme
UpdateCmdCounters	detailed_mem.cpp	/^void MemControllerBase::UpdateCmdCounters(void) {$/;"	f	class:MemControllerBase
UpdateDataBusCycle	detailed_mem.cpp	/^void MemChannelBase::UpdateDataBusCycle(uint64_t start, uint64_t end) {$/;"	f	class:MemChannelBase
UpdateLastRefreshCycle	detailed_mem.cpp	/^uint64_t MemChannelBase::UpdateLastRefreshCycle(uint32_t rank, uint64_t arrivalCycle, uint32_t refreshNum) {$/;"	f	class:MemChannelBase
UpdatePowerDownCycle	detailed_mem.cpp	/^void MemChannelBase::UpdatePowerDownCycle(uint32_t rank, uint64_t arrivalCycle, uint64_t lastPhaseCycle, uint32_t refreshNum) {$/;"	f	class:MemChannelBase
UpdateRefreshNum	detailed_mem.cpp	/^uint32_t MemChannelBase::UpdateRefreshNum(uint32_t rank, uint64_t arrivalCycle) {$/;"	f	class:MemChannelBase
Usage	zsim.cpp	/^INT32 Usage() {$/;"	f
VANTAGE_8BIT_BTS	part_repl_policies.h	236;"	d
VDD1	detailed_mem_params.h	/^        uint32_t VDD1;$/;"	m	class:MemParam
VF_CLOCK_GETTIME	zsim.cpp	/^enum VdsoFunc {VF_CLOCK_GETTIME, VF_GETTIMEOFDAY, VF_TIME, VF_GETCPU};$/;"	e	enum:VdsoFunc	file:
VF_GETCPU	zsim.cpp	/^enum VdsoFunc {VF_CLOCK_GETTIME, VF_GETTIMEOFDAY, VF_TIME, VF_GETCPU};$/;"	e	enum:VdsoFunc	file:
VF_GETTIMEOFDAY	zsim.cpp	/^enum VdsoFunc {VF_CLOCK_GETTIME, VF_GETTIMEOFDAY, VF_TIME, VF_GETCPU};$/;"	e	enum:VdsoFunc	file:
VF_TIME	zsim.cpp	/^enum VdsoFunc {VF_CLOCK_GETTIME, VF_GETTIMEOFDAY, VF_TIME, VF_GETCPU};$/;"	e	enum:VdsoFunc	file:
VIRT_COMMON_H_	virt/common.h	27;"	d
VIRT_PORT_VIRTUALIZER_H_	virt/port_virtualizer.h	27;"	d
VIRT_SYSCALL_NAME_H_	virt/syscall_name.h	27;"	d
VIRT_TIME_CONV_H_	virt/time_conv.h	28;"	d
VIRT_VIRT_H_	virt/virt.h	28;"	d
Vantage  -Repl  -Policy Class Reference	latex/classVantageReplPolicy.tex	/^\\hypertarget{classVantageReplPolicy}{\\section{Vantage\\-Repl\\-Policy Class Reference}$/;"	s
VantagePartInfo	part_repl_policies.h	/^        struct VantagePartInfo : public PartInfo {$/;"	s	class:VantageReplPolicy
VantageReplPolicy	part_repl_policies.h	/^        VantageReplPolicy(PartitionMonitor* _monitor, PartMapper* _mapper, uint64_t _lines,  uint32_t _assoc, uint32_t partPortionPct,$/;"	f	class:VantageReplPolicy
VantageReplPolicy	part_repl_policies.h	/^class VantageReplPolicy : public PartReplPolicy, public LegacyReplPolicy {$/;"	c
Vdso  -Patch  -Data Struct Reference	latex/structVdsoPatchData.tex	/^\\hypertarget{structVdsoPatchData}{\\section{Vdso\\-Patch\\-Data Struct Reference}$/;"	s
VdsoCallPoint	zsim.cpp	/^VOID VdsoCallPoint(THREADID tid) {$/;"	f
VdsoEntryPoint	zsim.cpp	/^VOID VdsoEntryPoint(THREADID tid, uint32_t func, ADDRINT arg0, ADDRINT arg1) {$/;"	f
VdsoFunc	zsim.cpp	/^enum VdsoFunc {VF_CLOCK_GETTIME, VF_GETTIMEOFDAY, VF_TIME, VF_GETCPU};$/;"	g	file:
VdsoInit	zsim.cpp	/^void VdsoInit() {$/;"	f
VdsoInsertFunc	zsim.cpp	/^void VdsoInsertFunc(IMG vi, const char* fName, VdsoFunc func) {$/;"	f
VdsoInstrument	zsim.cpp	/^VOID VdsoInstrument(INS ins) {$/;"	f
VdsoPatchData	zsim.cpp	/^struct VdsoPatchData {$/;"	s	file:
VdsoRetPoint	zsim.cpp	/^VOID VdsoRetPoint(THREADID tid, REG* raxPtr) {$/;"	f
Vector  -Counter Class Reference	latex/classVectorCounter.tex	/^\\hypertarget{classVectorCounter}{\\section{Vector\\-Counter Class Reference}$/;"	s
Vector  -Stat Class Reference	latex/classVectorStat.tex	/^\\hypertarget{classVectorStat}{\\section{Vector\\-Stat Class Reference}$/;"	s
VectorCounter	stats.h	/^        VectorCounter() : VectorStat() {}$/;"	f	class:VectorCounter
VectorCounter	stats.h	/^class VectorCounter : public VectorStat {$/;"	c
VectorStat	stats.h	/^        VectorStat() : _counterNames(nullptr) {}$/;"	f	class:VectorStat
VectorStat	stats.h	/^class VectorStat : public Stat {$/;"	c
VirtCaptureClocks	virt/time.cpp	/^void VirtCaptureClocks(bool isDeffwd) {$/;"	f
VirtClockGettime	virt/time.cpp	/^void VirtClockGettime(uint32_t tid, ADDRINT arg0, ADDRINT arg1) {$/;"	f
VirtGetPhaseRDTSC	virt/time.cpp	/^uint64_t VirtGetPhaseRDTSC() {$/;"	f
VirtGetcpu	virt/cpu.cpp	/^void VirtGetcpu(uint32_t tid, uint32_t cpu, ADDRINT arg0, ADDRINT arg1) {$/;"	f
VirtGettimeofday	virt/time.cpp	/^void VirtGettimeofday(uint32_t tid, ADDRINT arg0) {$/;"	f
VirtInit	virt/virt.cpp	/^void VirtInit() {$/;"	f
VirtSyscallEnter	virt/virt.cpp	/^void VirtSyscallEnter(THREADID tid, CONTEXT *ctxt, SYSCALL_STANDARD std, const char* patchRoot, bool isNopThread) {$/;"	f
VirtSyscallExit	virt/virt.cpp	/^PostPatchAction VirtSyscallExit(THREADID tid, CONTEXT *ctxt, SYSCALL_STANDARD std) {$/;"	f
VirtTime	virt/time.cpp	/^void VirtTime(uint32_t tid, REG* out, ADDRINT arg0) {$/;"	f
WAITING	barrier.h	/^        enum State {OFFLINE, WAITING, RUNNING, LEFT};$/;"	e	enum:Barrier::State
WATCHDOG_INTERVAL_USEC	scheduler.cpp	40;"	d	file:
WATCHDOG_MAX_MULTIPLER	scheduler.cpp	41;"	d	file:
WATCHDOG_STALL_THRESHOLD	scheduler.cpp	42;"	d	file:
WEAVE_MD1_MEM_H_	weave_md1_mem.h	27;"	d
WIN32	g_heap/dlmalloc.h.c	545;"	d	file:
WIN32	g_heap/dlmalloc.h.c	549;"	d	file:
WIN32_LEAN_AND_MEAN	g_heap/dlmalloc.h.c	553;"	d	file:
WRITE	detailed_mem.h	/^enum MemAccessType { READ, WRITE, NUM_ACCESS_TYPES};$/;"	e	enum:MemAccessType
WarnTimingRelated	virt/virt.cpp	/^PostPatchFn WarnTimingRelated(PrePatchArgs args) {$/;"	f
Way	mc.h	/^class Way$/;"	c
Way  -Part  -Repl  -Policy Class Reference	latex/classWayPartReplPolicy.tex	/^\\hypertarget{classWayPartReplPolicy}{\\section{Way\\-Part\\-Repl\\-Policy Class Reference}$/;"	s
Way Class Reference	latex/classWay.tex	/^\\hypertarget{classWay}{\\section{Way Class Reference}$/;"	s
WayPartInfo	part_repl_policies.h	/^        struct WayPartInfo {$/;"	s	class:WayPartReplPolicy
WayPartReplPolicy	part_repl_policies.h	/^        WayPartReplPolicy(PartitionMonitor* _monitor, PartMapper* _mapper, uint64_t _lines, uint32_t _ways, bool _testMode)$/;"	f	class:WayPartReplPolicy
WayPartReplPolicy	part_repl_policies.h	/^class WayPartReplPolicy : public PartReplPolicy, public LegacyReplPolicy {$/;"	c
Weave  -M  -D1  -Memory Class Reference	latex/classWeaveMD1Memory.tex	/^\\hypertarget{classWeaveMD1Memory}{\\section{Weave\\-M\\-D1\\-Memory Class Reference}$/;"	s
Weave  -Mem  -Acc  -Event Class Reference	latex/classWeaveMemAccEvent.tex	/^\\hypertarget{classWeaveMemAccEvent}{\\section{Weave\\-Mem\\-Acc\\-Event Class Reference}$/;"	s
Weave  -Simple  -Memory Class Reference	latex/classWeaveSimpleMemory.tex	/^\\hypertarget{classWeaveSimpleMemory}{\\section{Weave\\-Simple\\-Memory Class Reference}$/;"	s
WeaveMD1Memory	weave_md1_mem.h	/^        WeaveMD1Memory(uint32_t lineSize, uint32_t megacyclesPerSecond, uint32_t megabytesPerSecond, uint32_t _zeroLoadLatency, uint32_t _boundLatency, uint32_t _domain, g_string& _name) :$/;"	f	class:WeaveMD1Memory
WeaveMD1Memory	weave_md1_mem.h	/^class WeaveMD1Memory : public MD1Memory {$/;"	c
WeaveMemAccEvent	weave_md1_mem.h	/^        WeaveMemAccEvent(uint32_t _lat, int32_t domain, uint32_t preDelay, uint32_t postDelay) :  TimingEvent(preDelay, postDelay, domain), lat(_lat) {}$/;"	f	class:WeaveMemAccEvent
WeaveMemAccEvent	weave_md1_mem.h	/^class WeaveMemAccEvent : public TimingEvent {$/;"	c
WeaveSimpleMemory	weave_md1_mem.h	/^        WeaveSimpleMemory(uint32_t _latency, uint32_t _zeroLoadLatency, uint32_t _domain, g_string& _name, Config& config) :$/;"	f	class:WeaveSimpleMemory
WeaveSimpleMemory	weave_md1_mem.h	/^class WeaveSimpleMemory : public SimpleMemory {$/;"	c
WinCycle	ooo_core.h	/^        struct WinCycle {$/;"	s	class:WindowStructure
Window  -Structure$  $ H  W  -S  -Z $  $ Class Template Reference	latex/classWindowStructure.tex	/^\\hypertarget{classWindowStructure}{\\section{Window\\-Structure$<$ H, W\\-S\\-Z $>$ Class Template Reference}$/;"	s
WindowStructure	ooo_core.h	/^        WindowStructure() {$/;"	f	class:WindowStructure
WindowStructure	ooo_core.h	/^class WindowStructure {$/;"	c
XC	decoder.cpp	43;"	d	file:
XO	decoder.cpp	44;"	d	file:
Z  -Array Class Reference	latex/classZArray.tex	/^\\hypertarget{classZArray}{\\section{Z\\-Array Class Reference}$/;"	s
Z  -Cands  -   -  iterator Struct Reference	latex/structZCands_1_1iterator.tex	/^\\hypertarget{structZCands_1_1iterator}{\\section{Z\\-Cands\\-:\\-:iterator Struct Reference}$/;"	s
Z  -Cands Struct Reference	latex/structZCands.tex	/^\\hypertarget{structZCands}{\\section{Z\\-Cands Struct Reference}$/;"	s
Z  -Walk  -Info Struct Reference	latex/structZWalkInfo.tex	/^\\hypertarget{structZWalkInfo}{\\section{Z\\-Walk\\-Info Struct Reference}$/;"	s
ZArray	cache_arrays.cpp	/^ZArray::ZArray(uint32_t _numLines, uint32_t _ways, uint32_t _candidates, ReplPolicy* _rp, HashFamily* _hf) \/\/(int _size, int _lineSize, int _assoc, int _zassoc, ReplacementPolicy<T>* _rp, int _hashType)$/;"	f	class:ZArray
ZArray	cache_arrays.h	/^class ZArray : public CacheArray {$/;"	c
ZCands	cache_arrays.h	/^    inline ZCands(ZWalkInfo* _b, ZWalkInfo* _e) : b(_b), e(_e) {}$/;"	f	struct:ZCands
ZCands	cache_arrays.h	/^struct ZCands {$/;"	s
ZSIM_H_	zsim.h	27;"	d
ZSIM_MAGIC_OP_HEARTBEAT	zsim.cpp	1145;"	d	file:
ZSIM_MAGIC_OP_REGISTER_THREAD	zsim.cpp	1144;"	d	file:
ZSIM_MAGIC_OP_ROI_BEGIN	zsim.cpp	1142;"	d	file:
ZSIM_MAGIC_OP_ROI_END	zsim.cpp	1143;"	d	file:
ZWalkInfo	cache_arrays.h	/^struct ZWalkInfo {$/;"	s
_MC_H_	mc.h	2;"	d
_PAD_CONCAT	pad.h	34;"	d
_SC_PAGE_SIZE	g_heap/dlmalloc.h.c	1443;"	d	file:
__TRACE_DRIVER_H__	trace_driver.h	27;"	d
__TRACING_CACHE_H__	tracing_cache.h	27;"	d
__USE_GNU	g_heap/dlmalloc.h.c	1375;"	d	file:
__USE_GNU	g_heap/dlmalloc.h.c	1377;"	d	file:
__gm_calloc	galloc.cpp	/^void* __gm_calloc(size_t num, size_t size) {$/;"	f
__gm_memalign	galloc.cpp	/^void* __gm_memalign(size_t blocksize, size_t bytes) {$/;"	f
__log_lock	log.cpp	/^void __log_lock() {futex_lock(&log_printLock);}$/;"	f
__log_unlock	log.cpp	/^void __log_unlock() {futex_unlock(&log_printLock);}$/;"	f
_access_count_threshold	page_placement.h	/^	uint32_t _access_count_threshold;$/;"	m	class:PagePlacementPolicy
_address_trace	mc.h	/^	Address _address_trace[10000];$/;"	m	class:MemoryController
_address_trace	mem_ctrls.h	/^		Address _address_trace[10000];$/;"	m	class:SimpleMemory
_buffer	filter_cache.h	/^		drand48_data _buffer;$/;"	m	class:FilterCache
_buffer	line_placement.h	/^   drand48_data _buffer;$/;"	m	class:LinePlacementPolicy
_buffer	page_placement.h	/^	drand48_data _buffer;$/;"	m	class:PagePlacementPolicy
_bw_balance	mc.h	/^	bool _bw_balance; $/;"	m	class:MemoryController
_cache	mc.h	/^	Set * _cache;$/;"	m	class:MemoryController
_cache_size	mc.h	/^	uint64_t _cache_size;  \/\/ in Bytes$/;"	m	class:MemoryController
_children	stats.h	/^        g_vector<Stat*> _children;$/;"	m	class:AggregateStat
_chunks	page_placement.h	/^	ChunkInfo * _chunks;$/;"	m	class:PagePlacementPolicy
_collect_trace	mc.h	/^	bool _collect_trace;$/;"	m	class:MemoryController
_collect_trace	mem_ctrls.h	/^		bool _collect_trace;$/;"	m	class:SimpleMemory
_count	stats.h	/^        uint64_t _count;$/;"	m	class:Counter
_counterNames	stats.h	/^        const char** _counterNames;$/;"	m	class:VectorStat
_counters	stats.h	/^        g_vector<uint64_t> _counters;$/;"	m	class:VectorCounter
_cur_trace_len	mc.h	/^	uint32_t _cur_trace_len;$/;"	m	class:MemoryController
_cur_trace_len	mem_ctrls.h	/^		uint32_t _cur_trace_len;$/;"	m	class:SimpleMemory
_desc	stats.h	/^        const char* _desc;$/;"	m	class:Stat
_ds_index	mc.h	/^	uint64_t _ds_index;$/;"	m	class:MemoryController
_enable_replace	line_placement.h	/^   bool _enable_replace;$/;"	m	class:LinePlacementPolicy
_enable_replace	page_placement.h	/^	bool _enable_replace;$/;"	m	class:PagePlacementPolicy
_enable_tlb	filter_cache.h	/^		bool _enable_tlb;$/;"	m	class:FilterCache
_entry_occupied	mc.h	/^	uint32_t _entry_occupied;$/;"	m	class:TagBuffer
_exist_pgnum	filter_cache.h	/^		g_unordered_set <Address> _exist_pgnum; $/;"	m	class:FilterCache
_ext_bw_per_step	mc.h	/^	uint64_t _ext_bw_per_step;$/;"	m	class:MemoryController
_ext_dram	mc.h	/^	MemObject *	_ext_dram;$/;"	m	class:MemoryController
_ext_type	mc.h	/^	g_string _ext_type; $/;"	m	class:MemoryController
_footprint_size	mc.h	/^	uint32_t _footprint_size; $/;"	m	class:MemoryController
_func	stats.h	/^        uint64_t (*_func)();$/;"	m	class:ProxyFuncStat
_gm_	g_heap/dlmalloc.h.c	/^static struct malloc_state _gm_;$/;"	v	typeref:struct:malloc_state	file:
_granularity	mc.h	/^	uint64_t _granularity;$/;"	m	class:MemoryController
_granularity	page_placement.h	/^	uint32_t _granularity;$/;"	m	class:PagePlacementPolicy
_histogram	page_placement.h	/^	uint64_t * _histogram;$/;"	m	class:PagePlacementPolicy
_isMutable	stats.h	/^        bool _isMutable;$/;"	m	class:AggregateStat
_isRegular	stats.h	/^        bool _isRegular;$/;"	m	class:AggregateStat
_last_clear_time	mc.h	/^	uint64_t _last_clear_time;$/;"	m	class:TagBuffer
_line_placement_policy	mc.h	/^	LinePlacementPolicy * _line_placement_policy;$/;"	m	class:MemoryController
_llc_latency	mc.h	/^	uint32_t _llc_latency;$/;"	m	class:MemoryController
_lock	mc.h	/^	lock_t _lock;$/;"	m	class:MemoryController
_lock	mem_ctrls.h	/^		lock_t _lock;$/;"	m	class:SimpleMemory
_lru_bits	page_placement.h	/^	uint32_t ** _lru_bits; \/\/ on per set$/;"	m	class:PagePlacementPolicy
_mapping_granu	dramsim_mem_ctrl.h	/^		uint32_t _mapping_granu;   $/;"	m	class:SplitAddrMemory
_max_count_size	page_placement.h	/^	uint32_t _max_count_size;$/;"	m	class:PagePlacementPolicy
_max_trace_len	mc.h	/^	uint32_t _max_trace_len;$/;"	m	class:MemoryController
_max_trace_len	mem_ctrls.h	/^		uint32_t _max_trace_len;$/;"	m	class:SimpleMemory
_mc	os_placement.h	/^	MemoryController * _mc;$/;"	m	class:OSPlacementPolicy
_mc	page_placement.h	/^	MemoryController * _mc;$/;"	m	class:PagePlacementPolicy
_mc_bw_per_step	mc.h	/^	uint64_t _mc_bw_per_step;$/;"	m	class:MemoryController
_mcdram	mc.h	/^	MemObject ** _mcdram;$/;"	m	class:MemoryController
_mcdram_per_mc	mc.h	/^	uint32_t _mcdram_per_mc;$/;"	m	class:MemoryController
_mcdram_type	mc.h	/^	g_string _mcdram_type;$/;"	m	class:MemoryController
_miss_rate_trace	mc.h	/^   	double _miss_rate_trace[MAX_STEPS];$/;"	m	class:MemoryController
_name	mc.h	/^	g_string _name;$/;"	m	class:MemoryController
_name	stats.h	/^        const char* _name;$/;"	m	class:Stat
_next_evict_idx	mc.h	/^	uint64_t _next_evict_idx;$/;"	m	class:MemoryController
_numCleanEviction	mc.h	/^  	Counter _numCleanEviction;$/;"	m	class:MemoryController
_numCounterAccess	mc.h	/^	Counter _numCounterAccess; \/\/ for FBR placement policy  $/;"	m	class:MemoryController
_numDirtyEviction	mc.h	/^	Counter _numDirtyEviction;$/;"	m	class:MemoryController
_numEvictedLines	mc.h	/^	Counter _numEvictedLines;$/;"	m	class:MemoryController
_numLoadHit	mc.h	/^	Counter _numLoadHit;$/;"	m	class:MemoryController
_numLoadMiss	mc.h	/^	Counter _numLoadMiss;$/;"	m	class:MemoryController
_numPlacement	mc.h	/^	Counter _numPlacement;$/;"	m	class:MemoryController
_numStoreHit	mc.h	/^	Counter _numStoreHit;$/;"	m	class:MemoryController
_numStoreMiss	mc.h	/^	Counter _numStoreMiss;$/;"	m	class:MemoryController
_numTBDirtyHit	mc.h	/^	Counter _numTBDirtyHit;$/;"	m	class:MemoryController
_numTBDirtyMiss	mc.h	/^	Counter _numTBDirtyMiss;$/;"	m	class:MemoryController
_numTagBufferFlush	mc.h	/^	Counter _numTagBufferFlush;$/;"	m	class:MemoryController
_numTagLoad	mc.h	/^	Counter _numTagLoad;$/;"	m	class:MemoryController
_numTagStore	mc.h	/^	Counter _numTagStore;$/;"	m	class:MemoryController
_numTouchedLines	mc.h	/^	Counter _numTouchedLines;$/;"	m	class:MemoryController
_num_chunks	page_placement.h	/^	uint64_t _num_chunks;$/;"	m	class:PagePlacementPolicy
_num_counter_read	page_placement.h	/^	uint64_t _num_counter_read;$/;"	m	class:PagePlacementPolicy
_num_counter_write	page_placement.h	/^	uint64_t _num_counter_write;$/;"	m	class:PagePlacementPolicy
_num_empty_replace	page_placement.h	/^	uint64_t _num_empty_replace;$/;"	m	class:PagePlacementPolicy
_num_entries_per_chunk	page_placement.h	/^	uint32_t _num_entries_per_chunk;$/;"	m	class:PagePlacementPolicy
_num_hit_per_step	mc.h	/^	uint64_t _num_hit_per_step;$/;"	m	class:MemoryController
_num_miss_per_step	mc.h	/^   	uint64_t _num_miss_per_step;$/;"	m	class:MemoryController
_num_requests	mc.h	/^	uint64_t _num_requests;$/;"	m	class:MemoryController
_num_sets	mc.h	/^	uint32_t _num_sets;$/;"	m	class:TagBuffer
_num_sets	mc.h	/^	uint64_t _num_sets;$/;"	m	class:MemoryController
_num_steps	mc.h	/^   	uint32_t _num_steps;$/;"	m	class:MemoryController
_num_ways	mc.h	/^	uint32_t _num_ways;$/;"	m	class:TagBuffer
_num_ways	mc.h	/^	uint64_t _num_ways;$/;"	m	class:MemoryController
_os_placement_policy	mc.h	/^	OSPlacementPolicy * _os_placement_policy;$/;"	m	class:MemoryController
_os_quantum	mc.h	/^	uint64_t _os_quantum;$/;"	m	class:MemoryController
_page_placement_policy	mc.h	/^	PagePlacementPolicy * _page_placement_policy;$/;"	m	class:MemoryController
_placement_policy	page_placement.h	/^	RepScheme _placement_policy;$/;"	m	class:PagePlacementPolicy
_sample_rate	line_placement.h	/^   double _sample_rate;$/;"	m	class:LinePlacementPolicy
_sample_rate	page_placement.h	/^	double _sample_rate;$/;"	m	class:PagePlacementPolicy
_scheme	mc.h	/^	Scheme _scheme; $/;"	m	class:MemoryController
_scheme	page_placement.h	/^	Scheme _scheme;	$/;"	m	class:PagePlacementPolicy
_sram_tag	mc.h	/^	bool 	_sram_tag;$/;"	m	class:MemoryController
_statPtr	stats.h	/^        uint64_t* _statPtr;$/;"	m	class:ProxyStat
_tag_buffer	mc.h	/^	TagBuffer * _tag_buffer;$/;"	m	class:MemoryController
_tag_buffer	mc.h	/^	TagBufferEntry ** _tag_buffer;$/;"	m	class:TagBuffer
_tlb	filter_cache.h	/^		g_unordered_map <Address, Address> _tlb;$/;"	m	class:FilterCache
_tlb	mc.h	/^	g_unordered_map <Address, TLBEntry> _tlb;$/;"	m	class:MemoryController
_trace_dir	mc.h	/^	g_string _trace_dir;$/;"	m	class:MemoryController
_trace_dir	mem_ctrls.h	/^		g_string _trace_dir;$/;"	m	class:SimpleMemory
_type_trace	mc.h	/^	uint32_t _type_trace[10000];$/;"	m	class:MemoryController
_type_trace	mem_ctrls.h	/^		uint32_t _type_trace[10000];$/;"	m	class:SimpleMemory
a	ideal_arrays.h	/^                IdealLRUArray* a;$/;"	m	class:IdealLRUArray::ProxyReplPolicy
a	mem_ctrls.h	/^			char a[2000];$/;"	m	struct:SimpleMemory::Chunk
abspath	virt/fs.cpp	/^static string abspath(const string& path, const string& basepath) {$/;"	f	file:
acc	repl_policies.h	/^            uint64_t acc;$/;"	m	struct:LFUReplPolicy::LFUInfo
accAvgPowerReport	detailed_mem_params.h	/^        bool accAvgPowerReport;$/;"	m	class:MemParam
accLat	cache.h	/^        uint32_t accLat; \/\/latency of a normal access (could split in get\/put, probably not needed)$/;"	m	class:Cache
accTimes	repl_policies.h	/^        AccTimes* accTimes;$/;"	m	class:ProfViolReplPolicy
access	cache.cpp	/^uint64_t Cache::access(MemReq& req) {$/;"	f	class:Cache
access	ddr_mem.cpp	/^uint64_t DDRMemory::access(MemReq& req, int type, uint32_t data_size) {$/;"	f	class:DDRMemory
access	ddr_mem.h	/^        uint64_t access(MemReq& req) { return access(req, 0, 4); };$/;"	f	class:DDRMemory
access	detailed_mem.cpp	/^uint64_t MemControllerBase::access(MemReq& req) {$/;"	f	class:MemControllerBase
access	detailed_mem.cpp	/^void MemRankBase::access(uint64_t accessCycle, uint64_t issuedCycle, uint32_t row, uint32_t col, uint32_t bank, MemAccessType type) {$/;"	f	class:MemRankBase
access	dramsim_mem_ctrl.cpp	/^uint64_t DRAMSimMemory::access(MemReq& req) { panic("???"); return 0; }$/;"	f	class:DRAMSimMemory
access	dramsim_mem_ctrl.cpp	/^uint64_t DRAMSimMemory::access(MemReq& req) {$/;"	f	class:DRAMSimMemory
access	dramsim_mem_ctrl.cpp	/^uint64_t DRAMSimMemory::access(MemReq& req, int type, uint32_t data_size) { panic("???"); return 0; }$/;"	f	class:DRAMSimMemory
access	dramsim_mem_ctrl.cpp	/^uint64_t DRAMSimMemory::access(MemReq& req, int type, uint32_t data_size) {$/;"	f	class:DRAMSimMemory
access	dramsim_mem_ctrl.h	/^        uint64_t access(MemReq& req) {$/;"	f	class:SplitAddrMemory
access	mc.cpp	/^MemoryController::access(MemReq& req)$/;"	f	class:MemoryController
access	mem_ctrls.cpp	/^uint64_t MD1Memory::access(MemReq& req) {$/;"	f	class:MD1Memory
access	mem_ctrls.cpp	/^uint64_t SimpleMemory::access(MemReq& req) {$/;"	f	class:SimpleMemory
access	memory_hierarchy.h	/^        virtual uint64_t access(MemReq& req, int type, uint32_t data_size) { assert(false); }; \/\/ return access(req); };$/;"	f	class:MemObject
access	monitor.cpp	/^void UMonMonitor::access(uint32_t partition, Address lineAddr) {$/;"	f	class:UMonMonitor
access	prefetcher.cpp	/^uint64_t StreamPrefetcher::access(MemReq& req) {$/;"	f	class:StreamPrefetcher
access	timing_cache.cpp	/^uint64_t TimingCache::access(MemReq& req) {$/;"	f	class:TimingCache
access	trace_driver.h	/^        uint64_t access(MemReq& req) {panic("Should never be called");}$/;"	f	class:TraceDriverProxyCache
access	tracing_cache.cpp	/^uint64_t TracingCache::access(MemReq& req) {$/;"	f	class:TracingCache
access	utility_monitor.cpp	/^void UMon::access(Address lineAddr) {$/;"	f	class:UMon
access	weave_md1_mem.h	/^        uint64_t access(MemReq& req) {$/;"	f	class:WeaveMD1Memory
access	weave_md1_mem.h	/^        uint64_t access(MemReq& req) {$/;"	f	class:WeaveSimpleMemory
accessInRefresh	detailed_mem.h	/^        uint32_t accessInRefresh;$/;"	m	class:MemRankBase
accessLog	detailed_mem.h	/^        std::vector<std::pair<uint64_t, uint64_t> > accessLog;$/;"	m	class:MemChannelBase
accessLogDepth	detailed_mem_params.h	/^        uint32_t accessLogDepth;$/;"	m	class:MemParam
accessTypeNames	memory_hierarchy.cpp	/^static const char* accessTypeNames[] = {"GETS", "GETX", "PUTS", "PUTX"};$/;"	v	file:
access_count	page_placement.h	/^		uint32_t access_count;$/;"	m	struct:PagePlacementPolicy::ChunkInfo
accsLeft	timing_cache.cpp	/^        uint32_t accsLeft;$/;"	m	class:ReplAccessEvent	file:
actPre	detailed_mem.h	/^            uint64_t actPre;$/;"	m	struct:MemControllerBase::powerValue
action	scheduler.h	/^            FutexJoinAction action;$/;"	m	struct:Scheduler::FutexJoinInfo
activateCount	detailed_mem.h	/^        uint64_t activateCount;$/;"	m	class:MemRankBase
active	tick_event.h	/^        bool active;$/;"	m	class:TickEvent
activeMisses	timing_cache.h	/^        uint32_t numMSHRs, activeMisses;$/;"	m	class:TimingCache
activeThreads	zsim.cpp	/^bool activeThreads[MAX_THREADS];  \/\/ set in ThreadStart, reset in ThreadFini, we need this for exec() (see FollowChild)$/;"	v
actvPowerDownCycle	detailed_mem.h	/^        uint64_t actvPowerDownCycle;$/;"	m	class:MemRankBase
addActivation	ddr_mem.h	/^        inline void addActivation(uint64_t actCycle) {$/;"	f	class:ActWindow
addChild	process_tree.h	/^        void addChild(ProcessTreeNode* child) {$/;"	f	class:ProcessTreeNode
addChild	timing_event.h	/^        TimingEvent* addChild(TimingEvent* childEv, EventRecorder& evRec) {$/;"	f	class:TimingEvent
addChild	timing_event.h	/^        TimingEvent* addChild(TimingEvent* childEv, EventRecorder* evRec) {$/;"	f	class:TimingEvent
addIssueEvent	ooo_core_recorder.cpp	/^void OOOCoreRecorder::addIssueEvent(uint64_t evCycle) {$/;"	f	class:OOOCoreRecorder
add_segment	g_heap/dlmalloc.h.c	/^static void add_segment(mstate m, char* tbase, size_t tsize, flag_t mmapped) {$/;"	f	file:
addr	ddr_mem.cpp	/^        Address addr;$/;"	m	class:DDRMemoryAccEvent	file:
addr	ddr_mem.h	/^            Address addr;$/;"	m	struct:DDRMemory::Request
addr	decoder.h	/^    uint64_t addr;$/;"	m	struct:DynBbl
addr	detailed_mem.h	/^        Address addr;$/;"	m	class:MemAccessEventBase
addr	dramsim_mem_ctrl.cpp	/^        Address addr;$/;"	m	class:DRAMSimAccEvent	file:
addr	event_recorder.h	/^    Address addr;$/;"	m	struct:TimingRecord
addr	ooo_core.h	/^            Address addr;$/;"	m	struct:OOOCore::FwdEntry
addr	part_repl_policies.h	/^            Address addr; \/\/FIXME: This is redundant due to the replacement policy interface$/;"	m	struct:VantageReplPolicy::LineInfo
addr	part_repl_policies.h	/^            Address addr; \/\/FIXME: This is redundant due to the replacement policy interface$/;"	m	struct:WayPartReplPolicy::WayPartInfo
addr	utility_monitor.h	/^            Address addr;$/;"	m	struct:UMon::Node
addrTrace	detailed_mem_params.h	/^        bool addrTrace;$/;"	m	class:MemParam
addrTraceLog	detailed_mem.h	/^        gzFile addrTraceLog;$/;"	m	class:MemControllerBase
address	g_std/stl_galloc.h	/^        const_pointer address(const_reference x) const { return &x; }$/;"	f	class:StlGlobAlloc
address	g_std/stl_galloc.h	/^        pointer address(reference x) const { return &x; }$/;"	f	class:StlGlobAlloc
adjustEntryOrder	page_placement.cpp	/^PagePlacementPolicy::adjustEntryOrder(ChunkInfo * chunk_info, uint32_t idx)$/;"	f	class:PagePlacementPolicy
advance	ooo_core.cpp	/^void OOOCore::advance(uint64_t targetCycle) {$/;"	f	class:OOOCore
advancePos	ooo_core.h	/^        inline void advancePos(uint64_t& curCycle) {$/;"	f	class:WindowStructure
align_as_chunk	g_heap/dlmalloc.h.c	2184;"	d	file:
align_offset	g_heap/dlmalloc.h.c	1512;"	d	file:
aligned  -  _  -mutex Class Reference	latex/classaligned__mutex.tex	/^\\hypertarget{classaligned__mutex}{\\section{aligned\\-\\_\\-mutex Class Reference}$/;"	s
aligned_mutex	mutex.h	/^class aligned_mutex : public mutex {} ATTR_LINE_ALIGNED;$/;"	c
alloc	ddr_mem.h	/^        inline T* alloc() {$/;"	f	class:RequestQueue
alloc	event_recorder.h	/^        T* alloc() {$/;"	f	class:EventRecorder
alloc	event_recorder.h	/^        void* alloc(size_t sz) {$/;"	f	class:EventRecorder
alloc	prefetcher.h	/^            void alloc(uint64_t curCycle) {$/;"	f	struct:StreamPrefetcher::Entry
alloc	slab_alloc.h	/^        template <typename T> T* alloc() { return (T*)alloc(sizeof(T)); }$/;"	f	class:slab::SlabAlloc
alloc	slab_alloc.h	/^        void* alloc(size_t sz) {$/;"	f	class:slab::SlabAlloc
alloc	slab_alloc.h	/^    void* alloc(uint32_t bytes) {$/;"	f	struct:slab::Slab
allocPortion	partitioner.h	/^        double allocPortion;$/;"	m	class:Partitioner
allocSlab	slab_alloc.h	/^        void allocSlab() {$/;"	f	class:slab::SlabAlloc
allocate	g_std/stl_galloc.h	/^        pointer allocate(size_type n, const void * = 0) {$/;"	f	class:StlGlobAlloc
allocator	slab_alloc.h	/^    SlabAlloc* allocator;$/;"	m	struct:slab::Slab
annul	ddr_mem.cpp	/^        void annul() {$/;"	f	class:SchedEvent
anyReport	detailed_mem_params.h	/^        bool anyReport;$/;"	m	class:MemParam
append	stats.h	/^        void append(Stat* child) {$/;"	f	class:AggregateStat
approxInstrs	decoder.h	/^    uint32_t approxInstrs;$/;"	m	struct:DynBbl
approxInstrs	ooo_core.h	/^        uint64_t instrs, uops, bbls, approxInstrs, mispredBranches;$/;"	m	class:OOOCore
arena	g_heap/dlmalloc.h.c	/^  MALLINFO_FIELD_TYPE arena;    \/* non-mmapped space allocated from system *\/$/;"	m	struct:mallinfo	file:
arg0	scheduler.h	/^            const uint64_t arg0; \/\/ kept for reference$/;"	m	struct:Scheduler::FakeLeaveInfo
arg0	zsim.cpp	/^    ADDRINT arg0, arg1;$/;"	m	struct:VdsoPatchData	file:
arg1	scheduler.h	/^            const uint64_t arg1; \/\/ kept for reference$/;"	m	struct:Scheduler::FakeLeaveInfo
arg1	zsim.cpp	/^    ADDRINT arg0, arg1;$/;"	m	struct:VdsoPatchData	file:
args	pin_cmd.h	/^        g_vector<g_string> args;$/;"	m	class:PinCmd
array	cache.h	/^        CacheArray* array;$/;"	m	class:Cache
array	cache_arrays.h	/^        Address* array; \/\/maps line id to address$/;"	m	class:ZArray
array	cache_arrays.h	/^        Address* array;$/;"	m	class:SetAssocArray
array	coherence_ctrls.h	/^        Entry* array;$/;"	m	class:MESITopCC
array	coherence_ctrls.h	/^        MESIState* array;$/;"	m	class:MESIBottomCC
array	ideal_arrays.h	/^        Entry* array;$/;"	m	class:IdealLRUArray
array	ideal_arrays.h	/^        Entry* array;$/;"	m	class:IdealLRUPartReplPolicy
array	part_repl_policies.h	/^        LineInfo* array;$/;"	m	class:VantageReplPolicy
array	part_repl_policies.h	/^        WayPartInfo* array;$/;"	m	class:WayPartReplPolicy
array	prefetcher.h	/^        Entry* array;$/;"	m	class:StreamPrefetcher
array	prio_queue.h	/^        T* array[64];$/;"	m	struct:PrioQueue::PQBlock
array	repl_policies.h	/^        LFUInfo* array;$/;"	m	class:LFUReplPolicy
array	repl_policies.h	/^        uint32_t* array;$/;"	m	class:NRUReplPolicy
array	repl_policies.h	/^        uint64_t* array;$/;"	m	class:LRUReplPolicy
array	utility_monitor.h	/^        Node** array;$/;"	m	class:UMon
arrivalCycle	ddr_mem.h	/^            uint64_t arrivalCycle;  \/\/ in memCycles$/;"	m	struct:DDRMemory::Request
arrivalLock	zsim.cpp	/^        lock_t arrivalLock;$/;"	m	class:SyncEvent	file:
aslr	zsim_harness.cpp	/^bool perProcessDir, aslr;$/;"	v
assert	g_heap/dlmalloc.h.c	1352;"	d	file:
assert	g_heap/dlmalloc.h.c	1353;"	d	file:
assert	g_heap/dlmalloc.h.c	1359;"	d	file:
assert	log.h	174;"	d
assert	log.h	195;"	d
assert_msg	log.h	183;"	d
assert_msg	log.h	196;"	d
assoc	cache_arrays.h	/^        uint32_t assoc;$/;"	m	class:SetAssocArray
assoc	part_repl_policies.h	/^        uint32_t assoc;$/;"	m	class:VantageReplPolicy
atSyncFunc	scheduler.h	/^        void (*atSyncFunc)(void); \/\/executed by syncing thread while others are waiting. Good for non-thread-safe stuff$/;"	m	class:Scheduler
atomicInc	stats.h	/^        inline void atomicInc() {$/;"	f	class:Counter
atomicInc	stats.h	/^        inline void atomicInc(uint32_t idx) {$/;"	f	class:VectorCounter
atomicInc	stats.h	/^        inline void atomicInc(uint32_t idx, uint64_t delta) {$/;"	f	class:VectorCounter
atomicInc	stats.h	/^        inline void atomicInc(uint64_t delta) {$/;"	f	class:Counter
attachDebugger	zsim.h	/^    bool attachDebugger;$/;"	m	struct:GlobSimInfo
atw	trace_driver.h	/^        AccessTraceWriter* atw;$/;"	m	class:TraceDriver
atw	tracing_cache.h	/^        AccessTraceWriter* atw;$/;"	m	class:TracingCache
availCycle	filter_cache.h	/^            volatile uint64_t availCycle;$/;"	m	struct:FilterCache::FilterEntry
b	cache_arrays.h	/^    ZWalkInfo* b;$/;"	m	struct:ZCands
b	cache_arrays.h	/^    uint32_t b, e;$/;"	m	struct:SetAssocCands
back	intrusive_list.h	/^        T* back() const {return tail;}$/;"	f	class:InList
backend	stats.h	/^        HDF5BackendImpl* backend;$/;"	m	class:HDF5Backend
backend	stats.h	/^        TextBackendImpl* backend;$/;"	m	class:TextBackend
background	detailed_mem.h	/^            uint64_t background;$/;"	m	struct:MemControllerBase::powerValue
bandwidthReport	detailed_mem_params.h	/^        bool bandwidthReport;$/;"	m	class:MemParam
bank	ddr_mem.h	/^            uint32_t bank;$/;"	m	struct:DDRMemory::AddrLoc
bankCount	detailed_mem.h	/^        uint32_t bankCount;$/;"	m	class:MemRankBase
bankCount	detailed_mem_params.h	/^        uint32_t bankCount;$/;"	m	class:MemParam
bankMask	ddr_mem.h	/^        uint32_t bankShift, bankMask;$/;"	m	class:DDRMemory
bankShift	ddr_mem.h	/^        uint32_t bankShift, bankMask;$/;"	m	class:DDRMemory
bankWidth	detailed_mem_params.h	/^        uint32_t bankWidth;$/;"	m	class:MemParam
bankinfo	detailed_mem.h	/^        bool *bankinfo;$/;"	m	class:MemRankBase
banks	ddr_mem.h	/^        g_vector< g_vector<Bank> > banks; \/\/ indexed by rank, bank$/;"	m	class:DDRMemory
banksPerRank	ddr_mem.h	/^        const uint32_t lineSize, ranksPerChannel, banksPerRank;$/;"	m	class:DDRMemory
bar	scheduler.h	/^        Barrier bar;$/;"	m	class:Scheduler
base	g_heap/dlmalloc.h.c	/^  char*        base;             \/* base address *\/$/;"	m	struct:malloc_segment	file:
base_regp	galloc.cpp	/^    volatile void* base_regp; \/\/common data structure, accessible with glob_ptr; threads poll on gm_isready to determine when everything has been initialized$/;"	m	struct:gm_segment	file:
bbl	null_core.cpp	/^void NullCore::bbl(BblInfo* bblInfo) {$/;"	f	class:NullCore
bbl	ooo_core.cpp	/^inline void OOOCore::bbl(Address bblAddr, BblInfo* bblInfo) {$/;"	f	class:OOOCore
bbl	simple_core.cpp	/^void SimpleCore::bbl(Address bblAddr, BblInfo* bblInfo) {$/;"	f	class:SimpleCore
bblAndRecord	timing_core.cpp	/^void TimingCore::bblAndRecord(Address bblAddr, BblInfo* bblInfo) {$/;"	f	class:TimingCore
bblApproxOpcodes	decoder.cpp	/^static std::vector<uint32_t>* bblApproxOpcodes[MAX_BBLS];$/;"	v	file:
bblCount	decoder.cpp	/^static uint64_t bblCount[MAX_BBLS];$/;"	v	file:
bblIdx	decoder.cpp	/^static uint64_t bblIdx = 0;$/;"	v	file:
bblIdx	decoder.h	/^    uint64_t bblIdx;$/;"	m	struct:DynBbl
bblIdxLock	decoder.cpp	/^static lock_t bblIdxLock = 0;$/;"	v	file:
bblPtr	core.h	/^    void (*bblPtr)(THREADID, ADDRINT, BblInfo*);$/;"	m	struct:InstrFuncPtrs
bbls	ooo_core.h	/^        uint64_t instrs, uops, bbls, approxInstrs, mispredBranches;$/;"	m	class:OOOCore
bcc	coherence_ctrls.h	/^        MESIBottomCC* bcc;$/;"	m	class:MESICC
bcc	coherence_ctrls.h	/^        MESIBottomCC* bcc;$/;"	m	class:MESITerminalCC
begin	cache_arrays.h	/^    inline iterator begin() const {return iterator(b);}$/;"	f	struct:SetAssocCands
begin	cache_arrays.h	/^    inline iterator begin() const {return iterator(b);}$/;"	f	struct:ZCands
begin	ddr_mem.h	/^        inline iterator begin() const {return iterator(reqList.front());}$/;"	f	class:RequestQueue
bestCandidate	repl_policies.h	/^        int32_t bestCandidate; \/\/ id$/;"	m	class:LFUReplPolicy
bestId	part_repl_policies.h	/^        int32_t bestId;$/;"	m	class:WayPartReplPolicy
bestRank	repl_policies.h	/^        Rank bestRank;$/;"	m	class:LFUReplPolicy
bhsr	ooo_core.h	/^        uint32_t bhsr[1 << NB];$/;"	m	class:BranchPredictorPAg
bin_find	g_heap/dlmalloc.h.c	/^static int bin_find(mstate m, mchunkptr x) {$/;"	f	file:
bindex_t	g_heap/dlmalloc.h.c	/^typedef unsigned int bindex_t;         \/* Described below *\/$/;"	t	file:
binmap_t	g_heap/dlmalloc.h.c	/^typedef unsigned int binmap_t;         \/* Described below *\/$/;"	t	file:
bit_for_tree_index	g_heap/dlmalloc.h.c	2848;"	d	file:
bk	g_heap/dlmalloc.h.c	/^  struct malloc_chunk* bk;$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk	file:
bk	g_heap/dlmalloc.h.c	/^  struct malloc_tree_chunk* bk;$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:
blockingSyscalls	scheduler.h	/^        g_vector< g_unordered_set<uint64_t> > blockingSyscalls;$/;"	m	class:Scheduler
blockingSyscalls	zsim.h	/^    bool blockingSyscalls;$/;"	m	struct:GlobSimInfo
blocks	prio_queue.h	/^    PQBlock blocks[B];$/;"	m	class:PrioQueue
boundLatency	weave_md1_mem.h	/^        const uint32_t boundLatency;$/;"	m	class:WeaveMD1Memory
branch	ooo_core.cpp	/^void OOOCore::branch(Address pc, bool taken, Address takenNpc, Address notTakenNpc) {$/;"	f	class:OOOCore
branchNotTakenNpc	ooo_core.h	/^        Address branchNotTakenNpc;$/;"	m	class:OOOCore
branchPc	ooo_core.h	/^        Address branchPc;  \/\/0 if last bbl was not a conditional branch$/;"	m	class:OOOCore
branchPred	ooo_core.h	/^        BranchPredictorPAg<11, 18, 14> branchPred;$/;"	m	class:OOOCore
branchPtr	core.h	/^    void (*branchPtr)(THREADID, ADDRINT, BOOL, ADDRINT, ADDRINT);$/;"	m	struct:InstrFuncPtrs
branchTaken	ooo_core.h	/^        bool branchTaken;$/;"	m	class:OOOCore
branchTakenNpc	ooo_core.h	/^        Address branchTakenNpc;$/;"	m	class:OOOCore
bssAddr	debug.h	/^    void* bssAddr;$/;"	m	struct:LibInfo
bts	part_repl_policies.h	/^            uint64_t bts; \/\/coarse-grain per-partition timestamp$/;"	m	struct:VantageReplPolicy::LineInfo
buckets	partitioner.h	/^        uint32_t buckets;$/;"	m	class:LookaheadPartitioner
buckets	partitioner.h	/^        uint32_t buckets;$/;"	m	class:PartitionMonitor
buckets	utility_monitor.h	/^        uint32_t buckets; \/\/umon ways$/;"	m	class:UMon
buf	access_tracing.h	/^        PackedAccessRecord* buf;$/;"	m	class:AccessTraceReader
buf	access_tracing.h	/^        PackedAccessRecord* buf;$/;"	m	class:AccessTraceWriter
buf	ddr_mem.h	/^        g_vector<uint64_t> buf;$/;"	m	class:ActWindow
buf	ooo_core.h	/^        uint64_t buf[SZ];$/;"	m	class:CycleQueue
buf	ooo_core.h	/^        uint64_t buf[SZ];$/;"	m	class:ReorderBuffer
buf	proc_stats.h	/^        uint64_t* buf;$/;"	m	class:ProcStats
buf	slab_alloc.h	/^    char buf[SLAB_SIZE - sizeof(SlabAlloc*) - sizeof(volatile uint32_t) - sizeof(uint32_t)];$/;"	m	struct:slab::Slab
bufSize	proc_stats.h	/^        uint64_t bufSize;$/;"	m	class:ProcStats
bufferedRecords	hdf5_stats.cpp	/^        uint32_t bufferedRecords; \/\/number of records buffered (dumped w\/o being written), <= recordsPerWrite$/;"	m	class:HDF5BackendImpl	file:
burst	detailed_mem.h	/^            uint64_t burst;$/;"	m	struct:MemControllerBase::powerValue
bwCounterNum	detailed_mem.h	/^        static const uint32_t bwCounterNum = 4;$/;"	m	class:MemControllerBase
byteOffsetWidth	detailed_mem_params.h	/^        uint32_t byteOffsetWidth;$/;"	m	class:MemParam
bytes	core.h	/^    uint32_t bytes;$/;"	m	struct:BblInfo
bytes	decoder.h	/^    static uint32_t bytes(uint32_t uops) {$/;"	f	struct:DynBbl
bytesReads	ddr_mem.h	/^		Counter bytesReads, bytesWrites;$/;"	m	class:DDRMemory
bytesWrites	ddr_mem.h	/^		Counter bytesReads, bytesWrites;$/;"	m	class:DDRMemory
c	g_heap/dlmalloc.h.c	/^  unsigned int c;$/;"	m	struct:pthread_mlock_t	file:
c	g_heap/dlmalloc.h.c	/^  unsigned int c;$/;"	m	struct:win32_mlock_t	file:
cRec	core_recorder.cpp	/^        CoreRecorder* cRec;$/;"	m	class:TimingCoreEvent	file:
cRec	ooo_core.h	/^        OOOCoreRecorder cRec;$/;"	m	class:OOOCore
cRec	ooo_core_recorder.cpp	/^        OOOCoreRecorder* cRec;  \/\/ used to track whether event has finished$/;"	m	class:OOORespEvent	file:
cRec	ooo_core_recorder.cpp	/^        OOOCoreRecorder* cRec;$/;"	m	class:OOOIssueEvent	file:
cRec	timing_core.h	/^        CoreRecorder cRec;$/;"	m	class:TimingCore
cSimEnd	core_recorder.cpp	/^uint64_t CoreRecorder::cSimEnd(uint64_t curCycle) {$/;"	f	class:CoreRecorder
cSimEnd	ooo_core.cpp	/^void OOOCore::cSimEnd() {$/;"	f	class:OOOCore
cSimEnd	ooo_core_recorder.cpp	/^uint64_t OOOCoreRecorder::cSimEnd(uint64_t curCycle) {$/;"	f	class:OOOCoreRecorder
cSimEnd	timing_core.h	/^        void cSimEnd() {curCycle = cRec.cSimEnd(curCycle);}$/;"	f	class:TimingCore
cSimStart	core_recorder.cpp	/^uint64_t CoreRecorder::cSimStart(uint64_t curCycle) {$/;"	f	class:CoreRecorder
cSimStart	ooo_core.cpp	/^void OOOCore::cSimStart() {$/;"	f	class:OOOCore
cSimStart	ooo_core_recorder.cpp	/^uint64_t OOOCoreRecorder::cSimStart(uint64_t curCycle) {$/;"	f	class:OOOCoreRecorder
cSimStart	timing_core.h	/^        void cSimStart() {curCycle = cRec.cSimStart(curCycle);}$/;"	f	class:TimingCore
cStore	trace_driver.h	/^            std::unordered_map<Address, MESIState> cStore; \/\/holds current sets of lines for each child. Needs to support an arbitrary set, hence the hash table$/;"	m	struct:TraceDriver::ChildInfo
cache	timing_cache.cpp	/^        TimingCache* cache;$/;"	m	class:HitEvent	file:
cache	timing_cache.cpp	/^        TimingCache* cache;$/;"	m	class:MissResponseEvent	file:
cache	timing_cache.cpp	/^        TimingCache* cache;$/;"	m	class:MissStartEvent	file:
cache	timing_cache.cpp	/^        TimingCache* cache;$/;"	m	class:MissWritebackEvent	file:
cache	timing_cache.cpp	/^        TimingCache* cache;$/;"	m	class:ReplAccessEvent	file:
cacheLineSize	detailed_mem.h	/^        uint32_t cacheLineSize;$/;"	m	class:MemControllerBase
cacheLineSize	detailed_mem_params.h	/^        uint32_t cacheLineSize;$/;"	m	class:MemParam
callback	event_queue.h	/^        void callback() {$/;"	f	class:AdaptiveEvent
callback	partitioner.h	/^                void callback() { part->partition(); }$/;"	f	class:Partitioner::PartitionEvent
callback	scheduler.h	/^        virtual void callback() {$/;"	f	class:Scheduler
callback	zsim.cpp	/^        void callback() {$/;"	f	class:SyncEvent
called	timing_event.h	/^        volatile bool called;$/;"	m	class:CrossingEvent
calloc_must_clear	g_heap/dlmalloc.h.c	2257;"	d	file:
calloc_must_clear	g_heap/dlmalloc.h.c	2259;"	d	file:
canFuse	decoder.cpp	/^bool Decoder::canFuse(INS ins) {$/;"	f	class:Decoder
canInsert	mc.cpp	/^TagBuffer::canInsert(Address tag)$/;"	f	class:TagBuffer
canInsert	mc.cpp	/^TagBuffer::canInsert(Address tag1, Address tag2)$/;"	f	class:TagBuffer
candArray	repl_policies.h	/^        uint32_t* candArray;$/;"	m	class:NRUReplPolicy
candArray	repl_policies.h	/^        uint32_t* candArray;$/;"	m	class:RandReplPolicy
candArray	repl_policies.h	/^        uint32_t* candArray;$/;"	m	class:TreeLRUReplPolicy
candIdx	part_repl_policies.h	/^        uint32_t candIdx;$/;"	m	class:VantageReplPolicy
candIdx	part_repl_policies.h	/^        uint32_t candIdx;$/;"	m	class:WayPartReplPolicy
candIdx	repl_policies.h	/^        uint32_t candIdx;$/;"	m	class:NRUReplPolicy
candIdx	repl_policies.h	/^        uint32_t candIdx;$/;"	m	class:RandReplPolicy
candIdx	repl_policies.h	/^        uint32_t candIdx;$/;"	m	class:TreeLRUReplPolicy
candList	part_repl_policies.h	/^        uint32_t* candList;$/;"	m	class:VantageReplPolicy
candVal	repl_policies.h	/^        uint32_t candVal;$/;"	m	class:NRUReplPolicy
candVal	repl_policies.h	/^        uint32_t candVal;$/;"	m	class:RandReplPolicy
cands	cache_arrays.h	/^        uint32_t cands;$/;"	m	class:ZArray
cands	timing_cache.h	/^        uint32_t tagLat, ways, cands;$/;"	m	class:TimingCache
cc	cache.h	/^        CC* cc;$/;"	m	class:Cache
cc	ideal_arrays.h	/^        CC* cc;$/;"	m	class:IdealLRUArray
cc	repl_policies.h	/^        CC* cc; \/\/coherence controller, used to figure out whether candidates are valid or number of sharers$/;"	m	class:ReplPolicy
ccLock	coherence_ctrls.h	/^        lock_t ccLock;$/;"	m	class:MESIBottomCC
ccLock	coherence_ctrls.h	/^        lock_t ccLock;$/;"	m	class:MESITopCC
ce	timing_event.h	/^                CrossingEvent* ce;$/;"	m	class:CrossingEvent::CrossingSrcEvent
change_mparam	g_heap/dlmalloc.h.c	/^static int change_mparam(int param_number, int value) {$/;"	f	file:
channelCount	detailed_mem_params.h	/^        uint32_t channelCount;$/;"	m	class:MemParam
channelDataWidth	detailed_mem_params.h	/^        uint32_t channelDataWidth; \/\/ Data bus bits (= JEDEC_BUS_WIDTH)$/;"	m	class:MemParam
channelDataWidthLog	detailed_mem_params.h	/^        uint32_t channelDataWidthLog; \/\/ ilog2(Datawdith \/ 8)$/;"	m	class:MemParam
channelWidth	detailed_mem_params.h	/^        uint32_t channelWidth;$/;"	m	class:MemParam
checkDomain	timing_event.cpp	/^void TimingEvent::checkDomain(TimingEvent* ch) {$/;"	f	class:TimingEvent
checkEndPhase	barrier.h	/^        inline void checkEndPhase(uint32_t tid) {$/;"	f	class:Barrier
checkIncluded	config.cpp	/^static uint32_t checkIncluded(libconfig::Setting& s1, libconfig::Setting& s2, std::string prefix) {$/;"	f	file:
checkRunList	barrier.h	/^        inline void checkRunList(uint32_t tid) {$/;"	f	class:Barrier
check_free_chunk	g_heap/dlmalloc.h.c	2742;"	d	file:
check_free_chunk	g_heap/dlmalloc.h.c	2750;"	d	file:
check_inuse_chunk	g_heap/dlmalloc.h.c	2743;"	d	file:
check_inuse_chunk	g_heap/dlmalloc.h.c	2751;"	d	file:
check_malloc_state	g_heap/dlmalloc.h.c	2746;"	d	file:
check_malloc_state	g_heap/dlmalloc.h.c	2755;"	d	file:
check_malloced_chunk	g_heap/dlmalloc.h.c	2744;"	d	file:
check_malloced_chunk	g_heap/dlmalloc.h.c	2753;"	d	file:
check_mmapped_chunk	g_heap/dlmalloc.h.c	2745;"	d	file:
check_mmapped_chunk	g_heap/dlmalloc.h.c	2754;"	d	file:
check_top_chunk	g_heap/dlmalloc.h.c	2747;"	d	file:
check_top_chunk	g_heap/dlmalloc.h.c	2752;"	d	file:
checkpoint	log.h	199;"	d
child	g_heap/dlmalloc.h.c	/^  struct malloc_tree_chunk* child[2];$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:
child	prefetcher.h	/^        BaseCache* child;$/;"	m	class:StreamPrefetcher
child	timing_event.h	/^            TimingEvent* child;$/;"	m	union:TimingEvent::__anon12
childId	access_tracing.h	/^    uint16_t childId;$/;"	m	struct:PackedAccessRecord
childId	access_tracing.h	/^    uint32_t childId;$/;"	m	struct:AccessRecord
childId	memory_hierarchy.h	/^    uint32_t childId;$/;"	m	struct:MemReq
childId	prefetcher.h	/^        uint32_t childId;$/;"	m	class:StreamPrefetcher
childInfo	zsim_harness.cpp	/^ProcInfo childInfo[MAX_CHILDREN];$/;"	v
childLock	memory_hierarchy.h	/^    lock_t* childLock;$/;"	m	struct:MemReq
children	coherence_ctrls.h	/^        g_vector<BaseCache*> children;$/;"	m	class:MESITopCC
children	process_tree.h	/^        g_vector<ProcessTreeNode*> children;$/;"	m	class:ProcessTreeNode
children	timing_event.h	/^            TimingEventBlock* children;$/;"	m	union:TimingEvent::__anon12
children	trace_driver.h	/^        ChildInfo* children;$/;"	m	class:TraceDriver
childrenRTTs	coherence_ctrls.h	/^        g_vector<uint32_t> childrenRTTs;$/;"	m	class:MESITopCC
chipCapacity	detailed_mem_params.h	/^        uint32_t chipCapacity; \/\/ megabits$/;"	m	class:MemParam
chipCountPerRank	detailed_mem_params.h	/^        uint32_t chipCountPerRank;$/;"	m	class:MemParam
chldSigHandler	zsim_harness.cpp	/^void chldSigHandler(int sig) {$/;"	f
chnls	detailed_mem.h	/^        g_vector <MemChannelBase*> chnls;$/;"	m	class:MemControllerBase
chunk2mem	g_heap/dlmalloc.h.c	2181;"	d	file:
chunk_minus_offset	g_heap/dlmalloc.h.c	2230;"	d	file:
chunk_plus_offset	g_heap/dlmalloc.h.c	2229;"	d	file:
chunksize	g_heap/dlmalloc.h.c	2224;"	d	file:
cid	scheduler.h	/^            uint32_t cid; \/\/only current if RUNNING; otherwise, it's the last one used.$/;"	m	struct:Scheduler::ThreadInfo
cid	scheduler.h	/^            uint32_t cid;$/;"	m	struct:Scheduler::ContextInfo
cids	zsim.cpp	/^static uint32_t cids[MAX_THREADS];$/;"	v	file:
cinuse	g_heap/dlmalloc.h.c	2219;"	d	file:
clear	coherence_ctrls.h	/^            void clear() {$/;"	f	struct:MESITopCC::Entry
clear	decoder.cpp	/^void DynUop::clear() {$/;"	f	class:DynUop
clear	event_recorder.h	/^    void clear() { startEvent = nullptr; }$/;"	f	struct:TimingRecord
clear	filter_cache.h	/^            void clear() {wrAddr = 0; rdAddr = 0; availCycle = 0;}$/;"	f	struct:FilterCache::FilterEntry
clear	slab_alloc.h	/^    void clear() {$/;"	f	struct:slab::Slab
clearCid	zsim.cpp	/^static inline void clearCid(uint32_t tid) {$/;"	f	file:
clearStats	page_placement.cpp	/^PagePlacementPolicy::clearStats()$/;"	f	class:PagePlacementPolicy
clearTagBuffer	mc.cpp	/^TagBuffer::clearTagBuffer() $/;"	f	class:TagBuffer
clear_pinuse	g_heap/dlmalloc.h.c	2226;"	d	file:
clear_smallmap	g_heap/dlmalloc.h.c	2869;"	d	file:
clear_treemap	g_heap/dlmalloc.h.c	2873;"	d	file:
clockDomain	process_tree.h	/^        const uint32_t clockDomain;$/;"	m	class:ProcessTreeNode
clockDomainInfo	zsim.h	/^    ClockDomainInfo clockDomainInfo[MAX_CLOCK_DOMAINS];$/;"	m	struct:GlobSimInfo
closedPage	ddr_mem.h	/^        const bool closedPage;$/;"	m	class:DDRMemory
cmd	pin_cmd.h	/^            g_string cmd;$/;"	m	struct:PinCmd::ProcCmdInfo
col	ddr_mem.h	/^            uint32_t col;$/;"	m	struct:DDRMemory::AddrLoc
colAddrWidth	detailed_mem_params.h	/^        uint32_t colAddrWidth;$/;"	m	class:MemParam
colMask	ddr_mem.h	/^        uint32_t colShift, colMask;$/;"	m	class:DDRMemory
colShift	ddr_mem.h	/^        uint32_t colShift, colMask;$/;"	m	class:DDRMemory
compactPeriodicStats	zsim.h	/^    bool compactPeriodicStats;$/;"	m	struct:GlobSimInfo
compareCounter	page_placement.cpp	/^PagePlacementPolicy::compareCounter(ChunkEntry * entry1, ChunkEntry * entry2)$/;"	f	class:PagePlacementPolicy
computeBestPartitioning	lookahead.cpp	/^void computeBestPartitioning($/;"	f	namespace:lookahead
computeFreqDistr	page_placement.cpp	/^PagePlacementPolicy::computeFreqDistr()$/;"	f	class:PagePlacementPolicy
computePartitioningTotalUtility	lookahead.cpp	/^uint64_t computePartitioningTotalUtility($/;"	f	namespace:lookahead
compute_bit2idx	g_heap/dlmalloc.h.c	2888;"	d	file:
compute_bit2idx	g_heap/dlmalloc.h.c	2896;"	d	file:
compute_bit2idx	g_heap/dlmalloc.h.c	2904;"	d	file:
compute_bit2idx	g_heap/dlmalloc.h.c	2912;"	d	file:
compute_bit2idx	g_heap/dlmalloc.h.c	2915;"	d	file:
compute_tree_index	g_heap/dlmalloc.h.c	2784;"	d	file:
compute_tree_index	g_heap/dlmalloc.h.c	2799;"	d	file:
compute_tree_index	g_heap/dlmalloc.h.c	2813;"	d	file:
compute_tree_index	g_heap/dlmalloc.h.c	2828;"	d	file:
conf	prefetcher.h	/^            SatCounter<3, 2, 1> conf;$/;"	m	struct:StreamPrefetcher::Entry
const_pointer	g_std/stl_galloc.h	/^        typedef const T* const_pointer;$/;"	t	class:StlGlobAlloc
const_reference	g_std/stl_galloc.h	/^        typedef const T& const_reference;$/;"	t	class:StlGlobAlloc
constraints	detailed_mem_params.h	/^        int32_t constraints[4];$/;"	m	class:MemParam
construct	g_std/stl_galloc.h	/^        void construct(_Up* __p, _Args&&... __args) { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }$/;"	f	class:StlGlobAlloc
construct	g_std/stl_galloc.h	/^        void construct(pointer p) { construct(p, value_type()); } \/\/required by gcc 4.6$/;"	f	class:StlGlobAlloc
construct	g_std/stl_galloc.h	/^        void construct(pointer p, const T& val) { new (static_cast<T*>(p)) T(val); }$/;"	f	class:StlGlobAlloc
contentionSim	zsim.h	/^    ContentionSim* contentionSim;$/;"	m	struct:GlobSimInfo
contextSwitch	filter_cache.h	/^        void contextSwitch() {$/;"	f	class:FilterCache
contextSwitch	null_core.cpp	/^void NullCore::contextSwitch(int32_t gid) {}$/;"	f	class:NullCore
contextSwitch	ooo_core.cpp	/^void OOOCore::contextSwitch(int32_t gid) {$/;"	f	class:OOOCore
contextSwitch	simple_core.cpp	/^void SimpleCore::contextSwitch(int32_t gid) {$/;"	f	class:SimpleCore
contextSwitch	timing_core.cpp	/^void TimingCore::contextSwitch(int32_t gid) {$/;"	f	class:TimingCore
contexts	scheduler.h	/^        g_vector<ContextInfo> contexts;$/;"	m	class:Scheduler
controllerLatency	detailed_mem_params.h	/^        uint32_t controllerLatency;$/;"	m	class:MemParam
controllerSysLatency	ddr_mem.h	/^        const uint32_t controllerSysLatency;  \/\/ in sysCycles$/;"	m	class:DDRMemory
convertToId	html/search/search.js	/^function convertToId(search)$/;"	f
copyNonSimVars	config.cpp	/^static uint32_t copyNonSimVars(libconfig::Setting& s1, libconfig::Setting& s2, std::string prefix) {$/;"	f	file:
coreStats	proc_stats.h	/^        AggregateStat* coreStats;  \/\/ each member must be a regular aggregate with numCores elems$/;"	m	class:ProcStats
cores	zsim.cpp	/^Core* cores[MAX_THREADS];$/;"	v
cores	zsim.h	/^    Core** cores;$/;"	m	struct:GlobSimInfo
count	breakdown_stats.h	/^        inline virtual uint64_t count(uint32_t idx) const {$/;"	f	class:CycleBreakdownStat
count	mc.h	/^   uint64_t count; \/\/ for OS based placement policy$/;"	m	class:TLBEntry
count	ooo_core.h	/^            uint8_t count;$/;"	m	struct:WindowStructure::WinCycle
count	page_placement.h	/^		uint32_t count;$/;"	m	struct:PagePlacementPolicy::ChunkEntry
count	prefetcher.h	/^        int32_t count;$/;"	m	class:SatCounter
count	proc_stats.cpp	/^        uint64_t count(uint32_t idx) const {$/;"	f	class:ProcStats::ProcessVectorCounter
count	profile_stats.h	/^        inline virtual uint64_t count(uint32_t idx) const {$/;"	f	class:TimeBreakdownStat
count	stats.h	/^        inline virtual uint64_t count(uint32_t idx) const {$/;"	f	class:VectorCounter
count	stats.h	/^        uint64_t count(uint32_t idx) const { \/\/dsm: Interestingly, this compiles even if f() is not const. gcc may catch this eventually...$/;"	f	class:LambdaVectorStat
counter	prefetcher.h	/^        uint32_t counter() const { return count; }$/;"	f	class:SatCounter
counterName	stats.h	/^        inline const char* counterName(uint32_t idx) const {$/;"	f	class:VectorStat
cpe	timing_event.h	/^        CrossingSrcEvent cpe;$/;"	m	class:CrossingEvent
cpuenumCpu	cpuenum.h	/^inline uint32_t cpuenumCpu(uint32_t pid, uint32_t cid) {$/;"	f
cpuenumMask	cpuenum.h	/^inline std::vector<bool> cpuenumMask(uint32_t pid) {$/;"	f
cpuenumNumCpus	cpuenum.h	/^inline uint32_t cpuenumNumCpus(uint32_t pid) {$/;"	f
cpuidEax	zsim.cpp	/^static uint32_t cpuidEax[MAX_THREADS];$/;"	v	file:
cpuidEcx	zsim.cpp	/^static uint32_t cpuidEcx[MAX_THREADS];$/;"	v	file:
cpuid_core2	cpuid.h	/^CpuIdRecord cpuid_core2[] = { \/\/ 2-socket Xeon E5335 (2x4 cores, core2 arch, 2.00GHz)$/;"	v
createResults	html/search/search.js	/^function createResults()$/;"	f
create_mspace	g_heap/dlmalloc.h.c	/^mspace create_mspace(size_t capacity, int locked) {$/;"	f
create_mspace_with_base	g_heap/dlmalloc.h.c	/^mspace create_mspace_with_base(void* base, size_t capacity, int locked) {$/;"	f
crossingStack	event_recorder.h	/^        CrossingStack crossingStack;$/;"	m	class:EventRecorder
ctxt	virt/common.h	/^    CONTEXT* ctxt;$/;"	m	struct:PostPatchArgs
ctxt	virt/common.h	/^    CONTEXT* ctxt;$/;"	m	struct:PrePatchArgs
cur	access_tracing.h	/^        uint32_t cur;$/;"	m	class:AccessTraceReader
cur	access_tracing.h	/^        uint32_t cur;$/;"	m	class:AccessTraceWriter
curAllocs	partitioner.h	/^        uint32_t* curAllocs;$/;"	m	class:LookaheadPartitioner
curAvgPowerReport	detailed_mem_params.h	/^        bool curAvgPowerReport;$/;"	m	class:MemParam
curBlock	prio_queue.h	/^    uint64_t curBlock;$/;"	m	class:PrioQueue
curBts	part_repl_policies.h	/^            uint64_t curBts; \/\/per-partition coarse-grain timestamp (CurrentTS in paper)$/;"	m	struct:VantageReplPolicy::VantagePartInfo
curBtsHits	part_repl_policies.h	/^            uint32_t curBtsHits; \/\/hits on current timestamp (AccessCounter in paper)$/;"	m	struct:VantageReplPolicy::VantagePartInfo
curChildren	process_tree.h	/^        volatile uint32_t curChildren;$/;"	m	class:ProcessTreeNode
curCycle	contention_sim.h	/^            volatile uint64_t curCycle;$/;"	m	struct:ContentionSim::DomainData
curCycle	dramsim_mem_ctrl.h	/^        uint64_t curCycle; \/\/processor cycle, used in callbacks$/;"	m	class:DRAMSimMemory
curCycle	null_core.h	/^        uint64_t curCycle;$/;"	m	class:NullCore
curCycle	ooo_core.h	/^        uint64_t curCycle; \/\/this model is issue-centric; curCycle refers to the current issue cycle$/;"	m	class:OOOCore
curCycle	simple_core.h	/^        uint64_t curCycle;$/;"	m	class:SimpleCore
curCycle	timing_core.h	/^        uint64_t curCycle; \/\/phase 1 clock$/;"	m	class:TimingCore
curCycleIssuedUops	ooo_core.h	/^        uint32_t curCycleIssuedUops; \/\/for uop issue limits$/;"	m	class:OOOCore
curCycleRFReads	ooo_core.h	/^        uint32_t curCycleRFReads; \/\/for RF read stalls$/;"	m	class:OOOCore
curCycleRetires	ooo_core.h	/^        uint32_t curCycleRetires;$/;"	m	class:ReorderBuffer
curFrameRecord	access_tracing.h	/^        uint64_t curFrameRecord;$/;"	m	class:AccessTraceReader
curId	ooo_core_recorder.h	/^        uint64_t curId;$/;"	m	class:OOOCoreRecorder
curIntervalCands	part_repl_policies.h	/^            uint32_t curIntervalCands; \/\/ CandsSeen in paper$/;"	m	struct:VantageReplPolicy::VantagePartInfo
curIntervalDems	part_repl_policies.h	/^            uint32_t curIntervalDems; \/\/ CandsDemoted in paper$/;"	m	struct:VantageReplPolicy::VantagePartInfo
curIntervalIns	part_repl_policies.h	/^            uint32_t curIntervalIns; \/\/ insertions in current interval. Not currently used.$/;"	m	struct:VantageReplPolicy::VantagePartInfo
curLatency	mem_ctrls.h	/^        uint32_t curLatency;$/;"	m	class:MD1Memory
curMisses	utility_monitor.h	/^        uint64_t curMisses;$/;"	m	class:UMon
curPhase	scheduler.h	/^        uint64_t curPhase;$/;"	m	class:Scheduler
curPhaseAccesses	mem_ctrls.h	/^        uint32_t curPhaseAccesses;$/;"	m	class:MD1Memory
curPos	ooo_core.h	/^        uint32_t curPos;$/;"	m	class:WindowStructure
curPtr	hdf5_stats.cpp	/^        uint64_t* curPtr; \/\/points to next element to write in dump$/;"	m	class:HDF5BackendImpl	file:
curRetireCycle	ooo_core.h	/^        uint64_t curRetireCycle;$/;"	m	class:ReorderBuffer
curRowHits	ddr_mem.h	/^            uint64_t curRowHits;    \/\/ row hits on the currently opened row$/;"	m	struct:DDRMemory::Bank
curSize	stats.h	/^        uint32_t curSize() const {$/;"	f	class:AggregateStat
curSlab	slab_alloc.h	/^        Slab* curSlab;$/;"	m	class:slab::SlabAlloc
curState	breakdown_stats.h	/^        uint32_t curState;$/;"	m	class:CycleBreakdownStat
curState	profile_stats.h	/^        uint32_t curState;$/;"	m	class:TimeBreakdownStat
curThread	scheduler.h	/^            ThreadInfo* curThread; \/\/only current if used, otherwise nullptr$/;"	m	struct:Scheduler::ContextInfo
curThreadIdx	barrier.h	/^        uint32_t curThreadIdx;$/;"	m	class:Barrier
curWayHits	utility_monitor.h	/^        uint64_t* curWayHits;$/;"	m	class:UMon
curWin	ooo_core.h	/^        WinCycle* curWin;$/;"	m	class:WindowStructure
cycle	contention_sim.h	/^            uint64_t cycle;$/;"	m	struct:ContentionSim::CrossingEventInfo
cycle	memory_hierarchy.h	/^    uint64_t cycle; \/\/cycle where request arrives at component$/;"	m	struct:MemReq
cycle	memory_hierarchy.h	/^    uint64_t cycle;$/;"	m	struct:InvReq
cycle	timing_event.h	/^        uint64_t cycle;$/;"	m	class:TimingEvent
cyclesToNs	virt/time_conv.h	/^static inline uint64_t cyclesToNs(uint64_t cycles) {$/;"	f
dataAddr	debug.h	/^    void* dataAddr;$/;"	m	struct:LibInfo
dataBuf	hdf5_stats.cpp	/^        uint64_t* dataBuf; \/\/buffered record data$/;"	m	class:HDF5BackendImpl	file:
dataBusWidth	detailed_mem_params.h	/^        uint32_t dataBusWidth;$/;"	m	class:MemParam
data_size	ddr_mem.cpp	/^		uint32_t data_size;$/;"	m	class:DDRMemoryAccEvent	file:
data_size	ddr_mem.h	/^			uint32_t data_size; \/\/ access data size. 1 for cacheline, 64 for page$/;"	m	struct:DDRMemory::Request
deallocate	g_std/stl_galloc.h	/^        void deallocate(void* p, size_type) {$/;"	f	class:StlGlobAlloc
debugSigHandler	zsim_harness.cpp	/^void debugSigHandler(int signum, siginfo_t* siginfo, void* dummy) {$/;"	f
debuggerChildIdx	zsim_harness.cpp	/^volatile uint32_t debuggerChildIdx = MAX_THREADS;$/;"	v
dec	ddr_mem.h	/^        inline uint32_t dec(uint32_t i) const { return i? i-1 : buf.size()-1; }$/;"	f	class:ActWindow
dec	prefetcher.h	/^        void dec() { count = MAX(count - 1, 0); }$/;"	f	class:SatCounter
decCycle	decoder.h	/^    uint16_t decCycle;$/;"	m	struct:DynUop
decodeBbl	decoder.cpp	/^BblInfo* Decoder::decodeBbl(BBL bbl, bool oooDecoding) {$/;"	f	class:Decoder
decodeCycle	ooo_core.h	/^        uint64_t decodeCycle;$/;"	m	class:OOOCore
decodeFusedInstrs	decoder.cpp	/^bool Decoder::decodeFusedInstrs(INS ins, DynUopVec& uops) {$/;"	f	class:Decoder
decodeInstr	decoder.cpp	/^bool Decoder::decodeInstr(INS ins, DynUopVec& uops) {$/;"	f	class:Decoder
deduplicateH5Type	hdf5_stats.cpp	/^        hid_t deduplicateH5Type(hid_t type) {$/;"	f	class:HDF5BackendImpl	file:
default_mflags	g_heap/dlmalloc.h.c	/^  flag_t default_mflags;$/;"	m	struct:malloc_params	file:
deferredWrites	ddr_mem.h	/^        const bool deferredWrites;$/;"	m	class:DDRMemory
delayMap	network.h	/^        std::unordered_map<std::string, uint32_t> delayMap;$/;"	m	class:Network
dequeue	prio_queue.h	/^        T* dequeue(uint64_t& deqCycle) {$/;"	f	class:PrioQueue
dequeue	prio_queue.h	/^        inline T* dequeue(uint32_t& offset) {$/;"	f	struct:PrioQueue::PQBlock
desc	stats.h	/^        const char* desc() const {$/;"	f	class:Stat
deschedule	scheduler.h	/^        void deschedule(ThreadInfo* th, ContextInfo* ctx, ThreadState targetState) {$/;"	f	class:Scheduler
destroy	g_std/stl_galloc.h	/^        template<typename _Up> void destroy(_Up* __p) { __p->~_Up(); }$/;"	f	class:StlGlobAlloc
destroy	g_std/stl_galloc.h	/^        void destroy(pointer p) { p->~T(); }$/;"	f	class:StlGlobAlloc
destroy_mspace	g_heap/dlmalloc.h.c	/^size_t destroy_mspace(mspace msp) {$/;"	f
details	html/classActWindow.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classCC.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classCacheArray.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classCycleBreakdownStat.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classEvent.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classFilterCache.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classHDF5BackendImpl.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classHashFamily.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classHitEvent.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classIdealLRUArray.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classInList.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classMTRand.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classMemParam.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classNetwork.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classNullCore.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classPartMapper.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classPrioQueue.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classProcStats.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classProcStats_1_1ProcessCounter.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classProcessStats.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classReplPolicy.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classSatCounter.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classSchedEvent.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classScheduler.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classSimpleMemory.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classStat.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classTickEvent.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classTracingCache.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classWeaveMemAccEvent.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/classmutex.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/namespaceDRAMSim.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/namespacelibconfig.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/structAccessRecord.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/structBblInfo.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/structCpuIdRecord.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/structLibInfo.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	html/structPartInfo.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
dev_zero_fd	g_heap/dlmalloc.h.c	/^static int dev_zero_fd = -1; \/* Cached file descriptor for \/dev\/zero. *\/$/;"	v	file:
difference_type	g_std/stl_galloc.h	/^        typedef ptrdiff_t difference_type;$/;"	t	class:StlGlobAlloc
dirnamepath	virt/fs.cpp	/^static string dirnamepath(const string& path) {$/;"	f	file:
dirty	mc.h	/^   bool dirty;$/;"	m	class:Way
dirty_bitvec	mc.h	/^   uint64_t dirty_bitvec; \/\/ whether a line is dirty in page$/;"	m	class:TLBEntry
disable_contiguous	g_heap/dlmalloc.h.c	2610;"	d	file:
disable_lock	g_heap/dlmalloc.h.c	2603;"	d	file:
disable_mmap	g_heap/dlmalloc.h.c	2607;"	d	file:
dlcalloc	g_heap/dlmalloc.h.c	/^void* dlcalloc(size_t n_elements, size_t elem_size) {$/;"	f
dlcalloc	g_heap/dlmalloc.h.c	810;"	d	file:
dlfree	g_heap/dlmalloc.h.c	/^void dlfree(void* mem) {$/;"	f
dlfree	g_heap/dlmalloc.h.c	811;"	d	file:
dlindependent_calloc	g_heap/dlmalloc.h.c	/^void** dlindependent_calloc(size_t n_elements, size_t elem_size,$/;"	f
dlindependent_calloc	g_heap/dlmalloc.h.c	824;"	d	file:
dlindependent_comalloc	g_heap/dlmalloc.h.c	/^void** dlindependent_comalloc(size_t n_elements, size_t sizes[],$/;"	f
dlindependent_comalloc	g_heap/dlmalloc.h.c	825;"	d	file:
dlmallinfo	g_heap/dlmalloc.h.c	/^struct mallinfo dlmallinfo(void) {$/;"	f
dlmallinfo	g_heap/dlmalloc.h.c	817;"	d	file:
dlmalloc	g_heap/dlmalloc.h.c	/^void* dlmalloc(size_t bytes) {$/;"	f
dlmalloc	g_heap/dlmalloc.h.c	812;"	d	file:
dlmalloc_footprint	g_heap/dlmalloc.h.c	/^size_t dlmalloc_footprint(void) {$/;"	f
dlmalloc_footprint	g_heap/dlmalloc.h.c	822;"	d	file:
dlmalloc_max_footprint	g_heap/dlmalloc.h.c	/^size_t dlmalloc_max_footprint(void) {$/;"	f
dlmalloc_max_footprint	g_heap/dlmalloc.h.c	823;"	d	file:
dlmalloc_stats	g_heap/dlmalloc.h.c	/^void dlmalloc_stats() {$/;"	f
dlmalloc_stats	g_heap/dlmalloc.h.c	820;"	d	file:
dlmalloc_trim	g_heap/dlmalloc.h.c	/^int dlmalloc_trim(size_t pad) {$/;"	f
dlmalloc_trim	g_heap/dlmalloc.h.c	819;"	d	file:
dlmalloc_usable_size	g_heap/dlmalloc.h.c	/^size_t dlmalloc_usable_size(void* mem) {$/;"	f
dlmalloc_usable_size	g_heap/dlmalloc.h.c	821;"	d	file:
dlmallopt	g_heap/dlmalloc.h.c	/^int dlmallopt(int param_number, int value) {$/;"	f
dlmallopt	g_heap/dlmalloc.h.c	818;"	d	file:
dlmemalign	g_heap/dlmalloc.h.c	/^void* dlmemalign(size_t alignment, size_t bytes) {$/;"	f
dlmemalign	g_heap/dlmalloc.h.c	813;"	d	file:
dlpvalloc	g_heap/dlmalloc.h.c	/^void* dlpvalloc(size_t bytes) {$/;"	f
dlpvalloc	g_heap/dlmalloc.h.c	816;"	d	file:
dlrealloc	g_heap/dlmalloc.h.c	/^void* dlrealloc(void* oldmem, size_t bytes) {$/;"	f
dlrealloc	g_heap/dlmalloc.h.c	814;"	d	file:
dlvalloc	g_heap/dlmalloc.h.c	/^void* dlvalloc(size_t bytes) {$/;"	f
dlvalloc	g_heap/dlmalloc.h.c	815;"	d	file:
do_check_any_chunk	g_heap/dlmalloc.h.c	/^static void do_check_any_chunk(mstate m, mchunkptr p) {$/;"	f	file:
do_check_free_chunk	g_heap/dlmalloc.h.c	/^static void do_check_free_chunk(mstate m, mchunkptr p) {$/;"	f	file:
do_check_inuse_chunk	g_heap/dlmalloc.h.c	/^static void do_check_inuse_chunk(mstate m, mchunkptr p) {$/;"	f	file:
do_check_malloc_state	g_heap/dlmalloc.h.c	/^static void do_check_malloc_state(mstate m) {$/;"	f	file:
do_check_malloced_chunk	g_heap/dlmalloc.h.c	/^static void do_check_malloced_chunk(mstate m, void* mem, size_t s) {$/;"	f	file:
do_check_mmapped_chunk	g_heap/dlmalloc.h.c	/^static void do_check_mmapped_chunk(mstate m, mchunkptr p) {$/;"	f	file:
do_check_smallbin	g_heap/dlmalloc.h.c	/^static void do_check_smallbin(mstate m, bindex_t i) {$/;"	f	file:
do_check_top_chunk	g_heap/dlmalloc.h.c	/^static void do_check_top_chunk(mstate m, mchunkptr p) {$/;"	f	file:
do_check_tree	g_heap/dlmalloc.h.c	/^static void do_check_tree(mstate m, tchunkptr t) {$/;"	f	file:
do_check_treebin	g_heap/dlmalloc.h.c	/^static void do_check_treebin(mstate m, bindex_t i) {$/;"	f	file:
domain	core_recorder.h	/^        uint32_t domain;$/;"	m	class:CoreRecorder
domain	ddr_mem.h	/^        const uint32_t domain;$/;"	m	class:DDRMemory
domain	detailed_mem.h	/^        uint32_t domain;$/;"	m	class:MemControllerBase
domain	dramsim_mem_ctrl.h	/^        uint32_t domain;$/;"	m	class:DRAMSimMemory
domain	ooo_core_recorder.h	/^        uint32_t domain;$/;"	m	class:OOOCoreRecorder
domain	timing_cache.h	/^        uint32_t domain;$/;"	m	class:TimingCache
domain	timing_event.h	/^        int32_t domain; \/\/-1 if none; if none, it acquires it from the parent. Cannot be a starting event (no parents at enqueue time) and get -1 as domain$/;"	m	class:TimingEvent
domain	weave_md1_mem.h	/^        const uint32_t domain;$/;"	m	class:WeaveMD1Memory
domain	weave_md1_mem.h	/^        uint32_t domain;$/;"	m	class:WeaveSimpleMemory
domains	contention_sim.h	/^        DomainData* domains;$/;"	m	class:ContentionSim
done	timing_event.h	/^        void done(uint64_t doneCycle) {$/;"	f	class:TimingEvent
doneCycle	timing_event.h	/^        volatile uint64_t doneCycle;$/;"	m	class:CrossingEvent
downgrade	mutex.h	/^        void downgrade() {$/;"	f	class:rwmutex
dq	detailed_mem.h	/^            uint64_t dq;$/;"	m	struct:MemControllerBase::powerValue
dram	detailed_mem.h	/^        MemControllerBase* dram;$/;"	m	class:MemAccessEventBase
dram	dramsim_mem_ctrl.cpp	/^        DRAMSimMemory* dram;$/;"	m	class:DRAMSimAccEvent	file:
dramCore	dramsim_mem_ctrl.h	/^        DRAMSim::MultiChannelMemorySystem* dramCore;$/;"	m	class:DRAMSimMemory
dropRegister	decoder.cpp	/^static bool dropRegister(uint32_t targetReg, uint32_t* regs, uint32_t& numRegs) {$/;"	f	file:
dropStackRegister	decoder.cpp	/^void Decoder::dropStackRegister(Instr& instr) {$/;"	f	class:Decoder
drv	trace_driver.h	/^        TraceDriver* drv;$/;"	m	class:TraceDriverProxyCache
dump	access_tracing.cpp	/^void AccessTraceWriter::dump(bool cont) {$/;"	f	class:AccessTraceWriter
dump	hdf5_stats.cpp	/^        void dump(bool buffered) {$/;"	f	class:HDF5BackendImpl
dump	hdf5_stats.cpp	/^void HDF5Backend::dump(bool buffered) {$/;"	f	class:HDF5Backend
dump	text_stats.cpp	/^        void dump(bool buffered) {$/;"	f	class:TextBackendImpl
dump	text_stats.cpp	/^void TextBackend::dump(bool buffered) {$/;"	f	class:TextBackend
dumpBblProfile	decoder.cpp	/^void Decoder::dumpBblProfile() {$/;"	f	class:Decoder
dumpHeartbeats	process_tree.h	/^        const uint64_t dumpHeartbeats;$/;"	m	class:ProcessTreeNode
dumpStat	text_stats.cpp	/^        void dumpStat(Stat* s, uint32_t level, std::ofstream* out) {$/;"	f	class:TextBackendImpl	file:
dumpWalk	hdf5_stats.cpp	/^        void dumpWalk(Stat* s) {$/;"	f	class:HDF5BackendImpl	file:
dumpsResetHeartbeats	process_tree.h	/^        const bool dumpsResetHeartbeats;$/;"	m	class:ProcessTreeNode
dv	g_heap/dlmalloc.h.c	/^  mchunkptr  dv;$/;"	m	struct:malloc_state	file:
dvsize	g_heap/dlmalloc.h.c	/^  size_t     dvsize;$/;"	m	struct:malloc_state	file:
e	cache_arrays.h	/^    ZWalkInfo* e;$/;"	m	struct:ZCands
e	cache_arrays.h	/^    uint32_t b, e;$/;"	m	struct:SetAssocCands
eRowBufferPolicy	detailed_mem_params.h	/^        enum eRowBufferPolicy {$/;"	g	class:MemParam
eax	cpuid.h	/^    unsigned eax, ebx, ecx, edx;$/;"	m	struct:CpuIdRecord
eaxIn	cpuid.h	/^    unsigned eaxIn;$/;"	m	struct:CpuIdRecord
ebx	cpuid.h	/^    unsigned eax, ebx, ecx, edx;$/;"	m	struct:CpuIdRecord
ecx	cpuid.h	/^    unsigned eax, ebx, ecx, edx;$/;"	m	struct:CpuIdRecord
ecxIn	cpuid.h	/^    unsigned ecxIn;$/;"	m	struct:CpuIdRecord
edx	cpuid.h	/^    unsigned eax, ebx, ecx, edx;$/;"	m	struct:CpuIdRecord
elem	ddr_mem.h	/^            T elem;$/;"	m	struct:RequestQueue::Node
elems	intrusive_list.h	/^        size_t elems;$/;"	m	class:InList
elems	prio_queue.h	/^    uint64_t elems;$/;"	m	class:PrioQueue
emitBasicMove	decoder.cpp	/^void Decoder::emitBasicMove(Instr& instr, DynUopVec& uops, uint32_t lat, uint8_t ports) {$/;"	f	class:Decoder
emitBasicOp	decoder.cpp	/^void Decoder::emitBasicOp(Instr& instr, DynUopVec& uops, uint32_t lat, uint8_t ports, uint8_t extraSlots, bool reportUnhandled) {$/;"	f	class:Decoder
emitChainedOp	decoder.cpp	/^void Decoder::emitChainedOp(Instr& instr, DynUopVec& uops, uint32_t numUops, uint32_t* latArray, uint8_t* portsArray) {$/;"	f	class:Decoder
emitCompareAndExchange	decoder.cpp	/^void Decoder::emitCompareAndExchange(Instr& instr, DynUopVec& uops) {$/;"	f	class:Decoder
emitConditionalMove	decoder.cpp	/^void Decoder::emitConditionalMove(Instr& instr, DynUopVec& uops, uint32_t lat, uint8_t ports) {$/;"	f	class:Decoder
emitConvert2Op	decoder.cpp	/^void Decoder::emitConvert2Op(Instr& instr, DynUopVec& uops, uint32_t lat1, uint32_t lat2, uint8_t ports1, uint8_t ports2) {$/;"	f	class:Decoder
emitDiv	decoder.cpp	/^void Decoder::emitDiv(Instr& instr, DynUopVec& uops) {$/;"	f	class:Decoder
emitExecUop	decoder.cpp	/^void Decoder::emitExecUop(uint32_t rs0, uint32_t rs1, uint32_t rd0, uint32_t rd1, DynUopVec& uops, uint32_t lat, uint8_t ports, uint8_t extraSlots) {$/;"	f	class:Decoder
emitFence	decoder.cpp	/^void Decoder::emitFence(DynUopVec& uops, uint32_t lat) {$/;"	f	class:Decoder
emitLoad	decoder.cpp	/^void Decoder::emitLoad(Instr& instr, uint32_t idx, DynUopVec& uops, uint32_t destReg) {$/;"	f	class:Decoder
emitLoads	decoder.cpp	/^void Decoder::emitLoads(Instr& instr, DynUopVec& uops) {$/;"	f	class:Decoder
emitMul	decoder.cpp	/^void Decoder::emitMul(Instr& instr, DynUopVec& uops) {$/;"	f	class:Decoder
emitStore	decoder.cpp	/^void Decoder::emitStore(Instr& instr, uint32_t idx, DynUopVec& uops, uint32_t srcReg) {$/;"	f	class:Decoder
emitStores	decoder.cpp	/^void Decoder::emitStores(Instr& instr, DynUopVec& uops) {$/;"	f	class:Decoder
emitXchg	decoder.cpp	/^void Decoder::emitXchg(Instr& instr, DynUopVec& uops) {$/;"	f	class:Decoder
empty	access_tracing.h	/^        inline bool empty() const {return (cur == max);}$/;"	f	class:AccessTraceReader
empty	ddr_mem.h	/^        inline bool empty() const { return reqList.empty(); }$/;"	f	class:RequestQueue
empty	intrusive_list.h	/^        bool empty() const {return !head;}$/;"	f	class:InList
enable_lock	g_heap/dlmalloc.h.c	2602;"	d	file:
enable_mmap	g_heap/dlmalloc.h.c	2606;"	d	file:
end	cache_arrays.h	/^    inline iterator end() const {return iterator(e);}$/;"	f	struct:SetAssocCands
end	cache_arrays.h	/^    inline iterator end() const {return iterator(e);}$/;"	f	struct:ZCands
end	ddr_mem.h	/^        inline iterator end() const {return iterator(nullptr);}$/;"	f	class:RequestQueue
end	profile_stats.h	/^        void end() {$/;"	f	class:ClockStat
end	zsim.cpp	/^    uintptr_t end;$/;"	m	struct:Section	file:
endAccess	coherence_ctrls.h	/^        void endAccess(const MemReq& req) {$/;"	f	class:MESICC
endAccess	coherence_ctrls.h	/^        void endAccess(const MemReq& req) {$/;"	f	class:MESITerminalCC
endEvent	event_recorder.h	/^    TimingEvent* endEvent;$/;"	m	struct:TimingRecord
enqueue	contention_sim.cpp	/^void ContentionSim::enqueue(TimingEvent* ev, uint64_t cycle) {$/;"	f	class:ContentionSim
enqueue	ddr_mem.cpp	/^        void enqueue(uint64_t cycle) {$/;"	f	class:SchedEvent
enqueue	ddr_mem.cpp	/^void DDRMemory::enqueue(DDRMemoryAccEvent* ev, uint64_t sysCycle) {$/;"	f	class:DDRMemory
enqueue	detailed_mem.cpp	/^void MemControllerBase::enqueue(MemAccessEventBase* ev, uint64_t cycle) {$/;"	f	class:MemControllerBase
enqueue	dramsim_mem_ctrl.cpp	/^void DRAMSimMemory::enqueue(DRAMSimAccEvent* ev, uint64_t cycle) { panic("???"); }$/;"	f	class:DRAMSimMemory
enqueue	dramsim_mem_ctrl.cpp	/^void DRAMSimMemory::enqueue(DRAMSimAccEvent* ev, uint64_t cycle) {$/;"	f	class:DRAMSimMemory
enqueue	prio_queue.h	/^        inline void enqueue(T* obj, uint32_t pos) {$/;"	f	struct:PrioQueue::PQBlock
enqueue	prio_queue.h	/^        void enqueue(T* obj, uint64_t cycle) {$/;"	f	class:PrioQueue
enqueueCrossing	contention_sim.cpp	/^void ContentionSim::enqueueCrossing(CrossingEvent* ev, uint64_t cycle, uint32_t srcId, uint32_t srcDomain, uint32_t dstDomain, EventRecorder* evRec) {$/;"	f	class:ContentionSim
enqueueSynced	contention_sim.cpp	/^void ContentionSim::enqueueSynced(TimingEvent* ev, uint64_t cycle) {$/;"	f	class:ContentionSim
ensure_initialization	g_heap/dlmalloc.h.c	2584;"	d	file:
enterFastForward	process_tree.cpp	/^void ProcessTreeNode::enterFastForward() {$/;"	f	class:ProcessTreeNode
entries	page_placement.h	/^		ChunkEntry * entries;$/;"	m	struct:PagePlacementPolicy::ChunkInfo
env	pin_cmd.h	/^            g_string env;$/;"	m	struct:PinCmd::ProcCmdInfo
eraseChild	zsim_harness.cpp	/^int eraseChild(int pid) {$/;"	f
ev	contention_sim.h	/^            CrossingEvent* ev; \/\/only valid if the source's curCycle < cycle (otherwise this may be already executed or recycled)$/;"	m	struct:ContentionSim::CrossingEventInfo
ev	ddr_mem.h	/^            DDRMemoryAccEvent* ev;$/;"	m	struct:DDRMemory::Request
ev	ooo_core_recorder.h	/^            OOORespEvent* ev;  \/\/ may be stale if we've gone over zllStartCycle$/;"	m	struct:OOOCoreRecorder::FutureResponse
evMap	event_queue.h	/^        g_multimap<uint64_t, Event*> evMap;$/;"	m	class:EventQueue
evRec	timing_event.h	/^        EventRecorder* evRec;$/;"	m	class:CrossingEvent
eventFreelist	ddr_mem.h	/^        SchedEvent* eventFreelist;$/;"	m	class:DDRMemory
eventQueue	zsim.h	/^    EventQueue* eventQueue;$/;"	m	struct:GlobSimInfo
eventRecorder	core_recorder.h	/^        EventRecorder eventRecorder;$/;"	m	class:CoreRecorder
eventRecorder	ooo_core_recorder.h	/^        EventRecorder eventRecorder;$/;"	m	class:OOOCoreRecorder
eventRecorders	zsim.h	/^    EventRecorder** eventRecorders; \/\/CID->EventRecorder* array$/;"	m	struct:GlobSimInfo
events	timing_event.h	/^    TimingEvent* events[TIMING_BLOCK_EVENTS];$/;"	m	struct:TimingEventBlock
eventualStatsBackend	zsim.h	/^    StatsBackend* eventualStatsBackend;$/;"	m	struct:GlobSimInfo
exclusive	coherence_ctrls.h	/^            bool exclusive;$/;"	m	struct:MESITopCC::Entry
executeAccess	trace_driver.cpp	/^void TraceDriver::executeAccess(AccessRecord acc) {$/;"	f	class:TraceDriver
executePhase	trace_driver.cpp	/^bool TraceDriver::executePhase() {$/;"	f	class:TraceDriver
existInTB	mc.cpp	/^TagBuffer::existInTB(Address tag) $/;"	f	class:TagBuffer
exists	config.cpp	/^bool Config::exists(const char* key) {$/;"	f	class:Config
exists	config.h	/^        bool exists(const std::string& key) {return exists(key.c_str());}$/;"	f	class:Config
exitFastForward	process_tree.cpp	/^void ProcessTreeNode::exitFastForward() {$/;"	f	class:ProcessTreeNode
exitHandler	zsim_harness.cpp	/^void exitHandler() {$/;"	f
exitPause	process_tree.h	/^        void exitPause() {$/;"	f	class:ProcessTreeNode
extendedSize	part_repl_policies.h	/^            uint64_t extendedSize;$/;"	m	struct:VantageReplPolicy::VantagePartInfo
externalTermPending	zsim.h	/^    volatile bool externalTermPending;$/;"	m	struct:GlobSimInfo
extp	g_heap/dlmalloc.h.c	/^  void*      extp;      \/* Unused but available for extensions *\/$/;"	m	struct:malloc_state	file:
extraSlots	decoder.h	/^    uint8_t extraSlots; \/\/FU exec slots$/;"	m	struct:DynUop
exts	g_heap/dlmalloc.h.c	/^  size_t     exts;$/;"	m	struct:malloc_state	file:
f	stats.h	/^        F f;$/;"	m	class:LambdaStat
f	stats.h	/^        F f;$/;"	m	class:LambdaVectorStat
fGETSHit	filter_cache.h	/^        uint64_t fGETSHit, fGETXHit;$/;"	m	class:FilterCache
fGETXHit	filter_cache.h	/^        uint64_t fGETSHit, fGETXHit;$/;"	m	class:FilterCache
fakeLeave	scheduler.h	/^            FakeLeaveInfo* fakeLeave; \/\/ for accurate join-leaves, see below$/;"	m	struct:Scheduler::ThreadInfo
fakeLeaves	scheduler.h	/^        InList<FakeLeaveInfo> fakeLeaves;$/;"	m	class:Scheduler
fakeTimeouts	virt/timeout.cpp	/^static struct timespec fakeTimeouts[MAX_THREADS]; \/\/for syscalls that use timespec to indicate a timeout$/;"	v	typeref:struct:timespec	file:
fakedPaths	virt/fs.cpp	/^static const vector<string>* fakedPaths = nullptr; \/\/{"\/proc\/cputinfo", "\/proc\/stat", "\/sys", "\/lib", "\/usr"};$/;"	v	file:
fd	g_heap/dlmalloc.h.c	/^  struct malloc_chunk* fd;         \/* double links -- used only if free. *\/$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk	file:
fd	g_heap/dlmalloc.h.c	/^  struct malloc_tree_chunk* fd;$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:
feMap	prio_queue.h	/^    FEMap feMap;$/;"	m	class:PrioQueue
ffLock	zsim.h	/^    lock_t ffLock; \/\/global, grabbed in all ff entry\/exit ops.$/;"	m	struct:GlobSimInfo
ffPtrs	zsim.cpp	/^static const InstrFuncPtrs ffPtrs = {NOPLoadStoreSingle, NOPLoadStoreSingle, FFBasicBlock, NOPRecordBranch, NOPPredLoadStoreSingle, NOPPredLoadStoreSingle, FPTR_NOP};$/;"	v	file:
ffReinstrument	zsim.h	/^    bool ffReinstrument; \/\/true if we should reinstrument on ffwd, works fine with ST apps and it's faster since we run with basically no instrumentation, but it's not precise with MT apps$/;"	m	struct:GlobSimInfo
ffToggleLocks	zsim.h	/^    lock_t ffToggleLocks[256]; \/\/f*ing Pin and its f*ing inability to handle external signals...$/;"	m	struct:GlobSimInfo
ffiEnabled	zsim.cpp	/^static bool ffiEnabled;$/;"	v	file:
ffiEntryPtrs	zsim.cpp	/^static const InstrFuncPtrs ffiEntryPtrs = {NOPLoadStoreSingle, NOPLoadStoreSingle, FFIEntryBasicBlock, NOPRecordBranch, NOPPredLoadStoreSingle, NOPPredLoadStoreSingle, FPTR_NOP};$/;"	v	file:
ffiFFStartInstrs	zsim.cpp	/^static uint64_t* ffiFFStartInstrs; \/\/hack, needs to be a pointer, written to outside this process$/;"	v	file:
ffiInstrsDone	zsim.cpp	/^static uint64_t ffiInstrsDone;$/;"	v	file:
ffiInstrsLimit	zsim.cpp	/^static uint64_t ffiInstrsLimit;$/;"	v	file:
ffiNFF	zsim.cpp	/^static bool ffiNFF;$/;"	v	file:
ffiPoint	zsim.cpp	/^static uint32_t ffiPoint;$/;"	v	file:
ffiPoints	process_tree.h	/^        const g_vector<uint64_t> ffiPoints;$/;"	m	class:ProcessTreeNode
ffiPrevFFStartInstrs	zsim.cpp	/^static uint64_t* ffiPrevFFStartInstrs;$/;"	v	file:
ffiPtrs	zsim.cpp	/^static const InstrFuncPtrs ffiPtrs = {NOPLoadStoreSingle, NOPLoadStoreSingle, FFIBasicBlock, NOPRecordBranch, NOPPredLoadStoreSingle, NOPPredLoadStoreSingle, FPTR_NOP};$/;"	v	file:
filename	hdf5_stats.cpp	/^        const char* filename;$/;"	m	class:HDF5BackendImpl	file:
filename	text_stats.cpp	/^        const char* filename;$/;"	m	class:TextBackendImpl	file:
fill	config.cpp	/^    void fill(vector<bool>& mask) {$/;"	f	struct:Range
fill	prefetcher.h	/^                void fill(uint32_t s, uint64_t r) { startCycle = s; respCycle = r; }$/;"	f	struct:StreamPrefetcher::Entry::AccessTimes
filterArray	filter_cache.h	/^        FilterEntry* filterArray;$/;"	m	class:FilterCache
filterLock	filter_cache.h	/^        lock_t filterLock;$/;"	m	class:FilterCache
findMinCmdCycle	ddr_mem.cpp	/^uint64_t DDRMemory::findMinCmdCycle(const Request& r) const {$/;"	f	class:DDRMemory
finish	contention_sim.cpp	/^void ContentionSim::finish() {$/;"	f	class:ContentionSim
finish	detailed_mem.cpp	/^void MemControllerBase::finish(void) {$/;"	f	class:MemControllerBase
finish	scheduler.h	/^        void finish(uint32_t pid, uint32_t tid) {$/;"	f	class:Scheduler
finishFakeLeave	scheduler.cpp	/^void Scheduler::finishFakeLeave(ThreadInfo* th) {$/;"	f	class:Scheduler
finishInvalidate	cache.cpp	/^uint64_t Cache::finishInvalidate(const InvReq& req) {$/;"	f	class:Cache
fire	event_queue.h	/^        F fire;$/;"	m	class:AdaptiveEvent
firstCycle	prio_queue.h	/^        inline uint64_t firstCycle() const {$/;"	f	class:PrioQueue
firstDomain	contention_sim.h	/^            uint32_t firstDomain;$/;"	m	struct:ContentionSim::SimThreadData
flag_t	g_heap/dlmalloc.h.c	/^typedef unsigned int flag_t;           \/* The type of various bit flag sets *\/$/;"	t	file:
flags	memory_hierarchy.h	/^    uint32_t flags;$/;"	m	struct:MemReq
flushChunk	page_placement.cpp	/^PagePlacementPolicy::flushChunk(uint32_t set)$/;"	f	class:PagePlacementPolicy
fm	g_heap/dlmalloc.h.c	4928;"	d	file:
fname	access_tracing.h	/^        g_string fname;$/;"	m	class:AccessTraceReader
fname	access_tracing.h	/^        g_string fname;$/;"	m	class:AccessTraceWriter
footprint	g_heap/dlmalloc.h.c	/^  size_t     footprint;$/;"	m	struct:malloc_state	file:
forbidden	partitioner.h	/^        bool* forbidden;$/;"	m	class:Partitioner
fordblks	g_heap/dlmalloc.h.c	/^  MALLINFO_FIELD_TYPE fordblks; \/* total free space *\/$/;"	m	struct:mallinfo	file:
forkedChildNode	zsim.cpp	/^static ProcessTreeNode* forkedChildNode = nullptr;$/;"	v	file:
freeElem	slab_alloc.h	/^inline void Slab::freeElem() {$/;"	f	class:slab::Slab
freeElem	slab_alloc.h	/^inline void freeElem(void* elem, size_t minSz) {$/;"	f	namespace:slab
freeEvent	timing_event.h	/^        void freeEvent() {$/;"	f	class:TimingEvent
freeList	ddr_mem.h	/^        InList<Node> freeList; \/\/ LIFO (higher locality)$/;"	m	class:RequestQueue
freeList	scheduler.h	/^        InList<ContextInfo> freeList;$/;"	m	class:Scheduler
freeList	slab_alloc.h	/^        g_vector<Slab*> freeList;$/;"	m	class:slab::SlabAlloc
freeLock	slab_alloc.h	/^        mutex freeLock;  \/\/ used because slab frees may be concurrent$/;"	m	class:slab::SlabAlloc
freeSlab	slab_alloc.h	/^        void freeSlab(Slab* s) {$/;"	f	class:slab::SlabAlloc
freqMHz	zsim.h	/^    uint32_t freqMHz;$/;"	m	struct:GlobSimInfo
friends	html/classCrossingEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	html/classMTRand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	html/classOOODispatchEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	html/classOOOIssueEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	html/classOOORespEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	html/classTimingCoreEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	html/classTimingEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	html/classslab_1_1SlabAlloc.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
front	intrusive_list.h	/^        T* front() const {return head;}$/;"	f	class:InList
fsmblks	g_heap/dlmalloc.h.c	/^  MALLINFO_FIELD_TYPE fsmblks;  \/* always 0 *\/$/;"	m	struct:mallinfo	file:
full	ddr_mem.h	/^        inline bool full() const { return freeList.empty(); }$/;"	f	class:RequestQueue
func	zsim.cpp	/^    VdsoFunc func;$/;"	m	struct:VdsoPatchData	file:
func-members	html/namespaceDRAMSim.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
futex	mutex.h	/^        volatile uint32_t futex;$/;"	m	class:mutex
futexJoin	scheduler.h	/^            FutexJoinInfo futexJoin;$/;"	m	struct:Scheduler::ThreadInfo
futexWaitJoin	scheduler.cpp	/^void Scheduler::futexWaitJoin(ThreadInfo* th) {$/;"	f	class:Scheduler
futexWakeJoin	scheduler.cpp	/^void Scheduler::futexWakeJoin(ThreadInfo* th) {  \/\/ may release schedLock$/;"	f	class:Scheduler
futexWord	barrier.h	/^            volatile uint32_t futexWord;$/;"	m	struct:Barrier::ThreadSyncInfo
futexWord	scheduler.h	/^            volatile uint32_t futexWord;$/;"	m	struct:Scheduler::ThreadInfo
futex_haswaiters	locks.h	/^static inline bool futex_haswaiters(volatile uint32_t* lock) {$/;"	f
futex_init	locks.h	/^static inline void futex_init(volatile uint32_t* lock) {$/;"	f
futex_lock	locks.h	/^static inline void futex_lock(volatile uint32_t* lock) {$/;"	f
futex_lock_nospin	locks.h	/^static inline void futex_lock_nospin(volatile uint32_t* lock) {$/;"	f
futex_trylock_nospin_timeout	locks.h	/^static inline bool futex_trylock_nospin_timeout(volatile uint32_t* lock, uint64_t timeoutNs) {$/;"	f
futex_unlock	locks.h	/^static inline void futex_unlock(volatile uint32_t* lock) {$/;"	f
futureResponses	ooo_core_recorder.h	/^        std::priority_queue<FutureResponse, g_vector<FutureResponse>, CompareRespEvents> futureResponses;$/;"	m	class:OOOCoreRecorder
fwdArray	ooo_core.h	/^        FwdEntry fwdArray[FWD_ENTRIES];$/;"	m	class:OOOCore
g  -  _  -vector$  $ T $  $ Class Template Reference	latex/classg__vector.tex	/^\\hypertarget{classg__vector}{\\section{g\\-\\_\\-vector$<$ T $>$ Class Template Reference}$/;"	s
g_list	g_std/g_list.h	/^template <typename T> class g_list : public std::list<T, StlGlobAlloc<T> > {};$/;"	c
g_map	g_std/g_multimap.h	/^template <typename K, typename V> class g_map : public std::map<K, V, std::less<K>, StlGlobAlloc<std::pair<const K, V> > > {};$/;"	c
g_multimap	g_std/g_multimap.h	/^template <typename K, typename V> class g_multimap : public std::multimap<K, V, std::less<K>, StlGlobAlloc<std::pair<const K, V> > > {};$/;"	c
g_string	g_std/g_string.h	/^typedef std::basic_string<char, std::char_traits<char>, StlGlobAlloc<char> > g_string;$/;"	t
g_unordered_map	g_std/g_unordered_map.h	/^template <typename K, typename V> class g_unordered_map : public std::unordered_map<K, V, std::hash<K>, std::equal_to<K>, StlGlobAlloc<std::pair<const K, V> > > {};$/;"	c
g_unordered_set	g_std/g_unordered_set.h	/^template <typename K> class g_unordered_set : public std::unordered_set<K, std::hash<K>, std::equal_to<K>, StlGlobAlloc<K> > {};$/;"	c
g_vector	g_std/g_vector.h	/^        g_vector(const std::vector<T>& v) {$/;"	f	class:g_vector
g_vector	g_std/g_vector.h	/^        g_vector(size_t n, const T& t = T()) : std::vector<T, StlGlobAlloc<T>>(n, t) {}$/;"	f	class:g_vector
g_vector	g_std/g_vector.h	/^        g_vector(std::initializer_list<T> list) : std::vector<T, StlGlobAlloc<T>>(list) {}$/;"	f	class:g_vector
g_vector	g_std/g_vector.h	/^template <typename T> class g_vector : public std::vector<T, StlGlobAlloc<T> >, public GlobAlloc {$/;"	c
gapCycles	core_recorder.h	/^        uint64_t gapCycles; \/\/phase 2 clock == curCycle - gapCycles$/;"	m	class:CoreRecorder
gapCycles	ooo_core_recorder.h	/^        uint64_t gapCycles; \/\/phase 2 clock == curCycle - gapCycles$/;"	m	class:OOOCoreRecorder
genericGet	config.cpp	/^T Config::genericGet(const char* key) {$/;"	f	class:Config
genericGet	config.cpp	/^T Config::genericGet(const char* key, T def) {$/;"	f	class:Config
get	config.cpp	/^template<> bool Config::get<bool>(const char* key) {return genericGet<bool>(key);}$/;"	f	class:Config
get	config.cpp	/^template<> bool Config::get<bool>(const char* key, bool def) {return genericGet<bool>(key, def);}$/;"	f	class:Config
get	config.cpp	/^template<> const char* Config::get<const char*>(const char* key) {return genericGet<const char*>(key);}$/;"	f	class:Config
get	config.cpp	/^template<> const char* Config::get<const char*>(const char* key, const char* def) {return genericGet<const char*>(key, def);}$/;"	f	class:Config
get	config.cpp	/^template<> double Config::get<double>(const char* key) {return (double) genericGet<double>(key);}$/;"	f	class:Config
get	config.cpp	/^template<> double Config::get<double>(const char* key, double def) {return (double) genericGet<double>(key, (double)def);}$/;"	f	class:Config
get	config.cpp	/^template<> uint32_t Config::get<uint32_t>(const char* key) {return (uint32_t) genericGet<int>(key);}$/;"	f	class:Config
get	config.cpp	/^template<> uint32_t Config::get<uint32_t>(const char* key, uint32_t def) {return (uint32_t) genericGet<int>(key, (int)def);}$/;"	f	class:Config
get	config.cpp	/^template<> uint64_t Config::get<uint64_t>(const char* key) {return (uint64_t) genericGet<lc_int64>(key);}$/;"	f	class:Config
get	config.cpp	/^template<> uint64_t Config::get<uint64_t>(const char* key, uint64_t def) {return (uint64_t) genericGet<lc_int64>(key, (lc_int64)def);}$/;"	f	class:Config
get	config.h	/^        template<typename T> T get(const std::string& key) {return get<T>(key.c_str());}$/;"	f	class:Config
get	config.h	/^        template<typename T> T get(const std::string& key, T def) {return get<T>(key.c_str(), def);}$/;"	f	class:Config
get	event_queue.h	/^        G get;$/;"	m	class:AdaptiveEvent
get	monitor.cpp	/^uint32_t UMonMonitor::get(uint32_t partition, uint32_t bucket) const {$/;"	f	class:UMonMonitor
get	mutex.h	/^        const mutex* get() const {$/;"	f	class:scoped_mutex
get	proc_stats.cpp	/^        uint64_t get() const {$/;"	f	class:ProcStats::ProcessCounter
get	profile_stats.h	/^        uint64_t get() const {$/;"	f	class:ClockStat
get	stats.h	/^        Stat* get(uint32_t idx) const {$/;"	f	class:AggregateStat
get	stats.h	/^        uint64_t get() const {$/;"	f	class:Counter
get	stats.h	/^        uint64_t get() const {$/;"	f	class:ProxyFuncStat
get	stats.h	/^        uint64_t get() const {$/;"	f	class:ProxyStat
get	stats.h	/^        uint64_t get() const {return f();}$/;"	f	class:LambdaStat
get -Partition	latex/classCorePartMapper.tex	/^\\index{get\\-Partition@{get\\-Partition}!CorePartMapper@{Core\\-Part\\-Mapper}}$/;"	b
getAddr	ddr_mem.cpp	/^        Address getAddr() const {return addr;}$/;"	f	class:DDRMemoryAccEvent
getAddr	detailed_mem.h	/^        Address getAddr() const { return addr; }$/;"	f	class:MemAccessEventBase
getAddr	dramsim_mem_ctrl.cpp	/^        Address getAddr() const {$/;"	f	class:DRAMSimAccEvent
getBaseH5Type	hdf5_stats.cpp	/^        hid_t getBaseH5Type(Stat* s) {$/;"	f	class:HDF5BackendImpl	file:
getBestCandidate	part_repl_policies.h	/^        uint32_t getBestCandidate() {$/;"	f	class:VantageReplPolicy
getBestCandidate	part_repl_policies.h	/^        uint32_t getBestCandidate() {$/;"	f	class:WayPartReplPolicy
getBestCandidate	repl_policies.h	/^        uint32_t getBestCandidate() {$/;"	f	class:LFUReplPolicy
getBestCandidate	repl_policies.h	/^        uint32_t getBestCandidate() {$/;"	f	class:NRUReplPolicy
getBestCandidate	repl_policies.h	/^        uint32_t getBestCandidate() {$/;"	f	class:RandReplPolicy
getBestCandidate	repl_policies.h	/^        uint32_t getBestCandidate() {$/;"	f	class:TreeLRUReplPolicy
getBuckets	partitioner.h	/^        uint32_t getBuckets() const { return buckets; }$/;"	f	class:PartitionMonitor
getBuckets	utility_monitor.h	/^        uint32_t getBuckets() const { return buckets; }$/;"	f	class:UMon
getChunkEntry	page_placement.cpp	/^PagePlacementPolicy::getChunkEntry(Address tag, ChunkInfo * chunk_info, bool allocate)$/;"	f	class:PagePlacementPolicy
getCid	zsim.cpp	/^uint32_t getCid(uint32_t tid) {$/;"	f
getClearTime	mc.h	/^	uint64_t getClearTime() { return _last_clear_time; };$/;"	f	class:TagBuffer
getClockDomain	process_tree.h	/^        inline uint32_t getClockDomain() const {$/;"	f	class:ProcessTreeNode
getContentionCycles	core_recorder.cpp	/^uint64_t CoreRecorder::getContentionCycles() const {$/;"	f	class:CoreRecorder
getContentionCycles	ooo_core_recorder.cpp	/^uint64_t OOOCoreRecorder::getContentionCycles() const {$/;"	f	class:OOOCoreRecorder
getCrossingStack	event_recorder.h	/^        inline CrossingStack& getCrossingStack() {$/;"	f	class:EventRecorder
getCurCycle	contention_sim.h	/^        uint64_t getCurCycle(uint32_t domain) {$/;"	f	class:ContentionSim
getCycles	null_core.h	/^        uint64_t getCycles() const {return instrs; \/*IPC=1*\/ }$/;"	f	class:NullCore
getCycles	ooo_core.h	/^        uint64_t getCycles() const {return cRec.getUnhaltedCycles(curCycle);}$/;"	f	class:OOOCore
getCycles	simple_core.h	/^        uint64_t getCycles() const {return curCycle - haltedCycles;}$/;"	f	class:SimpleCore
getCycles	timing_core.h	/^        uint64_t getCycles() const {return cRec.getUnhaltedCycles(curCycle);}$/;"	f	class:TimingCore
getDataSize	ddr_mem.cpp	/^		uint32_t getDataSize() const {return data_size;}$/;"	f	class:DDRMemoryAccEvent
getDomain	timing_event.h	/^        inline uint32_t getDomain() const {return domain;}$/;"	f	class:TimingEvent
getEmptyWay	mc.h	/^   uint32_t getEmptyWay()$/;"	f	class:Set
getEq	config.cpp	/^template<> bool getEq<bool>(bool v1, bool v2) {return v1 == v2;}$/;"	f
getEq	config.cpp	/^template<> bool getEq<const char*>(const char* v1, const char* v2) {return strcmp(v1, v2) == 0;}$/;"	f
getEq	config.cpp	/^template<> bool getEq<double>(double v1, double v2) {return v1 == v2;}$/;"	f
getEq	config.cpp	/^template<> bool getEq<int>(int v1, int v2) {return v1 == v2;}$/;"	f
getEq	config.cpp	/^template<> bool getEq<lc_int64>(lc_int64 v1, lc_int64 v2) {return v1 == v2;}$/;"	f
getEventRecorder	core_recorder.h	/^        inline EventRecorder* getEventRecorder() {return &eventRecorder;}$/;"	f	class:CoreRecorder
getEventRecorder	ooo_core.h	/^        inline EventRecorder* getEventRecorder() {return cRec.getEventRecorder();}$/;"	f	class:OOOCore
getEventRecorder	ooo_core_recorder.h	/^        inline EventRecorder* getEventRecorder() {return &eventRecorder;}$/;"	f	class:OOOCoreRecorder
getEventRecorder	timing_core.h	/^        inline EventRecorder* getEventRecorder() {return cRec.getEventRecorder();}$/;"	f	class:TimingCore
getFFIPoints	process_tree.h	/^        const g_vector<uint64_t>& getFFIPoints() const {$/;"	f	class:ProcessTreeNode
getFakedPaths	virt/fs.cpp	/^vector<string>* getFakedPaths(const char* patchRoot) {$/;"	f
getFullCmdArgs	pin_cmd.cpp	/^g_vector<g_string> PinCmd::getFullCmdArgs(uint32_t procIdx, const char** inputFile) {$/;"	f	class:PinCmd
getGapCycles	event_recorder.h	/^        inline uint64_t getGapCycles() const {$/;"	f	class:EventRecorder
getGid	scheduler.h	/^        inline uint32_t getGid(uint32_t pid, uint32_t tid) const {return (pid << 16) | tid;}$/;"	f	class:Scheduler
getGranularity	mc.h	/^	uint64_t getGranularity() { return _granularity; };$/;"	f	class:MemoryController
getGroupIdx	process_tree.h	/^        uint32_t getGroupIdx() const {return groupIdx;}$/;"	f	class:ProcessTreeNode
getH5Type	hdf5_stats.cpp	/^        hid_t getH5Type(Stat* stat) { \/\/I'd like to make this functional, but passing a member function as an argument is non-trivial...$/;"	f	class:HDF5BackendImpl	file:
getInstrs	null_core.h	/^        uint64_t getInstrs() const {return instrs;}$/;"	f	class:NullCore
getInstrs	ooo_core.cpp	/^uint64_t OOOCore::getInstrs() const {return instrs;}$/;"	f	class:OOOCore
getInstrs	simple_core.h	/^        uint64_t getInstrs() const {return instrs;}$/;"	f	class:SimpleCore
getInstrs	timing_core.h	/^        uint64_t getInstrs() const {return instrs;}$/;"	f	class:TimingCore
getLastCandIdx	cache_arrays.h	/^        uint32_t getLastCandIdx() const {return lastCandIdx;}$/;"	f	class:ZArray
getLastLimit	contention_sim.h	/^        uint64_t getLastLimit() {return lastLimit;}$/;"	f	class:ContentionSim
getLibzsimAddrs	debug_zsim.cpp	/^void getLibzsimAddrs(LibInfo* libzsimAddrs) {$/;"	f
getMask	process_tree.h	/^        const g_vector<bool>& getMask() const {$/;"	f	class:ProcessTreeNode
getMaxMarginalUtility	lookahead.cpp	/^static tuple<double, uint32_t> getMaxMarginalUtility($/;"	f	namespace:lookahead
getMinStartCycle	timing_event.h	/^        inline uint64_t getMinStartCycle() const {return minStartCycle;}$/;"	f	class:TimingEvent
getMissCurve	monitor.cpp	/^void UMonMonitor::getMissCurve(uint32_t* misses, uint32_t partition) const {$/;"	f	class:UMonMonitor
getMissCurves	monitor.cpp	/^void UMonMonitor::getMissCurves() const {$/;"	f	class:UMonMonitor
getMisses	utility_monitor.cpp	/^void UMon::getMisses(uint64_t* misses) {$/;"	f	class:UMon
getMonitor	part_repl_policies.h	/^        PartitionMonitor* getMonitor() { return monitor; }$/;"	f	class:PartReplPolicy
getMonitor	part_repl_policies.h	/^        const PartitionMonitor* getMonitor() const { return monitor; }$/;"	f	class:PartReplPolicy
getName	cache.cpp	/^const char* Cache::getName() {$/;"	f	class:Cache
getName	ddr_mem.h	/^        const char* getName() {return name.c_str();}$/;"	f	class:DDRMemory
getName	detailed_mem.h	/^        const char* getName() { return name.c_str(); }$/;"	f	class:MemControllerBase
getName	dramsim_mem_ctrl.h	/^        const char* getName() {$/;"	f	class:SplitAddrMemory
getName	dramsim_mem_ctrl.h	/^        const char* getName() {return name.c_str();}$/;"	f	class:DRAMSimMemory
getName	mc.h	/^	const char * getName() { return _name.c_str(); };$/;"	f	class:MemoryController
getName	mem_ctrls.h	/^        const char* getName() {return name.c_str();}$/;"	f	class:MD1Memory
getName	mem_ctrls.h	/^        const char* getName() {return name.c_str();}$/;"	f	class:SimpleMemory
getName	ooo_core_recorder.h	/^        const g_string& getName() const {return name;}$/;"	f	class:OOOCoreRecorder
getName	prefetcher.h	/^        const char* getName() { return name.c_str();}$/;"	f	class:StreamPrefetcher
getName	trace_driver.h	/^        const char* getName() {return name.c_str();}$/;"	f	class:TraceDriverProxyCache
getNextChild	process_tree.h	/^        ProcessTreeNode* getNextChild() {$/;"	f	class:ProcessTreeNode
getNs	profile_stats.h	/^inline uint64_t getNs() {$/;"	f
getNumAccesses	monitor.cpp	/^uint32_t UMonMonitor::getNumAccesses(uint32_t partition) const {$/;"	f	class:UMonMonitor
getNumAccesses	utility_monitor.cpp	/^uint64_t UMon::getNumAccesses() const {$/;"	f	class:UMon
getNumChildren	access_tracing.h	/^        uint32_t getNumChildren() const {return numChildren;}$/;"	f	class:AccessTraceReader
getNumChildren	timing_event.h	/^        inline uint32_t getNumChildren() const {return numChildren;}$/;"	f	class:TimingEvent
getNumChildren	zsim_harness.cpp	/^int getNumChildren() {$/;"	f
getNumCmdProcs	pin_cmd.h	/^        uint32_t getNumCmdProcs() {return procInfo.size();}$/;"	f	class:PinCmd
getNumPartitions	partition_mapper.cpp	/^uint32_t ProcessGroupPartMapper::getNumPartitions() {$/;"	f	class:ProcessGroupPartMapper
getNumPartitions	partition_mapper.h	/^        virtual uint32_t getNumPartitions() {return 2*numCores;}$/;"	f	class:InstrDataCorePartMapper
getNumPartitions	partition_mapper.h	/^        virtual uint32_t getNumPartitions() {return 2*numProcs;}$/;"	f	class:InstrDataProcessPartMapper
getNumPartitions	partition_mapper.h	/^        virtual uint32_t getNumPartitions() {return 2;}$/;"	f	class:InstrDataPartMapper
getNumPartitions	partition_mapper.h	/^        virtual uint32_t getNumPartitions() {return numCores;}$/;"	f	class:CorePartMapper
getNumPartitions	partition_mapper.h	/^        virtual uint32_t getNumPartitions() {return numProcs;}$/;"	f	class:ProcessPartMapper
getNumPartitions	partitioner.h	/^        uint32_t getNumPartitions() const { return monitors.size(); }$/;"	f	class:UMonMonitor
getNumRecords	access_tracing.h	/^        uint64_t getNumRecords() const {return numRecords;}$/;"	f	class:AccessTraceReader
getNumRequests	mc.h	/^	uint64_t getNumRequests() { return _num_requests; };$/;"	f	class:MemoryController
getNumSets	mc.h	/^   	uint64_t getNumSets()     { return _num_sets; };$/;"	f	class:MemoryController
getNumWays	mc.h	/^	uint32_t getNumWays() { return _num_ways; };$/;"	f	class:TagBuffer
getNumWays	mc.h	/^   	uint32_t getNumWays()     { return _num_ways; };$/;"	f	class:MemoryController
getOccupancy	mc.h	/^	double getOccupancy() { return 1.0 * _entry_occupied \/ _num_ways \/ _num_sets; };$/;"	f	class:TagBuffer
getParent	trace_driver.h	/^        MemObject* getParent() const {return parent;}$/;"	f	class:TraceDriverProxyCache
getParentId	coherence_ctrls.cpp	/^uint32_t MESIBottomCC::getParentId(Address lineAddr) {$/;"	f	class:MESIBottomCC
getPartition	partition_mapper.cpp	/^uint32_t CorePartMapper::getPartition(const MemReq& req) {$/;"	f	class:CorePartMapper
getPartition	partition_mapper.cpp	/^uint32_t InstrDataCorePartMapper::getPartition(const MemReq& req) {$/;"	f	class:InstrDataCorePartMapper
getPartition	partition_mapper.cpp	/^uint32_t InstrDataPartMapper::getPartition(const MemReq& req) {$/;"	f	class:InstrDataPartMapper
getPartition	partition_mapper.cpp	/^uint32_t InstrDataProcessPartMapper::getPartition(const MemReq& req) {$/;"	f	class:InstrDataProcessPartMapper
getPartition	partition_mapper.cpp	/^uint32_t ProcessGroupPartMapper::getPartition(const MemReq& req) {$/;"	f	class:ProcessGroupPartMapper
getPartition	partition_mapper.cpp	/^uint32_t ProcessPartMapper::getPartition(const MemReq& req) {$/;"	f	class:ProcessPartMapper
getPatchRoot	process_tree.h	/^        const char* getPatchRoot() const {$/;"	f	class:ProcessTreeNode
getPeriod	event_queue.h	/^        uint64_t getPeriod() const {return period;}$/;"	f	class:Event
getPhaseCycles	null_core.cpp	/^uint64_t NullCore::getPhaseCycles() const {$/;"	f	class:NullCore
getPhaseCycles	ooo_core.cpp	/^uint64_t OOOCore::getPhaseCycles() const {return curCycle % zinfo->phaseLength;}$/;"	f	class:OOOCore
getPhaseCycles	simple_core.cpp	/^uint64_t SimpleCore::getPhaseCycles() const {$/;"	f	class:SimpleCore
getPhaseCycles	timing_core.cpp	/^uint64_t TimingCore::getPhaseCycles() const {$/;"	f	class:TimingCore
getPid	scheduler.h	/^        inline uint32_t getPid(uint32_t gid) const {return gid >> 16;}$/;"	f	class:Scheduler
getPinCmdArgs	pin_cmd.cpp	/^g_vector<g_string> PinCmd::getPinCmdArgs(uint32_t procIdx) {$/;"	f	class:PinCmd
getPortDomain	process_tree.h	/^        inline uint32_t getPortDomain() const {$/;"	f	class:ProcessTreeNode
getPostDelay	timing_event.h	/^        inline uint32_t getPostDelay() const {return postDelay;}$/;"	f	class:TimingEvent
getPreDelay	timing_event.h	/^        inline uint32_t getPreDelay() const {return preDelay;}$/;"	f	class:TimingEvent
getProcIdx	process_tree.h	/^        uint32_t getProcIdx() const {return procIdx;}$/;"	f	class:ProcessTreeNode
getProcessCycles	process_stats.cpp	/^uint64_t ProcessStats::getProcessCycles(uint32_t p) {$/;"	f	class:ProcessStats
getProcessInstrs	process_stats.cpp	/^uint64_t ProcessStats::getProcessInstrs(uint32_t p) {$/;"	f	class:ProcessStats
getRP	ideal_arrays.h	/^        ReplPolicy* getRP() const {return rp;}$/;"	f	class:IdealLRUArray
getRTT	network.cpp	/^uint32_t Network::getRTT(const char* src, const char* dst) {$/;"	f	class:Network
getRecentMissRate	mc.h	/^   	double getRecentMissRate(){ return (double) _num_miss_per_step \/ (_num_miss_per_step + _num_hit_per_step); };$/;"	f	class:MemoryController
getSType	config.cpp	/^template<> SType getSType<bool>() {return SType::TypeBoolean;}$/;"	f
getSType	config.cpp	/^template<> SType getSType<const char*>() {return SType::TypeString;}$/;"	f
getSType	config.cpp	/^template<> SType getSType<double>() {return SType::TypeFloat;}$/;"	f
getSType	config.cpp	/^template<> SType getSType<int>() {return SType::TypeInt;}$/;"	f
getSType	config.cpp	/^template<> SType getSType<lc_int64>() {return SType::TypeInt64;}$/;"	f
getScheduledPid	scheduler.h	/^        uint32_t getScheduledPid(uint32_t cid) const { return (contexts[cid].state == USED)? getPid(contexts[cid].curThread->gid) : (uint32_t)-1; }$/;"	f	class:Scheduler
getScheme	mc.h	/^   	Scheme getScheme()      { return _scheme; };$/;"	f	class:MemoryController
getSets	mc.h	/^   	Set * getSets()         { return _cache; };$/;"	f	class:MemoryController
getSlack	event_recorder.h	/^        inline uint64_t getSlack(uint64_t origStartCycle) const {$/;"	f	class:EventRecorder
getSourceId	event_recorder.h	/^        uint32_t getSourceId() const {return srcId;}$/;"	f	class:EventRecorder
getSrcDomainEvent	timing_event.h	/^        TimingEvent* getSrcDomainEvent() {return &cpe;}$/;"	f	class:CrossingEvent
getSyncedFastForward	process_tree.h	/^        inline bool getSyncedFastForward() const {$/;"	f	class:ProcessTreeNode
getSyscallBlacklistRegex	process_tree.h	/^        const g_string& getSyscallBlacklistRegex() const {$/;"	f	class:ProcessTreeNode
getTLB	mc.h	/^   	g_unordered_map<Address, TLBEntry> * getTLB() { return &_tlb; };$/;"	f	class:MemoryController
getTagBuffer	mc.h	/^	TagBuffer * getTagBuffer() { return _tag_buffer; };$/;"	f	class:MemoryController
getTid	scheduler.h	/^        inline uint32_t getTid(uint32_t gid) const {return gid & 0x0FFFF;}$/;"	f	class:Scheduler
getTimeoutArg	virt/timeout.cpp	/^static int getTimeoutArg(int syscall) {$/;"	f	file:
getTraffic	page_placement.h	/^	uint64_t getTraffic() { return _num_counter_read + _num_counter_write; };$/;"	f	class:PagePlacementPolicy
getType	detailed_mem.h	/^        MemAccessType getType() const { return type; }$/;"	f	class:MemAccessEventBase
getTypeName	config.cpp	/^template<> const char* getTypeName<bool>() {return "bool";}$/;"	f
getTypeName	config.cpp	/^template<> const char* getTypeName<const char*>() {return "string";}$/;"	f
getTypeName	config.cpp	/^template<> const char* getTypeName<double>() {return "double";}$/;"	f
getTypeName	config.cpp	/^template<> const char* getTypeName<int>() {return "uint32";}$/;"	f
getTypeName	config.cpp	/^template<> const char* getTypeName<lc_int64>() {return "uint64";}$/;"	f
getUnhaltedCycles	core_recorder.cpp	/^uint64_t CoreRecorder::getUnhaltedCycles(uint64_t curCycle) const {$/;"	f	class:CoreRecorder
getUnhaltedCycles	ooo_core_recorder.cpp	/^uint64_t OOOCoreRecorder::getUnhaltedCycles(uint64_t curCycle) const {$/;"	f	class:OOOCoreRecorder
getXPos	html/search/search.js	/^function getXPos(item)$/;"	f
getYPos	html/search/search.js	/^function getYPos(item)$/;"	f
get_foot	g_heap/dlmalloc.h.c	2240;"	d	file:
get_mstate_for	g_heap/dlmalloc.h.c	3021;"	d	file:
get_placement_policy	page_placement.h	/^	RepScheme get_placement_policy() { return _placement_policy; }$/;"	f	class:PagePlacementPolicy
getcwd	virt/fs.cpp	/^static string getcwd() {$/;"	f	file:
gid	scheduler.h	/^            const uint32_t gid;$/;"	m	struct:Scheduler::ThreadInfo
gidMap	scheduler.h	/^        g_unordered_map<uint32_t, ThreadInfo*> gidMap;$/;"	m	class:Scheduler
globPhaseCycles	zsim.h	/^    uint64_t globPhaseCycles; \/\/just numPhases*phaseCycles. It behooves us to precompute it, since it is very frequently used in tracing code.$/;"	m	struct:GlobSimInfo
globalActiveProcs	zsim.h	/^    volatile uint32_t globalActiveProcs; \/\/used for termination$/;"	m	struct:GlobSimInfo
globalFFProcs	zsim.h	/^    volatile uint32_t globalFFProcs; \/\/count of processes that are in either synced or unsynced FF$/;"	m	struct:GlobSimInfo
globalPauseFlag	zsim.h	/^    volatile bool globalPauseFlag; \/\/if set, pauses simulation on phase end$/;"	m	struct:GlobSimInfo
globalSyncedFFProcs	zsim.h	/^    volatile uint32_t globalSyncedFFProcs; \/\/count of processes that are in synced FF$/;"	m	struct:GlobSimInfo
globzinfo	zsim_harness.cpp	/^GlobSimInfo* globzinfo = nullptr; \/\/used very sparingly, only in sig handlers. Should probably promote to a global like in zsim processes.$/;"	v
gm	g_heap/dlmalloc.h.c	2590;"	d	file:
gm  -  _  -segment Struct Reference	latex/structgm__segment.tex	/^\\hypertarget{structgm__segment}{\\section{gm\\-\\_\\-segment Struct Reference}$/;"	s
gm_attach	galloc.cpp	/^void gm_attach(int shmid) {$/;"	f
gm_calloc	galloc.h	/^template <typename T> T* gm_calloc() {return static_cast<T*>(__gm_calloc(1, sizeof(T)));}$/;"	f
gm_calloc	galloc.h	/^template <typename T> T* gm_calloc(size_t objs) {return static_cast<T*>(__gm_calloc(objs, sizeof(T)));}$/;"	f
gm_detach	galloc.cpp	/^void gm_detach() {$/;"	f
gm_dup	galloc.h	/^template <typename T> T* gm_dup(T* src, size_t objs) {$/;"	f
gm_free	galloc.cpp	/^void gm_free(void* ptr) {$/;"	f
gm_get_glob_ptr	galloc.cpp	/^void* gm_get_glob_ptr() {$/;"	f
gm_get_secondary_ptr	galloc.cpp	/^void* gm_get_secondary_ptr() {$/;"	f
gm_init	galloc.cpp	/^int gm_init(size_t segmentSize) {$/;"	f
gm_isready	galloc.cpp	/^bool gm_isready() {$/;"	f
gm_malloc	galloc.cpp	/^void* gm_malloc(size_t size) {$/;"	f
gm_malloc	galloc.h	/^template <typename T> T* gm_malloc() {return static_cast<T*>(gm_malloc(sizeof(T)));}$/;"	f
gm_malloc	galloc.h	/^template <typename T> T* gm_malloc(size_t objs) {return static_cast<T*>(gm_malloc(sizeof(T)*objs));}$/;"	f
gm_memalign	galloc.h	/^template <typename T> T* gm_memalign(size_t blocksize) {return static_cast<T*>(__gm_memalign(blocksize, sizeof(T)));}$/;"	f
gm_memalign	galloc.h	/^template <typename T> T* gm_memalign(size_t blocksize, size_t objs) {return static_cast<T*>(__gm_memalign(blocksize, sizeof(T)*objs));}$/;"	f
gm_segment	galloc.cpp	/^struct gm_segment {$/;"	s	file:
gm_set_glob_ptr	galloc.cpp	/^void gm_set_glob_ptr(void* ptr) {$/;"	f
gm_set_secondary_ptr	galloc.cpp	/^void gm_set_secondary_ptr(void* ptr) {$/;"	f
gm_shmid	galloc.cpp	/^static int gm_shmid = 0;$/;"	v	file:
gm_stats	galloc.cpp	/^void gm_stats() {$/;"	f
gm_strdup	galloc.cpp	/^char* gm_strdup(const char* str) {$/;"	f
granularity	g_heap/dlmalloc.h.c	/^  size_t granularity;$/;"	m	struct:malloc_params	file:
granularity_align	g_heap/dlmalloc.h.c	2622;"	d	file:
groupIdx	process_tree.h	/^        const uint32_t groupIdx;$/;"	m	class:ProcessTreeNode
hMatrix	hash.h	/^        uint64_t* hMatrix;$/;"	m	class:H3HashFamily
haltedCycles	simple_core.h	/^        uint64_t haltedCycles;$/;"	m	class:SimpleCore
handleCacheAccess	os_placement.cpp	/^OSPlacementPolicy::handleCacheAccess(Address tag, ReqType type)$/;"	f	class:OSPlacementPolicy
handleCacheHit	page_placement.cpp	/^PagePlacementPolicy::handleCacheHit(Address tag, ReqType type, uint64_t set_num, Set * set, bool &counter_access, uint32_t hit_way)$/;"	f	class:PagePlacementPolicy
handleCacheMiss	line_placement.cpp	/^LinePlacementPolicy::handleCacheMiss(Way * current_tad)$/;"	f	class:LinePlacementPolicy
handleCacheMiss	page_placement.cpp	/^PagePlacementPolicy::handleCacheMiss(Address tag, ReqType type, uint64_t set_num, Set * set, bool &counter_access)$/;"	f	class:PagePlacementPolicy
handleCounterOverflow	page_placement.cpp	/^PagePlacementPolicy::handleCounterOverflow(ChunkInfo * chunk_info, ChunkEntry * overflow_entry)$/;"	f	class:PagePlacementPolicy
handleCrossing	timing_event.cpp	/^TimingEvent* TimingEvent::handleCrossing(TimingEvent* childEv, EventRecorder* evRec, bool unlinkChild) {$/;"	f	class:TimingEvent
handoffEvents	scheduler.h	/^        Counter scheduleEvents, waitEvents, handoffEvents, sleepEvents;$/;"	m	class:Scheduler
handoffThread	scheduler.h	/^            volatile ThreadInfo* handoffThread; \/\/if at the end of a sync() this is not nullptr, we need to transfer our current context to the thread pointed here.$/;"	m	struct:Scheduler::ThreadInfo
harnessPid	zsim.h	/^    int harnessPid; \/\/used for debugging purposes$/;"	m	struct:GlobSimInfo
hasCounterNames	stats.h	/^        inline bool hasCounterNames() {$/;"	f	class:VectorStat
hasEmptyWay	mc.h	/^   bool hasEmptyWay() { return getEmptyWay() < num_ways; };$/;"	f	class:Set
hasRecord	event_recorder.h	/^        inline size_t hasRecord() const {$/;"	f	class:EventRecorder
has_segment_link	g_heap/dlmalloc.h.c	/^static int has_segment_link(mstate m, msegmentptr ss) {$/;"	f	file:
hash	hash.cpp	/^uint64_t H3HashFamily::hash(uint32_t id, uint64_t val) {$/;"	f	class:H3HashFamily
hash	hash.cpp	/^uint64_t SHA1HashFamily::hash(uint32_t id, uint64_t val) {$/;"	f	class:SHA1HashFamily
hash	hash.h	/^        inline uint64_t hash(uint32_t id, uint64_t val) {return val;}$/;"	f	class:IdHashFamily
hash	mtrand.h	/^inline uint64_t MTRand::hash(time_t t, clock_t c) {$/;"	f	class:MTRand
haswaiters	mutex.h	/^        bool haswaiters() {$/;"	f	class:mutex
hblkhd	g_heap/dlmalloc.h.c	/^  MALLINFO_FIELD_TYPE hblkhd;   \/* space in mmapped regions *\/$/;"	m	struct:mallinfo	file:
hblks	g_heap/dlmalloc.h.c	/^  MALLINFO_FIELD_TYPE hblks;    \/* always 0 *\/$/;"	m	struct:mallinfo	file:
head	g_heap/dlmalloc.h.c	/^  size_t                    head;$/;"	m	struct:malloc_tree_chunk	file:
head	g_heap/dlmalloc.h.c	/^  size_t               head;       \/* Size and inuse bits. *\/$/;"	m	struct:malloc_chunk	file:
head	intrusive_list.h	/^        T* head;$/;"	m	class:InList
heads	utility_monitor.h	/^        Node** heads;$/;"	m	class:UMon
heartbeat	process_tree.cpp	/^void ProcessTreeNode::heartbeat() {$/;"	f	class:ProcessTreeNode
heartbeats	process_tree.h	/^        volatile uint64_t heartbeats;$/;"	m	class:ProcessTreeNode
hf	cache_arrays.h	/^        HashFamily* hf;$/;"	m	class:SetAssocArray
hf	cache_arrays.h	/^        HashFamily* hf;$/;"	m	class:ZArray
hf	utility_monitor.h	/^        HashFamily* hf;$/;"	m	class:UMon
hiBit	mtrand.h	/^        uint64_t hiBit(const uint64_t u) const { return u & 0x80000000UL; }$/;"	f	class:MTRand
highPrioAccess	timing_cache.cpp	/^uint64_t TimingCache::highPrioAccess(uint64_t cycle) {$/;"	f	class:TimingCache
hold	timing_event.h	/^        inline void hold() {$/;"	f	class:TimingEvent
ialloc	g_heap/dlmalloc.h.c	/^static void** ialloc(mstate m,$/;"	f	file:
id	detailed_mem.h	/^        uint32_t id;$/;"	m	class:MemSchedulerBase
id	ooo_core_recorder.cpp	/^        uint64_t id;$/;"	m	class:OOODispatchEvent	file:
id	ooo_core_recorder.cpp	/^        uint64_t id;$/;"	m	class:OOOIssueEvent	file:
id	ooo_core_recorder.cpp	/^        uint64_t id;$/;"	m	class:OOORespEvent	file:
id	trace_driver.h	/^        uint32_t id;$/;"	m	class:TraceDriverProxyCache
idlePeriods	scheduler.h	/^        Counter idlePhases, idlePeriods;$/;"	m	class:Scheduler
idlePhases	scheduler.h	/^        Counter idlePhases, idlePeriods;$/;"	m	class:Scheduler
idlePowerDownCycle	detailed_mem.h	/^        uint64_t idlePowerDownCycle;$/;"	m	class:MemRankBase
idleStandbyCycle	detailed_mem.h	/^        uint64_t idleStandbyCycle;$/;"	m	class:MemRankBase
idx	ddr_mem.h	/^        uint32_t idx;$/;"	m	class:ActWindow
idx	ooo_core.h	/^        uint32_t idx;$/;"	m	class:CycleQueue
idx	ooo_core.h	/^        uint32_t idx;$/;"	m	class:ReorderBuffer
idx	prefetcher.cpp	/^        const uint32_t idx;$/;"	m	class:PrefetchResponseEvent	file:
idx2bit	g_heap/dlmalloc.h.c	2865;"	d	file:
ignoreHooks	zsim.h	/^    bool ignoreHooks;$/;"	m	struct:GlobSimInfo
ilog2	bithacks.h	/^template<> uint32_t ilog2<uint32_t>(uint32_t val) {$/;"	f
ilog2	bithacks.h	/^template<> uint32_t ilog2<uint64_t>(uint64_t val) {$/;"	f
inCSim	contention_sim.h	/^        volatile bool inCSim; \/\/true when inside contention simulation$/;"	m	class:ContentionSim
inCfg	config.h	/^        libconfig::Config* inCfg;$/;"	m	class:Config
inFakeTimeoutMode	virt/timeout.cpp	/^static bool inFakeTimeoutMode[MAX_THREADS];$/;"	v	file:
inFastForward	process_tree.h	/^        volatile bool inFastForward;$/;"	m	class:ProcessTreeNode
inPause	process_tree.h	/^        volatile bool inPause;$/;"	m	class:ProcessTreeNode
inRegs	decoder.h	/^            uint32_t inRegs[MAX_INSTR_REG_READS];$/;"	m	struct:Decoder::Instr
inSyscall	zsim.cpp	/^bool inSyscall[MAX_THREADS];  \/\/ set in SyscallEnter, reset in SyscallExit, regardless of state. We MAY need this for ContextChange$/;"	v
inc	cache_arrays.h	/^        inline void inc() {x++;} \/\/overloading prefix\/postfix too messy$/;"	f	struct:SetAssocCands::iterator
inc	cache_arrays.h	/^        inline void inc() {x++;} \/\/overloading prefix\/postfix too messy$/;"	f	struct:ZCands::iterator
inc	ddr_mem.h	/^            inline void inc() {n = n->next;}  \/\/ overloading prefix\/postfix too messy$/;"	f	struct:RequestQueue::iterator
inc	ddr_mem.h	/^        inline uint32_t inc(uint32_t i) const { return (i < buf.size()-1)? i+1 : 0; }$/;"	f	class:ActWindow
inc	prefetcher.h	/^        void inc() { count = MIN(count + 1, M); }$/;"	f	class:SatCounter
inc	stats.h	/^        inline void inc() {$/;"	f	class:Counter
inc	stats.h	/^        inline void inc(uint32_t idx) {$/;"	f	class:VectorCounter
inc	stats.h	/^        inline void inc(uint32_t idx, uint64_t value) {$/;"	f	class:VectorCounter
inc	stats.h	/^        inline void inc(uint64_t delta) {$/;"	f	class:Counter
incomingLineAddr	part_repl_policies.h	/^        Address incomingLineAddr;$/;"	m	class:VantageReplPolicy
incomingLineAddr	part_repl_policies.h	/^        Address incomingLineAddr;$/;"	m	class:WayPartReplPolicy
incomingLinePart	part_repl_policies.h	/^        uint32_t incomingLinePart; \/\/to what partition does the incoming line belong?$/;"	m	class:WayPartReplPolicy
index	g_heap/dlmalloc.h.c	/^  bindex_t                  index;$/;"	m	struct:malloc_tree_chunk	file:
inflightRequests	dramsim_mem_ctrl.h	/^        std::multimap<uint64_t, DRAMSimAccEvent*> inflightRequests;$/;"	m	class:DRAMSimMemory
info	log.h	142;"	d
inherited	html/classAdaptiveEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classAggregateStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classClockStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classCounter.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classCrossingEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classCycleBreakdownStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classDDRMemoryAccEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classDelayEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classFilterCache.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classHitEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classLFUReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classLambdaStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classLambdaVectorStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classLegacyReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classLookaheadPartitioner.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classMemAccessEventBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classMemSchedulerDefault.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classMissResponseEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classMissStartEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classMissWritebackEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classNRUReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classOOOCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classOOODispatchEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classOOOIssueEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classOOORespEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classPartitioner_1_1PartitionEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classPrefetchResponseEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classProcStats_1_1ProcessCounter.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classProcStats_1_1ProcessVectorCounter.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classProxyFuncStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classProxyStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classRandReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classRefreshEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classReplAccessEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classScalarStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classSchedEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classSyncEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classTickEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classTimeBreakdownStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classTimingCache.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classTimingCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classTimingCoreEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classTracingCache.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classTreeLRUReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classUMonMonitor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classVantageReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classVectorCounter.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classVectorStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classWayPartReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classWeaveMemAccEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	html/classaligned__mutex.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
init	breakdown_stats.h	/^        virtual void init(const char* name, const char* desc, uint32_t size) {$/;"	f	class:CycleBreakdownStat
init	breakdown_stats.h	/^        virtual void init(const char* name, const char* desc, uint32_t size, const char** names) {$/;"	f	class:CycleBreakdownStat
init	coherence_ctrls.cpp	/^void MESIBottomCC::init(const g_vector<MemObject*>& _parents, Network* network, const char* name) {$/;"	f	class:MESIBottomCC
init	coherence_ctrls.cpp	/^void MESITopCC::init(const g_vector<BaseCache*>& _children, Network* network, const char* name) {$/;"	f	class:MESITopCC
init	ddr_mem.h	/^        void init(size_t size) {$/;"	f	class:RequestQueue
init	ddr_mem.h	/^        void init(uint32_t size) {$/;"	f	class:ActWindow
init	decoder.h	/^    void init(uint64_t _addr, uint32_t _uops, uint32_t _approxInstrs) {$/;"	f	struct:DynBbl
init	profile_stats.h	/^        virtual void init(const char* name, const char* desc, uint32_t size) {$/;"	f	class:TimeBreakdownStat
init	profile_stats.h	/^        virtual void init(const char* name, const char* desc, uint32_t size, const char** names) {$/;"	f	class:TimeBreakdownStat
init	repl_policies.h	/^        void init(uint32_t numLines) {$/;"	f	class:ProfViolReplPolicy
init	slab_alloc.h	/^    void init(SlabAlloc* _allocator) {$/;"	f	struct:slab::Slab
init	stats.h	/^        virtual void init(const char* name, const char* desc) {$/;"	f	class:ScalarStat
init	stats.h	/^        virtual void init(const char* name, const char* desc) {$/;"	f	class:VectorStat
init	stats.h	/^        virtual void init(const char* name, const char* desc, uint32_t size) {$/;"	f	class:VectorCounter
init	stats.h	/^        virtual void init(const char* name, const char* desc, uint32_t size, const char** counterNames) {$/;"	f	class:VectorCounter
init	stats.h	/^        void init(const char* name, const char* desc) {$/;"	f	class:AggregateStat
init	stats.h	/^        void init(const char* name, const char* desc) {$/;"	f	class:Counter
init	stats.h	/^        void init(const char* name, const char* desc, uint64_t (*func)()) {$/;"	f	class:ProxyFuncStat
init	stats.h	/^        void init(const char* name, const char* desc, uint64_t* ptr) {$/;"	f	class:ProxyStat
initCacheStats	cache.cpp	/^void Cache::initCacheStats(AggregateStat* cacheStat) {$/;"	f	class:Cache
initStat	stats.h	/^        virtual void initStat(const char* name, const char* desc) {$/;"	f	class:Stat
initStats	cache.cpp	/^void Cache::initStats(AggregateStat* parentStat) {$/;"	f	class:Cache
initStats	cache_arrays.cpp	/^void ZArray::initStats(AggregateStat* parentStat) {$/;"	f	class:ZArray
initStats	cache_arrays.h	/^        virtual void initStats(AggregateStat* parent) {}$/;"	f	class:CacheArray
initStats	coherence_ctrls.h	/^        void initStats(AggregateStat* cacheStat) {$/;"	f	class:MESICC
initStats	coherence_ctrls.h	/^        void initStats(AggregateStat* cacheStat) {$/;"	f	class:MESITerminalCC
initStats	coherence_ctrls.h	/^        void initStats(AggregateStat* parentStat) {$/;"	f	class:MESIBottomCC
initStats	contention_sim.cpp	/^void ContentionSim::initStats(AggregateStat* parentStat) {$/;"	f	class:ContentionSim
initStats	ddr_mem.cpp	/^void DDRMemory::initStats(AggregateStat* parentStat) {$/;"	f	class:DDRMemory
initStats	detailed_mem.cpp	/^void MemControllerBase::initStats(AggregateStat* parentStat) {$/;"	f	class:MemControllerBase
initStats	dramsim_mem_ctrl.cpp	/^void DRAMSimMemory::initStats(AggregateStat* parentStat) { panic("???"); }$/;"	f	class:DRAMSimMemory
initStats	dramsim_mem_ctrl.cpp	/^void DRAMSimMemory::initStats(AggregateStat* parentStat) {$/;"	f	class:DRAMSimMemory
initStats	dramsim_mem_ctrl.h	/^        void initStats(AggregateStat* parentStat) {$/;"	f	class:SplitAddrMemory
initStats	filter_cache.h	/^        void initStats(AggregateStat* parentStat) {$/;"	f	class:FilterCache
initStats	ideal_arrays.h	/^                void initStats(AggregateStat* parent) {}$/;"	f	class:IdealLRUArray::ProxyReplPolicy
initStats	ideal_arrays.h	/^        void initStats(AggregateStat* parentStat) {$/;"	f	class:IdealLRUPartReplPolicy
initStats	mc.cpp	/^MemoryController::initStats(AggregateStat* parentStat)$/;"	f	class:MemoryController
initStats	mem_ctrls.h	/^        void initStats(AggregateStat* parentStat) {$/;"	f	class:MD1Memory
initStats	memory_hierarchy.h	/^        virtual void initStats(AggregateStat* parentStat) {}$/;"	f	class:MemObject
initStats	null_core.cpp	/^void NullCore::initStats(AggregateStat* parentStat) {$/;"	f	class:NullCore
initStats	ooo_core.cpp	/^void OOOCore::initStats(AggregateStat* parentStat) {$/;"	f	class:OOOCore
initStats	part_repl_policies.h	/^        void initStats(AggregateStat* parentStat) {$/;"	f	class:VantageReplPolicy
initStats	part_repl_policies.h	/^        void initStats(AggregateStat* parentStat) {$/;"	f	class:WayPartReplPolicy
initStats	prefetcher.cpp	/^void StreamPrefetcher::initStats(AggregateStat* parentStat) {$/;"	f	class:StreamPrefetcher
initStats	repl_policies.h	/^        virtual void initStats(AggregateStat* parent) {}$/;"	f	class:ReplPolicy
initStats	repl_policies.h	/^        void initStats(AggregateStat* parentStat) {$/;"	f	class:ProfViolReplPolicy
initStats	scheduler.h	/^        void initStats(AggregateStat* parentStat) {$/;"	f	class:Scheduler
initStats	simple_core.cpp	/^void SimpleCore::initStats(AggregateStat* parentStat) {$/;"	f	class:SimpleCore
initStats	timing_cache.cpp	/^void TimingCache::initStats(AggregateStat* parentStat) {$/;"	f	class:TimingCache
initStats	timing_core.cpp	/^void TimingCore::initStats(AggregateStat* parentStat) {$/;"	f	class:TimingCore
initStats	trace_driver.cpp	/^void TraceDriver::initStats(AggregateStat* parentStat) {$/;"	f	class:TraceDriver
initStats	utility_monitor.cpp	/^void UMon::initStats(AggregateStat* parentStat) {$/;"	f	class:UMon
initTech	ddr_mem.cpp	/^void DDRMemory::initTech(const char* techName, double time_scale) {$/;"	f	class:DDRMemory
init_bins	g_heap/dlmalloc.h.c	/^static void init_bins(mstate m) {$/;"	f	file:
init_malloc_global_mutex	g_heap/dlmalloc.h.c	/^static void init_malloc_global_mutex() {$/;"	f	file:
init_mparams	g_heap/dlmalloc.h.c	/^static int init_mparams(void) {$/;"	f	file:
init_top	g_heap/dlmalloc.h.c	/^static void init_top(mstate m, mchunkptr p, size_t psize) {$/;"	f	file:
init_user_mstate	g_heap/dlmalloc.h.c	/^static mstate init_user_mstate(char* tbase, size_t tsize) {$/;"	f	file:
initialState	memory_hierarchy.h	/^    MESIState initialState;$/;"	m	struct:MemReq
initialize	line_placement.cpp	/^LinePlacementPolicy::initialize(Config & config)$/;"	f	class:LinePlacementPolicy
initialize	mtrand.h	/^inline void MTRand::initialize(const uint64_t seed) {$/;"	f	class:MTRand
initialize	page_placement.cpp	/^PagePlacementPolicy::initialize(Config & config)$/;"	f	class:PagePlacementPolicy
input	pin_cmd.h	/^            g_string input;$/;"	m	struct:PinCmd::ProcCmdInfo
ins	decoder.h	/^            INS ins;$/;"	m	struct:Decoder::Instr
insWindow	ooo_core.h	/^        WindowStructure<1024, 36 \/*size*\/> insWindow; \/\/NOTE: IW width is implicitly determined by the decoder, which sets the port masks according to uop type$/;"	m	class:OOOCore
insert	event_queue.h	/^        void insert(Event* ev, int64_t startDelay = -1) {$/;"	f	class:EventQueue
insert	mc.cpp	/^TagBuffer::insert(Address tag, bool remap)$/;"	f	class:TagBuffer
insertAfter	intrusive_list.h	/^        void insertAfter(T* prev, T* e) {$/;"	f	class:InList
insert_chunk	g_heap/dlmalloc.h.c	3723;"	d	file:
insert_large_chunk	g_heap/dlmalloc.h.c	3582;"	d	file:
insert_small_chunk	g_heap/dlmalloc.h.c	3509;"	d	file:
instrs	core.h	/^    uint32_t instrs;$/;"	m	struct:BblInfo
instrs	null_core.h	/^        uint64_t instrs;$/;"	m	class:NullCore
instrs	ooo_core.h	/^        uint64_t instrs, uops, bbls, approxInstrs, mispredBranches;$/;"	m	class:OOOCore
instrs	simple_core.h	/^        uint64_t instrs;$/;"	m	class:SimpleCore
instrs	timing_core.h	/^        uint64_t instrs;$/;"	m	class:TimingCore
interleaveType	detailed_mem_params.h	/^        uint32_t interleaveType;$/;"	m	class:MemParam
interlockedcompareexchange	g_heap/dlmalloc.h.c	1415;"	d	file:
interlockedexchange	g_heap/dlmalloc.h.c	1416;"	d	file:
internal_free	g_heap/dlmalloc.h.c	3736;"	d	file:
internal_free	g_heap/dlmalloc.h.c	3741;"	d	file:
internal_free	g_heap/dlmalloc.h.c	3745;"	d	file:
internal_mallinfo	g_heap/dlmalloc.h.c	/^static struct mallinfo internal_mallinfo(mstate m) {$/;"	f	file:
internal_malloc	g_heap/dlmalloc.h.c	3735;"	d	file:
internal_malloc	g_heap/dlmalloc.h.c	3739;"	d	file:
internal_malloc	g_heap/dlmalloc.h.c	3744;"	d	file:
internal_malloc_stats	g_heap/dlmalloc.h.c	/^static void internal_malloc_stats(mstate m) {$/;"	f	file:
internal_memalign	g_heap/dlmalloc.h.c	/^static void* internal_memalign(mstate m, size_t alignment, size_t bytes) {$/;"	f	file:
internal_realloc	g_heap/dlmalloc.h.c	/^static void* internal_realloc(mstate m, void* oldmem, size_t bytes) {$/;"	f	file:
invLat	cache.h	/^        uint32_t invLat; \/\/latency of an invalidation$/;"	m	class:Cache
invTypeNames	memory_hierarchy.cpp	/^static const char* invTypeNames[] = {"INV", "INVX"};$/;"	v	file:
invalidate	cache.h	/^        virtual uint64_t invalidate(const InvReq& req) {$/;"	f	class:Cache
invalidate	filter_cache.h	/^        uint64_t invalidate(const InvReq& req) {$/;"	f	class:FilterCache
invalidate	prefetcher.cpp	/^uint64_t StreamPrefetcher::invalidate(const InvReq& req) {$/;"	f	class:StreamPrefetcher
invalidate	trace_driver.cpp	/^uint64_t TraceDriver::invalidate(uint32_t childId, Address lineAddr, InvType type, bool* reqWriteback, uint64_t reqCycle, uint32_t srcId) {$/;"	f	class:TraceDriver
invalidate	trace_driver.h	/^        uint64_t invalidate(const InvReq& req) {$/;"	f	class:TraceDriverProxyCache
is	memory_hierarchy.h	/^    inline bool is (Flag f) const {return flags & f;}$/;"	f	struct:MemReq
isEmpty	coherence_ctrls.h	/^            bool isEmpty() {$/;"	f	struct:MESITopCC::Entry
isExclusive	coherence_ctrls.h	/^            bool isExclusive() {$/;"	f	struct:MESITopCC::Entry
isExclusive	coherence_ctrls.h	/^        inline bool isExclusive(uint32_t lineId) {$/;"	f	class:MESIBottomCC
isFlagsReg	decoder.cpp	/^static inline bool isFlagsReg(uint32_t reg) {$/;"	f	file:
isFutexWaitOp	virt/timeout.cpp	/^static bool isFutexWaitOp(int op) {$/;"	f	file:
isFutexWakeOp	virt/timeout.cpp	/^static bool isFutexWakeOp(int op) {$/;"	f	file:
isInFastForward	process_tree.h	/^        inline bool isInFastForward() const { return inFastForward; }$/;"	f	class:ProcessTreeNode
isInPause	process_tree.h	/^        inline bool isInPause() const { return inPause; }$/;"	f	class:ProcessTreeNode
isNopThread	virt/common.h	/^    bool isNopThread;$/;"	m	struct:PrePatchArgs
isPow2	bithacks.h	/^static inline bool isPow2(T val) {$/;"	f
isRegular	stats.h	/^        bool isRegular() const {$/;"	f	class:AggregateStat
isSleeping	scheduler.h	/^        bool isSleeping(uint32_t pid, uint32_t tid) {$/;"	f	class:Scheduler
isValid	coherence_ctrls.h	/^        bool isValid(uint32_t lineId) {return bcc->isValid(lineId);}$/;"	f	class:MESICC
isValid	coherence_ctrls.h	/^        bool isValid(uint32_t lineId) {return bcc->isValid(lineId);}$/;"	f	class:MESITerminalCC
isValid	coherence_ctrls.h	/^        inline bool isValid(uint32_t lineId) {$/;"	f	class:MESIBottomCC
isValid	event_recorder.h	/^    bool isValid() const { return startEvent; }$/;"	f	struct:TimingRecord
isWrite	ddr_mem.cpp	/^        bool isWrite() const {return write;}$/;"	f	class:DDRMemoryAccEvent
isWrite	dramsim_mem_ctrl.cpp	/^        bool isWrite() const {$/;"	f	class:DRAMSimAccEvent
is_aligned	g_heap/dlmalloc.h.c	1509;"	d	file:
is_current	g_heap/dlmalloc.h.c	/^    bool is_current() {return (getpid() == pid) && (pthread_self() == tid);}$/;"	f	struct:threadid_t
is_empty	g_heap/dlmalloc.h.c	/^    bool is_empty() {return (pid == 0) && (tid == 0);}$/;"	f	struct:threadid_t
is_extern_segment	g_heap/dlmalloc.h.c	2437;"	d	file:
is_global	g_heap/dlmalloc.h.c	2591;"	d	file:
is_granularity_aligned	g_heap/dlmalloc.h.c	2639;"	d	file:
is_initialized	g_heap/dlmalloc.h.c	2595;"	d	file:
is_inuse	g_heap/dlmalloc.h.c	2221;"	d	file:
is_mmapped	g_heap/dlmalloc.h.c	2222;"	d	file:
is_mmapped_segment	g_heap/dlmalloc.h.c	2436;"	d	file:
is_page_aligned	g_heap/dlmalloc.h.c	2637;"	d	file:
is_small	g_heap/dlmalloc.h.c	2773;"	d	file:
iterator	cache_arrays.h	/^        explicit inline iterator(ZWalkInfo* _x) : x(_x) {}$/;"	f	struct:ZCands::iterator
iterator	cache_arrays.h	/^        explicit inline iterator(uint32_t _x) : x(_x) {}$/;"	f	struct:SetAssocCands::iterator
iterator	cache_arrays.h	/^    struct iterator {$/;"	s	struct:SetAssocCands
iterator	cache_arrays.h	/^    struct iterator {$/;"	s	struct:ZCands
iterator	ddr_mem.h	/^            explicit inline iterator(Node* _n) : n(_n) {}$/;"	f	struct:RequestQueue::iterator
iterator	ddr_mem.h	/^        struct iterator {$/;"	s	class:RequestQueue
join	barrier.h	/^        void join(uint32_t tid, lock_t* schedLock) {$/;"	f	class:Barrier
join	core.h	/^        virtual void join() {}$/;"	f	class:Core
join	null_core.cpp	/^void NullCore::join() {$/;"	f	class:NullCore
join	ooo_core.cpp	/^void OOOCore::join() {$/;"	f	class:OOOCore
join	scheduler.h	/^        uint32_t join(uint32_t pid, uint32_t tid) {$/;"	f	class:Scheduler
join	simple_core.cpp	/^void SimpleCore::join() {$/;"	f	class:SimpleCore
join	timing_core.cpp	/^void TimingCore::join() {$/;"	f	class:TimingCore
joinPtrs	zsim.cpp	/^static const InstrFuncPtrs joinPtrs = {JoinAndLoadSingle, JoinAndStoreSingle, JoinAndBasicBlock, JoinAndRecordBranch, JoinAndPredLoadSingle, JoinAndPredStoreSingle, FPTR_JOIN};$/;"	v	file:
keepcost	g_heap/dlmalloc.h.c	/^  MALLINFO_FIELD_TYPE keepcost; \/* releasable (via malloc_trim) space *\/$/;"	m	struct:mallinfo	file:
l	g_heap/dlmalloc.h.c	/^  volatile long l;$/;"	m	struct:win32_mlock_t	file:
l	g_heap/dlmalloc.h.c	/^  volatile unsigned int l;$/;"	m	struct:pthread_mlock_t	file:
l00001	html/Callback_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*********************************************************************************<\/span><\/div>$/;"	a
l00001	html/DRAMSim_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="comment">\/*********************************************************************************<\/span><\/div>$/;"	a
l00001	html/access__tracing_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/barrier_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/bithacks_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/breakdown__stats_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/cache_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/cache__arrays_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/coherence__ctrls_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/config_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/constants_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/contention__sim_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/core_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/core__recorder_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/cpuenum_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/cpuid_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/ddr__mem_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/debug_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/debug__harness_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/debug__zsim_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/decoder_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/detailed__mem_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/detailed__mem__params_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/dramsim__mem__ctrl_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/event__queue_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/event__recorder_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/filter__cache_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/galloc_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/hash_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/ideal__arrays_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/init_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/intrusive__list_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/line__placement_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div>$/;"	a
l00001	html/locks_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/log_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/mc_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef _MC_H_<\/span><\/div>$/;"	a
l00001	html/mem__ctrls_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/memory__hierarchy_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/mtrand_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/mutex_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/network_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/null__core_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/ooo__core_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/ooo__core__recorder_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/os__placement_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div>$/;"	a
l00001	html/pad_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/page__placement_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#pragma once<\/span><\/div>$/;"	a
l00001	html/part__repl__policies_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/partition__mapper_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/partitioner_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/pin__cmd_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/prefetcher_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/prio__queue_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/proc__stats_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/process__stats_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/process__tree_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/profile__stats_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/rdtsc_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/repl__policies_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/scheduler_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/simple__core_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/slab__alloc_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/stats_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/stats__filter_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/str_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/tick__event_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/timing__cache_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/timing__core_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/timing__event_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/trace__driver_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/tracing__cache_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/utility__monitor_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/weave__md1__mem_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00001	html/zsim_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div>$/;"	a
l00002	html/Callback_8h_source.html	/^<div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">*  Copyright (c) 2010-2011, Elliott Cooper-Balis<\/span><\/div>$/;"	a
l00002	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="comment">*  Copyright (c) 2010-2011, Elliott Cooper-Balis<\/span><\/div>$/;"	a
l00002	html/line__placement_8h_source.html	/^<div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00002	html/mc_8h_source.html	/^<div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define _MC_H_<\/span><\/div>$/;"	a
l00002	html/os__placement_8h_source.html	/^<div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00002	html/page__placement_8h_source.html	/^<div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00003	html/Callback_8h_source.html	/^<div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">*                             Paul Rosenfeld<\/span><\/div>$/;"	a
l00003	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="comment">*                             Paul Rosenfeld<\/span><\/div>$/;"	a
l00003	html/line__placement_8h_source.html	/^<div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;config.h&quot;<\/span><\/div>$/;"	a
l00003	html/mc_8h_source.html	/^<div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00003	html/os__placement_8h_source.html	/^<div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;mc.h&quot;<\/span><\/div>$/;"	a
l00003	html/page__placement_8h_source.html	/^<div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;config.h&quot;<\/span><\/div>$/;"	a
l00004	html/Callback_8h_source.html	/^<div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">*                             Bruce Jacob<\/span><\/div>$/;"	a
l00004	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="comment">*                             Bruce Jacob<\/span><\/div>$/;"	a
l00004	html/line__placement_8h_source.html	/^<div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00004	html/mc_8h_source.html	/^<div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;config.h&quot;<\/span><\/div>$/;"	a
l00004	html/os__placement_8h_source.html	/^<div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<\/div>$/;"	a
l00004	html/page__placement_8h_source.html	/^<div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;mc.h&quot;<\/span><\/div>$/;"	a
l00005	html/Callback_8h_source.html	/^<div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">*                             University of Maryland <\/span><\/div>$/;"	a
l00005	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="comment">*                             University of Maryland <\/span><\/div>$/;"	a
l00005	html/line__placement_8h_source.html	/^<div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div>$/;"	a
l00005	html/mc_8h_source.html	/^<div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00005	html/os__placement_8h_source.html	/^<div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="keyword">class <\/span>DramCache;<\/div>$/;"	a
l00005	html/page__placement_8h_source.html	/^<div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<\/div>$/;"	a
l00006	html/Callback_8h_source.html	/^<div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*                             dramninjas [at] gmail [dot] com<\/span><\/div>$/;"	a
l00006	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="comment">*                             dramninjas [at] gmail [dot] com<\/span><\/div>$/;"	a
l00006	html/line__placement_8h_source.html	/^<div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">using namespace <\/span>std;<\/div>$/;"	a
l00006	html/mc_8h_source.html	/^<div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00006	html/os__placement_8h_source.html	/^<div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div>$/;"	a
l00006	html/page__placement_8h_source.html	/^<div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classWay.html">Way<\/a>;<\/div>$/;"	a
l00007	html/Callback_8h_source.html	/^<div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment">*  All rights reserved.<\/span><\/div>$/;"	a
l00007	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="comment">*  All rights reserved.<\/span><\/div>$/;"	a
l00007	html/line__placement_8h_source.html	/^<div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<\/div>$/;"	a
l00007	html/mc_8h_source.html	/^<div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div>$/;"	a
l00007	html/os__placement_8h_source.html	/^<div class="line"><a name="l00007"><\/a><span class="lineno"><a class="line" href="classOSPlacementPolicy.html">    7<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classOSPlacementPolicy.html">OSPlacementPolicy<\/a><\/div>$/;"	a
l00007	html/page__placement_8h_source.html	/^<div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classSet.html">Set<\/a>; <\/div>$/;"	a
l00008	html/Callback_8h_source.html	/^<div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment">*  <\/span><\/div>$/;"	a
l00008	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="comment">*  <\/span><\/div>$/;"	a
l00008	html/line__placement_8h_source.html	/^<div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMemoryController.html">MemoryController<\/a>;<\/div>$/;"	a
l00008	html/mc_8h_source.html	/^<div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00008	html/os__placement_8h_source.html	/^<div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;{<\/div>$/;"	a
l00008	html/page__placement_8h_source.html	/^<div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">class <\/span>DramCache;<\/div>$/;"	a
l00009	html/Callback_8h_source.html	/^<div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment">*  Redistribution and use in source and binary forms, with or without<\/span><\/div>$/;"	a
l00009	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="comment">*  Redistribution and use in source and binary forms, with or without<\/span><\/div>$/;"	a
l00009	html/line__placement_8h_source.html	/^<div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classWay.html">Way<\/a>;<\/div>$/;"	a
l00009	html/mc_8h_source.html	/^<div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_unordered_map.h&quot;<\/span><\/div>$/;"	a
l00009	html/os__placement_8h_source.html	/^<div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">public<\/span>:<\/div>$/;"	a
l00009	html/page__placement_8h_source.html	/^<div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div>$/;"	a
l00010	html/Callback_8h_source.html	/^<div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="comment">*  modification, are permitted provided that the following conditions are met:<\/span><\/div>$/;"	a
l00010	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="comment">*  modification, are permitted provided that the following conditions are met:<\/span><\/div>$/;"	a
l00010	html/line__placement_8h_source.html	/^<div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div>$/;"	a
l00010	html/mc_8h_source.html	/^<div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div>$/;"	a
l00010	html/os__placement_8h_source.html	/^<div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;    <a class="code" href="classOSPlacementPolicy.html">OSPlacementPolicy<\/a>(<a class="code" href="classMemoryController.html">MemoryController<\/a> * mc) : _mc(mc) {};<\/div>$/;"	a
l00010	html/page__placement_8h_source.html	/^<div class="line"><a name="l00010"><\/a><span class="lineno"><a class="line" href="classPagePlacementPolicy.html">   10<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPagePlacementPolicy.html">PagePlacementPolicy<\/a><\/div>$/;"	a
l00011	html/Callback_8h_source.html	/^<div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="comment">*  <\/span><\/div>$/;"	a
l00011	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="comment">*  <\/span><\/div>$/;"	a
l00011	html/line__placement_8h_source.html	/^<div class="line"><a name="l00011"><\/a><span class="lineno"><a class="line" href="classLinePlacementPolicy.html">   11<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classLinePlacementPolicy.html">LinePlacementPolicy<\/a><\/div>$/;"	a
l00011	html/mc_8h_source.html	/^<div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#define MAX_STEPS 10000<\/span><\/div>$/;"	a
l00011	html/os__placement_8h_source.html	/^<div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    <span class="keywordtype">void<\/span> handleCacheAccess(Address tag, ReqType type);<\/div>$/;"	a
l00011	html/page__placement_8h_source.html	/^<div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;{<\/div>$/;"	a
l00012	html/Callback_8h_source.html	/^<div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">*     * Redistributions of source code must retain the above copyright notice,<\/span><\/div>$/;"	a
l00012	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="comment">*     * Redistributions of source code must retain the above copyright notice,<\/span><\/div>$/;"	a
l00012	html/line__placement_8h_source.html	/^<div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;{<\/div>$/;"	a
l00012	html/mc_8h_source.html	/^<div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00012	html/os__placement_8h_source.html	/^<div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    uint64_t remapPages(); <\/div>$/;"	a
l00012	html/page__placement_8h_source.html	/^<div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="keyword">public<\/span>:<\/div>$/;"	a
l00013	html/Callback_8h_source.html	/^<div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">*        this list of conditions and the following disclaimer.<\/span><\/div>$/;"	a
l00013	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="comment">*        this list of conditions and the following disclaimer.<\/span><\/div>$/;"	a
l00013	html/line__placement_8h_source.html	/^<div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">public<\/span>:<\/div>$/;"	a
l00013	html/mc_8h_source.html	/^<div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="keyword">enum<\/span> ReqType<\/div>$/;"	a
l00013	html/os__placement_8h_source.html	/^<div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <\/div>$/;"	a
l00013	html/page__placement_8h_source.html	/^<div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <span class="keyword">enum<\/span> RepScheme <\/div>$/;"	a
l00014	html/Callback_8h_source.html	/^<div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">*  <\/span><\/div>$/;"	a
l00014	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="comment">*  <\/span><\/div>$/;"	a
l00014	html/line__placement_8h_source.html	/^<div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;   <a class="code" href="classLinePlacementPolicy.html">LinePlacementPolicy<\/a>() {}; <\/div>$/;"	a
l00014	html/mc_8h_source.html	/^<div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;{<\/div>$/;"	a
l00014	html/os__placement_8h_source.html	/^<div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    <span class="keywordtype">void<\/span> clearStats(); <\/div>$/;"	a
l00014	html/page__placement_8h_source.html	/^<div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    {<\/div>$/;"	a
l00015	html/Callback_8h_source.html	/^<div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment">*     * Redistributions in binary form must reproduce the above copyright notice,<\/span><\/div>$/;"	a
l00015	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="comment">*     * Redistributions in binary form must reproduce the above copyright notice,<\/span><\/div>$/;"	a
l00015	html/line__placement_8h_source.html	/^<div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;   <span class="keywordtype">void<\/span> initialize(<a class="code" href="classConfig.html">Config<\/a> &amp; config);<\/div>$/;"	a
l00015	html/mc_8h_source.html	/^<div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    LOAD = 0,<\/div>$/;"	a
l00015	html/os__placement_8h_source.html	/^<div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <span class="comment">\/\/void printInfo();<\/span><\/div>$/;"	a
l00015	html/page__placement_8h_source.html	/^<div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;        LRU = 0,<\/div>$/;"	a
l00016	html/Callback_8h_source.html	/^<div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">*        this list of conditions and the following disclaimer in the documentation<\/span><\/div>$/;"	a
l00016	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<span class="comment">*        this list of conditions and the following disclaimer in the documentation<\/span><\/div>$/;"	a
l00016	html/line__placement_8h_source.html	/^<div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;   <span class="keywordtype">bool<\/span> handleCacheMiss(<a class="code" href="classWay.html">Way<\/a> * current_tad);<\/div>$/;"	a
l00016	html/mc_8h_source.html	/^<div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    STORE<\/div>$/;"	a
l00016	html/os__placement_8h_source.html	/^<div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;     <\/div>$/;"	a
l00016	html/page__placement_8h_source.html	/^<div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;        FBR<\/div>$/;"	a
l00017	html/Callback_8h_source.html	/^<div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment">*        and\/or other materials provided with the distribution.<\/span><\/div>$/;"	a
l00017	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="comment">*        and\/or other materials provided with the distribution.<\/span><\/div>$/;"	a
l00017	html/line__placement_8h_source.html	/^<div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;   <\/div>$/;"	a
l00017	html/mc_8h_source.html	/^<div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;};<\/div>$/;"	a
l00017	html/os__placement_8h_source.html	/^<div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;<span class="keyword">private<\/span>:<\/div>$/;"	a
l00017	html/page__placement_8h_source.html	/^<div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    };<\/div>$/;"	a
l00018	html/Callback_8h_source.html	/^<div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">*  <\/span><\/div>$/;"	a
l00018	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="comment">*  <\/span><\/div>$/;"	a
l00018	html/line__placement_8h_source.html	/^<div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<span class="keyword">private<\/span>:<\/div>$/;"	a
l00018	html/mc_8h_source.html	/^<div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div>$/;"	a
l00018	html/os__placement_8h_source.html	/^<div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <\/div>$/;"	a
l00018	html/page__placement_8h_source.html	/^<div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div>$/;"	a
l00019	html/Callback_8h_source.html	/^<div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND<\/span><\/div>$/;"	a
l00019	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="comment">*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND<\/span><\/div>$/;"	a
l00019	html/line__placement_8h_source.html	/^<div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;   drand48_data _buffer;<\/div>$/;"	a
l00019	html/mc_8h_source.html	/^<div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;<span class="keyword">enum<\/span> Scheme<\/div>$/;"	a
l00019	html/os__placement_8h_source.html	/^<div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <a class="code" href="classMemoryController.html">MemoryController<\/a> * _mc;<\/div>$/;"	a
l00019	html/page__placement_8h_source.html	/^<div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <a class="code" href="classPagePlacementPolicy.html">PagePlacementPolicy<\/a>(<a class="code" href="classMemoryController.html">MemoryController<\/a> * mc) : _mc(mc) {};<\/div>$/;"	a
l00020	html/Callback_8h_source.html	/^<div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED<\/span><\/div>$/;"	a
l00020	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="comment">*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED<\/span><\/div>$/;"	a
l00020	html/line__placement_8h_source.html	/^<div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;   <span class="keywordtype">double<\/span> _sample_rate;<\/div>$/;"	a
l00020	html/mc_8h_source.html	/^<div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;{<\/div>$/;"	a
l00020	html/os__placement_8h_source.html	/^<div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;};<\/div>$/;"	a
l00020	html/page__placement_8h_source.html	/^<div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keywordtype">void<\/span> initialize(<a class="code" href="classConfig.html">Config<\/a> &amp; config);<\/div>$/;"	a
l00021	html/Callback_8h_source.html	/^<div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE<\/span><\/div>$/;"	a
l00021	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="comment">*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE<\/span><\/div>$/;"	a
l00021	html/line__placement_8h_source.html	/^<div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;   <span class="keywordtype">bool<\/span> _enable_replace;<\/div>$/;"	a
l00021	html/mc_8h_source.html	/^<div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;   AlloyCache,<\/div>$/;"	a
l00021	html/page__placement_8h_source.html	/^<div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    uint32_t handleCacheMiss(Address tag, ReqType type, uint64_t set_num, <a class="code" href="classSet.html">Set<\/a> * set, <span class="keywordtype">bool<\/span> &amp;counter_access);<\/div>$/;"	a
l00021	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#ifndef PREFETCHER_H_<\/span><\/div>$/;"	a
l00022	html/Callback_8h_source.html	/^<div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE<\/span><\/div>$/;"	a
l00022	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="comment">*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE<\/span><\/div>$/;"	a
l00022	html/line__placement_8h_source.html	/^<div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;};<\/div>$/;"	a
l00022	html/mc_8h_source.html	/^<div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;   UnisonCache,<\/div>$/;"	a
l00022	html/page__placement_8h_source.html	/^<div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keywordtype">void<\/span> handleCacheHit(Address tag, ReqType type, uint64_t set_num, <a class="code" href="classSet.html">Set<\/a> * set, <span class="keywordtype">bool<\/span> &amp;counter_access, uint32_t hit_way);<\/div>$/;"	a
l00022	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define PREFETCHER_H_<\/span><\/div>$/;"	a
l00023	html/Callback_8h_source.html	/^<div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL<\/span><\/div>$/;"	a
l00023	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="comment">*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL<\/span><\/div>$/;"	a
l00023	html/mc_8h_source.html	/^<div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;   HMA,<\/div>$/;"	a
l00023	html/page__placement_8h_source.html	/^<div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <\/div>$/;"	a
l00023	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00024	html/Callback_8h_source.html	/^<div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR<\/span><\/div>$/;"	a
l00024	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="comment">*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR<\/span><\/div>$/;"	a
l00024	html/mc_8h_source.html	/^<div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;   HybridCache,<\/div>$/;"	a
l00024	html/page__placement_8h_source.html	/^<div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    uint64_t getTraffic() { <span class="keywordflow">return<\/span> _num_counter_read + _num_counter_write; };<\/div>$/;"	a
l00024	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<span class="preprocessor">#include &lt;array&gt;<\/span><\/div>$/;"	a
l00025	html/Callback_8h_source.html	/^<div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER<\/span><\/div>$/;"	a
l00025	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="comment">*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER<\/span><\/div>$/;"	a
l00025	html/mc_8h_source.html	/^<div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;   NoCache,<\/div>$/;"	a
l00025	html/page__placement_8h_source.html	/^<div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keywordtype">void<\/span> flushChunk(uint32_t set);<\/div>$/;"	a
l00025	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#include &lt;bitset&gt;<\/span><\/div>$/;"	a
l00026	html/Callback_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,<\/span><\/div>$/;"	a
l00026	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,<\/span><\/div>$/;"	a
l00026	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef ACCESS_TRACING_H_<\/span><\/div>$/;"	a
l00026	html/barrier_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">\/* Implements a barrier with join-leave semantics and parallelism control.<\/span><\/div>$/;"	a
l00026	html/bithacks_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef BITHACKS_H_<\/span><\/div>$/;"	a
l00026	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef BREAKDOWN_STATS_H_<\/span><\/div>$/;"	a
l00026	html/cache_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef CACHE_H_<\/span><\/div>$/;"	a
l00026	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef CACHE_ARRAYS_H_<\/span><\/div>$/;"	a
l00026	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef COHERENCE_CTRLS_H_<\/span><\/div>$/;"	a
l00026	html/config_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef CONFIG_H_<\/span><\/div>$/;"	a
l00026	html/constants_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef CONSTANTS_H_<\/span><\/div>$/;"	a
l00026	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef CONTENTION_SIM_H_<\/span><\/div>$/;"	a
l00026	html/core_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef CORE_H_<\/span><\/div>$/;"	a
l00026	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef CORE_RECORDER_H_<\/span><\/div>$/;"	a
l00026	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef CPUENUM_H_<\/span><\/div>$/;"	a
l00026	html/cpuid_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef CPUID_H_<\/span><\/div>$/;"	a
l00026	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef DDR_MEM_H_<\/span><\/div>$/;"	a
l00026	html/debug_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef DEBUG_H_<\/span><\/div>$/;"	a
l00026	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef DEBUG_HARNESS_H_<\/span><\/div>$/;"	a
l00026	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef DEBUG_ZSIM_H_<\/span><\/div>$/;"	a
l00026	html/decoder_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef DECODER_H_<\/span><\/div>$/;"	a
l00026	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef DETAILED_MEM_H_<\/span><\/div>$/;"	a
l00026	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef DETAILED_MEM_PARAMS_H_<\/span><\/div>$/;"	a
l00026	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef DRAMSIM_MEM_CTRL_H_<\/span><\/div>$/;"	a
l00026	html/event__queue_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef EVENT_QUEUE_H_<\/span><\/div>$/;"	a
l00026	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef EVENT_RECORDER_H_<\/span><\/div>$/;"	a
l00026	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef FILTER_CACHE_H_<\/span><\/div>$/;"	a
l00026	html/galloc_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef GALLOC_H_<\/span><\/div>$/;"	a
l00026	html/hash_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef HASH_H_<\/span><\/div>$/;"	a
l00026	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef IDEAL_ARRAYS_H_<\/span><\/div>$/;"	a
l00026	html/init_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef INIT_H_<\/span><\/div>$/;"	a
l00026	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef INTRUSIVE_LIST_H_<\/span><\/div>$/;"	a
l00026	html/locks_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">\/* dsm: An attempt at having locks that don&#39;t suck *\/<\/span><\/div>$/;"	a
l00026	html/log_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">\/* General logging\/info\/warn\/panic routines *\/<\/span><\/div>$/;"	a
l00026	html/mc_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;   CacheOnly,<\/div>$/;"	a
l00026	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef MEM_CTRLS_H_<\/span><\/div>$/;"	a
l00026	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef MEMORY_HIERARCHY_H_<\/span><\/div>$/;"	a
l00026	html/mtrand_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">\/\/ MersenneTwister.h<\/span><\/div>$/;"	a
l00026	html/mutex_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef MUTEX_H_<\/span><\/div>$/;"	a
l00026	html/network_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef NETWORK_H_<\/span><\/div>$/;"	a
l00026	html/null__core_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef NULL_CORE_H_<\/span><\/div>$/;"	a
l00026	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef OOO_CORE_H_<\/span><\/div>$/;"	a
l00026	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef OOO_CORE_RECORDER_H_<\/span><\/div>$/;"	a
l00026	html/pad_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef PAD_H_<\/span><\/div>$/;"	a
l00026	html/page__placement_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keywordtype">void<\/span> clearStats(); <\/div>$/;"	a
l00026	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef PART_REPL_POLICIES_H_<\/span><\/div>$/;"	a
l00026	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef PARTITION_MAPPER_H_<\/span><\/div>$/;"	a
l00026	html/partitioner_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef PARTITIONER_H_<\/span><\/div>$/;"	a
l00026	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef PIN_CMD_H_<\/span><\/div>$/;"	a
l00026	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#include &quot;bithacks.h&quot;<\/span><\/div>$/;"	a
l00026	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef PRIO_QUEUE_H_<\/span><\/div>$/;"	a
l00026	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef PROC_STATS_H_<\/span><\/div>$/;"	a
l00026	html/process__stats_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef PROCESS_STATS_H_<\/span><\/div>$/;"	a
l00026	html/process__tree_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef PROCESS_TREE_H_<\/span><\/div>$/;"	a
l00026	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef PROFILE_STATS_H_<\/span><\/div>$/;"	a
l00026	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef RDTSC_H_<\/span><\/div>$/;"	a
l00026	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef REPL_POLICIES_H_<\/span><\/div>$/;"	a
l00026	html/simple__core_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef SIMPLE_CORE_H_<\/span><\/div>$/;"	a
l00026	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef SLAB_ALLOC_H_<\/span><\/div>$/;"	a
l00026	html/stats_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="comment">\/* Statistics facilities<\/span><\/div>$/;"	a
l00026	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef STATS_FILTER_H_<\/span><\/div>$/;"	a
l00026	html/str_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef STR_H_<\/span><\/div>$/;"	a
l00026	html/tick__event_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef TICK_EVENT_H_<\/span><\/div>$/;"	a
l00026	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef TIMING_CACHE_H_<\/span><\/div>$/;"	a
l00026	html/timing__core_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef TIMING_CORE_H_<\/span><\/div>$/;"	a
l00026	html/timing__event_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef TIMING_EVENT_H_<\/span><\/div>$/;"	a
l00026	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef __TRACE_DRIVER_H__<\/span><\/div>$/;"	a
l00026	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef __TRACING_CACHE_H__<\/span><\/div>$/;"	a
l00026	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef UTILITY_MONITOR_H_<\/span><\/div>$/;"	a
l00026	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef WEAVE_MD1_MEM_H_<\/span><\/div>$/;"	a
l00026	html/zsim_8h_source.html	/^<div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<span class="preprocessor">#ifndef ZSIM_H_<\/span><\/div>$/;"	a
l00027	html/Callback_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE<\/span><\/div>$/;"	a
l00027	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE<\/span><\/div>$/;"	a
l00027	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define ACCESS_TRACING_H_<\/span><\/div>$/;"	a
l00027	html/barrier_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment"> * JOIN-LEAVE SEMANTICS: Threads can join or leave the barrier at any point in time.<\/span><\/div>$/;"	a
l00027	html/bithacks_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define BITHACKS_H_<\/span><\/div>$/;"	a
l00027	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define BREAKDOWN_STATS_H_<\/span><\/div>$/;"	a
l00027	html/cache_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define CACHE_H_<\/span><\/div>$/;"	a
l00027	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define CACHE_ARRAYS_H_<\/span><\/div>$/;"	a
l00027	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define COHERENCE_CTRLS_H_<\/span><\/div>$/;"	a
l00027	html/config_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define CONFIG_H_<\/span><\/div>$/;"	a
l00027	html/constants_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define CONSTANTS_H_<\/span><\/div>$/;"	a
l00027	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define CONTENTION_SIM_H_<\/span><\/div>$/;"	a
l00027	html/core_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define CORE_H_<\/span><\/div>$/;"	a
l00027	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define CORE_RECORDER_H_<\/span><\/div>$/;"	a
l00027	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define CPUENUM_H_<\/span><\/div>$/;"	a
l00027	html/cpuid_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define CPUID_H_<\/span><\/div>$/;"	a
l00027	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define DDR_MEM_H_<\/span><\/div>$/;"	a
l00027	html/debug_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define DEBUG_H_<\/span><\/div>$/;"	a
l00027	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define DEBUG_HARNESS_H_<\/span><\/div>$/;"	a
l00027	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define DEBUG_ZSIM_H_<\/span><\/div>$/;"	a
l00027	html/decoder_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define DECODER_H_<\/span><\/div>$/;"	a
l00027	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define DETAILED_MEM_H_<\/span><\/div>$/;"	a
l00027	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define DETAILED_MEM_PARAMS_H_<\/span><\/div>$/;"	a
l00027	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define DRAMSIM_MEM_CTRL_H_<\/span><\/div>$/;"	a
l00027	html/event__queue_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define EVENT_QUEUE_H_<\/span><\/div>$/;"	a
l00027	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define EVENT_RECORDER_H_<\/span><\/div>$/;"	a
l00027	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define FILTER_CACHE_H_<\/span><\/div>$/;"	a
l00027	html/galloc_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define GALLOC_H_<\/span><\/div>$/;"	a
l00027	html/hash_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define HASH_H_<\/span><\/div>$/;"	a
l00027	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define IDEAL_ARRAYS_H_<\/span><\/div>$/;"	a
l00027	html/init_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define INIT_H_<\/span><\/div>$/;"	a
l00027	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define INTRUSIVE_LIST_H_<\/span><\/div>$/;"	a
l00027	html/locks_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div>$/;"	a
l00027	html/log_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div>$/;"	a
l00027	html/mc_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;   Tagless<\/div>$/;"	a
l00027	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define MEM_CTRLS_H_<\/span><\/div>$/;"	a
l00027	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define MEMORY_HIERARCHY_H_<\/span><\/div>$/;"	a
l00027	html/mtrand_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment">\/\/ Mersenne Twister random number generator -- a C++ class MTRand<\/span><\/div>$/;"	a
l00027	html/mutex_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define MUTEX_H_<\/span><\/div>$/;"	a
l00027	html/network_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define NETWORK_H_<\/span><\/div>$/;"	a
l00027	html/null__core_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define NULL_CORE_H_<\/span><\/div>$/;"	a
l00027	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define OOO_CORE_H_<\/span><\/div>$/;"	a
l00027	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define OOO_CORE_RECORDER_H_<\/span><\/div>$/;"	a
l00027	html/pad_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define PAD_H_<\/span><\/div>$/;"	a
l00027	html/page__placement_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    RepScheme get_placement_policy() { <span class="keywordflow">return<\/span> _placement_policy; }<\/div>$/;"	a
l00027	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define PART_REPL_POLICIES_H_<\/span><\/div>$/;"	a
l00027	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define PARTITION_MAPPER_H_<\/span><\/div>$/;"	a
l00027	html/partitioner_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define PARTITIONER_H_<\/span><\/div>$/;"	a
l00027	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define PIN_CMD_H_<\/span><\/div>$/;"	a
l00027	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00027	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define PRIO_QUEUE_H_<\/span><\/div>$/;"	a
l00027	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define PROC_STATS_H_<\/span><\/div>$/;"	a
l00027	html/process__stats_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define PROCESS_STATS_H_<\/span><\/div>$/;"	a
l00027	html/process__tree_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define PROCESS_TREE_H_<\/span><\/div>$/;"	a
l00027	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define PROFILE_STATS_H_<\/span><\/div>$/;"	a
l00027	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define RDTSC_H_<\/span><\/div>$/;"	a
l00027	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define REPL_POLICIES_H_<\/span><\/div>$/;"	a
l00027	html/scheduler_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#ifndef SCHEDULER_H_<\/span><\/div>$/;"	a
l00027	html/simple__core_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define SIMPLE_CORE_H_<\/span><\/div>$/;"	a
l00027	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define SLAB_ALLOC_H_<\/span><\/div>$/;"	a
l00027	html/stats_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="comment"> * Author: Daniel Sanchez<\/span><\/div>$/;"	a
l00027	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define STATS_FILTER_H_<\/span><\/div>$/;"	a
l00027	html/str_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define STR_H_<\/span><\/div>$/;"	a
l00027	html/tick__event_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define TICK_EVENT_H_<\/span><\/div>$/;"	a
l00027	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define TIMING_CACHE_H_<\/span><\/div>$/;"	a
l00027	html/timing__core_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define TIMING_CORE_H_<\/span><\/div>$/;"	a
l00027	html/timing__event_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define TIMING_EVENT_H_<\/span><\/div>$/;"	a
l00027	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define __TRACE_DRIVER_H__<\/span><\/div>$/;"	a
l00027	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define __TRACING_CACHE_H__<\/span><\/div>$/;"	a
l00027	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define UTILITY_MONITOR_H_<\/span><\/div>$/;"	a
l00027	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define WEAVE_MD1_MEM_H_<\/span><\/div>$/;"	a
l00027	html/zsim_8h_source.html	/^<div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define ZSIM_H_<\/span><\/div>$/;"	a
l00028	html/Callback_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<\/span><\/div>$/;"	a
l00028	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<\/span><\/div>$/;"	a
l00028	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/barrier_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment"> * Threads in the barrier call sync and synchronize with all other threads<\/span><\/div>$/;"	a
l00028	html/bithacks_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/cache_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/config_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/constants_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/core_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/cpuid_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/debug_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/decoder_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/event__queue_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/galloc_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/hash_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/init_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/locks_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">#ifndef LOCKS_H_<\/span><\/div>$/;"	a
l00028	html/log_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">#ifndef LOG_H_<\/span><\/div>$/;"	a
l00028	html/mc_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;};<\/div>$/;"	a
l00028	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/mtrand_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment">\/\/ Based on code by Makoto Matsumoto, Takuji Nishimura, and Shawn Cokus<\/span><\/div>$/;"	a
l00028	html/mutex_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/network_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/null__core_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/pad_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/page__placement_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="keyword">private<\/span>:<\/div>$/;"	a
l00028	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/partitioner_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00028	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/process__stats_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/process__tree_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/scheduler_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define SCHEDULER_H_<\/span><\/div>$/;"	a
l00028	html/simple__core_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/stats_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment"> * Date: Aug 2010<\/span><\/div>$/;"	a
l00028	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/str_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/tick__event_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/timing__core_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/timing__event_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00028	html/zsim_8h_source.html	/^<div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00029	html/Callback_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">*********************************************************************************\/<\/span><\/div>$/;"	a
l00029	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">*********************************************************************************\/<\/span><\/div>$/;"	a
l00029	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00029	html/barrier_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment"> * participating in the barrier. Threads can leave a barrier at any point in time<\/span><\/div>$/;"	a
l00029	html/bithacks_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00029	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;bithacks.h&quot;<\/span><\/div>$/;"	a
l00029	html/cache_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;cache_arrays.h&quot;<\/span><\/div>$/;"	a
l00029	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00029	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;bitset&gt;<\/span><\/div>$/;"	a
l00029	html/config_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* Thin wrapper around libconfig to:<\/span><\/div>$/;"	a
l00029	html/constants_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* Simulator constants\/limits go here, defined by macros *\/<\/span><\/div>$/;"	a
l00029	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;functional&gt;<\/span><\/div>$/;"	a
l00029	html/core_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00029	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;event_recorder.h&quot;<\/span><\/div>$/;"	a
l00029	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* Small routines for core enumeration *\/<\/span><\/div>$/;"	a
l00029	html/cpuid_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* CPUID records gathered from other machines, used to virtualize CPUID<\/span><\/div>$/;"	a
l00029	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;deque&gt;<\/span><\/div>$/;"	a
l00029	html/debug_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/\/This header has common debugging datastructure defs.<\/span><\/div>$/;"	a
l00029	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;debug.h&quot;<\/span><\/div>$/;"	a
l00029	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;debug.h&quot;<\/span><\/div>$/;"	a
l00029	html/decoder_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00029	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;detailed_mem_params.h&quot;<\/span><\/div>$/;"	a
l00029	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00029	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;map&gt;<\/span><\/div>$/;"	a
l00029	html/event__queue_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00029	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00029	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;bithacks.h&quot;<\/span><\/div>$/;"	a
l00029	html/galloc_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;<\/span><\/div>$/;"	a
l00029	html/hash_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00029	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;cache_arrays.h&quot;<\/span><\/div>$/;"	a
l00029	html/init_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00029	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* Intrusive doubly-linked list -- simple enough to not include boost,<\/span><\/div>$/;"	a
l00029	html/locks_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define LOCKS_H_<\/span><\/div>$/;"	a
l00029	html/log_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define LOG_H_<\/span><\/div>$/;"	a
l00029	html/mc_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<\/div>$/;"	a
l00029	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00029	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* Type and interface definitions of memory hierarchy objects *\/<\/span><\/div>$/;"	a
l00029	html/mtrand_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/\/ Richard J. Wagner  v1.1  28 September 2009  wagnerr@umich.edu<\/span><\/div>$/;"	a
l00029	html/mutex_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/stl_galloc.h&quot;<\/span><\/div>$/;"	a
l00029	html/network_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* Very simple fixed-delay network model. Parses a list of delays between<\/span><\/div>$/;"	a
l00029	html/null__core_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/\/A core model with IPC=1 and no hooks into the memory hierarchy. Useful to isolate threads that need to be run for simulation purposes.<\/span><\/div>$/;"	a
l00029	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div>$/;"	a
l00029	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;functional&gt;<\/span><\/div>$/;"	a
l00029	html/pad_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* Padding macros to remove false sharing *\/<\/span><\/div>$/;"	a
l00029	html/page__placement_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <a class="code" href="classMemoryController.html">MemoryController<\/a> * _mc;<\/div>$/;"	a
l00029	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;sstream&gt;<\/span><\/div>$/;"	a
l00029	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00029	html/partitioner_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;event_queue.h&quot;<\/span><\/div>$/;"	a
l00029	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* Interface to get pin command line *\/<\/span><\/div>$/;"	a
l00029	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00029	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_multimap.h&quot;<\/span><\/div>$/;"	a
l00029	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00029	html/process__stats_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00029	html/process__tree_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00029	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* Stats used to profile the simulator *\/<\/span><\/div>$/;"	a
l00029	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* Functions to read the timestamp counter *\/<\/span><\/div>$/;"	a
l00029	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;functional&gt;<\/span><\/div>$/;"	a
l00029	html/scheduler_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00029	html/simple__core_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/\/A simple core model with IPC=1 except on memory accesses<\/span><\/div>$/;"	a
l00029	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* Slab allocator for timing events<\/span><\/div>$/;"	a
l00029	html/stats_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment"> *<\/span><\/div>$/;"	a
l00029	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00029	html/str_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="comment">\/* Turn anything stringstream can grok into a string *\/<\/span><\/div>$/;"	a
l00029	html/tick__event_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;contention_sim.h&quot;<\/span><\/div>$/;"	a
l00029	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;breakdown_stats.h&quot;<\/span><\/div>$/;"	a
l00029	html/timing__core_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;core.h&quot;<\/span><\/div>$/;"	a
l00029	html/timing__event_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00029	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;<\/span><\/div>$/;"	a
l00029	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;access_tracing.h&quot;<\/span><\/div>$/;"	a
l00029	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00029	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &quot;mem_ctrls.h&quot;<\/span><\/div>$/;"	a
l00029	html/zsim_8h_source.html	/^<div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00030	html/Callback_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00030	html/barrier_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"> * (e.g. when other threads have started the sync).<\/span><\/div>$/;"	a
l00030	html/bithacks_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00030	html/cache_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;coherence_ctrls.h&quot;<\/span><\/div>$/;"	a
l00030	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00030	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;constants.h&quot;<\/span><\/div>$/;"	a
l00030	html/config_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"> * - Reduce and simplify init code (tailored interface, not type BS, ...)<\/span><\/div>$/;"	a
l00030	html/constants_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00030	html/core_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;decoder.h&quot;<\/span><\/div>$/;"	a
l00030	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00030	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/cpuid_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"> * CPUID is a bundle of joy. See these to get started:<\/span><\/div>$/;"	a
l00030	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/debug_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/decoder_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div>$/;"	a
l00030	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00030	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;config.h&quot;<\/span><\/div>$/;"	a
l00030	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div>$/;"	a
l00030	html/event__queue_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_multimap.h&quot;<\/span><\/div>$/;"	a
l00030	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00030	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;cache.h&quot;<\/span><\/div>$/;"	a
l00030	html/galloc_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;string.h&gt;<\/span><\/div>$/;"	a
l00030	html/hash_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00030	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_unordered_map.h&quot;<\/span><\/div>$/;"	a
l00030	html/init_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"> * but might want to switch at some point<\/span><\/div>$/;"	a
l00030	html/locks_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00030	html/log_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00030	html/mc_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno"><a class="line" href="classWay.html">   30<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classWay.html">Way<\/a><\/div>$/;"	a
l00030	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00030	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/mtrand_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/mutex_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;locks.h&quot;<\/span><\/div>$/;"	a
l00030	html/network_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"> * entities, then accepts queries for roundtrip times between these entities.<\/span><\/div>$/;"	a
l00030	html/null__core_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;queue&gt;<\/span><\/div>$/;"	a
l00030	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;queue&gt;<\/span><\/div>$/;"	a
l00030	html/pad_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/page__placement_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="keyword">struct <\/span>ChunkEntry <\/div>$/;"	a
l00030	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00030	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00030	html/partitioner_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00030	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00030	html/process__stats_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00030	html/process__tree_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00030	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;bithacks.h&quot;<\/span><\/div>$/;"	a
l00030	html/scheduler_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div>$/;"	a
l00030	html/simple__core_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"> *<\/span><\/div>$/;"	a
l00030	html/stats_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="comment"> * There are four basic types of stats:<\/span><\/div>$/;"	a
l00030	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/str_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<\/div>$/;"	a
l00030	html/tick__event_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;timing_event.h&quot;<\/span><\/div>$/;"	a
l00030	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;cache.h&quot;<\/span><\/div>$/;"	a
l00030	html/timing__core_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;core_recorder.h&quot;<\/span><\/div>$/;"	a
l00030	html/timing__event_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div>$/;"	a
l00030	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div>$/;"	a
l00030	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;cache.h&quot;<\/span><\/div>$/;"	a
l00030	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00030	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &quot;timing_event.h&quot;<\/span><\/div>$/;"	a
l00030	html/zsim_8h_source.html	/^<div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">#include &lt;sys\/time.h&gt;<\/span><\/div>$/;"	a
l00031	html/Callback_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div>$/;"	a
l00031	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div>$/;"	a
l00031	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div>$/;"	a
l00031	html/barrier_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment"> *<\/span><\/div>$/;"	a
l00031	html/bithacks_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/* Assortment of efficient implementations for required, &quot;bithack&quot; operations, see the bithacks<\/span><\/div>$/;"	a
l00031	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;zsim.h&quot;<\/span><\/div>$/;"	a
l00031	html/cache_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00031	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div>$/;"	a
l00031	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00031	html/config_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment"> * - Strict config: type errors, warnings on unused variables, panic on different defaults<\/span><\/div>$/;"	a
l00031	html/constants_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/\/ PIN 2.9 (rev39599) can&#39;t do more than 2048 threads...<\/span><\/div>$/;"	a
l00031	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div>$/;"	a
l00031	html/core_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00031	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div>$/;"	a
l00031	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;process_tree.h&quot;<\/span><\/div>$/;"	a
l00031	html/cpuid_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment"> *  - http:\/\/www.sandpile.org\/x86\/cpuid.htm<\/span><\/div>$/;"	a
l00031	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00031	html/debug_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/* Describes the addresses at which libzsim.so is loaded. GDB needs this. *\/<\/span><\/div>$/;"	a
l00031	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/* Launch gdb automatically in a separate xterm window to debug the current process.<\/span><\/div>$/;"	a
l00031	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/* Gather libzsim addresses and initialize a libinfo structure.<\/span><\/div>$/;"	a
l00031	html/decoder_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;pin.H&quot;<\/span><\/div>$/;"	a
l00031	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00031	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div>$/;"	a
l00031	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00031	html/event__queue_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00031	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;pad.h&quot;<\/span><\/div>$/;"	a
l00031	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00031	html/galloc_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div>$/;"	a
l00031	html/hash_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div>$/;"	a
l00031	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;intrusive_list.h&quot;<\/span><\/div>$/;"	a
l00031	html/init_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/* Read configuration options, configure system *\/<\/span><\/div>$/;"	a
l00031	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00031	html/locks_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;linux\/futex.h&gt;<\/span><\/div>$/;"	a
l00031	html/log_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;sstream&gt;<\/span><\/div>$/;"	a
l00031	html/mc_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;{<\/div>$/;"	a
l00031	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;pad.h&quot;<\/span><\/div>$/;"	a
l00031	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00031	html/mtrand_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/\/ The Mersenne Twister is an algorithm for generating random numbers.  It<\/span><\/div>$/;"	a
l00031	html/mutex_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;pad.h&quot;<\/span><\/div>$/;"	a
l00031	html/network_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment"> * There is no contention modeling or even support for serialization latency.<\/span><\/div>$/;"	a
l00031	html/null__core_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;core.h&quot;<\/span><\/div>$/;"	a
l00031	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div>$/;"	a
l00031	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;event_recorder.h&quot;<\/span><\/div>$/;"	a
l00031	html/pad_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/\/Line size, in chars (bytes). We could make it configurable through a define<\/span><\/div>$/;"	a
l00031	html/page__placement_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    {<\/div>$/;"	a
l00031	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;event_queue.h&quot;<\/span><\/div>$/;"	a
l00031	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00031	html/partitioner_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00031	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00031	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/* Prefetcher models: Basic operation is to interpose between cache levels, issue additional accesses,<\/span><\/div>$/;"	a
l00031	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T, u<span class="keywordtype">int<\/span>32_t B&gt;<\/div>$/;"	a
l00031	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div>$/;"	a
l00031	html/process__stats_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div>$/;"	a
l00031	html/process__tree_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00031	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;time.h&gt;<\/span><\/div>$/;"	a
l00031	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00031	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;cache_arrays.h&quot;<\/span><\/div>$/;"	a
l00031	html/scheduler_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;<\/span><\/div>$/;"	a
l00031	html/simple__core_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;core.h&quot;<\/span><\/div>$/;"	a
l00031	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment"> * Each EventRecorder includes a slab allocator, and all timing events that are<\/span><\/div>$/;"	a
l00031	html/stats_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment"> * - Counter: A plain single counter.<\/span><\/div>$/;"	a
l00031	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="comment">\/* Produces a filtered stats tree, where only the base stats whose names match the regex are retained.<\/span><\/div>$/;"	a
l00031	html/str_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;sstream&gt;<\/span><\/div>$/;"	a
l00031	html/tick__event_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;zsim.h&quot;<\/span><\/div>$/;"	a
l00031	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div>$/;"	a
l00031	html/timing__core_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;event_recorder.h&quot;<\/span><\/div>$/;"	a
l00031	html/timing__event_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &lt;typeinfo&gt;<\/span><\/div>$/;"	a
l00031	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;access_tracing.h&quot;<\/span><\/div>$/;"	a
l00031	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div>$/;"	a
l00031	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00031	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;zsim.h&quot;<\/span><\/div>$/;"	a
l00031	html/zsim_8h_source.html	/^<div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#include &quot;constants.h&quot;<\/span><\/div>$/;"	a
l00032	html/Callback_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div>$/;"	a
l00032	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#ifndef DRAMSIM_H<\/span><\/div>$/;"	a
l00032	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">\/* HDF5-based classes read and write address traces in a consistent format *\/<\/span><\/div>$/;"	a
l00032	html/barrier_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> * PARALLELISM CONTROL: The barrier limits the number of threads that run at the same time.<\/span><\/div>$/;"	a
l00032	html/bithacks_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> * website, http:\/\/graphics.stanford.edu\/~seander\/bithacks.html<\/span><\/div>$/;"	a
l00032	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div>$/;"	a
l00032	html/cache_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00032	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">\/* General interface of a cache array. The array is a fixed-size associative container that<\/span><\/div>$/;"	a
l00032	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00032	html/config_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> * - Produce a full configuration file with all the variables, including defaults (for config parsing, comparison, etc.)<\/span><\/div>$/;"	a
l00032	html/constants_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#define MAX_THREADS (2048)<\/span><\/div>$/;"	a
l00032	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;bithacks.h&quot;<\/span><\/div>$/;"	a
l00032	html/core_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00032	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTimingCoreEvent.html">TimingCoreEvent<\/a>;<\/div>$/;"	a
l00032	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;zsim.h&quot;<\/span><\/div>$/;"	a
l00032	html/cpuid_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> *  - http:\/\/www.intel.com\/content\/www\/us\/en\/processors\/processor-identification-cpuid-instruction-note.html<\/span><\/div>$/;"	a
l00032	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;intrusive_list.h&quot;<\/span><\/div>$/;"	a
l00032	html/debug_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno"><a class="line" href="structLibInfo.html">   32<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structLibInfo.html">LibInfo<\/a> {<\/div>$/;"	a
l00032	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> * I&#39;m doing this because I&#39;m sick to death of debugging manually (wait 20 secs, attach<\/span><\/div>$/;"	a
l00032	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> * This is needed to essentially replicate the line that PIN prints when<\/span><\/div>$/;"	a
l00032	html/decoder_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div>$/;"	a
l00032	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00032	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno"><a class="line" href="classMemParam.html">   32<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMemParam.html">MemParam<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a>{<\/div>$/;"	a
l00032	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00032	html/event__queue_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;zsim.h&quot;<\/span><\/div>$/;"	a
l00032	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;slab_alloc.h&quot;<\/span><\/div>$/;"	a
l00032	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;zsim.h&quot;<\/span><\/div>$/;"	a
l00032	html/galloc_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="keywordtype">int<\/span> gm_init(<span class="keywordtype">size_t<\/span> segmentSize);<\/div>$/;"	a
l00032	html/hash_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno"><a class="line" href="classHashFamily.html">   32<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classHashFamily.html">HashFamily<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00032	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;part_repl_policies.h&quot;<\/span><\/div>$/;"	a
l00032	html/init_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="keywordtype">void<\/span> SimInit(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* configFile, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* outputDir, uint32_t shmid);<\/div>$/;"	a
l00032	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div>$/;"	a
l00032	html/locks_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00032	html/log_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;<\/span><\/div>$/;"	a
l00032	html/mc_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="keyword">public<\/span>:<\/div>$/;"	a
l00032	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00032	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00032	html/mtrand_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">\/\/ was designed with consideration of the flaws in various other generators.<\/span><\/div>$/;"	a
l00032	html/mutex_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div>$/;"	a
l00032	html/network_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> * This is a basic model that should be extended as appropriate.<\/span><\/div>$/;"	a
l00032	html/null__core_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;pad.h&quot;<\/span><\/div>$/;"	a
l00032	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;core.h&quot;<\/span><\/div>$/;"	a
l00032	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00032	html/pad_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#define CACHE_LINE_BYTES 64<\/span><\/div>$/;"	a
l00032	html/page__placement_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;        <span class="keywordtype">bool<\/span> valid;<\/div>$/;"	a
l00032	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;mtrand.h&quot;<\/span><\/div>$/;"	a
l00032	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div>$/;"	a
l00032	html/partitioner_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00032	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00032	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> * and keep a small table with delays; when the demand access comes, we do it and account for the<\/span><\/div>$/;"	a
l00032	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno"><a class="line" href="classPrioQueue.html">   32<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPrioQueue.html">PrioQueue<\/a> {<\/div>$/;"	a
l00032	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno"><a class="line" href="classProcStats.html">   32<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProcStats.html">ProcStats<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00032	html/process__stats_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment">\/* Maintains, queries, and transparently updates per-process instruction and cycle counts.<\/span><\/div>$/;"	a
l00032	html/process__tree_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;log.h&quot;<\/span><\/div>$/;"	a
l00032	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00032	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div>$/;"	a
l00032	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;coherence_ctrls.h&quot;<\/span><\/div>$/;"	a
l00032	html/scheduler_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &lt;list&gt;<\/span><\/div>$/;"	a
l00032	html/simple__core_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00032	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> * in access paths, as well as TimingEventBlocks, are allocated there. Slabs<\/span><\/div>$/;"	a
l00032	html/stats_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> * - VectorCounter: A fixed-size vector of logically related counters. Each<\/span><\/div>$/;"	a
l00032	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="comment"> * Base stats are NOT copied, they are either kept or ommitted. Aggregate stats are created as needed.<\/span><\/div>$/;"	a
l00032	html/str_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div>$/;"	a
l00032	html/tick__event_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div>$/;"	a
l00032	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classHitEvent.html">HitEvent<\/a>;<\/div>$/;"	a
l00032	html/timing__core_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00032	html/timing__event_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;bithacks.h&quot;<\/span><\/div>$/;"	a
l00032	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_string.h&quot;<\/span><\/div>$/;"	a
l00032	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno"><a class="line" href="classTracingCache.html">   32<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTracingCache.html">TracingCache<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCache.html">Cache<\/a> {<\/div>$/;"	a
l00032	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div>$/;"	a
l00032	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div>$/;"	a
l00032	html/zsim_8h_source.html	/^<div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#include &quot;debug.h&quot;<\/span><\/div>$/;"	a
l00033	html/Callback_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span> <span class="comment">\/\/ uint64_t<\/span><\/div>$/;"	a
l00033	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define DRAMSIM_H<\/span><\/div>$/;"	a
l00033	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div>$/;"	a
l00033	html/barrier_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> *<\/span><\/div>$/;"	a
l00033	html/bithacks_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00033	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">\/* Implements per-cycle breakdowns. Always starts at state 0.<\/span><\/div>$/;"	a
l00033	html/cache_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00033	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> * translates addresses to line IDs. A line ID represents the position of the tag. The other<\/span><\/div>$/;"	a
l00033	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;locks.h&quot;<\/span><\/div>$/;"	a
l00033	html/config_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00033	html/constants_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00033	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;event_recorder.h&quot;<\/span><\/div>$/;"	a
l00033	html/core_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div>$/;"	a
l00033	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div>$/;"	a
l00033	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div>$/;"	a
l00033	html/cpuid_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> * Try not to cry.<\/span><\/div>$/;"	a
l00033	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00033	html/debug_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keywordtype">void<\/span>* textAddr;<\/div>$/;"	a
l00033	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> * to PID, copy the libzsim.so symbol file command, etc etc).<\/span><\/div>$/;"	a
l00033	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> * called with pause_tool. It uses libelf, but PIN is linked to it already<\/span><\/div>$/;"	a
l00033	html/decoder_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">\/\/ Uncomment to get a count of BBLs run. This is currently used to get a distribution of inaccurate instructions decoded that are actually run<\/span><\/div>$/;"	a
l00033	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;timing_event.h&quot;<\/span><\/div>$/;"	a
l00033	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00033	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;pad.h&quot;<\/span><\/div>$/;"	a
l00033	html/event__queue_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div>$/;"	a
l00033	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div>$/;"	a
l00033	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_unordered_map.h&quot;<\/span><\/div>$/;"	a
l00033	html/galloc_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div>$/;"	a
l00033	html/hash_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00033	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;repl_policies.h&quot;<\/span><\/div>$/;"	a
l00033	html/init_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div>$/;"	a
l00033	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;log.h&quot;<\/span><\/div>$/;"	a
l00033	html/locks_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &lt;syscall.h&gt;<\/span><\/div>$/;"	a
l00033	html/log_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;<\/span><\/div>$/;"	a
l00033	html/mc_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;   Address tag;<\/div>$/;"	a
l00033	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;config.h&quot;<\/span><\/div>$/;"	a
l00033	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00033	html/mtrand_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">\/\/ The period, 2^19937-1, and the order of equidistribution, 623 dimensions,<\/span><\/div>$/;"	a
l00033	html/mutex_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">\/\/ Until GCC is compliant with this, just inherit:<\/span><\/div>$/;"	a
l00033	html/network_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00033	html/null__core_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div>$/;"	a
l00033	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_multimap.h&quot;<\/span><\/div>$/;"	a
l00033	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00033	html/pad_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00033	html/page__placement_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;        Address tag;<\/div>$/;"	a
l00033	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;partition_mapper.h&quot;<\/span><\/div>$/;"	a
l00033	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">\/\/Interface<\/span><\/div>$/;"	a
l00033	html/partitioner_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00033	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00033	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> * latency as when it was first fetched (to avoid hit latencies on partial latency overlaps).<\/span><\/div>$/;"	a
l00033	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keyword">struct <\/span>PQBlock {<\/div>$/;"	a
l00033	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00033	html/process__stats_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> * You&#39;d think it&#39;d make sense to include this in ProcTreeNode, but those are dynamic, and<\/span><\/div>$/;"	a
l00033	html/process__tree_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;zsim.h&quot;<\/span><\/div>$/;"	a
l00033	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div>$/;"	a
l00033	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#if defined(__x86_64__)<\/span><\/div>$/;"	a
l00033	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00033	html/scheduler_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &lt;sstream&gt;<\/span><\/div>$/;"	a
l00033	html/simple__core_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;pad.h&quot;<\/span><\/div>$/;"	a
l00033	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> * are garbage-collected once all their events are done. To do this without space<\/span><\/div>$/;"	a
l00033	html/stats_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> *   vector element may be unnamed or named (useful when enum-indexed vectors).<\/span><\/div>$/;"	a
l00033	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment"> * The returned tree can be passed to any backend to produce filtered dumps. Returns nullptr if nothing<\/span><\/div>$/;"	a
l00033	html/str_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div>$/;"	a
l00033	html/tick__event_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">\/\/FIXME: Rearchitect this SENSIBLY<\/span><\/div>$/;"	a
l00033	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMissStartEvent.html">MissStartEvent<\/a>;<\/div>$/;"	a
l00033	html/timing__core_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;pad.h&quot;<\/span><\/div>$/;"	a
l00033	html/timing__event_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;event_recorder.h&quot;<\/span><\/div>$/;"	a
l00033	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00033	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00033	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">\/\/Print some information regarding utility monitors and partitioning<\/span><\/div>$/;"	a
l00033	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">\/* Implements a weave-phase memory controller based on the MD1 controller, returning the same<\/span><\/div>$/;"	a
l00033	html/zsim_8h_source.html	/^<div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="preprocessor">#include &quot;locks.h&quot;<\/span><\/div>$/;"	a
l00034	html/Callback_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor"><\/span><span class="comment">\/*<\/span><\/div>$/;"	a
l00034	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno"><a class="line" href="structAccessRecord.html">   34<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structAccessRecord.html">AccessRecord<\/a> {<\/div>$/;"	a
l00034	html/barrier_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> * Author: Daniel Sanchez &lt;sanchezd@stanford.edu&gt;<\/span><\/div>$/;"	a
l00034	html/bithacks_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> * count() accounts for cycles in current state; count() is used<\/span><\/div>$/;"	a
l00034	html/cache_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;repl_policies.h&quot;<\/span><\/div>$/;"	a
l00034	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> * cache components store tag data in non-associative arrays indexed by line ID.<\/span><\/div>$/;"	a
l00034	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00034	html/config_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/constants_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">\/\/ How many children caches can each cache track? Note each bank is a separate child. This impacts sharer bit-vector sizes.<\/span><\/div>$/;"	a
l00034	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00034	html/core_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno"><a class="line" href="structBblInfo.html">   34<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structBblInfo.html">BblInfo<\/a> {<\/div>$/;"	a
l00034	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno"><a class="line" href="classCoreRecorder.html">   34<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCoreRecorder.html">CoreRecorder<\/a> {<\/div>$/;"	a
l00034	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="keyword">inline<\/span> uint32_t cpuenumNumCpus(uint32_t pid) {<\/div>$/;"	a
l00034	html/cpuid_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00034	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;pad.h&quot;<\/span><\/div>$/;"	a
l00034	html/debug_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <span class="keywordtype">void<\/span>* bssAddr;<\/div>$/;"	a
l00034	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> * Returns PID of children. Must be called from harness, since we can&#39;t fork from a pintool.<\/span><\/div>$/;"	a
l00034	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> * (I bet that PIN does pretty much the same thing).<\/span><\/div>$/;"	a
l00034	html/decoder_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">\/\/ NOTE: This is not multiprocess-safe<\/span><\/div>$/;"	a
l00034	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &lt;zlib.h&gt;<\/span><\/div>$/;"	a
l00034	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        <span class="keyword">enum<\/span> eRowBufferPolicy {<\/div>$/;"	a
l00034	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00034	html/event__queue_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno"><a class="line" href="classEvent.html">   34<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classEvent.html">Event<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00034	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTimingEvent.html">TimingEvent<\/a>;<\/div>$/;"	a
l00034	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_unordered_set.h&quot;<\/span><\/div>$/;"	a
l00034	html/galloc_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="keywordtype">void<\/span> gm_attach(<span class="keywordtype">int<\/span> shmid);<\/div>$/;"	a
l00034	html/hash_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        <a class="code" href="classHashFamily.html">HashFamily<\/a>() {}<\/div>$/;"	a
l00034	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/init_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#endif  \/\/ INIT_H_<\/span><\/div>$/;"	a
l00034	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/locks_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;<\/span><\/div>$/;"	a
l00034	html/log_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/mc_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;   <span class="keywordtype">bool<\/span> valid;<\/div>$/;"	a
l00034	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;locks.h&quot;<\/span><\/div>$/;"	a
l00034	html/mtrand_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">\/\/ are far greater.  The generator is also fast; it avoids multiplication and<\/span><\/div>$/;"	a
l00034	html/mutex_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno"><a class="line" href="classmutex.html">   34<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classmutex.html">mutex<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00034	html/network_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/null__core_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno"><a class="line" href="classNullCore.html">   34<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classNullCore.html">NullCore<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCore.html">Core<\/a> {<\/div>$/;"	a
l00034	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00034	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/pad_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#define _PAD_CONCAT(x, y) x ## y<\/span><\/div>$/;"	a
l00034	html/page__placement_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        uint32_t count;<\/div>$/;"	a
l00034	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;partitioner.h&quot;<\/span><\/div>$/;"	a
l00034	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno"><a class="line" href="classPartMapper.html">   34<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPartMapper.html">PartMapper<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00034	html/partitioner_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;utility_monitor.h&quot;<\/span><\/div>$/;"	a
l00034	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00034	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00034	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        T* array[64];<\/div>$/;"	a
l00034	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/process__stats_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> * stats must be static (and zeros compress great)<\/span><\/div>$/;"	a
l00034	html/process__tree_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment">\/\/Helper function<\/span><\/div>$/;"	a
l00034	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor"><\/span><span class="keyword">static<\/span> <span class="keyword">inline<\/span> uint64_t rdtsc() {<\/div>$/;"	a
l00034	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;mtrand.h&quot;<\/span><\/div>$/;"	a
l00034	html/scheduler_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div>$/;"	a
l00034	html/simple__core_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> * overheads, slabs are carefully aligned, so that objects inside the slab can<\/span><\/div>$/;"	a
l00034	html/stats_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> * - Histogram: A GEMS-style histogram, intended to profile a distribution.<\/span><\/div>$/;"	a
l00034	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> * matches the regex.<\/span><\/div>$/;"	a
l00034	html/str_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00034	html/tick__event_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div>$/;"	a
l00034	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMissResponseEvent.html">MissResponseEvent<\/a>;<\/div>$/;"	a
l00034	html/timing__core_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/timing__event_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00034	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div>$/;"	a
l00034	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;        g_string tracefile;<\/div>$/;"	a
l00034	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#define UMON_INFO 0<\/span><\/div>$/;"	a
l00034	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="comment"> * latencies MD1 would return in the weave phase, but<\/span><\/div>$/;"	a
l00034	html/zsim_8h_source.html	/^<div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">#include &quot;pad.h&quot;<\/span><\/div>$/;"	a
l00035	html/Callback_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#ifndef CALLBACK_H<\/span><\/div>$/;"	a
l00035	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"> * This is a public header for DRAMSim including this along with libdramsim.so should<\/span><\/div>$/;"	a
l00035	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    Address lineAddr;<\/div>$/;"	a
l00035	html/barrier_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"> * Date: Apr 2011<\/span><\/div>$/;"	a
l00035	html/bithacks_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">\/* Max and min: These work with side-effects, are type-safe, and gcc recognizes this pattern and uses<\/span><\/div>$/;"	a
l00035	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"> * because we extend VectorCounter (TODO: Move to VectorStat).<\/span><\/div>$/;"	a
l00035	html/cache_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00035	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00035	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &quot;pad.h&quot;<\/span><\/div>$/;"	a
l00035	html/config_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00035	html/constants_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#define MAX_CACHE_CHILDREN (256)<\/span><\/div>$/;"	a
l00035	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00035	html/core_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    uint32_t instrs;<\/div>$/;"	a
l00035	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00035	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keywordflow">if<\/span> (zinfo-&gt;perProcessCpuEnum) {<\/div>$/;"	a
l00035	html/cpuid_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00035	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00035	html/debug_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keywordtype">void<\/span>* dataAddr;<\/div>$/;"	a
l00035	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00035	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00035	html/decoder_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">\/\/ #define BBL_PROFILING<\/span><\/div>$/;"	a
l00035	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00035	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;            RB_CLOSE = 0,<\/div>$/;"	a
l00035	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &quot;config.h&quot;<\/span><\/div>$/;"	a
l00035	html/event__queue_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00035	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00035	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &quot;config.h&quot;<\/span><\/div>$/;"	a
l00035	html/galloc_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00035	html/hash_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keyword">virtual<\/span> ~<a class="code" href="classHashFamily.html">HashFamily<\/a>() {}<\/div>$/;"	a
l00035	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">\/* Fully associative cache arrays with LRU replacement (non-part; part coming up) *\/<\/span><\/div>$/;"	a
l00035	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div>$/;"	a
l00035	html/locks_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00035	html/log_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keywordtype">void<\/span> __log_lock();<\/div>$/;"	a
l00035	html/mc_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;   <span class="keywordtype">bool<\/span> dirty;<\/div>$/;"	a
l00035	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">\/* Simple memory (or memory bank), has a fixed latency *\/<\/span><\/div>$/;"	a
l00035	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00035	html/mtrand_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">\/\/ division, and it benefits from caches and pipelines.  For more information<\/span><\/div>$/;"	a
l00035	html/mutex_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00035	html/network_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div>$/;"	a
l00035	html/null__core_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00035	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &quot;ooo_core_recorder.h&quot;<\/span><\/div>$/;"	a
l00035	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classOOOIssueEvent.html">OOOIssueEvent<\/a>;<\/div>$/;"	a
l00035	html/pad_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define PAD_CONCAT(x, y) _PAD_CONCAT(x, y)<\/span><\/div>$/;"	a
l00035	html/page__placement_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    };<\/div>$/;"	a
l00035	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &quot;repl_policies.h&quot;<\/span><\/div>$/;"	a
l00035	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00035	html/partitioner_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00035	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00035	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00035	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        uint64_t occ; <span class="comment">\/\/ bit i is 1 if array[i] is populated<\/span><\/div>$/;"	a
l00035	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <span class="keyword">class <\/span><a class="code" href="classProcStats_1_1ProcessCounter.html">ProcessCounter<\/a>;<\/div>$/;"	a
l00035	html/process__stats_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00035	html/process__tree_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classConfig.html">Config<\/a>;<\/div>$/;"	a
l00035	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">inline<\/span> uint64_t getNs() {<\/div>$/;"	a
l00035	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    uint32_t hi, lo;<\/div>$/;"	a
l00035	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00035	html/scheduler_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">#include &quot;barrier.h&quot;<\/span><\/div>$/;"	a
l00035	html/simple__core_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFilterCache.html">FilterCache<\/a>;<\/div>$/;"	a
l00035	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"> * derive the pointer of their slab.<\/span><\/div>$/;"	a
l00035	html/stats_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"> *   It has a fixed amount of buckets, and buckets are resized as samples<\/span><\/div>$/;"	a
l00035	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00035	html/str_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00035	html/tick__event_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno"><a class="line" href="classTickEvent.html">   35<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTickEvent.html">TickEvent<\/a> : <span class="keyword">public<\/span> <a class="code" href="classTimingEvent.html">TimingEvent<\/a>, <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> { <span class="comment">\/\/this one should be allocated from glob mem<\/span><\/div>$/;"	a
l00035	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMissWritebackEvent.html">MissWritebackEvent<\/a>;<\/div>$/;"	a
l00035	html/timing__core_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFilterCache.html">FilterCache<\/a>;<\/div>$/;"	a
l00035	html/timing__event_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00035	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">\/* Basic class for trace-driven simulation. Shares the cache interface (invalidate), but it is not a cache in any sense --- it just reads in a single trace and replays it *\/<\/span><\/div>$/;"	a
l00035	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;        <a class="code" href="classAccessTraceWriter.html">AccessTraceWriter<\/a>* atw;<\/div>$/;"	a
l00035	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor"><\/span><span class="comment">\/\/#define UMON_INFO 1<\/span><\/div>$/;"	a
l00035	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00035	html/zsim_8h_source.html	/^<div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<\/div>$/;"	a
l00036	html/Callback_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define CALLBACK_H<\/span><\/div>$/;"	a
l00036	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment"> * provide all necessary functionality to talk to an external simulator<\/span><\/div>$/;"	a
l00036	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    uint64_t reqCycle;<\/div>$/;"	a
l00036	html/barrier_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00036	html/bithacks_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment"> * conditional moves (i.e., predication --&gt; no unpredictable branches and great preformance)<\/span><\/div>$/;"	a
l00036	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00036	html/cache_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno"><a class="line" href="classCacheArray.html">   36<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCacheArray.html">CacheArray<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00036	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00036	html/config_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div>$/;"	a
l00036	html/constants_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor"><\/span><span class="comment">\/\/#define MAX_CACHE_CHILDREN (1024)<\/span><\/div>$/;"	a
l00036	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#include &quot;memory_hierarchy.h&quot;<\/span><\/div>$/;"	a
l00036	html/core_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    uint32_t bytes;<\/div>$/;"	a
l00036	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keyword">typedef<\/span> <span class="keyword">enum<\/span> {<\/div>$/;"	a
l00036	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;bool&gt;<\/a>&amp; mask = zinfo-&gt;procArray[pid]-&gt;getMask();<\/div>$/;"	a
l00036	html/cpuid_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno"><a class="line" href="structCpuIdRecord.html">   36<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structCpuIdRecord.html">CpuIdRecord<\/a> {<\/div>$/;"	a
l00036	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/debug_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;};<\/div>$/;"	a
l00036	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keywordtype">int<\/span> launchXtermDebugger(<span class="keywordtype">int<\/span> targetPid, <a class="code" href="structLibInfo.html">LibInfo<\/a>* libzsimAddrs);<\/div>$/;"	a
l00036	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keywordtype">void<\/span> getLibzsimAddrs(<a class="code" href="structLibInfo.html">LibInfo<\/a>* libzsimAddrs);<\/div>$/;"	a
l00036	html/decoder_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">\/\/ #define PROFILE_ALL_INSTRS<\/span><\/div>$/;"	a
l00036	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">\/* Detailed memory model from Makoto\/Kenta *\/<\/span><\/div>$/;"	a
l00036	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;            RB_OPEN<\/div>$/;"	a
l00036	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/event__queue_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        uint64_t period;<\/div>$/;"	a
l00036	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">\/\/ Encodes an event that the core should capture for the contention simulation<\/span><\/div>$/;"	a
l00036	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">\/* Extends Cache with an L0 direct-mapped cache, optimized to hell for hits<\/span><\/div>$/;"	a
l00036	html/galloc_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">\/\/ C-style interface<\/span><\/div>$/;"	a
l00036	html/hash_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno"><a class="line" href="classInList.html">   36<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classInList.html">InList<\/a>;<\/div>$/;"	a
l00036	html/locks_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#ifdef WITH_MWAIT \/\/careful with this define; most kernels don&#39;t allow mwait in userspace<\/span><\/div>$/;"	a
l00036	html/log_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keywordtype">void<\/span> __log_unlock();<\/div>$/;"	a
l00036	html/mc_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;};<\/div>$/;"	a
l00036	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno"><a class="line" href="classSimpleMemory.html">   36<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classSimpleMemory.html">SimpleMemory<\/a> : <span class="keyword">public<\/span> <a class="code" href="classMemObject.html">MemObject<\/a> {<\/div>$/;"	a
l00036	html/mtrand_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">\/\/ see the inventors&#39; web page at<\/span><\/div>$/;"	a
l00036	html/mutex_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <a class="code" href="classmutex.html">mutex<\/a>() {<\/div>$/;"	a
l00036	html/network_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;<\/span><\/div>$/;"	a
l00036	html/null__core_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        uint64_t instrs;<\/div>$/;"	a
l00036	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#include &quot;pad.h&quot;<\/span><\/div>$/;"	a
l00036	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classOOORespEvent.html">OOORespEvent<\/a>;<\/div>$/;"	a
l00036	html/pad_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00036	html/page__placement_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keyword">struct <\/span>ChunkInfo <\/div>$/;"	a
l00036	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getNumPartitions()=0;<\/div>$/;"	a
l00036	html/partitioner_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPartReplPolicy.html">PartReplPolicy<\/a>;<\/div>$/;"	a
l00036	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classConfig.html">Config<\/a>;<\/div>$/;"	a
l00036	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keywordtype">int<\/span>32_t M, <span class="keywordtype">int<\/span>32_t T, <span class="keywordtype">int<\/span>32_t I&gt;  <span class="comment">\/\/ max value, threshold, initial<\/span><\/div>$/;"	a
l00036	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        <span class="keyword">class <\/span><a class="code" href="classProcStats_1_1ProcessVectorCounter.html">ProcessVectorCounter<\/a>;<\/div>$/;"	a
l00036	html/process__stats_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno"><a class="line" href="classProcessStats.html">   36<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProcessStats.html">ProcessStats<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00036	html/process__tree_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keyword">struct <\/span>timespec ts;<\/div>$/;"	a
l00036	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    __asm__ __volatile__(<span class="stringliteral">&quot;rdtsc&quot;<\/span> : <span class="stringliteral">&quot;=a&quot;<\/span>(lo), <span class="stringliteral">&quot;=d&quot;<\/span>(hi));<\/div>$/;"	a
l00036	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment">\/* Generic replacement policy interface. A replacement policy is initialized by the cache (by calling setTop\/BottomCC) and used by the cache array. Usage follows two models:<\/span><\/div>$/;"	a
l00036	html/scheduler_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#include &quot;constants.h&quot;<\/span><\/div>$/;"	a
l00036	html/simple__core_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00036	html/stats_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="comment"> *   are added, making profiling increasingly coarser but keeping storage<\/span><\/div>$/;"	a
l00036	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* FilterStats(<span class="keyword">const<\/span> <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* srcStat, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* regex);<\/div>$/;"	a
l00036	html/str_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; std::string Str(T v) {<\/div>$/;"	a
l00036	html/tick__event_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00036	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classReplAccessEvent.html">ReplAccessEvent<\/a>;<\/div>$/;"	a
l00036	html/timing__core_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/timing__event_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">#define TIMING_BLOCK_EVENTS 3<\/span><\/div>$/;"	a
l00036	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;        lock_t traceLock;<\/div>$/;"	a
l00036	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<\/div>$/;"	a
l00036	html/zsim_8h_source.html	/^<div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCore.html">Core<\/a>;<\/div>$/;"	a
l00037	html/Callback_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00037	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00037	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    uint32_t latency;<\/div>$/;"	a
l00037	html/barrier_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/bithacks_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00037	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno"><a class="line" href="classCycleBreakdownStat.html">   37<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCycleBreakdownStat.html">CycleBreakdownStat<\/a> : <span class="keyword">public<\/span> <a class="code" href="classVectorCounter.html">VectorCounter<\/a> {<\/div>$/;"	a
l00037	html/cache_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classNetwork.html">Network<\/a>;<\/div>$/;"	a
l00037	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00037	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/config_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div>$/;"	a
l00037	html/constants_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#include &quot;pad.h&quot;<\/span><\/div>$/;"	a
l00037	html/core_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <a class="code" href="structDynBbl.html">DynBbl<\/a> oooBbl[0]; <span class="comment">\/\/0 bytes, but will be 1-sized when we have an element (and that element has variable size as well)<\/span><\/div>$/;"	a
l00037	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;            HALTED, <span class="comment">\/\/Not scheduled, no events left. Initial state. join() --&gt; RUNNING<\/span><\/div>$/;"	a
l00037	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        uint32_t count = 0;<\/div>$/;"	a
l00037	html/cpuid_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keywordtype">unsigned<\/span> eaxIn;<\/div>$/;"	a
l00037	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/debug_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/decoder_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        };<\/div>$/;"	a
l00037	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">namespace <\/span>DRAMSim {<\/div>$/;"	a
l00037	html/event__queue_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno"><a class="line" href="structTimingRecord.html">   37<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structTimingRecord.html">TimingRecord<\/a> <\/div>$/;"	a
l00037	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment"> *<\/span><\/div>$/;"	a
l00037	html/galloc_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keywordtype">void<\/span>* gm_malloc(<span class="keywordtype">size_t<\/span> size);<\/div>$/;"	a
l00037	html/hash_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t hash(uint32_t <span class="keywordtype">id<\/span>, uint64_t val) = 0;<\/div>$/;"	a
l00037	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">\/\/We use a combination of a hash table and an intrusive list to perform fully-associative lookups and insertions in O(1) time<\/span><\/div>$/;"	a
l00037	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/locks_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#include &lt;pmmintrin.h&gt;<\/span>  <span class="comment">\/\/ NOLINT<\/span><\/div>$/;"	a
l00037	html/log_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/mc_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00037	html/mtrand_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">\/\/ http:\/\/www.math.sci.hiroshima-u.ac.jp\/~m-mat\/MT\/emt.html<\/span><\/div>$/;"	a
l00037	html/mutex_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;            futex_init(&amp;futex);<\/div>$/;"	a
l00037	html/network_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/null__core_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        uint64_t curCycle;<\/div>$/;"	a
l00037	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/pad_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#define PAD() unsigned char PAD_CONCAT(pad_line, __LINE__)[CACHE_LINE_BYTES] \/\/assuming classes are defined over one file, this should generate unique names<\/span><\/div>$/;"	a
l00037	html/page__placement_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    {<\/div>$/;"	a
l00037	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno"><a class="line" href="structPartInfo.html">   37<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structPartInfo.html">PartInfo<\/a> {<\/div>$/;"	a
l00037	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getPartition(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req)=0;<\/div>$/;"	a
l00037	html/partitioner_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno"><a class="line" href="classSatCounter.html">   37<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classSatCounter.html">SatCounter<\/a> {<\/div>$/;"	a
l00037	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        PQBlock() {<\/div>$/;"	a
l00037	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/process__stats_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00037	html/process__tree_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">enum<\/span> SyncedFastForwardMode {<\/div>$/;"	a
l00037	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="comment">\/\/guaranteed synchronized across processors, averages 20ns\/call on Ubuntu 12.04... Linux hrtimers have gotten really good! In comparison, rdtsc is 9ns.<\/span><\/div>$/;"	a
l00037	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keywordflow">return<\/span> ((uint64_t)lo) | (((uint64_t)hi) &lt;&lt; 32);<\/div>$/;"	a
l00037	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment"> * - On lookups, update() is called if the replacement policy is to be updated on a hit<\/span><\/div>$/;"	a
l00037	html/scheduler_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#include &quot;core.h&quot;<\/span><\/div>$/;"	a
l00037	html/simple__core_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno"><a class="line" href="classSimpleCore.html">   37<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classSimpleCore.html">SimpleCore<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCore.html">Core<\/a> {<\/div>$/;"	a
l00037	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/stats_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment"> *   space constant. Unlike GEMS-style stats, though, at some configurable<\/span><\/div>$/;"	a
l00037	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/str_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    std::stringstream ss;<\/div>$/;"	a
l00037	html/tick__event_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;        T* obj;<\/div>$/;"	a
l00037	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTimingEvent.html">TimingEvent<\/a>;<\/div>$/;"	a
l00037	html/timing__core_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno"><a class="line" href="classTimingCore.html">   37<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTimingCore.html">TimingCore<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCore.html">Core<\/a> {<\/div>$/;"	a
l00037	html/timing__event_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno"><a class="line" href="structTimingEventBlock.html">   37<\/a><\/span>&#160;<span class="preprocessor"><\/span><span class="keyword">struct <\/span><a class="code" href="structTimingEventBlock.html">TimingEventBlock<\/a> {<\/div>$/;"	a
l00037	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTraceDriverProxyCache.html">TraceDriverProxyCache<\/a>;<\/div>$/;"	a
l00037	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div>$/;"	a
l00037	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classHashFamily.html">HashFamily<\/a>;<\/div>$/;"	a
l00037	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="comment">\/\/Weave-phase event<\/span><\/div>$/;"	a
l00037	html/zsim_8h_source.html	/^<div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classScheduler.html">Scheduler<\/a>;<\/div>$/;"	a
l00038	html/Callback_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno"><a class="line" href="namespaceDRAMSim.html">   38<\/a><\/span>&#160;<span class="keyword">namespace <\/span>DRAMSim<\/div>$/;"	a
l00038	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#include &quot;Callback.h&quot;<\/span><\/div>$/;"	a
l00038	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    uint32_t childId;<\/div>$/;"	a
l00038	html/barrier_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#ifndef BARRIER_H_<\/span><\/div>$/;"	a
l00038	html/bithacks_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#ifdef MAX<\/span><\/div>$/;"	a
l00038	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00038	html/cache_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div>$/;"	a
l00038	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="comment">\/* Returns tag&#39;s ID if present, -1 otherwise. If updateReplacement is set, call the replacement policy&#39;s update() on the line accessed*\/<\/span><\/div>$/;"	a
l00038	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">\/\/TODO: Now that we have a pure CC interface, the MESI controllers should go on different files.<\/span><\/div>$/;"	a
l00038	html/config_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#include &quot;log.h&quot;<\/span><\/div>$/;"	a
l00038	html/constants_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">\/\/ Complex multiprocess runs need multiple clocks, and multiple port domains<\/span><\/div>$/;"	a
l00038	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#include &quot;prio_queue.h&quot;<\/span><\/div>$/;"	a
l00038	html/core_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;};<\/div>$/;"	a
l00038	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;            RUNNING, <span class="comment">\/\/Scheduled. leave() --&gt; DRAINING<\/span><\/div>$/;"	a
l00038	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keywordtype">bool<\/span> x : mask) count += x;<\/div>$/;"	a
l00038	html/cpuid_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keywordtype">unsigned<\/span> ecxIn;<\/div>$/;"	a
l00038	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">\/* Helper data structures *\/<\/span><\/div>$/;"	a
l00038	html/debug_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#endif  \/\/ DEBUG_H_<\/span><\/div>$/;"	a
l00038	html/debug__harness_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#endif  \/\/ DEBUG_HARNESS_H_<\/span><\/div>$/;"	a
l00038	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">\/* Signal the harness process that we&#39;re ready to be debugged *\/<\/span><\/div>$/;"	a
l00038	html/decoder_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">\/\/ uop reg limits<\/span><\/div>$/;"	a
l00038	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">\/\/ FIXME(dsm): This enum should not be our here, esp with such generic names!<\/span><\/div>$/;"	a
l00038	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        uint32_t rowBufferPolicy;<\/div>$/;"	a
l00038	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">class <\/span>MultiChannelMemorySystem;<\/div>$/;"	a
l00038	html/event__queue_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00038	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;{<\/div>$/;"	a
l00038	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment"> * L1 lookups are dominated by several kinds of overhead (grab the cache locks,<\/span><\/div>$/;"	a
l00038	html/galloc_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="keywordtype">void<\/span>* __gm_calloc(<span class="keywordtype">size_t<\/span> num, <span class="keywordtype">size_t<\/span> size);  <span class="comment">\/\/deprecated, only used internally<\/span><\/div>$/;"	a
l00038	html/hash_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;};<\/div>$/;"	a
l00038	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">\/\/TODO: Post-deadline, make it a single array with a rank(req) interface<\/span><\/div>$/;"	a
l00038	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div>$/;"	a
l00038	html/locks_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#else<\/span><\/div>$/;"	a
l00038	html/log_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#ifdef MT_SAFE_LOG<\/span><\/div>$/;"	a
l00038	html/mc_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno"><a class="line" href="classSet.html">   38<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classSet.html">Set<\/a><\/div>$/;"	a
l00038	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="keywordtype">bool<\/span> _collect_trace;<\/div>$/;"	a
l00038	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">\/* Addresses are plain 64-bit uints. This should be kept compatible with PIN addrints *\/<\/span><\/div>$/;"	a
l00038	html/mtrand_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div>$/;"	a
l00038	html/mutex_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        }<\/div>$/;"	a
l00038	html/network_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno"><a class="line" href="classNetwork.html">   38<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classNetwork.html">Network<\/a> {<\/div>$/;"	a
l00038	html/null__core_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        uint64_t phaseEndCycle; <span class="comment">\/\/next stopping point<\/span><\/div>$/;"	a
l00038	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">\/\/ Uncomment to enable stall stats<\/span><\/div>$/;"	a
l00038	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno"><a class="line" href="classOOOCoreRecorder.html">   38<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classOOOCoreRecorder.html">OOOCoreRecorder<\/a> {<\/div>$/;"	a
l00038	html/pad_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00038	html/page__placement_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        uint32_t access_count;<\/div>$/;"	a
l00038	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    uint64_t size; <span class="comment">\/\/in lines<\/span><\/div>$/;"	a
l00038	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;};<\/div>$/;"	a
l00038	html/partitioner_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment">\/\/ allocates space in a cache between multiple partitions<\/span><\/div>$/;"	a
l00038	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno"><a class="line" href="classPinCmd.html">   38<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPinCmd.html">PinCmd<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00038	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00038	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; 64; i++) array[i] = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00038	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        uint64_t lastUpdatePhase;<\/div>$/;"	a
l00038	html/process__stats_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;uint64_t&gt;<\/a> processCycles, processInstrs;<\/div>$/;"	a
l00038	html/process__tree_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    SFF_ALWAYS,<\/div>$/;"	a
l00038	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    clock_gettime(CLOCK_REALTIME, &amp;ts);<\/div>$/;"	a
l00038	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;}<\/div>$/;"	a
l00038	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment"> * - On each replacement, rank() is called with the req and a list of replacement candidates.<\/span><\/div>$/;"	a
l00038	html/scheduler_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_unordered_map.h&quot;<\/span><\/div>$/;"	a
l00038	html/simple__core_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00038	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#include &lt;deque&gt;<\/span><\/div>$/;"	a
l00038	html/stats_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="comment"> *   point part of the array starts growing logarithmically, to capture<\/span><\/div>$/;"	a
l00038	html/stats__filter_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">#endif  \/\/ STATS_FILTER_H_<\/span><\/div>$/;"	a
l00038	html/str_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    ss &lt;&lt; v;<\/div>$/;"	a
l00038	html/tick__event_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="keywordtype">bool<\/span> active;<\/div>$/;"	a
l00038	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div>$/;"	a
l00038	html/timing__core_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00038	html/timing__event_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* events[TIMING_BLOCK_EVENTS];<\/div>$/;"	a
l00038	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div>$/;"	a
l00038	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00038	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div>$/;"	a
l00038	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno"><a class="line" href="classWeaveMemAccEvent.html">   38<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classWeaveMemAccEvent.html">WeaveMemAccEvent<\/a> : <span class="keyword">public<\/span> <a class="code" href="classTimingEvent.html">TimingEvent<\/a> {<\/div>$/;"	a
l00038	html/zsim_8h_source.html	/^<div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classAggregateStat.html">AggregateStat<\/a>;<\/div>$/;"	a
l00039	html/Callback_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;{<\/div>$/;"	a
l00039	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div>$/;"	a
l00039	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    AccessType type;<\/div>$/;"	a
l00039	html/barrier_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define BARRIER_H_<\/span><\/div>$/;"	a
l00039	html/bithacks_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#undef MAX<\/span><\/div>$/;"	a
l00039	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        uint32_t curState;<\/div>$/;"	a
l00039	html/cache_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment">\/* General coherent modular cache. The replacement policy and cache array are<\/span><\/div>$/;"	a
l00039	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <span class="keyword">virtual<\/span> int32_t lookup(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, <span class="keywordtype">bool<\/span> updateReplacement) = 0;<\/div>$/;"	a
l00039	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div>$/;"	a
l00039	html/config_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div>$/;"	a
l00039	html/constants_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#define MAX_CLOCK_DOMAINS (64)<\/span><\/div>$/;"	a
l00039	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#include &quot;profile_stats.h&quot;<\/span><\/div>$/;"	a
l00039	html/core_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div>$/;"	a
l00039	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;            DRAINING <span class="comment">\/\/Not scheduled, but events remain. join() --&gt; RUNNING; all events done --&gt; HALTED<\/span><\/div>$/;"	a
l00039	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        assert(count);<\/div>$/;"	a
l00039	html/cpuid_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">unsigned<\/span> eax, ebx, ecx, edx;<\/div>$/;"	a
l00039	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div>$/;"	a
l00039	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keywordtype">void<\/span> notifyHarnessForDebugger(<span class="keywordtype">int<\/span> harnessPid);<\/div>$/;"	a
l00039	html/decoder_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#define MAX_UOP_SRC_REGS 2<\/span><\/div>$/;"	a
l00039	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keyword">enum<\/span> MemAccessType { READ, WRITE, NUM_ACCESS_TYPES};<\/div>$/;"	a
l00039	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        int32_t constraints[4];<\/div>$/;"	a
l00039	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;};<\/div>$/;"	a
l00039	html/event__queue_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classEvent.html">Event<\/a>(uint64_t _period) : period(_period) {} <span class="comment">\/\/period == 0 events are one-shot<\/span><\/div>$/;"	a
l00039	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keyword">public<\/span>:<\/div>$/;"	a
l00039	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment"> * several virtual functions for the replacement policy, etc.). This<\/span><\/div>$/;"	a
l00039	html/galloc_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keywordtype">void<\/span>* __gm_memalign(<span class="keywordtype">size_t<\/span> blocksize, <span class="keywordtype">size_t<\/span> bytes);  <span class="comment">\/\/ deprecated, only used internally<\/span><\/div>$/;"	a
l00039	html/hash_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div>$/;"	a
l00039	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div>$/;"	a
l00039	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="structInListNode.html">   39<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structInListNode.html">InListNode<\/a> {<\/div>$/;"	a
l00039	html/locks_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#include &lt;xmmintrin.h&gt;<\/span>  <span class="comment">\/\/ NOLINT<\/span><\/div>$/;"	a
l00039	html/log_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define log_lock() __log_lock()<\/span><\/div>$/;"	a
l00039	html/mc_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;{<\/div>$/;"	a
l00039	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        g_string _trace_dir;<\/div>$/;"	a
l00039	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keyword">typedef<\/span> uint64_t Address;<\/div>$/;"	a
l00039	html/mtrand_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment">\/\/ Reference<\/span><\/div>$/;"	a
l00039	html/mutex_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div>$/;"	a
l00039	html/network_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00039	html/null__core_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div>$/;"	a
l00039	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment">\/\/ #define OOO_STALL_STATS<\/span><\/div>$/;"	a
l00039	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00039	html/pad_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment">\/\/Pad remainder to line size, use as e.g. PAD(sizeof(uint32)) will produce 60B of padding<\/span><\/div>$/;"	a
l00039	html/page__placement_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        ChunkEntry * entries;<\/div>$/;"	a
l00039	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    uint64_t targetSize; <span class="comment">\/\/in lines<\/span><\/div>$/;"	a
l00039	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div>$/;"	a
l00039	html/partitioner_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="classPartitioner.html">   39<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPartitioner.html">Partitioner<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00039	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00039	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        int32_t count;<\/div>$/;"	a
l00039	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;            occ = 0;<\/div>$/;"	a
l00039	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div>$/;"	a
l00039	html/process__stats_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;uint64_t&gt;<\/a> lastCoreCycles, lastCoreInstrs;<\/div>$/;"	a
l00039	html/process__tree_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    SFF_MULTIPROCESS,<\/div>$/;"	a
l00039	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordflow">return<\/span> 1000000000L*ts.tv_sec + ts.tv_nsec;<\/div>$/;"	a
l00039	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#else<\/span><\/div>$/;"	a
l00039	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment"> * - When the replacement is done, replaced() is called. (See below for more detail.)<\/span><\/div>$/;"	a
l00039	html/scheduler_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_unordered_set.h&quot;<\/span><\/div>$/;"	a
l00039	html/simple__core_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <a class="code" href="classFilterCache.html">FilterCache<\/a>* l1i;<\/div>$/;"	a
l00039	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">#include &lt;stddef.h&gt;<\/span><\/div>$/;"	a
l00039	html/stats_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="comment"> *   outliers without hurting accuracy of most samples.<\/span><\/div>$/;"	a
l00039	html/str_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordflow">return<\/span> ss.str();<\/div>$/;"	a
l00039	html/tick__event_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div>$/;"	a
l00039	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="classTimingCache.html">   39<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTimingCache.html">TimingCache<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCache.html">Cache<\/a> {<\/div>$/;"	a
l00039	html/timing__core_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <a class="code" href="classFilterCache.html">FilterCache<\/a>* l1i;<\/div>$/;"	a
l00039	html/timing__event_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <a class="code" href="structTimingEventBlock.html">TimingEventBlock<\/a>* next;<\/div>$/;"	a
l00039	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="classTraceDriver.html">   39<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTraceDriver.html">TraceDriver<\/a> {<\/div>$/;"	a
l00039	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;        <a class="code" href="classTracingCache.html#a80a198f4c14fa093580105902b7e677a">TracingCache<\/a>(uint32_t _numLines, <a class="code" href="classCC.html">CC<\/a>* _cc, <a class="code" href="classCacheArray.html">CacheArray<\/a>* _array, <a class="code" href="classReplPolicy.html">ReplPolicy<\/a>* _rp, uint32_t _accLat, uint32_t _invLat, g_string&amp; _tracefile, g_string&amp; _name);<\/div>$/;"	a
l00039	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno"><a class="line" href="classUMon.html">   39<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classUMon.html">UMon<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00039	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00039	html/zsim_8h_source.html	/^<div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classStatsBackend.html">StatsBackend<\/a>;<\/div>$/;"	a
l00040	html/Callback_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div>$/;"	a
l00040	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keyword">using<\/span> std::string;<\/div>$/;"	a
l00040	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;};<\/div>$/;"	a
l00040	html/barrier_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00040	html/bithacks_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00040	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        uint64_t lastCycle;<\/div>$/;"	a
l00040	html/cache_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment"> * pretty much mix and match. The coherence controller interfaces are general<\/span><\/div>$/;"	a
l00040	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div>$/;"	a
l00040	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment">\/* Generic, integrated controller interface *\/<\/span><\/div>$/;"	a
l00040	html/config_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno"><a class="line" href="namespacelibconfig.html">   40<\/a><\/span>&#160;<span class="keyword">namespace <\/span>libconfig {<\/div>$/;"	a
l00040	html/constants_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define MAX_PORT_DOMAINS (64)<\/span><\/div>$/;"	a
l00040	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00040	html/core_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment">\/* Analysis function pointer struct<\/span><\/div>$/;"	a
l00040	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        } State;<\/div>$/;"	a
l00040	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <span class="keywordflow">return<\/span> count;<\/div>$/;"	a
l00040	html/cpuid_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div>$/;"	a
l00040	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment">\/* Efficiently track the activation window: A circular buffer that stores the<\/span><\/div>$/;"	a
l00040	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div>$/;"	a
l00040	html/decoder_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define MAX_UOP_DST_REGS 2<\/span><\/div>$/;"	a
l00040	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div>$/;"	a
l00040	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div>$/;"	a
l00040	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div>$/;"	a
l00040	html/event__queue_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        uint64_t getPeriod()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> period;}<\/div>$/;"	a
l00040	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    Address addr;<\/div>$/;"	a
l00040	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment"> * specialization of Cache solves these issues by having a filter array that<\/span><\/div>$/;"	a
l00040	html/galloc_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keywordtype">char<\/span>* gm_strdup(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* str);<\/div>$/;"	a
l00040	html/hash_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno"><a class="line" href="classH3HashFamily.html">   40<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classH3HashFamily.html">H3HashFamily<\/a> : <span class="keyword">public<\/span> <a class="code" href="classHashFamily.html">HashFamily<\/a> {<\/div>$/;"	a
l00040	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno"><a class="line" href="classIdealLRUArray.html">   40<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classIdealLRUArray.html">IdealLRUArray<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCacheArray.html">CacheArray<\/a> {<\/div>$/;"	a
l00040	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    T* next;<\/div>$/;"	a
l00040	html/locks_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00040	html/log_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define log_unlock() __log_unlock()<\/span><\/div>$/;"	a
l00040	html/mc_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keyword">public<\/span>:<\/div>$/;"	a
l00040	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div>$/;"	a
l00040	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div>$/;"	a
l00040	html/mtrand_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment">\/\/ M. Matsumoto and T. Nishimura, &quot;Mersenne Twister: A 623-Dimensionally<\/span><\/div>$/;"	a
l00040	html/mutex_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <span class="keywordtype">void<\/span> lock() {<\/div>$/;"	a
l00040	html/network_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        std::unordered_map&lt;std::string, uint32_t&gt; delayMap;<\/div>$/;"	a
l00040	html/null__core_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00040	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div>$/;"	a
l00040	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <span class="keyword">typedef<\/span> <span class="keyword">enum<\/span> {<\/div>$/;"	a
l00040	html/pad_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#define PAD_SZ(sz) unsigned char PAD_CONCAT(pad_sz_line, __LINE__)[CACHE_LINE_BYTES - ((sz) % CACHE_LINE_BYTES)]<\/span><\/div>$/;"	a
l00040	html/page__placement_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        uint64_t num_hits;<\/div>$/;"	a
l00040	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div>$/;"	a
l00040	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno"><a class="line" href="classCorePartMapper.html">   40<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCorePartMapper.html">CorePartMapper<\/a> : <span class="keyword">public<\/span> <a class="code" href="classPartMapper.html">PartMapper<\/a> {<\/div>$/;"	a
l00040	html/partitioner_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00040	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;g_string&gt;<\/a> args;<\/div>$/;"	a
l00040	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00040	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        }<\/div>$/;"	a
l00040	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* coreStats;  <span class="comment">\/\/ each member must be a regular aggregate with numCores elems<\/span><\/div>$/;"	a
l00040	html/process__stats_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        uint64_t lastUpdatePhase;<\/div>$/;"	a
l00040	html/process__tree_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    SFF_NEVER<\/div>$/;"	a
l00040	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;}<\/div>$/;"	a
l00040	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#error &quot;No rdtsc() available for this arch&quot;<\/span><\/div>$/;"	a
l00040	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00040	html/scheduler_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00040	html/simple__core_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <a class="code" href="classFilterCache.html">FilterCache<\/a>* l1d;<\/div>$/;"	a
l00040	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00040	html/stats_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="comment"> * - ProxyStat takes a function pointer uint64_t(*)(void) at initialization,<\/span><\/div>$/;"	a
l00040	html/str_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;}<\/div>$/;"	a
l00040	html/tick__event_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00040	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00040	html/timing__core_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <a class="code" href="classFilterCache.html">FilterCache<\/a>* l1d;<\/div>$/;"	a
l00040	html/timing__event_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<\/div>$/;"	a
l00040	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00040	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        <span class="keywordtype">void<\/span> setChildren(<span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;BaseCache*&gt;<\/a>&amp; children, <a class="code" href="classNetwork.html">Network<\/a>* network);<\/div>$/;"	a
l00040	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00040	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;        uint32_t lat;<\/div>$/;"	a
l00040	html/zsim_8h_source.html	/^<div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProcessTreeNode.html">ProcessTreeNode<\/a>;<\/div>$/;"	a
l00041	html/Callback_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> ReturnT, <span class="keyword">typename<\/span> Param1T, <span class="keyword">typename<\/span> Param2T,<\/div>$/;"	a
l00041	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/barrier_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#include &lt;errno.h&gt;<\/span><\/div>$/;"	a
l00041	html/bithacks_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define MAX(x, y) ({ __typeof__(x) xx = (x); __typeof__(y) yy = (y); (xx &gt; yy)? xx : yy;})<\/span><\/div>$/;"	a
l00041	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/cache_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment"> * too, but to avoid virtual function call overheads we work with MESI<\/span><\/div>$/;"	a
l00041	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="comment">\/* Runs replacement scheme, returns tag ID of new pos and address of line to write back*\/<\/span><\/div>$/;"	a
l00041	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno"><a class="line" href="classCC.html">   41<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCC.html">CC<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00041	html/config_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classConfig.html">Config<\/a>;<\/div>$/;"	a
l00041	html/constants_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00041	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/core_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment"> * As an artifact of having a shared code cache, we need these to be the same for different core types.<\/span><\/div>$/;"	a
l00041	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00041	html/cpuid_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keywordtype">bool<\/span> operator&lt; (<span class="keyword">const<\/span> <a class="code" href="structCpuIdRecord.html">CpuIdRecord<\/a>&amp; other)<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00041	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment"> * next allowed cycle we&#39;re allowed to issue an activation<\/span><\/div>$/;"	a
l00041	html/debug__zsim_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#endif  \/\/ DEBUG_ZSIM_H_<\/span><\/div>$/;"	a
l00041	html/decoder_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00041	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment">\/\/ DRAM rank base class<\/span><\/div>$/;"	a
l00041	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> LoadConfigMain(<a class="code" href="classConfig.html">Config<\/a> &amp;cfg, uint32_t _chacheLineSize = 64);<\/div>$/;"	a
l00041	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keyword">class <\/span>DRAMSimAccEvent;<\/div>$/;"	a
l00041	html/event__queue_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> callback()=0;<\/div>$/;"	a
l00041	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    uint64_t reqCycle;<\/div>$/;"	a
l00041	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment"> * holds the most recently used line in each set. Accesses check the filter array,<\/span><\/div>$/;"	a
l00041	html/galloc_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keywordtype">void<\/span> gm_free(<span class="keywordtype">void<\/span>* ptr);<\/div>$/;"	a
l00041	html/hash_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00041	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00041	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    T* prev;<\/div>$/;"	a
l00041	html/locks_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00041	html/log_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#else<\/span><\/div>$/;"	a
l00041	html/mc_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;   <a class="code" href="classWay.html">Way<\/a> * ways;<\/div>$/;"	a
l00041	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        g_string name;<\/div>$/;"	a
l00041	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment">\/* Types of Access. An Access is a request that proceeds from lower to upper<\/span><\/div>$/;"	a
l00041	html/mtrand_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment">\/\/ Equidistributed Uniform Pseudo-Random Number Generator&quot;, ACM Transactions on<\/span><\/div>$/;"	a
l00041	html/mutex_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;            futex_lock(&amp;futex);<\/div>$/;"	a
l00041	html/network_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/null__core_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classNullCore.html#a5ff75e3d1ab734fdf99a60ec3fcf339a">NullCore<\/a>(g_string&amp; _name);<\/div>$/;"	a
l00041	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFilterCache.html">FilterCache<\/a>;<\/div>$/;"	a
l00041	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;            HALTED, <span class="comment">\/\/Not scheduled, no events left. Initial state. join() --&gt; RUNNING<\/span><\/div>$/;"	a
l00041	html/pad_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00041	html/page__placement_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        uint64_t num_misses;<\/div>$/;"	a
l00041	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> profHits;<\/div>$/;"	a
l00041	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00041	html/partitioner_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <a class="code" href="classPartitioner.html">Partitioner<\/a>(uint32_t _minAlloc, <span class="keywordtype">double<\/span> _allocPortion, <span class="keywordtype">bool<\/span>* _forbidden)<\/div>$/;"	a
l00041	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <a class="code" href="classSatCounter.html">SatCounter<\/a>() : count(I) {}<\/div>$/;"	a
l00041	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* procStats;  <span class="comment">\/\/ stats produced<\/span><\/div>$/;"	a
l00041	html/process__stats_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/process__tree_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;};<\/div>$/;"	a
l00041	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00041	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno"><a class="line" href="classReplPolicy.html">   41<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classReplPolicy.html">ReplPolicy<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00041	html/scheduler_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#include &quot;intrusive_list.h&quot;<\/span><\/div>$/;"	a
l00041	html/simple__core_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00041	html/stats_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="comment"> *   and calls it to get its value. It is used for cases where a stat can&#39;t<\/span><\/div>$/;"	a
l00041	html/str_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/tick__event_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <a class="code" href="classTickEvent.html">TickEvent<\/a>(T* _obj, int32_t domain) : <a class="code" href="classTimingEvent.html">TimingEvent<\/a>(0, 0, domain), obj(_obj), active(<span class="keyword">false<\/span>) {<\/div>$/;"	a
l00041	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        uint64_t lastAccCycle, lastFreeCycle;<\/div>$/;"	a
l00041	html/timing__core_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/timing__event_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <a class="code" href="structTimingEventBlock.html">TimingEventBlock<\/a>() {<\/div>$/;"	a
l00041	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        <span class="keyword">struct <\/span>ChildInfo {<\/div>$/;"	a
l00041	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00041	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;        uint32_t umonLines;<\/div>$/;"	a
l00041	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<\/div>$/;"	a
l00041	html/zsim_8h_source.html	/^<div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProcessStats.html">ProcessStats<\/a>;<\/div>$/;"	a
l00042	html/Callback_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="keyword">typename<\/span> Param3T&gt;<\/div>$/;"	a
l00042	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="keyword">namespace <\/span>DRAMSim <\/div>$/;"	a
l00042	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno"><a class="line" href="structPackedAccessRecord.html">   42<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structPackedAccessRecord.html">PackedAccessRecord<\/a> {<\/div>$/;"	a
l00042	html/barrier_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#include &lt;linux\/futex.h&gt;<\/span><\/div>$/;"	a
l00042	html/bithacks_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00042	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00042	html/cache_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment"> * controllers, since for now we only have MESI controllers<\/span><\/div>$/;"	a
l00042	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t preinsert(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, Address* wbLineAddr) = 0;<\/div>$/;"	a
l00042	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00042	html/config_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">class <\/span>Setting;<\/div>$/;"	a
l00042	html/constants_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment">\/\/Maximum IPC of any implemented core. This is used for adaptive events and will not fail silently if you define new, faster processors.<\/span><\/div>$/;"	a
l00042	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment">\/\/Set to 1 to produce stats of how many event crossings are generated and run. Useful for debugging, but adds overhead.<\/span><\/div>$/;"	a
l00042	html/core_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00042	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        State state;<\/div>$/;"	a
l00042	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordflow">return<\/span> zinfo-&gt;numCores;<\/div>$/;"	a
l00042	html/cpuid_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordflow">return<\/span> (eaxIn &lt; other.eaxIn) || ( (eaxIn == other.eaxIn) &amp;&amp; (ecxIn &lt; other.ecxIn) );<\/div>$/;"	a
l00042	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00042	html/decoder_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment">\/* NOTE this uses stronly typed enums, a C++11 feature. This saves a bunch of typecasts while keeping UopType enums 1-byte long.<\/span><\/div>$/;"	a
l00042	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno"><a class="line" href="classMemRankBase.html">   42<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMemRankBase.html">MemRankBase<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00042	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> LoadTiming(<a class="code" href="classConfig.html">Config<\/a> &amp;cfg);<\/div>$/;"	a
l00042	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div>$/;"	a
l00042	html/event__queue_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;};<\/div>$/;"	a
l00042	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    uint64_t respCycle;<\/div>$/;"	a
l00042	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment"> * and then go through the normal access path. Because there is one line per set,<\/span><\/div>$/;"	a
l00042	html/galloc_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div>$/;"	a
l00042	html/hash_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        uint32_t numFuncs;<\/div>$/;"	a
l00042	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="comment">\/\/We need a fake replpolicy and just want the CC...<\/span><\/div>$/;"	a
l00042	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <a class="code" href="classInList.html">InList&lt;T&gt;<\/a>* owner;<\/div>$/;"	a
l00042	html/locks_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#include &quot;log.h&quot;<\/span><\/div>$/;"	a
l00042	html/log_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define log_lock()<\/span><\/div>$/;"	a
l00042	html/mc_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;   uint32_t num_ways;<\/div>$/;"	a
l00042	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        uint32_t latency;<\/div>$/;"	a
l00042	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment"> * levels of the hierarchy (core-&gt;l1-&gt;l2, etc.)<\/span><\/div>$/;"	a
l00042	html/mtrand_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment">\/\/ Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30.<\/span><\/div>$/;"	a
l00042	html/mutex_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        }<\/div>$/;"	a
l00042	html/network_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00042	html/null__core_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00042	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div>$/;"	a
l00042	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;            RUNNING, <span class="comment">\/\/Scheduled. leave() --&gt; DRAINING<\/span><\/div>$/;"	a
l00042	html/pad_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#define ATTR_LINE_ALIGNED __attribute__((aligned(CACHE_LINE_BYTES)))<\/span><\/div>$/;"	a
l00042	html/page__placement_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    };<\/div>$/;"	a
l00042	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> profMisses;<\/div>$/;"	a
l00042	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        uint32_t numCores;<\/div>$/;"	a
l00042	html/partitioner_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;                : minAlloc(_minAlloc), allocPortion(_allocPortion), forbidden(_forbidden) {}<\/div>$/;"	a
l00042	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keyword">struct <\/span>ProcCmdInfo {<\/div>$/;"	a
l00042	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordtype">void<\/span> reset() { count = I; }<\/div>$/;"	a
l00042	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keyword">inline<\/span> T* dequeue(uint32_t&amp; offset) {<\/div>$/;"	a
l00042	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div>$/;"	a
l00042	html/process__stats_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00042	html/process__tree_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div>$/;"	a
l00042	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment">\/* Implements a single stopwatch-style cumulative clock. Useful to profile isolated events.<\/span><\/div>$/;"	a
l00042	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00042	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00042	html/scheduler_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#include &quot;proc_stats.h&quot;<\/span><\/div>$/;"	a
l00042	html/simple__core_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        uint64_t instrs;<\/div>$/;"	a
l00042	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="preprocessor">#include &quot;log.h&quot;<\/span><\/div>$/;"	a
l00042	html/stats_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="comment"> *   be stored as a counter (e.g. aggregates, RDTSC, performance counters,...)<\/span><\/div>$/;"	a
l00042	html/str_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; std::string Str(<span class="keyword">const<\/span> std::vector&lt;T&gt;&amp; v) {<\/div>$/;"	a
l00042	html/tick__event_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;            setMinStartCycle(0);<\/div>$/;"	a
l00042	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        uint32_t numMSHRs, activeMisses;<\/div>$/;"	a
l00042	html/timing__core_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        uint64_t instrs;<\/div>$/;"	a
l00042	html/timing__event_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; TIMING_BLOCK_EVENTS; i++) events[i] = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00042	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;            std::unordered_map&lt;Address, MESIState&gt; cStore; <span class="comment">\/\/holds current sets of lines for each child. Needs to support an arbitrary set, hence the hash table<\/span><\/div>$/;"	a
l00042	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;};<\/div>$/;"	a
l00042	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;        uint32_t samplingFactor; <span class="comment">\/\/Size of sampled cache (lines)\/size of umon. Should be power of 2<\/span><\/div>$/;"	a
l00042	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00042	html/zsim_8h_source.html	/^<div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProcStats.html">ProcStats<\/a>;<\/div>$/;"	a
l00043	html/Callback_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno"><a class="line" href="classDRAMSim_1_1CallbackBase.html">   43<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDRAMSim_1_1CallbackBase.html">CallbackBase<\/a><\/div>$/;"	a
l00043	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;{<\/div>$/;"	a
l00043	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    uint64_t lineAddr;<\/div>$/;"	a
l00043	html/barrier_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00043	html/bithacks_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#ifdef MIN<\/span><\/div>$/;"	a
l00043	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <a class="code" href="classCycleBreakdownStat.html">CycleBreakdownStat<\/a>() : <a class="code" href="classVectorCounter.html">VectorCounter<\/a>() {}<\/div>$/;"	a
l00043	html/cache_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00043	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="comment">\/\/Initialization<\/span><\/div>$/;"	a
l00043	html/config_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;};<\/div>$/;"	a
l00043	html/constants_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">\/\/If you use it, make sure it does not fail silently if violated.<\/span><\/div>$/;"	a
l00043	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#define PROFILE_CROSSINGS 0<\/span><\/div>$/;"	a
l00043	html/core_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno"><a class="line" href="structInstrFuncPtrs.html">   43<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structInstrFuncPtrs.html">InstrFuncPtrs<\/a> {  <span class="comment">\/\/ NOLINT(whitespace)<\/span><\/div>$/;"	a
l00043	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    }<\/div>$/;"	a
l00043	html/cpuid_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    }<\/div>$/;"	a
l00043	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno"><a class="line" href="classActWindow.html">   43<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classActWindow.html">ActWindow<\/a> {<\/div>$/;"	a
l00043	html/decoder_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment"> * If you use gcc &lt; 4.6 or some other compiler, either go back to casting or lose compactness in the layout.<\/span><\/div>$/;"	a
l00043	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00043	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> LoadPower(<a class="code" href="classConfig.html">Config<\/a> &amp;cfg);<\/div>$/;"	a
l00043	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno"><a class="line" href="classDRAMSimMemory.html">   43<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDRAMSimMemory.html">DRAMSimMemory<\/a> : <span class="keyword">public<\/span> <a class="code" href="classMemObject.html">MemObject<\/a> { <span class="comment">\/\/one DRAMSim controller<\/span><\/div>$/;"	a
l00043	html/event__queue_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    AccessType type;<\/div>$/;"	a
l00043	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment"> * it is fine to do this without grabbing a lock.<\/span><\/div>$/;"	a
l00043	html/galloc_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">\/\/ C++-style alloc interface (preferred)<\/span><\/div>$/;"	a
l00043	html/hash_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        uint32_t resShift;<\/div>$/;"	a
l00043	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keyword">class <\/span>ProxyReplPolicy : <span class="keyword">public<\/span> <a class="code" href="classReplPolicy.html">ReplPolicy<\/a> {<\/div>$/;"	a
l00043	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/locks_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/log_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define log_unlock()<\/span><\/div>$/;"	a
l00043	html/mc_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        Address _address_trace[10000];<\/div>$/;"	a
l00043	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00043	html/mtrand_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/mutex_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/network_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classNetwork.html">Network<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* filename);<\/div>$/;"	a
l00043	html/null__core_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment">\/* 2-level branch predictor:<\/span><\/div>$/;"	a
l00043	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;            DRAINING <span class="comment">\/\/Not scheduled, but events remain. join() --&gt; RUNNING; all events done --&gt; HALTED<\/span><\/div>$/;"	a
l00043	html/pad_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00043	html/page__placement_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> profSelfEvictions; <span class="comment">\/\/ from our same partition<\/span><\/div>$/;"	a
l00043	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00043	html/partitioner_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;            g_string cmd;<\/div>$/;"	a
l00043	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keywordtype">void<\/span> dec() { count = MAX(count - 1, 0); }<\/div>$/;"	a
l00043	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;            assert(occ);<\/div>$/;"	a
l00043	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        uint64_t* buf;<\/div>$/;"	a
l00043	html/process__stats_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classProcessStats.html#ada49d8374a41fa144bc16d3d403b16b1">ProcessStats<\/a>(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat); <span class="comment">\/\/includes initStats, called post-system init<\/span><\/div>$/;"	a
l00043	html/process__tree_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno"><a class="line" href="classProcessTreeNode.html">   43<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProcessTreeNode.html">ProcessTreeNode<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00043	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment"> * get() accounts for current interval if clock is running.<\/span><\/div>$/;"	a
l00043	html/rdtsc_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#endif  \/\/ RDTSC_H_<\/span><\/div>$/;"	a
l00043	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <a class="code" href="classCC.html">CC<\/a>* cc; <span class="comment">\/\/coherence controller, used to figure out whether candidates are valid or number of sharers<\/span><\/div>$/;"	a
l00043	html/scheduler_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#include &quot;process_stats.h&quot;<\/span><\/div>$/;"	a
l00043	html/simple__core_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        uint64_t curCycle;<\/div>$/;"	a
l00043	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="preprocessor">#include &quot;mutex.h&quot;<\/span><\/div>$/;"	a
l00043	html/stats_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="comment"> *   or where we have values we want to output just as stats, but would not<\/span><\/div>$/;"	a
l00043	html/str_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    std::stringstream ss;<\/div>$/;"	a
l00043	html/tick__event_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        }<\/div>$/;"	a
l00043	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;TimingEvent*&gt;<\/a> pendingQueue;<\/div>$/;"	a
l00043	html/timing__core_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/timing__event_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        next = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00043	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;            int64_t skew;<\/div>$/;"	a
l00043	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<\/div>$/;"	a
l00043	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        uint32_t buckets; <span class="comment">\/\/umon ways<\/span><\/div>$/;"	a
l00043	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;        <a class="code" href="classWeaveMemAccEvent.html">WeaveMemAccEvent<\/a>(uint32_t _lat, int32_t domain, uint32_t preDelay, uint32_t postDelay) :  <a class="code" href="classTimingEvent.html">TimingEvent<\/a>(preDelay, postDelay, domain), lat(_lat) {}<\/div>$/;"	a
l00043	html/zsim_8h_source.html	/^<div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classEventQueue.html">EventQueue<\/a>;<\/div>$/;"	a
l00044	html/Callback_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;{<\/div>$/;"	a
l00044	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div>$/;"	a
l00044	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    uint64_t reqCycle;<\/div>$/;"	a
l00044	html/barrier_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#include &lt;syscall.h&gt;<\/span><\/div>$/;"	a
l00044	html/bithacks_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#undef MIN<\/span><\/div>$/;"	a
l00044	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div>$/;"	a
l00044	html/cache_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno"><a class="line" href="classCache.html">   44<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCache.html">Cache<\/a> : <span class="keyword">public<\/span> <a class="code" href="classBaseCache.html">BaseCache<\/a> {<\/div>$/;"	a
l00044	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="comment">\/* Actually do the replacement, writing the new address in lineId.<\/span><\/div>$/;"	a
l00044	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> setParents(uint32_t childId, <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;MemObject*&gt;<\/a>&amp; parents, <a class="code" href="classNetwork.html">Network<\/a>* network) = 0;<\/div>$/;"	a
l00044	html/config_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div>$/;"	a
l00044	html/constants_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#define MAX_IPC (4)<\/span><\/div>$/;"	a
l00044	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor"><\/span><span class="comment">\/\/#define PROFILE_CROSSINGS 1<\/span><\/div>$/;"	a
l00044	html/core_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    void (*loadPtr)(THREADID, ADDRINT);<\/div>$/;"	a
l00044	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="comment">\/* There are 2 clocks:<\/span><\/div>$/;"	a
l00044	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;}<\/div>$/;"	a
l00044	html/cpuid_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;};<\/div>$/;"	a
l00044	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00044	html/decoder_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00044	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        uint32_t myId;<\/div>$/;"	a
l00044	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> MakeConstraints(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00044	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00044	html/event__queue_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment">\/* Adjusts period to fire on the first phase following the target. Sets exponentially decreasing periods,<\/span><\/div>$/;"	a
l00044	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* startEvent;<\/div>$/;"	a
l00044	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00044	html/galloc_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; T* gm_malloc() {<span class="keywordflow">return<\/span> <span class="keyword">static_cast&lt;<\/span>T*<span class="keyword">&gt;<\/span>(gm_malloc(<span class="keyword">sizeof<\/span>(T)));}<\/div>$/;"	a
l00044	html/hash_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        uint64_t* hMatrix;<\/div>$/;"	a
l00044	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;            <span class="keyword">private<\/span>:<\/div>$/;"	a
l00044	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <a class="code" href="structInListNode.html">InListNode<\/a>() {<\/div>$/;"	a
l00044	html/locks_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">volatile<\/span> uint32_t lock_t;<\/div>$/;"	a
l00044	html/log_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00044	html/mc_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;   uint32_t getEmptyWay()<\/div>$/;"	a
l00044	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        uint32_t _type_trace[10000];<\/div>$/;"	a
l00044	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">enum<\/span> {<\/div>$/;"	a
l00044	html/mtrand_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment">\/\/ Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,<\/span><\/div>$/;"	a
l00044	html/mutex_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="keywordtype">void<\/span> unlock() {<\/div>$/;"	a
l00044	html/network_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        uint32_t getRTT(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* src, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* dst);<\/div>$/;"	a
l00044	html/null__core_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        uint64_t getInstrs()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> instrs;}<\/div>$/;"	a
l00044	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment"> *  - L1: Branch history shift registers (bshr): 2^NB entries, HB bits of history\/entry, indexed by XOR&#39;d PC<\/span><\/div>$/;"	a
l00044	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        } State;<\/div>$/;"	a
l00044	html/pad_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#endif  \/\/ PAD_H_<\/span><\/div>$/;"	a
l00044	html/page__placement_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    uint32_t getChunkEntry(Address tag, ChunkInfo * chunk_info, <span class="keywordtype">bool<\/span> allocate=<span class="keyword">true<\/span>);<\/div>$/;"	a
l00044	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> profExtEvictions; <span class="comment">\/\/ from other partitions (if too large, we&#39;re probably doing something wrong, e.g., too small an adjustment period)<\/span><\/div>$/;"	a
l00044	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classCorePartMapper.html">CorePartMapper<\/a>(uint32_t _numCores) : numCores(_numCores) {}<\/div>$/;"	a
l00044	html/partitioner_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno"><a class="line" href="classPartitioner_1_1PartitionEvent.html">   44<\/a><\/span>&#160;        <span class="keyword">class <\/span><a class="code" href="classPartitioner_1_1PartitionEvent.html">PartitionEvent<\/a>: <span class="keyword">public<\/span> <a class="code" href="classEvent.html">Event<\/a> {<\/div>$/;"	a
l00044	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;            g_string input;<\/div>$/;"	a
l00044	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        <span class="keywordtype">void<\/span> inc() { count = MIN(count + 1, M); }<\/div>$/;"	a
l00044	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;            uint32_t pos = __builtin_ctzl(occ);<\/div>$/;"	a
l00044	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        uint64_t* lastBuf;<\/div>$/;"	a
l00044	html/process__stats_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div>$/;"	a
l00044	html/process__tree_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00044	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00044	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div>$/;"	a
l00044	html/scheduler_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#include &quot;stats.h&quot;<\/span><\/div>$/;"	a
l00044	html/simple__core_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        uint64_t phaseEndCycle; <span class="comment">\/\/next stopping point<\/span><\/div>$/;"	a
l00044	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div>$/;"	a
l00044	html/stats_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="comment"> *   like to treat as raw counters because e.g. they have a different type,<\/span><\/div>$/;"	a
l00044	html/str_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    ss &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>;<\/div>$/;"	a
l00044	html/tick__event_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div>$/;"	a
l00044	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div>$/;"	a
l00044	html/timing__core_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        uint64_t curCycle; <span class="comment">\/\/phase 1 clock<\/span><\/div>$/;"	a
l00044	html/timing__event_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    }<\/div>$/;"	a
l00044	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;            uint64_t lastReqCycle;<\/div>$/;"	a
l00044	html/tracing__cache_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00044	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;        uint32_t sets; <span class="comment">\/\/umon sets. Should be power of 2.<\/span><\/div>$/;"	a
l00044	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div>$/;"	a
l00044	html/zsim_8h_source.html	/^<div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classContentionSim.html">ContentionSim<\/a>;<\/div>$/;"	a
l00045	html/Callback_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="keyword">public<\/span>:<\/div>$/;"	a
l00045	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno"><a class="line" href="classDRAMSim_1_1MultiChannelMemorySystem.html">   45<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classDRAMSim_1_1MultiChannelMemorySystem.html">MultiChannelMemorySystem<\/a> {<\/div>$/;"	a
l00045	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    uint32_t latency;<\/div>$/;"	a
l00045	html/barrier_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#include &lt;time.h&gt;<\/span><\/div>$/;"	a
l00045	html/bithacks_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00045	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc, uint32_t size) {<\/div>$/;"	a
l00045	html/cache_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00045	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">         * NOTE: This method is guaranteed to be called after preinsert, although<\/span><\/div>$/;"	a
l00045	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> setChildren(<span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;BaseCache*&gt;<\/a>&amp; children, <a class="code" href="classNetwork.html">Network<\/a>* network) = 0;<\/div>$/;"	a
l00045	html/config_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div>$/;"	a
l00045	html/constants_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00045	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div>$/;"	a
l00045	html/core_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    void (*storePtr)(THREADID, ADDRINT);<\/div>$/;"	a
l00045	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">         *  - phase 1 clock = curCycle and is maintained by the bound phase contention-free core model<\/span><\/div>$/;"	a
l00045	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div>$/;"	a
l00045	html/cpuid_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div>$/;"	a
l00045	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;uint64_t&gt;<\/a> buf;<\/div>$/;"	a
l00045	html/decoder_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="keyword">enum<\/span> UopType : uint8_t {UOP_GENERAL, UOP_LOAD, UOP_STORE, UOP_STORE_ADDR, UOP_FENCE};<\/div>$/;"	a
l00045	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        uint32_t parentId;<\/div>$/;"	a
l00045	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div>$/;"	a
l00045	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        g_string name;<\/div>$/;"	a
l00045	html/event__queue_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment"> * so even if maxRate is horribly overestimated, it should have a very small cost (but there&#39;s room for<\/span><\/div>$/;"	a
l00045	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* endEvent;<\/div>$/;"	a
l00045	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div>$/;"	a
l00045	html/galloc_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; T* gm_malloc(<span class="keywordtype">size_t<\/span> objs) {<span class="keywordflow">return<\/span> <span class="keyword">static_cast&lt;<\/span>T*<span class="keyword">&gt;<\/span>(gm_malloc(<span class="keyword">sizeof<\/span>(T)*objs));}<\/div>$/;"	a
l00045	html/hash_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00045	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;                <a class="code" href="classIdealLRUArray.html">IdealLRUArray<\/a>* a;<\/div>$/;"	a
l00045	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        next = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00045	html/locks_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div>$/;"	a
l00045	html/log_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00045	html/mc_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;   {<\/div>$/;"	a
l00045	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        uint32_t _cur_trace_len;<\/div>$/;"	a
l00045	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    GETS, <span class="comment">\/\/ get line, exclusive permission not needed (triggered by a processor load)<\/span><\/div>$/;"	a
l00045	html/mtrand_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment">\/\/ Copyright (C) 2000 - 2009, Richard J. Wagner<\/span><\/div>$/;"	a
l00045	html/mutex_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;            futex_unlock(&amp;futex);<\/div>$/;"	a
l00045	html/network_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;};<\/div>$/;"	a
l00045	html/null__core_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        uint64_t getPhaseCycles() <span class="keyword">const<\/span>;<\/div>$/;"	a
l00045	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment"> *  - L2: Pattern history table (pht): 2^LB entries, 2-bit sat counters, indexed by XOR&#39;d bshr contents<\/span><\/div>$/;"	a
l00045	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div>$/;"	a
l00045	html/page__placement_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keywordtype">bool<\/span> sampleOrNot(<span class="keywordtype">double<\/span> sample_rate, <span class="keywordtype">bool<\/span> miss_rate_tune = <span class="keyword">true<\/span>);<\/div>$/;"	a
l00045	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;};<\/div>$/;"	a
l00045	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getNumPartitions() {<span class="keywordflow">return<\/span> numCores;}<\/div>$/;"	a
l00045	html/partitioner_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;            <span class="keyword">private<\/span>:<\/div>$/;"	a
l00045	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;            g_string loader;<\/div>$/;"	a
l00045	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keywordtype">bool<\/span> pred()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> count &gt;= T; }<\/div>$/;"	a
l00045	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;            T* res = array[pos];<\/div>$/;"	a
l00045	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        uint64_t bufSize;<\/div>$/;"	a
l00045	html/process__stats_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="comment">\/\/ May trigger a global update, should call ONLY when quiesced<\/span><\/div>$/;"	a
l00045	html/process__tree_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;ProcessTreeNode*&gt;<\/a> children;<\/div>$/;"	a
l00045	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno"><a class="line" href="classClockStat.html">   45<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classClockStat.html">ClockStat<\/a> : <span class="keyword">public<\/span> <a class="code" href="classScalarStat.html">ScalarStat<\/a> {<\/div>$/;"	a
l00045	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00045	html/scheduler_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#include &quot;zsim.h&quot;<\/span><\/div>$/;"	a
l00045	html/simple__core_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        uint64_t haltedCycles;<\/div>$/;"	a
l00045	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="preprocessor">#define SLAB_SIZE (1&lt;&lt;16)  \/\/ 64KB; must be a power of two<\/span><\/div>$/;"	a
l00045	html/stats_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="comment"> *   or for efficiency reasons (e.g. the per-thread phase cycles count is<\/span><\/div>$/;"	a
l00045	html/str_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span>&amp; x : v) ss &lt;&lt; <span class="stringliteral">&quot; &quot;<\/span> &lt;&lt; x;<\/div>$/;"	a
l00045	html/tick__event_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno"><a class="line" href="classTickEvent.html#ab044a76691e38747e8a1a4106910fcab">   45<\/a><\/span>&#160;        <span class="keywordtype">void<\/span> <a class="code" href="classTickEvent.html#ab044a76691e38747e8a1a4106910fcab">parentDone<\/a>(uint64_t startCycle) {<\/div>$/;"	a
l00045	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="comment">\/\/ Stats<\/span><\/div>$/;"	a
l00045	html/timing__core_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        uint64_t phaseEndCycle; <span class="comment">\/\/phase 1 end clock<\/span><\/div>$/;"	a
l00045	html/timing__event_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div>$/;"	a
l00045	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;            <span class="comment">\/\/Counter bypassedGETS;<\/span><\/div>$/;"	a
l00045	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div>$/;"	a
l00045	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;        <span class="keywordtype">void<\/span> simulate(uint64_t startCycle) {<\/div>$/;"	a
l00045	html/zsim_8h_source.html	/^<div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classEventRecorder.html">EventRecorder<\/a>;<\/div>$/;"	a
l00046	html/Callback_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keyword">virtual<\/span> ~<a class="code" href="classDRAMSim_1_1CallbackBase.html">CallbackBase<\/a>() = 0;<\/div>$/;"	a
l00046	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="keyword">public<\/span>: <\/div>$/;"	a
l00046	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    uint16_t childId;<\/div>$/;"	a
l00046	html/barrier_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;<\/span><\/div>$/;"	a
l00046	html/bithacks_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define MIN(x, y) ({ __typeof__(x) xx = (x); __typeof__(y) yy = (y); (xx &lt; yy)? xx : yy;})<\/span><\/div>$/;"	a
l00046	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;            VectorCounter::init(name, desc, size);<\/div>$/;"	a
l00046	html/cache_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <a class="code" href="classCC.html">CC<\/a>* cc;<\/div>$/;"	a
l00046	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">         * there may be some intervening calls to lookup. The implementation is<\/span><\/div>$/;"	a
l00046	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* cacheStat) = 0;<\/div>$/;"	a
l00046	html/config_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno"><a class="line" href="classConfig.html">   46<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classConfig.html">Config<\/a> {<\/div>$/;"	a
l00046	html/constants_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#endif  \/\/ CONSTANTS_H_<\/span><\/div>$/;"	a
l00046	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTimingEvent.html">TimingEvent<\/a>;<\/div>$/;"	a
l00046	html/core_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    void (*bblPtr)(THREADID, ADDRINT, <a class="code" href="structBblInfo.html">BblInfo<\/a>*);<\/div>$/;"	a
l00046	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">         *  - phase 2 clock = curCycle - gapCycles is the zll clock<\/span><\/div>$/;"	a
l00046	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="keyword">inline<\/span> std::vector&lt;bool&gt; cpuenumMask(uint32_t pid) {<\/div>$/;"	a
l00046	html/cpuid_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">\/\/ cpuid values produced by getcpuid (dsm)<\/span><\/div>$/;"	a
l00046	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        uint32_t idx;<\/div>$/;"	a
l00046	html/decoder_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div>$/;"	a
l00046	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        uint32_t bankCount;<\/div>$/;"	a
l00046	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00046	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        uint32_t minLatency;<\/div>$/;"	a
l00046	html/event__queue_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment"> * optimization if this becomes an issue).<\/span><\/div>$/;"	a
l00046	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div>$/;"	a
l00046	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno"><a class="line" href="classFilterCache.html">   46<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classFilterCache.html">FilterCache<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCache.html">Cache<\/a> {<\/div>$/;"	a
l00046	html/galloc_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; T* gm_calloc() {<span class="keywordflow">return<\/span> <span class="keyword">static_cast&lt;<\/span>T*<span class="keyword">&gt;<\/span>(__gm_calloc(1, <span class="keyword">sizeof<\/span>(T)));}<\/div>$/;"	a
l00046	html/hash_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <a class="code" href="classH3HashFamily.html#a1702cad8d3646b91351f3e3ca34a73e9">H3HashFamily<\/a>(uint32_t numFunctions, uint32_t outputBits, uint64_t randSeed = 123132127);<\/div>$/;"	a
l00046	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;            <span class="keyword">public<\/span>:<\/div>$/;"	a
l00046	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        prev = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00046	html/locks_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">\/* SPINLOCK: A simple T&amp;T&amp;S spinlock. Lock can use monitor\/mwait *\/<\/span><\/div>$/;"	a
l00046	html/log_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor">#define PANIC_EXIT_CODE (112)<\/span><\/div>$/;"	a
l00046	html/mc_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;      <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; num_ways; i++)<\/div>$/;"	a
l00046	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        uint32_t _max_trace_len;<\/div>$/;"	a
l00046	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    GETX, <span class="comment">\/\/ get line, exclusive permission needed (triggered by a processor store o atomic access)<\/span><\/div>$/;"	a
l00046	html/mtrand_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment">\/\/ All rights reserved.<\/span><\/div>$/;"	a
l00046	html/mutex_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        }<\/div>$/;"	a
l00046	html/network_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div>$/;"	a
l00046	html/null__core_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        uint64_t getCycles()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> instrs; <span class="comment">\/*IPC=1*\/<\/span> }<\/div>$/;"	a
l00046	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment"> *  NOTE: Assumes LB is in [NB, HB] range for XORing (e.g., HB = 18 and NB = 10, LB = 13 is OK)<\/span><\/div>$/;"	a
l00046	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        uint64_t curId;<\/div>$/;"	a
l00046	html/page__placement_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keywordtype">bool<\/span> compareCounter(ChunkEntry * entry1, ChunkEntry * entry2);<\/div>$/;"	a
l00046	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div>$/;"	a
l00046	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t <a class="code" href="classCorePartMapper.html#a37c35ce6508de5e769dd138f47d8c760">getPartition<\/a>(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00046	html/partitioner_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;                <a class="code" href="classPartitioner.html">Partitioner<\/a>* part;<\/div>$/;"	a
l00046	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;            g_string env;<\/div>$/;"	a
l00046	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        uint32_t counter()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> count; }<\/div>$/;"	a
l00046	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;            T* next = res-&gt;next;<\/div>$/;"	a
l00046	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div>$/;"	a
l00046	html/process__stats_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        uint64_t getProcessCycles(uint32_t p);<\/div>$/;"	a
l00046	html/process__tree_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* patchRoot; <span class="comment">\/\/used in syscall patching<\/span><\/div>$/;"	a
l00046	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00046	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <a class="code" href="classReplPolicy.html">ReplPolicy<\/a>() : cc(<span class="keyword">nullptr<\/span>) {}<\/div>$/;"	a
l00046	html/scheduler_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div>$/;"	a
l00046	html/simple__core_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div>$/;"	a
l00046	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define SLAB_MASK (~(SLAB_SIZE - 1))<\/span><\/div>$/;"	a
l00046	html/stats_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="comment"> *   updated on every BBL, and may be an uint32_t)<\/span><\/div>$/;"	a
l00046	html/str_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    ss &lt;&lt; <span class="stringliteral">&quot; ]&quot;<\/span>;<\/div>$/;"	a
l00046	html/tick__event_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;            panic(<span class="stringliteral">&quot;This is queued directly&quot;<\/span>);<\/div>$/;"	a
l00046	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <a class="code" href="classCycleBreakdownStat.html">CycleBreakdownStat<\/a> profOccHist;<\/div>$/;"	a
l00046	html/timing__core_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div>$/;"	a
l00046	html/timing__event_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keywordtype">void<\/span>* <span class="keyword">operator<\/span> <span class="keyword">new<\/span> (<span class="keywordtype">size_t<\/span> sz, <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* evRec) {<\/div>$/;"	a
l00046	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;            <span class="comment">\/\/Counter bypassedGETX;<\/span><\/div>$/;"	a
l00046	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;        <span class="comment">\/\/Used in masks for set indices and sampling factor descisions<\/span><\/div>$/;"	a
l00046	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;            done(startCycle + lat);<\/div>$/;"	a
l00046	html/zsim_8h_source.html	/^<div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPinCmd.html">PinCmd<\/a>;<\/div>$/;"	a
l00047	html/Callback_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keyword">virtual<\/span> ReturnT operator()(Param1T, Param2T, Param3T) = 0;<\/div>$/;"	a
l00047	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;            <span class="keywordtype">bool<\/span> addTransaction(<span class="keywordtype">bool<\/span> isWrite, uint64_t addr);<\/div>$/;"	a
l00047	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    uint16_t type;  <span class="comment">\/\/ could be uint8_t, but causes corruption in HDF5? (wtf...)<\/span><\/div>$/;"	a
l00047	html/barrier_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#include &quot;constants.h&quot;<\/span><\/div>$/;"	a
l00047	html/bithacks_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00047	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;            curState = 0;<\/div>$/;"	a
l00047	html/cache_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        <a class="code" href="classCacheArray.html">CacheArray<\/a>* array;<\/div>$/;"	a
l00047	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment">         * allowed to keep internal state in preinsert() and use it in postinsert()<\/span><\/div>$/;"	a
l00047	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div>$/;"	a
l00047	html/config_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00047	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDelayEvent.html">DelayEvent<\/a>;<\/div>$/;"	a
l00047	html/core_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    void (*branchPtr)(THREADID, ADDRINT, BOOL, ADDRINT, ADDRINT);<\/div>$/;"	a
l00047	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment">         *  We maintain gapCycles, and only get curCycle on function calls. Some of those calls also<\/span><\/div>$/;"	a
l00047	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    std::vector&lt;bool&gt; res;<\/div>$/;"	a
l00047	html/cpuid_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<a class="code" href="structCpuIdRecord.html">CpuIdRecord<\/a> cpuid_core2[] = { <span class="comment">\/\/ 2-socket Xeon E5335 (2x4 cores, core2 arch, 2.00GHz)<\/span><\/div>$/;"	a
l00047	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div>$/;"	a
l00047	html/decoder_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno"><a class="line" href="structDynUop.html">   47<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structDynUop.html">DynUop<\/a> {<\/div>$/;"	a
l00047	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div>$/;"	a
l00047	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        <a class="code" href="classMemParam.html#a85006f1c80158d176a10a867cc8393e8">MemParam<\/a>();<\/div>$/;"	a
l00047	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        uint32_t domain;<\/div>$/;"	a
l00047	html/event__queue_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00047	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keywordtype">bool<\/span> isValid()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> startEvent; }<\/div>$/;"	a
l00047	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00047	html/galloc_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; T* gm_calloc(<span class="keywordtype">size_t<\/span> objs) {<span class="keywordflow">return<\/span> <span class="keyword">static_cast&lt;<\/span>T*<span class="keyword">&gt;<\/span>(__gm_calloc(objs, <span class="keyword">sizeof<\/span>(T)));}<\/div>$/;"	a
l00047	html/hash_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        uint64_t hash(uint32_t <span class="keywordtype">id<\/span>, uint64_t val);<\/div>$/;"	a
l00047	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;                <span class="keyword">explicit<\/span> ProxyReplPolicy(<a class="code" href="classIdealLRUArray.html">IdealLRUArray<\/a>* _a) : a(_a) {}<\/div>$/;"	a
l00047	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        owner = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00047	html/locks_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div>$/;"	a
l00047	html/log_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00047	html/mc_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;         <span class="keywordflow">if<\/span> (!ways[i].valid)<\/div>$/;"	a
l00047	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div>$/;"	a
l00047	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    PUTS, <span class="comment">\/\/ clean writeback (lower cache is evicting this line, line was not modified)<\/span><\/div>$/;"	a
l00047	html/mtrand_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00047	html/mutex_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div>$/;"	a
l00047	html/network_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor">#endif  \/\/ NETWORK_H_<\/span><\/div>$/;"	a
l00047	html/null__core_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div>$/;"	a
l00047	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00047	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div>$/;"	a
l00047	html/page__placement_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    uint32_t adjustEntryOrder(ChunkInfo * chunk_info, uint32_t idx);<\/div>$/;"	a
l00047	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno"><a class="line" href="classPartReplPolicy.html">   47<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPartReplPolicy.html">PartReplPolicy<\/a> : <span class="keyword">public<\/span> <span class="keyword">virtual<\/span> <a class="code" href="classReplPolicy.html">ReplPolicy<\/a> {<\/div>$/;"	a
l00047	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;};<\/div>$/;"	a
l00047	html/partitioner_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;            <span class="keyword">public<\/span>:<\/div>$/;"	a
l00047	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        };<\/div>$/;"	a
l00047	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;};<\/div>$/;"	a
l00047	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;            array[pos] = next;<\/div>$/;"	a
l00047	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00047	html/process__stats_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        uint64_t getProcessInstrs(uint32_t p);<\/div>$/;"	a
l00047	html/process__tree_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        uint32_t procIdx;<\/div>$/;"	a
l00047	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        uint64_t startNs;<\/div>$/;"	a
l00047	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<\/div>$/;"	a
l00047	html/simple__core_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00047	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00047	html/stats_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="comment"> *<\/span><\/div>$/;"	a
l00047	html/str_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keywordflow">return<\/span> ss.str();<\/div>$/;"	a
l00047	html/tick__event_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        }<\/div>$/;"	a
l00047	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profHitLat, profMissRespLat, profMissLat;<\/div>$/;"	a
l00047	html/timing__core_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        <a class="code" href="classCoreRecorder.html">CoreRecorder<\/a> cRec;<\/div>$/;"	a
l00047	html/timing__event_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        <span class="keywordflow">return<\/span> evRec-&gt;alloc(sz);<\/div>$/;"	a
l00047	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;            <a class="code" href="classCounter.html">Counter<\/a> profLat;<\/div>$/;"	a
l00047	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        uint64_t samplingFactorBits;<\/div>$/;"	a
l00047	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        }<\/div>$/;"	a
l00047	html/zsim_8h_source.html	/^<div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<span class="keyword">class <\/span>PortVirtualizer;<\/div>$/;"	a
l00048	html/Callback_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;};<\/div>$/;"	a
l00048	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;            <span class="keywordtype">void<\/span> setCPUClockSpeed(uint64_t cpuClkFreqHz);<\/div>$/;"	a
l00048	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;} <span class="comment">\/*__attribute__((packed))*\/<\/span>;  <span class="comment">\/\/ 24 bytes --&gt; no packing needed<\/span><\/div>$/;"	a
l00048	html/barrier_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00048	html/bithacks_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment">\/\/ Integer log2 --- called ilog2 because cmath defines log2 for floats\/doubles,<\/span><\/div>$/;"	a
l00048	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;            lastCycle = 0;<\/div>$/;"	a
l00048	html/cache_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <a class="code" href="classReplPolicy.html">ReplPolicy<\/a>* rp;<\/div>$/;"	a
l00048	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment">         *\/<\/span><\/div>$/;"	a
l00048	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="comment">\/\/Access methods; see Cache for call sequence<\/span><\/div>$/;"	a
l00048	html/config_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        libconfig::Config* inCfg;<\/div>$/;"	a
l00048	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCrossingEvent.html">CrossingEvent<\/a>;<\/div>$/;"	a
l00048	html/core_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="comment">\/\/ Same as load\/store functions, but last arg indicated whether op is executing<\/span><\/div>$/;"	a
l00048	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment">         *  need to change curCycle, so they just return an updated version that the bound phase model<\/span><\/div>$/;"	a
l00048	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keywordflow">if<\/span> (zinfo-&gt;perProcessCpuEnum) {<\/div>$/;"	a
l00048	html/cpuid_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    {0000000000, 0000000000, 0x0000000a, 0x756e6547, 0x6c65746e, 0x49656e69},<\/div>$/;"	a
l00048	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00048	html/decoder_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    uint16_t rs[MAX_UOP_SRC_REGS];<\/div>$/;"	a
l00048	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        uint32_t lastBank;<\/div>$/;"	a
l00048	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keyword">virtual<\/span> ~<a class="code" href="classMemParam.html">MemParam<\/a>();<\/div>$/;"	a
l00048	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div>$/;"	a
l00048	html/event__queue_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> G, <span class="keyword">typename<\/span> F&gt;<\/div>$/;"	a
l00048	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keywordtype">void<\/span> clear() { startEvent = <span class="keyword">nullptr<\/span>; }<\/div>$/;"	a
l00048	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keyword">struct <\/span>FilterEntry {<\/div>$/;"	a
l00048	html/galloc_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; T* gm_memalign(<span class="keywordtype">size_t<\/span> blocksize) {<span class="keywordflow">return<\/span> <span class="keyword">static_cast&lt;<\/span>T*<span class="keyword">&gt;<\/span>(__gm_memalign(blocksize, <span class="keyword">sizeof<\/span>(T)));}<\/div>$/;"	a
l00048	html/hash_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;};<\/div>$/;"	a
l00048	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;                <span class="keywordtype">void<\/span> setCC(<a class="code" href="classCC.html">CC<\/a>* _cc) {a-&gt;setCC(cc);}<\/div>$/;"	a
l00048	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    }<\/div>$/;"	a
l00048	html/locks_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> spin_init(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00048	html/log_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment">\/\/ assertions are often frequently executed but never inlined. Might as well tell the compiler about it<\/span><\/div>$/;"	a
l00048	html/mc_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;            <span class="keywordflow">return<\/span> i;<\/div>$/;"	a
l00048	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keyword">struct <\/span>Chunk {<\/div>$/;"	a
l00048	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    PUTX  <span class="comment">\/\/ dirty writeback (lower cache is evicting this line, line was modified)<\/span><\/div>$/;"	a
l00048	html/mtrand_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment">\/\/ Redistribution and use in source and binary forms, with or without<\/span><\/div>$/;"	a
l00048	html/mutex_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keywordtype">bool<\/span> haswaiters() {<\/div>$/;"	a
l00048	html/network_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00048	html/null__core_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keywordtype">void<\/span> contextSwitch(int32_t gid);<\/div>$/;"	a
l00048	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keyword">template<\/span>&lt;u<span class="keywordtype">int<\/span>32_t NB, u<span class="keywordtype">int<\/span>32_t HB, u<span class="keywordtype">int<\/span>32_t LB&gt;<\/div>$/;"	a
l00048	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        State state;<\/div>$/;"	a
l00048	html/page__placement_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    uint32_t pickVictimWay(ChunkInfo * chunk_info);<\/div>$/;"	a
l00048	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00048	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div>$/;"	a
l00048	html/partitioner_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;                <a class="code" href="classPartitioner_1_1PartitionEvent.html">PartitionEvent<\/a>(<a class="code" href="classPartitioner.html">Partitioner<\/a>* _part, uint64_t _period) : <a class="code" href="classEvent.html">Event<\/a>(_period), part(_part) {}<\/div>$/;"	a
l00048	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div>$/;"	a
l00048	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div>$/;"	a
l00048	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;            <span class="keywordflow">if<\/span> (!next) occ ^= 1L &lt;&lt; pos;<\/div>$/;"	a
l00048	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classProcStats.html">ProcStats<\/a>(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat, <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* _coreStats); <span class="comment">\/\/includes initStats, called post-system init<\/span><\/div>$/;"	a
l00048	html/process__stats_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div>$/;"	a
l00048	html/process__tree_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keyword">const<\/span> uint32_t groupIdx;<\/div>$/;"	a
l00048	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        uint64_t totalNs;<\/div>$/;"	a
l00048	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> setCC(<a class="code" href="classCC.html">CC<\/a>* _cc) {cc = _cc;}<\/div>$/;"	a
l00048	html/simple__core_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <a class="code" href="classSimpleCore.html#ae992e18b5545a5fe7ca9d6fa43a36932">SimpleCore<\/a>(<a class="code" href="classFilterCache.html">FilterCache<\/a>* _l1i, <a class="code" href="classFilterCache.html">FilterCache<\/a>* _l1d, g_string&amp; _name);<\/div>$/;"	a
l00048	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment">\/\/ Uncomment to immediately scrub slabs (to 0) and freed elems (to -1).<\/span><\/div>$/;"	a
l00048	html/stats_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="comment"> * Groups of stats are contained in aggregates (AggregateStat), representing<\/span><\/div>$/;"	a
l00048	html/str_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;}<\/div>$/;"	a
l00048	html/tick__event_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div>$/;"	a
l00048	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div>$/;"	a
l00048	html/timing__core_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<\/div>$/;"	a
l00048	html/timing__event_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    }<\/div>$/;"	a
l00048	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;            <a class="code" href="classCounter.html">Counter<\/a> profSelfInv; <span class="comment">\/\/invalidations in response to our own access<\/span><\/div>$/;"	a
l00048	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        uint64_t setsBits;<\/div>$/;"	a
l00048	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;};<\/div>$/;"	a
l00048	html/zsim_8h_source.html	/^<div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classVectorCounter.html">VectorCounter<\/a>;<\/div>$/;"	a
l00049	html/Callback_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;            <span class="keywordtype">void<\/span> update();<\/div>$/;"	a
l00049	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/barrier_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">#include &quot;locks.h&quot;<\/span><\/div>$/;"	a
l00049	html/bithacks_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment">\/\/ and promotes int calls to use FP<\/span><\/div>$/;"	a
l00049	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        }<\/div>$/;"	a
l00049	html/cache_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> postinsert(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, uint32_t lineId) = 0;<\/div>$/;"	a
l00049	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> startAccess(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) = 0; <span class="comment">\/\/initial locking, address races; returns true if access should be skipped; may change req!<\/span><\/div>$/;"	a
l00049	html/config_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        libconfig::Config* outCfg;<\/div>$/;"	a
l00049	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/core_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    void (*predLoadPtr)(THREADID, ADDRINT, BOOL);<\/div>$/;"	a
l00049	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment">         *  needs to take. However, **we have no idea about curCycle outside of those calls**.<\/span><\/div>$/;"	a
l00049	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        res.resize(cpuenumNumCpus(pid));<\/div>$/;"	a
l00049	html/cpuid_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    {0x00000001, 0000000000, 0x000006f7, 0x05040800, 0x0004e33d, 0xbfebfbff},<\/div>$/;"	a
l00049	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keywordtype">void<\/span> init(uint32_t size) {<\/div>$/;"	a
l00049	html/decoder_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    uint16_t rd[MAX_UOP_DST_REGS];<\/div>$/;"	a
l00049	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        uint64_t lastAccessCycle;<\/div>$/;"	a
l00049	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <a class="code" href="classDRAMSim_1_1MultiChannelMemorySystem.html">DRAMSim::MultiChannelMemorySystem<\/a>* dramCore;<\/div>$/;"	a
l00049	html/event__queue_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno"><a class="line" href="classAdaptiveEvent.html">   49<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classAdaptiveEvent.html">AdaptiveEvent<\/a> : <span class="keyword">public<\/span> <a class="code" href="classEvent.html">Event<\/a> {<\/div>$/;"	a
l00049	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;};<\/div>$/;"	a
l00049	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;            <span class="keyword">volatile<\/span> Address rdAddr;<\/div>$/;"	a
l00049	html/galloc_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; T* gm_memalign(<span class="keywordtype">size_t<\/span> blocksize, <span class="keywordtype">size_t<\/span> objs) {<span class="keywordflow">return<\/span> <span class="keyword">static_cast&lt;<\/span>T*<span class="keyword">&gt;<\/span>(__gm_memalign(blocksize, <span class="keyword">sizeof<\/span>(T)*objs));}<\/div>$/;"	a
l00049	html/hash_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/locks_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    *lock = 0;<\/div>$/;"	a
l00049	html/log_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">#define likely(x)       __builtin_expect((x), 1)<\/span><\/div>$/;"	a
l00049	html/mc_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;      <span class="keywordflow">return<\/span> num_ways;<\/div>$/;"	a
l00049	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;            <span class="keywordtype">char<\/span> a[2000];<\/div>$/;"	a
l00049	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;} AccessType;<\/div>$/;"	a
l00049	html/mtrand_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment">\/\/ modification, are permitted provided that the following conditions<\/span><\/div>$/;"	a
l00049	html/mutex_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;            <span class="keywordflow">return<\/span> futex_haswaiters(&amp;futex);<\/div>$/;"	a
l00049	html/null__core_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> join();<\/div>$/;"	a
l00049	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno"><a class="line" href="classBranchPredictorPAg.html">   49<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classBranchPredictorPAg.html">BranchPredictorPAg<\/a> {<\/div>$/;"	a
l00049	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/page__placement_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    <span class="keywordtype">void<\/span> handleCounterOverflow(ChunkInfo * chunk_info, ChunkEntry * overflow_entry);<\/div>$/;"	a
l00049	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <a class="code" href="classPartitionMonitor.html">PartitionMonitor<\/a>* monitor;<\/div>$/;"	a
l00049	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno"><a class="line" href="classInstrDataPartMapper.html">   49<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classInstrDataPartMapper.html">InstrDataPartMapper<\/a> : <span class="keyword">public<\/span> <a class="code" href="classPartMapper.html">PartMapper<\/a> {<\/div>$/;"	a
l00049	html/partitioner_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;                <span class="keywordtype">void<\/span> callback() { part-&gt;partition(); }<\/div>$/;"	a
l00049	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;ProcCmdInfo&gt;<\/a> procInfo; <span class="comment">\/\/one entry for each process that the harness launches (not for child procs)<\/span><\/div>$/;"	a
l00049	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPrefetchResponseEvent.html">PrefetchResponseEvent<\/a>;<\/div>$/;"	a
l00049	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;            assert(res);<\/div>$/;"	a
l00049	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/process__stats_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="comment">\/\/ Must be called by scheduler when descheduling; core must be quiesced<\/span><\/div>$/;"	a
l00049	html/process__tree_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keyword">volatile<\/span> uint32_t curChildren;<\/div>$/;"	a
l00049	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/simple__core_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00049	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment">\/\/ This makes use-after-free errors obvious.<\/span><\/div>$/;"	a
l00049	html/stats_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="comment"> * a collection of stats. At initialization time, all stats are registered<\/span><\/div>$/;"	a
l00049	html/str_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/tick__event_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keywordtype">void<\/span> queue(uint64_t startCycle) {<\/div>$/;"	a
l00049	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        uint32_t domain;<\/div>$/;"	a
l00049	html/timing__core_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00049	html/timing__event_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;            <a class="code" href="classCounter.html">Counter<\/a> profCrossInv; <span class="comment">\/\/invalidations in response to another access<\/span><\/div>$/;"	a
l00049	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div>$/;"	a
l00049	html/zsim_8h_source.html	/^<div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classAccessTraceWriter.html">AccessTraceWriter<\/a>;<\/div>$/;"	a
l00050	html/Callback_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Return, <span class="keyword">typename<\/span> Param1T, <span class="keyword">typename<\/span> Param2T, <span class="keyword">typename<\/span> Param3T&gt;<\/div>$/;"	a
l00050	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;            <span class="keywordtype">void<\/span> printStats(<span class="keywordtype">bool<\/span> finalStats);<\/div>$/;"	a
l00050	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/barrier_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#include &quot;log.h&quot;<\/span><\/div>$/;"	a
l00050	html/bithacks_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">static<\/span> <span class="keyword">inline<\/span> uint32_t ilog2(T val);<\/div>$/;"	a
l00050	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/cache_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00050	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> shouldAllocate(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) = 0; <span class="comment">\/\/called when we don&#39;t find req&#39;s lineAddr in the array<\/span><\/div>$/;"	a
l00050	html/config_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor">#define PQ_BLOCKS 1024<\/span><\/div>$/;"	a
l00050	html/core_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    void (*predStorePtr)(THREADID, ADDRINT, BOOL);<\/div>$/;"	a
l00050	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="comment">         *  Defend this invariant with your life or you&#39;ll find this horrible to reason about.<\/span><\/div>$/;"	a
l00050	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; res.size(); i++) res[i] = <span class="keyword">true<\/span>;<\/div>$/;"	a
l00050	html/cpuid_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    {0x00000002, 0000000000, 0x05b0b101, 0x005657f0, 0000000000, 0x2cb43049},<\/div>$/;"	a
l00050	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;            buf.resize(size);<\/div>$/;"	a
l00050	html/decoder_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    uint16_t lat;<\/div>$/;"	a
l00050	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> LoadConfig(g_string _cfgFile, uint32_t _chacheLineSize = 64);<\/div>$/;"	a
l00050	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/event__queue_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00050	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;            <span class="keyword">volatile<\/span> Address wrAddr;<\/div>$/;"	a
l00050	html/galloc_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; T* gm_dup(T* src, <span class="keywordtype">size_t<\/span> objs) {<\/div>$/;"	a
l00050	html/hash_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno"><a class="line" href="classSHA1HashFamily.html">   50<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classSHA1HashFamily.html">SHA1HashFamily<\/a> : <span class="keyword">public<\/span> <a class="code" href="classHashFamily.html">HashFamily<\/a> {<\/div>$/;"	a
l00050	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;                <span class="keywordtype">void<\/span> update(uint32_t <span class="keywordtype">id<\/span>, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {panic(<span class="stringliteral">&quot;!&quot;<\/span>)}<\/div>$/;"	a
l00050	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keywordtype">void<\/span> unlink(<a class="code" href="classInList.html">InList&lt;T&gt;<\/a>* lst) {<\/div>$/;"	a
l00050	html/locks_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    __sync_synchronize();<\/div>$/;"	a
l00050	html/log_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define unlikely(x)     __builtin_expect((x), 0)<\/span><\/div>$/;"	a
l00050	html/mc_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;   };<\/div>$/;"	a
l00050	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        };<\/div>$/;"	a
l00050	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/mtrand_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="comment">\/\/ are met:<\/span><\/div>$/;"	a
l00050	html/mutex_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        }<\/div>$/;"	a
l00050	html/null__core_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00050	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="comment">\/* There are 2 clocks:<\/span><\/div>$/;"	a
l00050	html/page__placement_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keywordtype">void<\/span> computeFreqDistr();<\/div>$/;"	a
l00050	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <a class="code" href="classPartMapper.html">PartMapper<\/a>* mapper;<\/div>$/;"	a
l00050	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00050	html/partitioner_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        };<\/div>$/;"	a
l00050	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;            offset = pos;<\/div>$/;"	a
l00050	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="comment">\/\/ Must be called by scheduler when descheduling; core must be quiesced<\/span><\/div>$/;"	a
l00050	html/process__stats_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keywordtype">void<\/span> notifyDeschedule(uint32_t cid, uint32_t outgoingPid);<\/div>$/;"	a
l00050	html/process__tree_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keyword">volatile<\/span> uint64_t heartbeats;<\/div>$/;"	a
l00050	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00050	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> update(uint32_t <span class="keywordtype">id<\/span>, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) = 0;<\/div>$/;"	a
l00050	html/simple__core_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="comment">\/\/#define DEBUG_SLAB_ALLOC<\/span><\/div>$/;"	a
l00050	html/stats_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="comment"> * with an aggregate, forming a tree of stats. After all stats are<\/span><\/div>$/;"	a
l00050	html/str_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; std::string Str(<span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;T&gt;<\/a>&amp; v) {<\/div>$/;"	a
l00050	html/tick__event_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;            assert(!active);<\/div>$/;"	a
l00050	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div>$/;"	a
l00050	html/timing__core_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <a class="code" href="classTimingCore.html">TimingCore<\/a>(<a class="code" href="classFilterCache.html">FilterCache<\/a>* _l1i, <a class="code" href="classFilterCache.html">FilterCache<\/a>* _l1d, uint32_t domain, g_string&amp; _name);<\/div>$/;"	a
l00050	html/timing__event_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    <span class="keywordtype">void<\/span> <span class="keyword">operator<\/span> <span class="keyword">delete<\/span>(<span class="keywordtype">void<\/span>*, size_t) {<\/div>$/;"	a
l00050	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;            <a class="code" href="classCounter.html">Counter<\/a> profInvx;<\/div>$/;"	a
l00050	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        uint64_t* curWayHits;<\/div>$/;"	a
l00050	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="comment">\/\/ Actual controller<\/span><\/div>$/;"	a
l00050	html/zsim_8h_source.html	/^<div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTraceDriver.html">TraceDriver<\/a>;<\/div>$/;"	a
l00051	html/Callback_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<a class="code" href="classDRAMSim_1_1CallbackBase.html">DRAMSim::CallbackBase&lt;Return,Param1T,Param2T,Param3T&gt;::~CallbackBase<\/a>() {}<\/div>$/;"	a
l00051	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;            <span class="keywordtype">bool<\/span> willAcceptTransaction(); <\/div>$/;"	a
l00051	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno"><a class="line" href="classAccessTraceReader.html">   51<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classAccessTraceReader.html">AccessTraceReader<\/a> {<\/div>$/;"	a
l00051	html/barrier_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="preprocessor">#include &quot;mtrand.h&quot;<\/span><\/div>$/;"	a
l00051	html/bithacks_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="comment">\/\/ Only specializations of unsigned types (no calling these with ints)<\/span><\/div>$/;"	a
l00051	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="comment">\/\/ I need to define this even though it is completely unnecessary, but only if I override init. gcc bug or C++ oddity?<\/span><\/div>$/;"	a
l00051	html/cache_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div>$/;"	a
l00051	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parent) {}<\/div>$/;"	a
l00051	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t processEviction(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; triggerReq, Address wbLineAddr, int32_t lineId, uint64_t startCycle) = 0; <span class="comment">\/\/called iff shouldAllocate returns true<\/span><\/div>$/;"	a
l00051	html/config_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00051	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00051	html/core_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    uint64_t type;<\/div>$/;"	a
l00051	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="comment">         *\/<\/span><\/div>$/;"	a
l00051	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00051	html/cpuid_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    {0x00000003, 0000000000, 0000000000, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00051	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; size; i++) buf[i] = 0;<\/div>$/;"	a
l00051	html/decoder_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    uint16_t decCycle;<\/div>$/;"	a
l00051	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        uint64_t lastRefreshCycle;<\/div>$/;"	a
l00051	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div>$/;"	a
l00051	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        std::multimap&lt;uint64_t, DRAMSimAccEvent*&gt; inflightRequests;<\/div>$/;"	a
l00051	html/event__queue_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        G <span class="keyword">get<\/span>;<\/div>$/;"	a
l00051	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="comment">\/\/class CoreRecorder;<\/span><\/div>$/;"	a
l00051	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;            <span class="keyword">volatile<\/span> uint64_t availCycle;<\/div>$/;"	a
l00051	html/galloc_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    T* dst = gm_malloc&lt;T&gt;(objs);<\/div>$/;"	a
l00051	html/hash_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00051	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;                <span class="keywordtype">void<\/span> replaced(uint32_t <span class="keywordtype">id<\/span>) {panic(<span class="stringliteral">&quot;!!&quot;<\/span>);}<\/div>$/;"	a
l00051	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keywordflow">if<\/span> (next) next-&gt;prev = prev;<\/div>$/;"	a
l00051	html/locks_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;}<\/div>$/;"	a
l00051	html/log_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00051	html/mc_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;   <span class="keywordtype">bool<\/span> hasEmptyWay() { <span class="keywordflow">return<\/span> getEmptyWay() &lt; num_ways; };<\/div>$/;"	a
l00051	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <\/div>$/;"	a
l00051	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="comment">\/* Types of Invalidation. An Invalidation is a request issued from upper to lower<\/span><\/div>$/;"	a
l00051	html/mtrand_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00051	html/mutex_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div>$/;"	a
l00051	html/null__core_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <a class="code" href="structInstrFuncPtrs.html">InstrFuncPtrs<\/a> GetFuncPtrs();<\/div>$/;"	a
l00051	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        uint32_t bhsr[1 &lt;&lt; NB];<\/div>$/;"	a
l00051	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="comment">         *  - phase 1 clock = curCycle and is maintained by the bound phase contention-free core model<\/span><\/div>$/;"	a
l00051	html/page__placement_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <span class="keywordtype">void<\/span> updateLRU(uint64_t set_num, uint32_t way_num);<\/div>$/;"	a
l00051	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div>$/;"	a
l00051	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getNumPartitions() {<span class="keywordflow">return<\/span> 2;}<\/div>$/;"	a
l00051	html/partitioner_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> partition() = 0;<\/div>$/;"	a
l00051	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00051	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="comment">\/* This is basically a souped-up version of the DLP L2 prefetcher in Nehalem: 16 stream buffers,<\/span><\/div>$/;"	a
l00051	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;            res-&gt;next = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00051	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keywordtype">void<\/span> notifyDeschedule();<\/div>$/;"	a
l00051	html/process__stats_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div>$/;"	a
l00051	html/process__tree_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keywordtype">bool<\/span> started;<\/div>$/;"	a
l00051	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <a class="code" href="classClockStat.html">ClockStat<\/a>() : <a class="code" href="classScalarStat.html">ScalarStat<\/a>(), startNs(0), totalNs(0) {}<\/div>$/;"	a
l00051	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> replaced(uint32_t <span class="keywordtype">id<\/span>) = 0;<\/div>$/;"	a
l00051	html/simple__core_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        uint64_t getInstrs()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> instrs;}<\/div>$/;"	a
l00051	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div>$/;"	a
l00051	html/stats_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<span class="comment"> * initialized, the tree of stats is made immutable; no new stats can be<\/span><\/div>$/;"	a
l00051	html/str_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    std::stringstream ss;<\/div>$/;"	a
l00051	html/tick__event_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;            active = <span class="keyword">true<\/span>;<\/div>$/;"	a
l00051	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="comment">\/\/ For zcache replacement simulation (pessimistic, assumes we walk the whole tree)<\/span><\/div>$/;"	a
l00051	html/timing__core_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00051	html/timing__event_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        panic(<span class="stringliteral">&quot;TimingEventBlock::delete should never be called&quot;<\/span>);<\/div>$/;"	a
l00051	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        };<\/div>$/;"	a
l00051	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        uint64_t curMisses;<\/div>$/;"	a
l00051	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno"><a class="line" href="classWeaveMD1Memory.html">   51<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classWeaveMD1Memory.html">WeaveMD1Memory<\/a> : <span class="keyword">public<\/span> <a class="code" href="classMD1Memory.html">MD1Memory<\/a> {<\/div>$/;"	a
l00051	html/zsim_8h_source.html	/^<div class="line"><a name="l00051"><\/a><span class="lineno"><a class="line" href="classg__vector.html">   51<\/a><\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">class <\/span><a class="code" href="classg__vector.html">g_vector<\/a>;<\/div>$/;"	a
l00052	html/Callback_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;            <span class="keywordtype">bool<\/span> willAcceptTransaction(uint64_t addr); <\/div>$/;"	a
l00052	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00052	html/barrier_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/bithacks_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="comment">\/\/ __builtin_clz is undefined for 0 (internally, this uses bsr in x86-64)<\/span><\/div>$/;"	a
l00052	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc, uint32_t size, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>** names) {<\/div>$/;"	a
l00052	html/cache_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="comment">\/\/Latencies<\/span><\/div>$/;"	a
l00052	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;};<\/div>$/;"	a
l00052	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t processAccess(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req, int32_t lineId, uint64_t startCycle, uint64_t* getDoneCycle = <span class="keyword">nullptr<\/span>) = 0;<\/div>$/;"	a
l00052	html/config_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classConfig.html">Config<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* inFile);<\/div>$/;"	a
l00052	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno"><a class="line" href="classContentionSim.html">   52<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classContentionSim.html">ContentionSim<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00052	html/core_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    uint64_t pad[1];<\/div>$/;"	a
l00052	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        uint64_t gapCycles; <span class="comment">\/\/phase 2 clock == curCycle - gapCycles<\/span><\/div>$/;"	a
l00052	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;bool&gt;<\/a>&amp; mask = zinfo-&gt;procArray[pid]-&gt;getMask();<\/div>$/;"	a
l00052	html/cpuid_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    {0x00000004, 0000000000, 0x0c000121, 0x01c0003f, 0x0000003f, 0x00000001},<\/div>$/;"	a
l00052	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;            idx = 0;<\/div>$/;"	a
l00052	html/decoder_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    UopType type; <span class="comment">\/\/1 byte<\/span><\/div>$/;"	a
l00052	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        uint32_t refreshNum;<\/div>$/;"	a
l00052	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keywordtype">bool<\/span> IsOpenRowBufPolicy();<\/div>$/;"	a
l00052	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/event__queue_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        F fire;<\/div>$/;"	a
l00052	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCrossingEvent.html">CrossingEvent<\/a>;<\/div>$/;"	a
l00052	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/galloc_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    memcpy(dst, src, <span class="keyword">sizeof<\/span>(T)*objs);<\/div>$/;"	a
l00052	html/hash_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keywordtype">int<\/span> numFuncs;<\/div>$/;"	a
l00052	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;                <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> C&gt; uint32_t rank(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, C cands) {panic(<span class="stringliteral">&quot;!!!&quot;<\/span>);}<\/div>$/;"	a
l00052	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keywordflow">if<\/span> (prev) prev-&gt;next = next;<\/div>$/;"	a
l00052	html/locks_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/log_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">enum<\/span> {<\/div>$/;"	a
l00052	html/mc_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;};<\/div>$/;"	a
l00052	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        lock_t _lock;<\/div>$/;"	a
l00052	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="comment"> * levels of the hierarchy.<\/span><\/div>$/;"	a
l00052	html/mtrand_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="comment">\/\/   1. Redistributions of source code must retain the above copyright<\/span><\/div>$/;"	a
l00052	html/mutex_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00052	html/null__core_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        uint8_t pht[1 &lt;&lt; LB];<\/div>$/;"	a
l00052	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="comment">         *  - phase 2 clock = curCycle - gapCycles is the zll clock<\/span><\/div>$/;"	a
l00052	html/page__placement_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keywordtype">double<\/span> getCurrSampleRate();<\/div>$/;"	a
l00052	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00052	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getPartition(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00052	html/partitioner_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <a class="code" href="classPinCmd.html">PinCmd<\/a>(<a class="code" href="classConfig.html">Config<\/a>* conf, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* configFile, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* outputDir, uint64_t shmid);<\/div>$/;"	a
l00052	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="comment"> * but (a) no up\/down distinction, and (b) strided operation based on dominant stride detection<\/span><\/div>$/;"	a
l00052	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;            <span class="keywordflow">return<\/span> res;<\/div>$/;"	a
l00052	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/process__stats_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00052	html/process__tree_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keyword">volatile<\/span> <span class="keywordtype">bool<\/span> inFastForward;<\/div>$/;"	a
l00052	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/simple__core_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        uint64_t getPhaseCycles() <span class="keyword">const<\/span>;<\/div>$/;"	a
l00052	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="keyword">namespace <\/span>slab {<\/div>$/;"	a
l00052	html/stats_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="comment"> * created and output at runtime.<\/span><\/div>$/;"	a
l00052	html/str_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    ss &lt;&lt; <span class="stringliteral">&quot;[&quot;<\/span>;<\/div>$/;"	a
l00052	html/tick__event_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;            zinfo-&gt;contentionSim-&gt;enqueueSynced(<span class="keyword">this<\/span>, startCycle);<\/div>$/;"	a
l00052	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        uint32_t tagLat, ways, cands;<\/div>$/;"	a
l00052	html/timing__core_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/timing__event_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    }<\/div>$/;"	a
l00052	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00052	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00052	html/zsim_8h_source.html	/^<div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<\/div>$/;"	a
l00053	html/Callback_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> ConsumerT, <span class="keyword">typename<\/span> ReturnT,<\/div>$/;"	a
l00053	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;            std::ostream &amp;getLogFile();<\/div>$/;"	a
l00053	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <a class="code" href="structPackedAccessRecord.html">PackedAccessRecord<\/a>* buf;<\/div>$/;"	a
l00053	html/barrier_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment">\/\/ Configure futex timeouts (die rather than deadlock)<\/span><\/div>$/;"	a
l00053	html/bithacks_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; uint32_t ilog2&lt;uint32_t&gt;(uint32_t val) {<\/div>$/;"	a
l00053	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;            VectorCounter::init(name, desc, size, names); <span class="comment">\/\/ will call our init(name, desc, size)<\/span><\/div>$/;"	a
l00053	html/cache_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        uint32_t accLat; <span class="comment">\/\/latency of a normal access (could split in get\/put, probably not needed)<\/span><\/div>$/;"	a
l00053	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div>$/;"	a
l00053	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> endAccess(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) = 0;<\/div>$/;"	a
l00053	html/config_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        ~<a class="code" href="classConfig.html">Config<\/a>();<\/div>$/;"	a
l00053	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00053	html/core_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="comment">\/\/NOTE: By having the struct be a power of 2 bytes, indirect calls are simpler (w\/ gcc 4.4 -O3, 6-&gt;5 instructions, and those instructions are simpler)<\/span><\/div>$/;"	a
l00053	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div>$/;"	a
l00053	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        res.resize(mask.size());<\/div>$/;"	a
l00053	html/cpuid_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    {0x00000004, 0x00000001, 0x0c000122, 0x01c0003f, 0x0000003f, 0x00000001},<\/div>$/;"	a
l00053	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        }<\/div>$/;"	a
l00053	html/decoder_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    uint8_t portMask;<\/div>$/;"	a
l00053	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        uint32_t accessInRefresh;<\/div>$/;"	a
l00053	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keywordtype">bool<\/span> IsCloseRowBufPolicy();<\/div>$/;"	a
l00053	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        uint64_t curCycle; <span class="comment">\/\/processor cycle, used in callbacks<\/span><\/div>$/;"	a
l00053	html/event__queue_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        uint64_t target;<\/div>$/;"	a
l00053	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="classg__vector.html">g_vector&lt;CrossingEvent*&gt;<\/a> <a class="code" href="classg__vector.html">CrossingStack<\/a>;<\/div>$/;"	a
l00053	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;            <span class="keywordtype">void<\/span> clear() {wrAddr = 0; rdAddr = 0; availCycle = 0;}<\/div>$/;"	a
l00053	html/galloc_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keywordflow">return<\/span> dst;<\/div>$/;"	a
l00053	html/hash_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keywordtype">int<\/span> numPasses;<\/div>$/;"	a
l00053	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;                <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parent) {}<\/div>$/;"	a
l00053	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        next = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00053	html/locks_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> spin_destroy(<span class="keyword">volatile<\/span> uint32_t* lock) {}<\/div>$/;"	a
l00053	html/log_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    LOG_Harness,<\/div>$/;"	a
l00053	html/mc_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div>$/;"	a
l00053	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        Chunk * temp;<\/div>$/;"	a
l00053	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00053	html/mtrand_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment">\/\/      notice, this list of conditions and the following disclaimer.<\/span><\/div>$/;"	a
l00053	html/mutex_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keyword">volatile<\/span> uint32_t futex;<\/div>$/;"	a
l00053	html/null__core_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00053	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div>$/;"	a
l00053	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment">         *  We maintain gapCycles, and only get curCycle on function calls. Some of those calls also<\/span><\/div>$/;"	a
l00053	html/page__placement_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div>$/;"	a
l00053	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <a class="code" href="classPartReplPolicy.html">PartReplPolicy<\/a>(<a class="code" href="classPartitionMonitor.html">PartitionMonitor<\/a>* _monitor, <a class="code" href="classPartMapper.html">PartMapper<\/a>* _mapper) : monitor(_monitor), mapper(_mapper) {}<\/div>$/;"	a
l00053	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;};<\/div>$/;"	a
l00053	html/partitioner_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00053	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;g_string&gt;<\/a> getPinCmdArgs(uint32_t procIdx);<\/div>$/;"	a
l00053	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment"> * to try to subsume as much of the L1 IP\/strided prefetcher as possible.<\/span><\/div>$/;"	a
l00053	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        }<\/div>$/;"	a
l00053	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00053	html/process__stats_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keywordtype">void<\/span> updateCore(uint32_t cid, uint32_t p);<\/div>$/;"	a
l00053	html/process__tree_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keyword">volatile<\/span> <span class="keywordtype">bool<\/span> inPause;<\/div>$/;"	a
l00053	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keywordtype">void<\/span> start() {<\/div>$/;"	a
l00053	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t rankCands(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, <a class="code" href="structSetAssocCands.html">SetAssocCands<\/a> cands) = 0;<\/div>$/;"	a
l00053	html/simple__core_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        uint64_t getCycles()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> curCycle - haltedCycles;}<\/div>$/;"	a
l00053	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div>$/;"	a
l00053	html/stats_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment"> *<\/span><\/div>$/;"	a
l00053	html/str_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span>&amp; x : v) ss &lt;&lt; <span class="stringliteral">&quot; &quot;<\/span> &lt;&lt; x;<\/div>$/;"	a
l00053	html/tick__event_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        }<\/div>$/;"	a
l00053	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div>$/;"	a
l00053	html/timing__core_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        uint64_t getInstrs()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> instrs;}<\/div>$/;"	a
l00053	html/timing__event_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<\/div>$/;"	a
l00053	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        ChildInfo* children;<\/div>$/;"	a
l00053	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profHits;<\/div>$/;"	a
l00053	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;        <span class="keyword">const<\/span> uint32_t zeroLoadLatency;<\/div>$/;"	a
l00053	html/zsim_8h_source.html	/^<div class="line"><a name="l00053"><\/a><span class="lineno"><a class="line" href="structClockDomainInfo.html">   53<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structClockDomainInfo.html">ClockDomainInfo<\/a> {<\/div>$/;"	a
l00054	html/Callback_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="keyword">typename<\/span> Param1T, <span class="keyword">typename<\/span> Param2T, <span class="keyword">typename<\/span> Param3T &gt;<\/div>$/;"	a
l00054	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div>$/;"	a
l00054	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        uint32_t cur;<\/div>$/;"	a
l00054	html/barrier_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="preprocessor">#define TIMEOUT_LENGTH 20 \/\/seconds<\/span><\/div>$/;"	a
l00054	html/bithacks_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keywordflow">return<\/span> val? 31 - __builtin_clz(val) : 0;<\/div>$/;"	a
l00054	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        }<\/div>$/;"	a
l00054	html/cache_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        uint32_t invLat; <span class="comment">\/\/latency of an invalidation<\/span><\/div>$/;"	a
l00054	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classReplPolicy.html">ReplPolicy<\/a>;<\/div>$/;"	a
l00054	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div>$/;"	a
l00054	html/config_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div>$/;"	a
l00054	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="keyword">struct <\/span>CompareEvents : <span class="keyword">public<\/span> std::binary_function&lt;TimingEvent*, TimingEvent*, bool&gt; {<\/div>$/;"	a
l00054	html/core_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;};<\/div>$/;"	a
l00054	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="comment">\/\/Event bookkeeping<\/span><\/div>$/;"	a
l00054	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; res.size(); i++) res[i] = mask[i];<\/div>$/;"	a
l00054	html/cpuid_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    {0x00000004, 0x00000002, 0x0c004143, 0x03c0003f, 0x00000fff, 0x00000001},<\/div>$/;"	a
l00054	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div>$/;"	a
l00054	html/decoder_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    uint8_t extraSlots; <span class="comment">\/\/FU exec slots<\/span><\/div>$/;"	a
l00054	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        uint32_t tFAWIndex;<\/div>$/;"	a
l00054	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t GetDataLatency(uint32_t type);<\/div>$/;"	a
l00054	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div>$/;"	a
l00054	html/event__queue_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        uint64_t maxRate;<\/div>$/;"	a
l00054	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div>$/;"	a
l00054	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        };<\/div>$/;"	a
l00054	html/galloc_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;}<\/div>$/;"	a
l00054	html/hash_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div>$/;"	a
l00054	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;                DECL_RANK_BINDINGS<\/div>$/;"	a
l00054	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        prev = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00054	html/locks_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div>$/;"	a
l00054	html/log_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    LOG_Config,<\/div>$/;"	a
l00054	html/mc_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="comment">\/\/ Not modeling all details of the tag buffer. <\/span><\/div>$/;"	a
l00054	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00054	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">enum<\/span> {<\/div>$/;"	a
l00054	html/mtrand_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00054	html/mutex_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;};<\/div>$/;"	a
l00054	html/null__core_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> bbl(<a class="code" href="structBblInfo.html">BblInfo<\/a>* bblInstrs);<\/div>$/;"	a
l00054	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00054	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="comment">         *  need to change curCycle, so they just return an updated version that the bound phase model<\/span><\/div>$/;"	a
l00054	html/page__placement_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    RepScheme _placement_policy;<\/div>$/;"	a
l00054	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        ~<a class="code" href="classPartReplPolicy.html">PartReplPolicy<\/a>() { <span class="keyword">delete<\/span> monitor; }<\/div>$/;"	a
l00054	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div>$/;"	a
l00054	html/partitioner_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        uint32_t minAlloc;<\/div>$/;"	a
l00054	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;g_string&gt;<\/a> getFullCmdArgs(uint32_t procIdx, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>** inputFile);<\/div>$/;"	a
l00054	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="comment"> *<\/span><\/div>$/;"	a
l00054	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div>$/;"	a
l00054	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <a class="code" href="classStat.html">Stat<\/a>* replStat(<a class="code" href="classStat.html">Stat<\/a>* s, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name = <span class="keyword">nullptr<\/span>, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc = <span class="keyword">nullptr<\/span>);<\/div>$/;"	a
l00054	html/process__stats_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="keywordtype">void<\/span> update(); <span class="comment">\/\/transparent<\/span><\/div>$/;"	a
l00054	html/process__tree_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        uint32_t restartsLeft;<\/div>$/;"	a
l00054	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;            assert(!startNs);<\/div>$/;"	a
l00054	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t rankCands(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, <a class="code" href="structZCands.html">ZCands<\/a> cands) = 0;<\/div>$/;"	a
l00054	html/simple__core_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div>$/;"	a
l00054	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="keyword">class <\/span>SlabAlloc;<\/div>$/;"	a
l00054	html/stats_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="comment"> * These facilities are created with three goals in mind:<\/span><\/div>$/;"	a
l00054	html/str_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    ss &lt;&lt; <span class="stringliteral">&quot;]&quot;<\/span>;<\/div>$/;"	a
l00054	html/tick__event_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div>$/;"	a
l00054	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        PAD();<\/div>$/;"	a
l00054	html/timing__core_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        uint64_t getPhaseCycles() <span class="keyword">const<\/span>;<\/div>$/;"	a
l00054	html/timing__event_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    <span class="comment">\/\/Placement delete... make ICC happy. This would only fire on an exception<\/span><\/div>$/;"	a
l00054	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        lock_t lock; <span class="comment">\/\/NOTE: not needed for now<\/span><\/div>$/;"	a
l00054	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profMisses;<\/div>$/;"	a
l00054	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="keyword">const<\/span> uint32_t boundLatency;<\/div>$/;"	a
l00054	html/zsim_8h_source.html	/^<div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    uint64_t realtimeOffsetNs;<\/div>$/;"	a
l00055	html/Callback_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno"><a class="line" href="classDRAMSim_1_1Callback.html">   55<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDRAMSim_1_1Callback.html">Callback<\/a>: <span class="keyword">public<\/span> <a class="code" href="classDRAMSim_1_1CallbackBase.html">CallbackBase<\/a>&lt;ReturnT,Param1T,Param2T,Param3T&gt;<\/div>$/;"	a
l00055	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;            <span class="keywordtype">void<\/span> RegisterCallbacks( <\/div>$/;"	a
l00055	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        uint32_t max;<\/div>$/;"	a
l00055	html/barrier_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define MAX_TIMEOUTS 10<\/span><\/div>$/;"	a
l00055	html/bithacks_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;}<\/div>$/;"	a
l00055	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/cache_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classHashFamily.html">HashFamily<\/a>;<\/div>$/;"	a
l00055	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="comment">\/\/Inv methods<\/span><\/div>$/;"	a
l00055	html/config_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="comment">\/\/Called when initialization ends. Writes output config, and emits warnings for unused input settings<\/span><\/div>$/;"	a
l00055	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;            <span class="keywordtype">bool<\/span> operator()(<a class="code" href="classTimingEvent.html">TimingEvent<\/a>* lhs, <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* rhs) <span class="keyword">const<\/span>;<\/div>$/;"	a
l00055	html/core_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <a class="code" href="classEventRecorder.html">EventRecorder<\/a> eventRecorder;<\/div>$/;"	a
l00055	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    }<\/div>$/;"	a
l00055	html/cpuid_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    {0x00000004, 0x00000003, 0000000000, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00055	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t minActCycle()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00055	html/decoder_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    uint8_t pad; <span class="comment">\/\/pad to 4-byte multiple<\/span><\/div>$/;"	a
l00055	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t GetDataDelay(uint32_t type);<\/div>$/;"	a
l00055	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="comment">\/\/ R\/W stats<\/span><\/div>$/;"	a
l00055	html/event__queue_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno"><a class="line" href="classEventRecorder.html">   55<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classEventRecorder.html">EventRecorder<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00055	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/galloc_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/hash_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="comment">\/\/SHA1 is quite expensive and returns large blocks, so we use memoization and chunk the block to implement hash function families.<\/span><\/div>$/;"	a
l00055	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        };<\/div>$/;"	a
l00055	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        assert(lst == owner);<\/div>$/;"	a
l00055	html/locks_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/log_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    LOG_Process,<\/div>$/;"	a
l00055	html/mc_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno"><a class="line" href="classTagBufferEntry.html">   55<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTagBufferEntry.html">TagBufferEntry<\/a><\/div>$/;"	a
l00055	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00055	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    INV,  <span class="comment">\/\/ fully invalidate this line<\/span><\/div>$/;"	a
l00055	html/mtrand_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="comment">\/\/   2. Redistributions in binary form must reproduce the above copyright<\/span><\/div>$/;"	a
l00055	html/mutex_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/null__core_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <a class="code" href="classBranchPredictorPAg.html">BranchPredictorPAg<\/a>() {<\/div>$/;"	a
l00055	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="comment">         *  needs to take. However, **we have no idea about curCycle outside of those calls**.<\/span><\/div>$/;"	a
l00055	html/page__placement_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    drand48_data _buffer;<\/div>$/;"	a
l00055	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno"><a class="line" href="classInstrDataCorePartMapper.html">   55<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classInstrDataCorePartMapper.html">InstrDataCorePartMapper<\/a> : <span class="keyword">public<\/span> <a class="code" href="classPartMapper.html">PartMapper<\/a> {<\/div>$/;"	a
l00055	html/partitioner_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keywordtype">double<\/span> allocPortion;<\/div>$/;"	a
l00055	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keywordtype">void<\/span> setEnvVars(uint32_t procIdx);<\/div>$/;"	a
l00055	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="comment"> * FIXME: For now, mostly hardcoded; 64-line entries (4KB w\/64-byte lines), fixed granularities, etc.<\/span><\/div>$/;"	a
l00055	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> enqueue(T* obj, uint32_t pos) {<\/div>$/;"	a
l00055	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/process__stats_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;};<\/div>$/;"	a
l00055	html/process__tree_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keyword">const<\/span> SyncedFastForwardMode syncedFastForward;<\/div>$/;"	a
l00055	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;            startNs = getNs();<\/div>$/;"	a
l00055	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/simple__core_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keywordtype">void<\/span> contextSwitch(int32_t gid);<\/div>$/;"	a
l00055	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<\/div>$/;"	a
l00055	html/stats_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="comment"> * 1) Allow stats to be independent of stats output: Simulator code is only<\/span><\/div>$/;"	a
l00055	html/str_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    <span class="keywordflow">return<\/span> ss.str();<\/div>$/;"	a
l00055	html/tick__event_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keywordtype">void<\/span> simulate(uint64_t startCycle) {<\/div>$/;"	a
l00055	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        lock_t topLock;<\/div>$/;"	a
l00055	html/timing__core_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        uint64_t getCycles()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> cRec.getUnhaltedCycles(curCycle);}<\/div>$/;"	a
l00055	html/timing__event_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    <span class="keywordtype">void<\/span> <span class="keyword">operator<\/span> <span class="keyword">delete<\/span> (<span class="keywordtype">void<\/span>* p, <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* evRec) {<\/div>$/;"	a
l00055	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <a class="code" href="classAccessTraceReader.html">AccessTraceReader<\/a> tr;<\/div>$/;"	a
l00055	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <a class="code" href="classVectorCounter.html">VectorCounter<\/a> profWayHits;<\/div>$/;"	a
l00055	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keyword">const<\/span> uint32_t domain;<\/div>$/;"	a
l00055	html/zsim_8h_source.html	/^<div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    uint64_t monotonicOffsetNs;<\/div>$/;"	a
l00056	html/Callback_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;{<\/div>$/;"	a
l00056	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;                <a class="code" href="classDRAMSim_1_1CallbackBase.html">TransactionCompleteCB<\/a> *readDone,<\/div>$/;"	a
l00056	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        g_string fname;<\/div>$/;"	a
l00056	html/barrier_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00056	html/bithacks_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="keyword">template<\/span>&lt;&gt; uint32_t ilog2&lt;uint64_t&gt;(uint64_t val) {<\/div>$/;"	a
l00056	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keywordtype">void<\/span> transition(uint32_t newState, uint64_t cycle) {<\/div>$/;"	a
l00056	html/cache_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        g_string name;<\/div>$/;"	a
l00056	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div>$/;"	a
l00056	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> startInv() = 0;<\/div>$/;"	a
l00056	html/config_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keywordtype">void<\/span> writeAndClose(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* outFile, <span class="keywordtype">bool<\/span> strictCheck);<\/div>$/;"	a
l00056	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        };<\/div>$/;"	a
l00056	html/core_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div>$/;"	a
l00056	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        uint64_t prevRespCycle;<\/div>$/;"	a
l00056	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keywordflow">return<\/span> res;<\/div>$/;"	a
l00056	html/cpuid_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    {0x00000005, 0000000000, 0x00000040, 0x00000040, 0x00000003, 0x00000020},<\/div>$/;"	a
l00056	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;            <span class="keywordflow">return<\/span> buf[idx];<\/div>$/;"	a
l00056	html/decoder_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div>$/;"	a
l00056	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keywordtype">bool<\/span> *bankinfo;<\/div>$/;"	a
l00056	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t GetDataSlot(uint32_t type);<\/div>$/;"	a
l00056	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        PAD();<\/div>$/;"	a
l00056	html/event__queue_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00056	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00056	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="comment">\/\/Replicates the most accessed line of each set in the cache<\/span><\/div>$/;"	a
l00056	html/galloc_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="keywordtype">void<\/span> gm_set_glob_ptr(<span class="keywordtype">void<\/span>* ptr);<\/div>$/;"	a
l00056	html/hash_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        uint64_t memoizedVal;<\/div>$/;"	a
l00056	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div>$/;"	a
l00056	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        owner = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00056	html/locks_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> spin_lock(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00056	html/log_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    LOG_Cache,<\/div>$/;"	a
l00056	html/mc_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;{<\/div>$/;"	a
l00056	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* getName() {<span class="keywordflow">return<\/span> name.c_str();}<\/div>$/;"	a
l00056	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    INVX, <span class="comment">\/\/ invalidate exclusive access to this line (lower level can still keep a non-exclusive copy)<\/span><\/div>$/;"	a
l00056	html/mtrand_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="comment">\/\/      notice, this list of conditions and the following disclaimer in the<\/span><\/div>$/;"	a
l00056	html/mutex_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno"><a class="line" href="classaligned__mutex.html">   56<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classaligned__mutex.html">aligned_mutex<\/a> : <span class="keyword">public<\/span> <a class="code" href="classmutex.html">mutex<\/a> {} ATTR_LINE_ALIGNED;<\/div>$/;"	a
l00056	html/null__core_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> LoadFunc(THREADID tid, ADDRINT addr);<\/div>$/;"	a
l00056	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;            uint32_t numBhsrs = 1 &lt;&lt; NB;<\/div>$/;"	a
l00056	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="comment">         *  Defend this invariant with your life or you&#39;ll find this horrible to reason about.<\/span><\/div>$/;"	a
l00056	html/page__placement_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    Scheme _scheme; <\/div>$/;"	a
l00056	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> setPartitionSizes(<span class="keyword">const<\/span> uint32_t* sizes) = 0;<\/div>$/;"	a
l00056	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00056	html/partitioner_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keywordtype">bool<\/span>* forbidden;<\/div>$/;"	a
l00056	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div>$/;"	a
l00056	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="comment"> * TODO: Adapt to use weave models<\/span><\/div>$/;"	a
l00056	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;            occ |= 1L &lt;&lt; pos;<\/div>$/;"	a
l00056	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keywordtype">void<\/span> update();  <span class="comment">\/\/ transparent<\/span><\/div>$/;"	a
l00056	html/process__stats_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div>$/;"	a
l00056	html/process__tree_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keyword">const<\/span> uint32_t clockDomain;<\/div>$/;"	a
l00056	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        }<\/div>$/;"	a
l00056	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parent) {}<\/div>$/;"	a
l00056	html/simple__core_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> join();<\/div>$/;"	a
l00056	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno"><a class="line" href="structslab_1_1Slab.html">   56<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structslab_1_1Slab.html">Slab<\/a> {  <span class="comment">\/\/ POD type (no constructor)<\/span><\/div>$/;"	a
l00056	html/stats_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<span class="comment"> *    concerned with creating, naming, describing and updating a hierarchy of<\/span><\/div>$/;"	a
l00056	html/str_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;}<\/div>$/;"	a
l00056	html/tick__event_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;            uint32_t delay = obj-&gt;tick(startCycle);<\/div>$/;"	a
l00056	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        PAD();<\/div>$/;"	a
l00056	html/timing__core_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div>$/;"	a
l00056	html/timing__event_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        panic(<span class="stringliteral">&quot;TimingEventBlock::delete PLACEMENT delete called&quot;<\/span>);<\/div>$/;"	a
l00056	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        uint32_t numChildren;<\/div>$/;"	a
l00056	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<\/div>$/;"	a
l00056	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;        uint32_t preDelay, postDelay;<\/div>$/;"	a
l00056	html/zsim_8h_source.html	/^<div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    uint64_t processOffsetNs;<\/div>$/;"	a
l00057	html/Callback_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="keyword">private<\/span>:<\/div>$/;"	a
l00057	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;                <a class="code" href="classDRAMSim_1_1CallbackBase.html">TransactionCompleteCB<\/a> *writeDone,<\/div>$/;"	a
l00057	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div>$/;"	a
l00057	html/barrier_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="comment">\/\/#define DEBUG_BARRIER(args...) info(args)<\/span><\/div>$/;"	a
l00057	html/bithacks_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keywordflow">return<\/span> val? 63 - __builtin_clzl(val) : 0;<\/div>$/;"	a
l00057	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;            assert(curState &lt; size());<\/div>$/;"	a
l00057	html/cache_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div>$/;"	a
l00057	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="comment">\/* Set-associative cache array *\/<\/span><\/div>$/;"	a
l00057	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t processInv(<span class="keyword">const<\/span> <a class="code" href="structInvReq.html">InvReq<\/a>&amp; req, int32_t lineId, uint64_t startCycle) = 0;<\/div>$/;"	a
l00057	html/config_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div>$/;"	a
l00057	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div>$/;"	a
l00057	html/core_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="comment">\/\/TODO: Switch type to an enum by using sizeof macros...<\/span><\/div>$/;"	a
l00057	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* prevRespEvent;<\/div>$/;"	a
l00057	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;}<\/div>$/;"	a
l00057	html/cpuid_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    {0x00000006, 0000000000, 0x00000001, 0x00000002, 0x00000001, 0000000000},<\/div>$/;"	a
l00057	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        }<\/div>$/;"	a
l00057	html/decoder_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keywordtype">void<\/span> clear();<\/div>$/;"	a
l00057	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        uint32_t *lastRow;<\/div>$/;"	a
l00057	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t GetPreDelay(uint32_t type);<\/div>$/;"	a
l00057	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profReads;<\/div>$/;"	a
l00057	html/event__queue_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <a class="code" href="classAdaptiveEvent.html">AdaptiveEvent<\/a>(G _get, F _fire, uint64_t _start, uint64_t _target, uint64_t _maxRate) : <a class="code" href="classEvent.html">Event<\/a>(0), <span class="keyword">get<\/span>(_get), fire(_fire), target(_target), maxRate(_maxRate) {<\/div>$/;"	a
l00057	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <a class="code" href="classslab_1_1SlabAlloc.html">slab::SlabAlloc<\/a> slabAlloc;<\/div>$/;"	a
l00057	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        FilterEntry* filterArray;<\/div>$/;"	a
l00057	html/galloc_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="keywordtype">void<\/span>* gm_get_glob_ptr();<\/div>$/;"	a
l00057	html/hash_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        uint32_t* memoizedHashes;<\/div>$/;"	a
l00057	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keyword">struct <\/span>Entry : <a class="code" href="structInListNode.html">InListNode<\/a>&lt;Entry&gt; {<\/div>$/;"	a
l00057	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    }<\/div>$/;"	a
l00057	html/locks_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keywordflow">while<\/span> (1) {<\/div>$/;"	a
l00057	html/log_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    LOG_Mem,<\/div>$/;"	a
l00057	html/mc_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="keyword">public<\/span>:<\/div>$/;"	a
l00057	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <a class="code" href="classSimpleMemory.html#a1e09dc89a2c76c6c031334096b27235e">SimpleMemory<\/a>(uint32_t _latency, g_string&amp; _name, <a class="code" href="classConfig.html">Config<\/a>&amp; config);<\/div>$/;"	a
l00057	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    FWD,  <span class="comment">\/\/ don&#39;t invalidate, just send up the data (used by directories). Only valid on S lines.<\/span><\/div>$/;"	a
l00057	html/mtrand_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="comment">\/\/      documentation and\/or other materials provided with the distribution.<\/span><\/div>$/;"	a
l00057	html/mutex_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div>$/;"	a
l00057	html/null__core_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> StoreFunc(THREADID tid, ADDRINT addr);<\/div>$/;"	a
l00057	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;            uint32_t phtSize = 1 &lt;&lt; LB;<\/div>$/;"	a
l00057	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="comment">         *\/<\/span><\/div>$/;"	a
l00057	html/page__placement_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    uint32_t ** _lru_bits; <span class="comment">\/\/ on per set<\/span><\/div>$/;"	a
l00057	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div>$/;"	a
l00057	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        uint32_t numCores;<\/div>$/;"	a
l00057	html/partitioner_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;};<\/div>$/;"	a
l00057	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        uint32_t getNumCmdProcs() {<span class="keywordflow">return<\/span> procInfo.size();}<\/div>$/;"	a
l00057	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00057	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;            assert(!obj-&gt;next);<\/div>$/;"	a
l00057	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;};<\/div>$/;"	a
l00057	html/process__stats_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="preprocessor">#endif  \/\/ PROCESS_STATS_H_<\/span><\/div>$/;"	a
l00057	html/process__tree_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keyword">const<\/span> uint32_t portDomain;<\/div>$/;"	a
l00057	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div>$/;"	a
l00057	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;};<\/div>$/;"	a
l00057	html/simple__core_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div>$/;"	a
l00057	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <a class="code" href="classslab_1_1SlabAlloc.html">SlabAlloc<\/a>* allocator;<\/div>$/;"	a
l00057	html/stats_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<span class="comment"> *    stats. We can then use a variety of *stats backends* to traverse and<\/span><\/div>$/;"	a
l00057	html/str_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div>$/;"	a
l00057	html/tick__event_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;            <span class="keywordflow">if<\/span> (delay) {<\/div>$/;"	a
l00057	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div>$/;"	a
l00057	html/timing__core_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keywordtype">void<\/span> contextSwitch(int32_t gid);<\/div>$/;"	a
l00057	html/timing__event_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    }<\/div>$/;"	a
l00057	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keywordtype">bool<\/span> useSkews; <span class="comment">\/\/If false, replays the trace using its request cycles. If true, it skews the simulated child. Can only be true with a single child.<\/span><\/div>$/;"	a
l00057	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="comment">\/\/Even for high associativity\/number of buckets, performance of this is not important because we downsample so much (so this is a LL)<\/span><\/div>$/;"	a
l00057	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;<\/div>$/;"	a
l00057	html/zsim_8h_source.html	/^<div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    uint64_t rdtscOffset;<\/div>$/;"	a
l00058	html/Callback_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keyword">typedef<\/span> ReturnT (ConsumerT::*PtrMember)(Param1T,Param2T,Param3T);<\/div>$/;"	a
l00058	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;                <span class="keywordtype">void<\/span> (*reportPower)(<span class="keywordtype">double<\/span> bgpower, <span class="keywordtype">double<\/span> burstpower, <span class="keywordtype">double<\/span> refreshpower, <span class="keywordtype">double<\/span> actprepower));<\/div>$/;"	a
l00058	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        uint64_t curFrameRecord;<\/div>$/;"	a
l00058	html/barrier_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#define DEBUG_BARRIER(args...)<\/span><\/div>$/;"	a
l00058	html/bithacks_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;}<\/div>$/;"	a
l00058	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;            assert(newState &lt; size());<\/div>$/;"	a
l00058	html/cache_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00058	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno"><a class="line" href="classSetAssocArray.html">   58<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classSetAssocArray.html">SetAssocArray<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCacheArray.html">CacheArray<\/a> {<\/div>$/;"	a
l00058	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div>$/;"	a
l00058	html/config_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordtype">bool<\/span> exists(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* key);<\/div>$/;"	a
l00058	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keyword">struct <\/span>CrossingEventInfo {<\/div>$/;"	a
l00058	html/core_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#define FPTR_ANALYSIS (0L)<\/span><\/div>$/;"	a
l00058	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        uint64_t lastEventSimulatedStartCycle;<\/div>$/;"	a
l00058	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div>$/;"	a
l00058	html/cpuid_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    {0x00000007, 0000000000, 0000000000, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00058	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div>$/;"	a
l00058	html/decoder_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;};  <span class="comment">\/\/ 16 bytes. TODO(dsm): check performance with wider operands<\/span><\/div>$/;"	a
l00058	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        MemAccessType* lastType;<\/div>$/;"	a
l00058	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t GetRefreshCycle(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00058	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profWrites;<\/div>$/;"	a
l00058	html/event__queue_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;            assert(target &gt;= _start);<\/div>$/;"	a
l00058	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <a class="code" href="structTimingRecord.html">TimingRecord<\/a> tr;<\/div>$/;"	a
l00058	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        Address setMask;<\/div>$/;"	a
l00058	html/galloc_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div>$/;"	a
l00058	html/hash_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00058	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;            Address lineAddr;<\/div>$/;"	a
l00058	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div>$/;"	a
l00058	html/locks_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordflow">if<\/span> ((*lock) == 0 <span class="comment">\/*test (read)*\/<\/span> &amp;&amp; __sync_bool_compare_and_swap(lock, 0, 1) <span class="comment">\/*test&amp;set*\/<\/span>) {<\/div>$/;"	a
l00058	html/log_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    LOG_Sched,<\/div>$/;"	a
l00058	html/mc_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    Address tag;<\/div>$/;"	a
l00058	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;};<\/div>$/;"	a
l00058	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;} InvType;<\/div>$/;"	a
l00058	html/mtrand_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00058	html/mutex_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno"><a class="line" href="classscoped__mutex.html">   58<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classscoped__mutex.html">scoped_mutex<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00058	html/null__core_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> BblFunc(THREADID tid, ADDRINT bblAddr, <a class="code" href="structBblInfo.html">BblInfo<\/a>* bblInfo);<\/div>$/;"	a
l00058	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div>$/;"	a
l00058	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        uint64_t gapCycles; <span class="comment">\/\/phase 2 clock == curCycle - gapCycles<\/span><\/div>$/;"	a
l00058	html/page__placement_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div>$/;"	a
l00058	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <a class="code" href="classPartitionMonitor.html">PartitionMonitor<\/a>* getMonitor() { <span class="keywordflow">return<\/span> monitor; }<\/div>$/;"	a
l00058	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00058	html/partitioner_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div>$/;"	a
l00058	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;};<\/div>$/;"	a
l00058	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno"><a class="line" href="classStreamPrefetcher.html">   58<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classStreamPrefetcher.html">StreamPrefetcher<\/a> : <span class="keyword">public<\/span> <a class="code" href="classBaseCache.html">BaseCache<\/a> {<\/div>$/;"	a
l00058	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;            obj-&gt;next = array[pos];<\/div>$/;"	a
l00058	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div>$/;"	a
l00058	html/process__tree_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keyword">const<\/span> uint64_t dumpHeartbeats;<\/div>$/;"	a
l00058	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordtype">void<\/span> end() {<\/div>$/;"	a
l00058	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div>$/;"	a
l00058	html/simple__core_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <a class="code" href="structInstrFuncPtrs.html">InstrFuncPtrs<\/a> GetFuncPtrs();<\/div>$/;"	a
l00058	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keyword">volatile<\/span> uint32_t liveElems;<\/div>$/;"	a
l00058	html/stats_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="comment"> *    output the stats, either periodically or at specific events.<\/span><\/div>$/;"	a
l00058	html/str_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#endif  \/\/ STR_H_<\/span><\/div>$/;"	a
l00058	html/tick__event_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;                requeue(startCycle+delay);<\/div>$/;"	a
l00058	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00058	html/timing__core_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> join();<\/div>$/;"	a
l00058	html/timing__event_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<\/div>$/;"	a
l00058	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordtype">bool<\/span> playPuts; <span class="comment">\/\/If true, issues PUTS\/PUTX requests as they appear in the trace. If false, it just issues the GETS\/X requests, leaving it up to the parent to decide when to evict something (NOTE: if the parent is running OPT, it knows better!)<\/span><\/div>$/;"	a
l00058	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keyword">struct <\/span>Node {<\/div>$/;"	a
l00058	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00058	html/zsim_8h_source.html	/^<div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    lock_t lock;<\/div>$/;"	a
l00059	html/Callback_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div>$/;"	a
l00059	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;            <span class="keywordtype">int<\/span> getIniBool(<span class="keyword">const<\/span> std::string &amp;field, <span class="keywordtype">bool<\/span> *val);<\/div>$/;"	a
l00059	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        uint64_t numRecords;<\/div>$/;"	a
l00059	html/barrier_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00059	html/bithacks_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div>$/;"	a
l00059	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;            assert(lastCycle &lt;= cycle);<\/div>$/;"	a
l00059	html/cache_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <a class="code" href="classCache.html#a398112ee381973ef3777746a31900320">Cache<\/a>(uint32_t _numLines, <a class="code" href="classCC.html">CC<\/a>* _cc, <a class="code" href="classCacheArray.html">CacheArray<\/a>* _array, <a class="code" href="classReplPolicy.html">ReplPolicy<\/a>* _rp, uint32_t _accLat, uint32_t _invLat, <span class="keyword">const<\/span> g_string&amp; _name);<\/div>$/;"	a
l00059	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00059	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="comment">\/\/Repl policy interface<\/span><\/div>$/;"	a
l00059	html/config_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keywordtype">bool<\/span> exists(<span class="keyword">const<\/span> std::string&amp; key) {<span class="keywordflow">return<\/span> exists(key.c_str());}<\/div>$/;"	a
l00059	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;            uint64_t cycle;<\/div>$/;"	a
l00059	html/core_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define FPTR_JOIN (1L)<\/span><\/div>$/;"	a
l00059	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        uint64_t lastEventSimulatedOrigStartCycle;<\/div>$/;"	a
l00059	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="comment">\/\/ Returns the cpu that this cid is scheduled on, taking care of per-process cpuenum<\/span><\/div>$/;"	a
l00059	html/cpuid_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    {0x00000008, 0000000000, 0x00000400, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00059	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> addActivation(uint64_t actCycle) {<\/div>$/;"	a
l00059	html/decoder_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div>$/;"	a
l00059	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        uint64_t *lastActCycle;<\/div>$/;"	a
l00059	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t GetRdWrDelay(uint32_t type, uint32_t lastType);<\/div>$/;"	a
l00059	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profTotalRdLat;<\/div>$/;"	a
l00059	html/event__queue_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;            period = (target - _start)\/maxRate;<\/div>$/;"	a
l00059	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <a class="code" href="classg__vector.html">CrossingStack<\/a> crossingStack;<\/div>$/;"	a
l00059	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        uint32_t numSets;<\/div>$/;"	a
l00059	html/galloc_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="keywordtype">void<\/span> gm_set_secondary_ptr(<span class="keywordtype">void<\/span>* ptr);<\/div>$/;"	a
l00059	html/hash_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classSHA1HashFamily.html">SHA1HashFamily<\/a>(<span class="keywordtype">int<\/span> numFunctions);<\/div>$/;"	a
l00059	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;            <span class="keyword">const<\/span> uint32_t lineId;<\/div>$/;"	a
l00059	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keywordtype">void<\/span> linkPrev(T* p, <a class="code" href="classInList.html">InList&lt;T&gt;<\/a>* lst) {<\/div>$/;"	a
l00059	html/locks_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;            <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00059	html/log_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    LOG_FSVirt,<\/div>$/;"	a
l00059	html/mc_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keywordtype">bool<\/span> remap;<\/div>$/;"	a
l00059	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div>$/;"	a
l00059	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div>$/;"	a
l00059	html/mtrand_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="comment">\/\/   3. The names of its contributors may not be used to endorse or promote<\/span><\/div>$/;"	a
l00059	html/mutex_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00059	html/null__core_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> PredLoadFunc(THREADID tid, ADDRINT addr, BOOL pred);<\/div>$/;"	a
l00059	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; numBhsrs; i++) {<\/div>$/;"	a
l00059	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div>$/;"	a
l00059	html/page__placement_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    uint32_t _granularity;<\/div>$/;"	a
l00059	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classPartitionMonitor.html">PartitionMonitor<\/a>* getMonitor()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> monitor; }<\/div>$/;"	a
l00059	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classInstrDataCorePartMapper.html">InstrDataCorePartMapper<\/a>(uint32_t _numCores) : numCores(_numCores) {}<\/div>$/;"	a
l00059	html/partitioner_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="comment">\/\/ Gives best partition sizes as estimated with the greedy lookahead<\/span><\/div>$/;"	a
l00059	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div>$/;"	a
l00059	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00059	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;            array[pos] = obj;<\/div>$/;"	a
l00059	html/proc__stats_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="preprocessor">#endif  \/\/ PROCESS_STATS_H_<\/span><\/div>$/;"	a
l00059	html/process__tree_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span> dumpsResetHeartbeats;<\/div>$/;"	a
l00059	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;            assert(startNs);<\/div>$/;"	a
l00059	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="comment">\/* Add DECL_RANK_BINDINGS to each class that implements the new interface,<\/span><\/div>$/;"	a
l00059	html/simple__core_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<\/div>$/;"	a
l00059	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    uint32_t usedBytes;<\/div>$/;"	a
l00059	html/stats_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;<span class="comment"> * 2) High-performance stats: Updating counters should be as fast as updating raw<\/span><\/div>$/;"	a
l00059	html/tick__event_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00059	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <a class="code" href="classTimingCache.html">TimingCache<\/a>(uint32_t _numLines, <a class="code" href="classCC.html">CC<\/a>* _cc, <a class="code" href="classCacheArray.html">CacheArray<\/a>* _array, <a class="code" href="classReplPolicy.html">ReplPolicy<\/a>* _rp, uint32_t _accLat, uint32_t _invLat, uint32_t mshrs,<\/div>$/;"	a
l00059	html/timing__core_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> leave();<\/div>$/;"	a
l00059	html/timing__event_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00059	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keywordtype">bool<\/span> playAllGets; <span class="comment">\/\/If true, if we have a get to an address that we already have, issue a put immediately before.<\/span><\/div>$/;"	a
l00059	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;            Address addr;<\/div>$/;"	a
l00059	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <a class="code" href="classWeaveMD1Memory.html">WeaveMD1Memory<\/a>(uint32_t lineSize, uint32_t megacyclesPerSecond, uint32_t megabytesPerSecond, uint32_t _zeroLoadLatency, uint32_t _boundLatency, uint32_t _domain, g_string&amp; _name) :<\/div>$/;"	a
l00059	html/zsim_8h_source.html	/^<div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;};<\/div>$/;"	a
l00060	html/Callback_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="keyword">public<\/span>:<\/div>$/;"	a
l00060	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;            <span class="keywordtype">int<\/span> getIniUint(<span class="keyword">const<\/span> std::string &amp;field, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> *val);<\/div>$/;"	a
l00060	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        uint32_t numChildren; <span class="comment">\/\/i.e., how many parallel streams does this file contain?<\/span><\/div>$/;"	a
l00060	html/barrier_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno"><a class="line" href="classCallee.html">   60<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCallee.html">Callee<\/a> {<\/div>$/;"	a
l00060	html/bithacks_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt;<\/div>$/;"	a
l00060	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;            inc(curState, cycle - lastCycle);<\/div>$/;"	a
l00060	html/cache_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div>$/;"	a
l00060	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        Address* array;<\/div>$/;"	a
l00060	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t numSharers(uint32_t lineId) = 0;<\/div>$/;"	a
l00060	html/config_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div>$/;"	a
l00060	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;            <a class="code" href="classCrossingEvent.html">CrossingEvent<\/a>* ev; <span class="comment">\/\/only valid if the source&#39;s curCycle &lt; cycle (otherwise this may be already executed or recycled)<\/span><\/div>$/;"	a
l00060	html/core_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define FPTR_NOP (2L)<\/span><\/div>$/;"	a
l00060	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div>$/;"	a
l00060	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="comment">\/\/ Can be called when app is fast-forwarding (cid == -1), it will return the first cpu<\/span><\/div>$/;"	a
l00060	html/cpuid_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    {0x00000009, 0000000000, 0000000000, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00060	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;            assert(buf[idx] &lt;= actCycle); <span class="comment">\/\/ o\/w we have violated tTAW\/tFAW and more...<\/span><\/div>$/;"	a
l00060	html/decoder_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno"><a class="line" href="structDynBbl.html">   60<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structDynBbl.html">DynBbl<\/a> {<\/div>$/;"	a
l00060	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        uint64_t *lastRdWrCycle;<\/div>$/;"	a
l00060	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div>$/;"	a
l00060	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profTotalWrLat;<\/div>$/;"	a
l00060	html/event__queue_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;            <span class="keywordflow">if<\/span> (!period) period = 1;<\/div>$/;"	a
l00060	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        uint32_t srcId;<\/div>$/;"	a
l00060	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        uint32_t srcId; <span class="comment">\/\/should match the core<\/span><\/div>$/;"	a
l00060	html/galloc_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="keywordtype">void<\/span>* gm_get_secondary_ptr();<\/div>$/;"	a
l00060	html/hash_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        uint64_t hash(uint32_t <span class="keywordtype">id<\/span>, uint64_t val);<\/div>$/;"	a
l00060	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;            <span class="keyword">explicit<\/span> Entry(uint32_t _lineId) : lineAddr(0), lineId(_lineId) {}<\/div>$/;"	a
l00060	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        assert(p);<\/div>$/;"	a
l00060	html/locks_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        }<\/div>$/;"	a
l00060	html/log_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    LOG_TimeVirt,<\/div>$/;"	a
l00060	html/mc_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    uint32_t lru;<\/div>$/;"	a
l00060	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div>$/;"	a
l00060	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="comment">\/* Coherence states for the MESI protocol *\/<\/span><\/div>$/;"	a
l00060	html/mtrand_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="comment">\/\/      products derived from this software without specific prior written<\/span><\/div>$/;"	a
l00060	html/mutex_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <a class="code" href="classscoped__mutex.html">scoped_mutex<\/a>(<a class="code" href="classmutex.html">mutex<\/a>&amp; _mut)<\/div>$/;"	a
l00060	html/null__core_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> PredStoreFunc(THREADID tid, ADDRINT addr, BOOL pred);<\/div>$/;"	a
l00060	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;                bhsr[i] = 0;<\/div>$/;"	a
l00060	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="comment">\/\/Event bookkeeping<\/span><\/div>$/;"	a
l00060	html/page__placement_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="comment">\/\/ Frequency Base Replacement<\/span><\/div>$/;"	a
l00060	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;};<\/div>$/;"	a
l00060	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getNumPartitions() {<span class="keywordflow">return<\/span> 2*numCores;}<\/div>$/;"	a
l00060	html/partitioner_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="comment">\/\/ algorithm proposed in the UCP paper (Qureshi and Patt, ISCA 2006)<\/span><\/div>$/;"	a
l00060	html/pin__cmd_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="preprocessor">#endif  \/\/ PIN_CMD_H_<\/span><\/div>$/;"	a
l00060	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="keyword">struct <\/span>Entry {<\/div>$/;"	a
l00060	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        }<\/div>$/;"	a
l00060	html/process__tree_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;bool&gt;<\/a> mask;<\/div>$/;"	a
l00060	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;            uint64_t endNs = getNs();<\/div>$/;"	a
l00060	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="comment"> * then implement a single, templated rank() function (see below for examples)<\/span><\/div>$/;"	a
l00060	html/scheduler_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="comment">\/* Performs (pid, tid) -&gt; cid translation; round-robin scheduling with no notion of locality or heterogeneity... *\/<\/span><\/div>$/;"	a
l00060	html/simple__core_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00060	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keywordtype">char<\/span> buf[SLAB_SIZE - <span class="keyword">sizeof<\/span>(<a class="code" href="classslab_1_1SlabAlloc.html">SlabAlloc<\/a>*) - <span class="keyword">sizeof<\/span>(<span class="keyword">volatile<\/span> uint32_t) - <span class="keyword">sizeof<\/span>(uint32_t)];<\/div>$/;"	a
l00060	html/stats_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="comment"> *    integers. Counters are objects though, so they entail some space overhead.<\/span><\/div>$/;"	a
l00060	html/tick__event_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;                active = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00060	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;                uint32_t tagLat, uint32_t ways, uint32_t cands, uint32_t _domain, <span class="keyword">const<\/span> g_string&amp; _name);<\/div>$/;"	a
l00060	html/timing__core_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div>$/;"	a
l00060	html/timing__event_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <span class="keywordtype">void<\/span>* <span class="keyword">operator<\/span> <span class="keyword">new<\/span> (size_t);<\/div>$/;"	a
l00060	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;        <a class="code" href="classMemObject.html">MemObject<\/a>* parent;<\/div>$/;"	a
l00060	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;            <span class="keyword">struct <\/span>Node* next;<\/div>$/;"	a
l00060	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;            <a class="code" href="classMD1Memory.html">MD1Memory<\/a>(lineSize, megacyclesPerSecond, megabytesPerSecond, _zeroLoadLatency, _name), zeroLoadLatency(_zeroLoadLatency), boundLatency(_boundLatency), domain(_domain)<\/div>$/;"	a
l00060	html/zsim_8h_source.html	/^<div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<\/div>$/;"	a
l00061	html/Callback_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <a class="code" href="classDRAMSim_1_1Callback.html">Callback<\/a>( ConsumerT* <span class="keyword">const<\/span> <span class="keywordtype">object<\/span>, PtrMember member) :<\/div>$/;"	a
l00061	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;            <span class="keywordtype">int<\/span> getIniUint64(<span class="keyword">const<\/span> std::string &amp;field, uint64_t *val);<\/div>$/;"	a
l00061	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div>$/;"	a
l00061	html/barrier_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00061	html/bithacks_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> isPow2(T val) {<\/div>$/;"	a
l00061	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;            curState = newState;<\/div>$/;"	a
l00061	html/cache_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* getName();<\/div>$/;"	a
l00061	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <a class="code" href="classReplPolicy.html">ReplPolicy<\/a>* rp;<\/div>$/;"	a
l00061	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> isValid(uint32_t lineId) = 0;<\/div>$/;"	a
l00061	html/config_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="comment">\/\/Access interface<\/span><\/div>$/;"	a
l00061	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        };<\/div>$/;"	a
l00061	html/core_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define FPTR_RETRY (3L)<\/span><\/div>$/;"	a
l00061	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="comment">\/\/Cycle accounting<\/span><\/div>$/;"	a
l00061	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="comment">\/\/ that can run a thread from the specified pid<\/span><\/div>$/;"	a
l00061	html/cpuid_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    {0x0000000a, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00061	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div>$/;"	a
l00061	html/decoder_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="preprocessor">#ifdef BBL_PROFILING<\/span><\/div>$/;"	a
l00061	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        uint64_t *lastPreCycle;<\/div>$/;"	a
l00061	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="comment">\/\/ Simulation Parameter<\/span><\/div>$/;"	a
l00061	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        PAD();<\/div>$/;"	a
l00061	html/event__queue_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        }<\/div>$/;"	a
l00061	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div>$/;"	a
l00061	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        uint32_t reqFlags;<\/div>$/;"	a
l00061	html/galloc_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div>$/;"	a
l00061	html/hash_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;};<\/div>$/;"	a
l00061	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        };<\/div>$/;"	a
l00061	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        assert(owner == <span class="keyword">nullptr<\/span>);<\/div>$/;"	a
l00061	html/locks_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div>$/;"	a
l00061	html/log_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;} LogType;<\/div>$/;"	a
l00061	html/mc_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;};<\/div>$/;"	a
l00061	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="comment">\/* Implements a memory controller with limited bandwidth, throttling latency<\/span><\/div>$/;"	a
l00061	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">enum<\/span> {<\/div>$/;"	a
l00061	html/mtrand_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="comment">\/\/      permission.<\/span><\/div>$/;"	a
l00061	html/mutex_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;                : mut(&amp;_mut) {<\/div>$/;"	a
l00061	html/null__core_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div>$/;"	a
l00061	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;            }<\/div>$/;"	a
l00061	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <a class="code" href="classEventRecorder.html">EventRecorder<\/a> eventRecorder;<\/div>$/;"	a
l00061	html/page__placement_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    ChunkInfo * _chunks;<\/div>$/;"	a
l00061	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div>$/;"	a
l00061	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getPartition(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00061	html/partitioner_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="keyword">namespace <\/span>lookahead {<\/div>$/;"	a
l00061	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;            <span class="comment">\/\/ Two competing strides; at most one active<\/span><\/div>$/;"	a
l00061	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    };<\/div>$/;"	a
l00061	html/process__tree_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;uint64_t&gt;<\/a> ffiPoints;<\/div>$/;"	a
l00061	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;            assert(endNs &gt;= startNs)<\/div>$/;"	a
l00061	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="comment"> * This way, we achieve a simple, single interface that is specialized transparently to each type of array<\/span><\/div>$/;"	a
l00061	html/scheduler_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div>$/;"	a
l00061	html/simple__core_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="comment">\/\/Simulation functions<\/span><\/div>$/;"	a
l00061	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div>$/;"	a
l00061	html/stats_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="comment"> * 3) Allow fixed-size stats output: The stat types supported are all fixed-size,<\/span><\/div>$/;"	a
l00061	html/tick__event_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;            }<\/div>$/;"	a
l00061	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00061	html/timing__core_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <a class="code" href="structInstrFuncPtrs.html">InstrFuncPtrs<\/a> GetFuncPtrs();<\/div>$/;"	a
l00061	html/timing__event_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;};<\/div>$/;"	a
l00061	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div>$/;"	a
l00061	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        };<\/div>$/;"	a
l00061	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        {<\/div>$/;"	a
l00061	html/zsim_8h_source.html	/^<div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTimeBreakdownStat.html">TimeBreakdownStat<\/a>;<\/div>$/;"	a
l00062	html/Callback_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;            object(<span class="keywordtype">object<\/span>), member(member)<\/div>$/;"	a
l00062	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;            <span class="keywordtype">int<\/span> getIniFloat(<span class="keyword">const<\/span> std::string &amp;field, <span class="keywordtype">float<\/span> *val);<\/div>$/;"	a
l00062	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00062	html/barrier_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> callback() = 0;<\/div>$/;"	a
l00062	html/bithacks_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <span class="keywordflow">return<\/span> val &amp;&amp; !(val &amp; (val - 1));<\/div>$/;"	a
l00062	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;            lastCycle = cycle;<\/div>$/;"	a
l00062	html/cache_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="keywordtype">void<\/span> setParents(uint32_t _childId, <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;MemObject*&gt;<\/a>&amp; parents, <a class="code" href="classNetwork.html">Network<\/a>* network);<\/div>$/;"	a
l00062	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <a class="code" href="classHashFamily.html">HashFamily<\/a>* hf;<\/div>$/;"	a
l00062	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;};<\/div>$/;"	a
l00062	html/config_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="comment">\/\/T can be uint32_t, uint64_t, bool, or const char*. Instantiations are in the cpp file<\/span><\/div>$/;"	a
l00062	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/core_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00062	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        uint64_t totalGapCycles; <span class="comment">\/\/does not include gapCycles<\/span><\/div>$/;"	a
l00062	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="keyword">inline<\/span> uint32_t cpuenumCpu(uint32_t pid, uint32_t cid) {<\/div>$/;"	a
l00062	html/cpuid_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    {0x80000000, 0000000000, 0x80000008, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00062	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;            <span class="comment">\/\/ We need to reorder rank ACT commands, which may happen somewhat out of order<\/span><\/div>$/;"	a
l00062	html/decoder_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor"><\/span>    uint64_t bblIdx;<\/div>$/;"	a
l00062	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        uint64_t *tFAWCycle;<\/div>$/;"	a
l00062	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        uint32_t reportPhase;<\/div>$/;"	a
l00062	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/event__queue_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="keyword">volatile<\/span> uint64_t lastGapCycles;<\/div>$/;"	a
l00062	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/galloc_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="keywordtype">void<\/span> gm_stats();<\/div>$/;"	a
l00062	html/hash_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        assert(prev == <span class="keyword">nullptr<\/span> &amp;&amp; next == <span class="keyword">nullptr<\/span>);<\/div>$/;"	a
l00062	html/locks_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="comment">\/\/ At this point, we have the line in S\/E\/O, or M if we have tried the test&amp;set and failed.<\/span><\/div>$/;"	a
l00062	html/log_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/mc_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="comment"> * using an M\/D\/1 queueing model.<\/span><\/div>$/;"	a
l00062	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    I, <span class="comment">\/\/ invalid<\/span><\/div>$/;"	a
l00062	html/mtrand_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00062	html/mutex_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;            mut-&gt;lock();<\/div>$/;"	a
l00062	html/null__core_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> BranchFunc(THREADID, ADDRINT, BOOL, ADDRINT, ADDRINT) {}<\/div>$/;"	a
l00062	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; phtSize; i++) {<\/div>$/;"	a
l00062	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/page__placement_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <\/div>$/;"	a
l00062	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno"><a class="line" href="classWayPartReplPolicy.html">   62<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classWayPartReplPolicy.html">WayPartReplPolicy<\/a> : <span class="keyword">public<\/span> <a class="code" href="classPartReplPolicy.html">PartReplPolicy<\/a>, <span class="keyword">public<\/span> <a class="code" href="classLegacyReplPolicy.html">LegacyReplPolicy<\/a> {<\/div>$/;"	a
l00062	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;};<\/div>$/;"	a
l00062	html/partitioner_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    uint64_t computePartitioningTotalUtility(uint32_t numPartitions, <span class="keyword">const<\/span> uint32_t* parts, <span class="keyword">const<\/span> uint32_t* missCurves);<\/div>$/;"	a
l00062	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;            int32_t stride;<\/div>$/;"	a
l00062	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/process__tree_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="keyword">const<\/span> g_string syscallBlacklistRegex;<\/div>$/;"	a
l00062	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;            totalNs += (endNs - startNs);<\/div>$/;"	a
l00062	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="comment"> * (this code is performance-critical)<\/span><\/div>$/;"	a
l00062	html/scheduler_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno"><a class="line" href="classScheduler.html">   62<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classScheduler.html">Scheduler<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a>, <span class="keyword">public<\/span> <a class="code" href="classCallee.html">Callee<\/a> {<\/div>$/;"	a
l00062	html/simple__core_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> load(Address addr);<\/div>$/;"	a
l00062	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    <span class="keywordtype">void<\/span> init(<a class="code" href="classslab_1_1SlabAlloc.html">SlabAlloc<\/a>* _allocator) {<\/div>$/;"	a
l00062	html/stats_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="comment"> *    and stats cannot be created after initialization. This allows fixed-size records,<\/span><\/div>$/;"	a
l00062	html/tick__event_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        }<\/div>$/;"	a
l00062	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/timing__core_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/timing__event_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<\/div>$/;"	a
l00062	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        <a class="code" href="classAccessTraceWriter.html">AccessTraceWriter<\/a>* atw;<\/div>$/;"	a
l00062	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;        Node** array;<\/div>$/;"	a
l00062	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;            preDelay = zeroLoadLatency\/2;<\/div>$/;"	a
l00062	html/zsim_8h_source.html	/^<div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="keyword">enum<\/span> ProfileStates {<\/div>$/;"	a
l00063	html/Callback_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    {<\/div>$/;"	a
l00063	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    };<\/div>$/;"	a
l00063	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <a class="code" href="classAccessTraceReader.html">AccessTraceReader<\/a>(std::string fname);<\/div>$/;"	a
l00063	html/barrier_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;};<\/div>$/;"	a
l00063	html/bithacks_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;}<\/div>$/;"	a
l00063	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        }<\/div>$/;"	a
l00063	html/cache_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="keywordtype">void<\/span> setChildren(<span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;BaseCache*&gt;<\/a>&amp; children, <a class="code" href="classNetwork.html">Network<\/a>* network);<\/div>$/;"	a
l00063	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00063	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div>$/;"	a
l00063	html/config_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div>$/;"	a
l00063	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        CrossingEventInfo* lastCrossing; <span class="comment">\/\/indexed by [srcId*doms*doms + srcDom*doms + dstDom]<\/span><\/div>$/;"	a
l00063	html/core_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="comment">\/\/Generic core class<\/span><\/div>$/;"	a
l00063	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        uint64_t totalHaltedCycles; <span class="comment">\/\/does not include cycles since last transition to HALTED<\/span><\/div>$/;"	a
l00063	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keywordflow">if<\/span> (zinfo-&gt;perProcessCpuEnum) {<\/div>$/;"	a
l00063	html/cpuid_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    {0x80000001, 0000000000, 0000000000, 0000000000, 0x00000001, 0x20100800},<\/div>$/;"	a
l00063	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;            <span class="comment">\/\/ Typically, acts come in order or nearly in order, so doing this is pretty efficient<\/span><\/div>$/;"	a
l00063	html/decoder_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00063	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div>$/;"	a
l00063	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        uint64_t reportStart;<\/div>$/;"	a
l00063	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00063	html/event__queue_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="comment">\/\/ This will fire a bunch of times, we adjust the period to get the exact phase<\/span><\/div>$/;"	a
l00063	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        PAD();<\/div>$/;"	a
l00063	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        lock_t filterLock;<\/div>$/;"	a
l00063	html/galloc_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div>$/;"	a
l00063	html/hash_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="comment">\/* Used when we don&#39;t want hashing, just return the value *\/<\/span><\/div>$/;"	a
l00063	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        Entry* array;<\/div>$/;"	a
l00063	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="keywordflow">if<\/span> (p-&gt;next) {<\/div>$/;"	a
l00063	html/locks_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">#if WITH_MWAIT<\/span><\/div>$/;"	a
l00063	html/log_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="comment">\/\/ defined in log.cpp<\/span><\/div>$/;"	a
l00063	html/mc_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno"><a class="line" href="classTagBuffer.html">   63<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTagBuffer.html">TagBuffer<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00063	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00063	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    S, <span class="comment">\/\/ shared (and clean)<\/span><\/div>$/;"	a
l00063	html/mtrand_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="comment">\/\/ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot;<\/span><\/div>$/;"	a
l00063	html/mutex_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        }<\/div>$/;"	a
l00063	html/null__core_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;} ATTR_LINE_ALIGNED; <span class="comment">\/\/This needs to take up a whole cache line, or false sharing will be extremely frequent<\/span><\/div>$/;"	a
l00063	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;                pht[i] = 1;  <span class="comment">\/\/ weak non-taken<\/span><\/div>$/;"	a
l00063	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="comment">\/\/Here goes what&#39;s different from CoreRecorder<\/span><\/div>$/;"	a
l00063	html/page__placement_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="comment">\/\/ Parameters<\/span><\/div>$/;"	a
l00063	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00063	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div>$/;"	a
l00063	html/partitioner_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keywordtype">void<\/span> computeBestPartitioning(uint32_t numPartitions, uint32_t* allocs, uint32_t* missCurves);<\/div>$/;"	a
l00063	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;            <a class="code" href="classSatCounter.html">SatCounter&lt;3, 2, 1&gt;<\/a> conf;<\/div>$/;"	a
l00063	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    PQBlock blocks[B];<\/div>$/;"	a
l00063	html/process__tree_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div>$/;"	a
l00063	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;            startNs = 0;<\/div>$/;"	a
l00063	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00063	html/scheduler_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00063	html/simple__core_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> store(Address addr);<\/div>$/;"	a
l00063	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        allocator = _allocator;<\/div>$/;"	a
l00063	html/stats_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="comment"> *    making periodic stats much easier to parse and **iterate over** (e.g. we can<\/span><\/div>$/;"	a
l00063	html/tick__event_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div>$/;"	a
l00063	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00063	html/timing__core_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        <span class="comment">\/\/Contention simulation interface<\/span><\/div>$/;"	a
l00063	html/timing__event_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="keyword">enum<\/span> EventState {EV_INVALID, EV_NONE, EV_QUEUED, EV_RUNNING, EV_HELD, EV_DONE};<\/div>$/;"	a
l00063	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div>$/;"	a
l00063	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;        Node** heads;<\/div>$/;"	a
l00063	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;            postDelay = zeroLoadLatency - preDelay;<\/div>$/;"	a
l00063	html/zsim_8h_source.html	/^<div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    PROF_INIT = 0,<\/div>$/;"	a
l00064	html/Callback_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    }<\/div>$/;"	a
l00064	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <a class="code" href="classDRAMSim_1_1MultiChannelMemorySystem.html">MultiChannelMemorySystem<\/a> *getMemorySystemInstance(<span class="keyword">const<\/span> <span class="keywordtype">string<\/span> &amp;dev, <span class="keyword">const<\/span> <span class="keywordtype">string<\/span> &amp;sys, <span class="keyword">const<\/span> <span class="keywordtype">string<\/span> &amp;pwd, <span class="keyword">const<\/span> <span class="keywordtype">string<\/span> &amp;trc, <span class="keywordtype">unsigned<\/span> megsOfMemory, std::string *visfilename=NULL);<\/div>$/;"	a
l00064	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/barrier_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/bithacks_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/cache_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00064	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        uint32_t numSets;<\/div>$/;"	a
l00064	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/config_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="comment">\/\/ Mandatory values (no default, panics if setting does not exist)<\/span><\/div>$/;"	a
l00064	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/core_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        uint64_t lastUnhaltedCycle; <span class="comment">\/\/set on transition to HALTED<\/span><\/div>$/;"	a
l00064	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keywordflow">if<\/span> (cid &gt; zinfo-&gt;numCores) <span class="keywordflow">return<\/span> 0;  <span class="comment">\/\/ not scheduled; with perProcessCpuEnum, first cpu is always 0<\/span><\/div>$/;"	a
l00064	html/cpuid_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    {0x80000002, 0000000000, 0x65746e49, 0x2952286c, 0x6f655820, 0x2952286e},<\/div>$/;"	a
l00064	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;            <span class="comment">\/\/ (vs e.g. scanning all last few acts to figure out the minumum constraint)<\/span><\/div>$/;"	a
l00064	html/decoder_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor"><\/span>    uint64_t addr;<\/div>$/;"	a
l00064	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        uint64_t activateCount;<\/div>$/;"	a
l00064	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        uint64_t reportFinish;<\/div>$/;"	a
l00064	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <a class="code" href="classDRAMSimMemory.html">DRAMSimMemory<\/a>(std::string&amp; dramTechIni, std::string&amp; dramSystemIni, std::string&amp; outputDir, std::string&amp; traceName, uint32_t capacityMB,<\/div>$/;"	a
l00064	html/event__queue_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="comment">\/\/ Gets called from an arbitrary process, cannot touch any proc-local state (including FFI)<\/span><\/div>$/;"	a
l00064	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keyword">volatile<\/span> uint64_t lastStartSlack;<\/div>$/;"	a
l00064	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        uint64_t fGETSHit, fGETXHit;<\/div>$/;"	a
l00064	html/galloc_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="keywordtype">bool<\/span> gm_isready();<\/div>$/;"	a
l00064	html/hash_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno"><a class="line" href="classIdHashFamily.html">   64<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classIdHashFamily.html">IdHashFamily<\/a> : <span class="keyword">public<\/span> <a class="code" href="classHashFamily.html">HashFamily<\/a> {<\/div>$/;"	a
l00064	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <a class="code" href="classInList.html">InList&lt;Entry&gt;<\/a> lruList;<\/div>$/;"	a
l00064	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;            assert(p-&gt;next-&gt;prev == p);<\/div>$/;"	a
l00064	html/locks_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor"><\/span>        <span class="comment">\/\/Monitor \/ mwait<\/span><\/div>$/;"	a
l00064	html/log_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="keyword">extern<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* logTypeNames[];<\/div>$/;"	a
l00064	html/mc_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="keyword">public<\/span>:<\/div>$/;"	a
l00064	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno"><a class="line" href="classMD1Memory.html">   64<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMD1Memory.html">MD1Memory<\/a> : <span class="keyword">public<\/span> <a class="code" href="classMemObject.html">MemObject<\/a> {<\/div>$/;"	a
l00064	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    E, <span class="comment">\/\/ exclusive and clean<\/span><\/div>$/;"	a
l00064	html/mtrand_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="comment">\/\/ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE<\/span><\/div>$/;"	a
l00064	html/mutex_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/null__core_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;            }<\/div>$/;"	a
l00064	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/page__placement_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    uint64_t _num_chunks;<\/div>$/;"	a
l00064	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <a class="code" href="structPartInfo.html">PartInfo<\/a>* partInfo;<\/div>$/;"	a
l00064	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno"><a class="line" href="classProcessPartMapper.html">   64<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProcessPartMapper.html">ProcessPartMapper<\/a> : <span class="keyword">public<\/span> <a class="code" href="classPartMapper.html">PartMapper<\/a> {<\/div>$/;"	a
l00064	html/partitioner_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;}<\/div>$/;"	a
l00064	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/process__tree_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00064	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        }<\/div>$/;"	a
l00064	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">#define DECL_RANK_BINDING(T) uint32_t rankCands(const MemReq* req, T cands) { return rank(req, cands); }<\/span><\/div>$/;"	a
l00064	html/scheduler_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keyword">enum<\/span> ThreadState {<\/div>$/;"	a
l00064	html/simple__core_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> bbl(Address bblAddr, <a class="code" href="structBblInfo.html">BblInfo<\/a>* bblInstrs);<\/div>$/;"	a
l00064	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        clear();<\/div>$/;"	a
l00064	html/stats_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="comment"> *    parse 1% of the samples for a high-level graph without bringing the whole stats<\/span><\/div>$/;"	a
l00064	html/tick__event_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keyword">using<\/span> GlobAlloc::operator <span class="keyword">new<\/span>; <span class="comment">\/\/grrrrrrrrr<\/span><\/div>$/;"	a
l00064	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/timing__core_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="keyword">inline<\/span> <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* getEventRecorder() {<span class="keywordflow">return<\/span> cRec.getEventRecorder();}<\/div>$/;"	a
l00064	html/timing__event_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        <span class="comment">\/\/Last access, childId == -1 if invalid, acts as 1-elem buffer<\/span><\/div>$/;"	a
l00064	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div>$/;"	a
l00064	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;        }<\/div>$/;"	a
l00064	html/zsim_8h_source.html	/^<div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    PROF_BOUND = 1,<\/div>$/;"	a
l00065	html/Callback_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div>$/;"	a
l00065	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;}<\/div>$/;"	a
l00065	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> empty()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> (cur == max);}<\/div>$/;"	a
l00065	html/barrier_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div>$/;"	a
l00065	html/bithacks_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="comment">\/* Some variadic template magic for max\/min with N args.<\/span><\/div>$/;"	a
l00065	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="comment">\/\/ Accounts for time in current state, even if the last transition happened long ago<\/span><\/div>$/;"	a
l00065	html/cache_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div>$/;"	a
l00065	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        uint32_t assoc;<\/div>$/;"	a
l00065	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="comment">\/* A MESI coherence controller is decoupled in two:<\/span><\/div>$/;"	a
l00065	html/config_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; T <span class="keyword">get<\/span>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* key);<\/div>$/;"	a
l00065	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="keyword">struct <\/span>DomainData : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00065	html/core_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno"><a class="line" href="classCore.html">   65<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCore.html">Core<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00065	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div>$/;"	a
l00065	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;bool&gt;<\/a>&amp; mask = zinfo-&gt;procArray[pid]-&gt;getMask();<\/div>$/;"	a
l00065	html/cpuid_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    {0x80000003, 0000000000, 0x55504320, 0x20202020, 0x20202020, 0x45202020},<\/div>$/;"	a
l00065	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;            uint32_t cur = idx;<\/div>$/;"	a
l00065	html/decoder_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    uint32_t uops;<\/div>$/;"	a
l00065	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        uint64_t prechargeCount;<\/div>$/;"	a
l00065	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div>$/;"	a
l00065	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;                uint64_t cpuFreqHz,  uint32_t _minLatency, uint32_t _domain, <span class="keyword">const<\/span> g_string&amp; _name);<\/div>$/;"	a
l00065	html/event__queue_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="keywordtype">void<\/span> callback() {<\/div>$/;"	a
l00065	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        PAD();<\/div>$/;"	a
l00065	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="comment">\/\/ this is not an accurate tlb. It just randomize the page nums   <\/span><\/div>$/;"	a
l00065	html/galloc_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="keywordtype">void<\/span> gm_detach();<\/div>$/;"	a
l00065	html/hash_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00065	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        g_unordered_map&lt;Address, uint32_t&gt; lineMap; <span class="comment">\/\/address-&gt;lineId; if too slow, try an AATree, which does not alloc dynamically<\/span><\/div>$/;"	a
l00065	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;            p-&gt;next-&gt;prev = <span class="keyword">static_cast&lt;<\/span>T*<span class="keyword">&gt;<\/span>(<span class="keyword">this<\/span>);<\/div>$/;"	a
l00065	html/locks_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        _mm_monitor((<span class="keyword">const<\/span> <span class="keywordtype">void<\/span>*)lock, 0, 0);<\/div>$/;"	a
l00065	html/log_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="keyword">extern<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* logHeader;<\/div>$/;"	a
l00065	html/mc_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <a class="code" href="classTagBuffer.html">TagBuffer<\/a>(<a class="code" href="classConfig.html">Config<\/a> &amp;config);<\/div>$/;"	a
l00065	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00065	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    M  <span class="comment">\/\/ exclusive and dirty<\/span><\/div>$/;"	a
l00065	html/mtrand_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="comment">\/\/ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE<\/span><\/div>$/;"	a
l00065	html/mutex_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <a class="code" href="classscoped__mutex.html">scoped_mutex<\/a>(<a class="code" href="classscoped__mutex.html">scoped_mutex<\/a>&amp;&amp; that) {<\/div>$/;"	a
l00065	html/null__core_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">#endif  \/\/ NULL_CORE_H_<\/span><\/div>$/;"	a
l00065	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div>$/;"	a
l00065	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="comment">\/\/Recording phase<\/span><\/div>$/;"	a
l00065	html/page__placement_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    uint32_t _num_entries_per_chunk;<\/div>$/;"	a
l00065	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        uint32_t partitions;<\/div>$/;"	a
l00065	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00065	html/partitioner_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div>$/;"	a
l00065	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno"><a class="line" href="structStreamPrefetcher_1_1Entry_1_1AccessTimes.html">   65<\/a><\/span>&#160;            <span class="keyword">struct <\/span><a class="code" href="structStreamPrefetcher_1_1Entry_1_1AccessTimes.html">AccessTimes<\/a> {<\/div>$/;"	a
l00065	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="keyword">typedef<\/span> g_multimap&lt;uint64_t, T*&gt; FEMap; <span class="comment">\/\/far element map<\/span><\/div>$/;"	a
l00065	html/process__tree_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <a class="code" href="classProcessTreeNode.html">ProcessTreeNode<\/a>(uint32_t _procIdx, uint32_t _groupIdx, <span class="keywordtype">bool<\/span> _inFastForward, <span class="keywordtype">bool<\/span> _inPause, <span class="keyword">const<\/span> SyncedFastForwardMode&amp; _syncedFastForward,<\/div>$/;"	a
l00065	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div>$/;"	a
l00065	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define DECL_RANK_BINDINGS DECL_RANK_BINDING(SetAssocCands); DECL_RANK_BINDING(ZCands);<\/span><\/div>$/;"	a
l00065	html/scheduler_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;            STARTED, <span class="comment">\/\/transient state, thread will do a join immediately after<\/span><\/div>$/;"	a
l00065	html/simple__core_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div>$/;"	a
l00065	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    }<\/div>$/;"	a
l00065	html/stats_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="comment"> *    file from disk, then zoom in on a specific portion, etc.).<\/span><\/div>$/;"	a
l00065	html/tick__event_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="keyword">using<\/span> GlobAlloc::operator <span class="keyword">delete<\/span>;<\/div>$/;"	a
l00065	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="keywordtype">void<\/span> simulateHit(<a class="code" href="classHitEvent.html">HitEvent<\/a>* ev, uint64_t cycle);<\/div>$/;"	a
l00065	html/timing__core_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <span class="keywordtype">void<\/span> cSimStart() {curCycle = cRec.cSimStart(curCycle);}<\/div>$/;"	a
l00065	html/timing__event_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCrossingEvent.html">CrossingEvent<\/a>;<\/div>$/;"	a
l00065	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <a class="code" href="structAccessRecord.html">AccessRecord<\/a> lastAcc;<\/div>$/;"	a
l00065	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;        <a class="code" href="classHashFamily.html">HashFamily<\/a>* hf;<\/div>$/;"	a
l00065	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div>$/;"	a
l00065	html/zsim_8h_source.html	/^<div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    PROF_WEAVE = 2,<\/div>$/;"	a
l00066	html/Callback_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <a class="code" href="classDRAMSim_1_1Callback.html">Callback<\/a>( <span class="keyword">const<\/span> <a class="code" href="classDRAMSim_1_1Callback.html">Callback&lt;ConsumerT,ReturnT,Param1T,Param2T,Param3T&gt;<\/a>&amp; e ) :<\/div>$/;"	a
l00066	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div>$/;"	a
l00066	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        uint32_t getNumChildren()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> numChildren;}<\/div>$/;"	a
l00066	html/barrier_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno"><a class="line" href="classBarrier.html">   66<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classBarrier.html">Barrier<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00066	html/bithacks_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="comment"> *<\/span><\/div>$/;"	a
l00066	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keyword">virtual<\/span> uint64_t count(uint32_t idx)<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00066	html/cache_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00066	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        uint32_t setMask;<\/div>$/;"	a
l00066	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="comment"> *  - The BOTTOM controller, which deals with keeping coherence state with respect to the upper level and issues<\/span><\/div>$/;"	a
l00066	html/config_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; T <span class="keyword">get<\/span>(<span class="keyword">const<\/span> std::string&amp; key) {<span class="keywordflow">return<\/span> get&lt;T&gt;(key.c_str());}<\/div>$/;"	a
l00066	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;            <a class="code" href="classPrioQueue.html">PrioQueue&lt;TimingEvent, PQ_BLOCKS&gt;<\/a> pq;<\/div>$/;"	a
l00066	html/core_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00066	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        uint32_t domain;<\/div>$/;"	a
l00066	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        uint32_t count = 0;<\/div>$/;"	a
l00066	html/cpuid_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    {0x80000004, 0000000000, 0x35333335, 0x20402020, 0x30302e32, 0x007a4847},<\/div>$/;"	a
l00066	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;            <span class="keywordflow">while<\/span> (buf[dec(cur)] &gt; actCycle) {<\/div>$/;"	a
l00066	html/decoder_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    uint32_t approxInstrs;<\/div>$/;"	a
l00066	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        uint64_t readBurstCount;<\/div>$/;"	a
l00066	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        <span class="comment">\/\/ FIXME(dsm): These violate transparency... use info\/warn!<\/span><\/div>$/;"	a
l00066	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div>$/;"	a
l00066	html/event__queue_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;            uint64_t cur = <span class="keyword">get<\/span>();<\/div>$/;"	a
l00066	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div>$/;"	a
l00066	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        <span class="keywordtype">bool<\/span> _enable_tlb;<\/div>$/;"	a
l00066	html/galloc_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div>$/;"	a
l00066	html/hash_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t hash(uint32_t <span class="keywordtype">id<\/span>, uint64_t val) {<span class="keywordflow">return<\/span> val;}<\/div>$/;"	a
l00066	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div>$/;"	a
l00066	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;            next = p-&gt;next;<\/div>$/;"	a
l00066	html/locks_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div>$/;"	a
l00066	html/log_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="keyword">extern<\/span> FILE* logFdOut;<\/div>$/;"	a
l00066	html/mc_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="comment">\/\/ return: exists in tag buffer or not.<\/span><\/div>$/;"	a
l00066	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        uint64_t lastPhase;<\/div>$/;"	a
l00066	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;} MESIState;<\/div>$/;"	a
l00066	html/mtrand_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="comment">\/\/ ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE<\/span><\/div>$/;"	a
l00066	html/mutex_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;            mut = that.mut;<\/div>$/;"	a
l00066	html/null__core_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00066	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;            static_assert(LB &lt;= HB, <span class="stringliteral">&quot;Too many PHT entries&quot;<\/span>);<\/div>$/;"	a
l00066	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        <a class="code" href="classOOOIssueEvent.html">OOOIssueEvent<\/a>* lastEvProduced;<\/div>$/;"	a
l00066	html/page__placement_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="comment">\/\/uint32_t _num_stable_entries;<\/span><\/div>$/;"	a
l00066	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div>$/;"	a
l00066	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        uint32_t numProcs;<\/div>$/;"	a
l00066	html/partitioner_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno"><a class="line" href="classLookaheadPartitioner.html">   66<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classLookaheadPartitioner.html">LookaheadPartitioner<\/a> : <span class="keyword">public<\/span> <a class="code" href="classPartitioner.html">Partitioner<\/a> {<\/div>$/;"	a
l00066	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;                uint64_t startCycle;  <span class="comment">\/\/ FIXME: Dead for now, we should use it for profiling<\/span><\/div>$/;"	a
l00066	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> FEMap::iterator FEMapIterator;<\/div>$/;"	a
l00066	html/process__tree_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;                        uint32_t _clockDomain, uint32_t _portDomain, uint64_t _dumpHeartbeats, <span class="keywordtype">bool<\/span> _dumpsResetHeartbeats, uint32_t _restarts,<\/div>$/;"	a
l00066	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        uint64_t <span class="keyword">get<\/span>() <span class="keyword">const<\/span> {<\/div>$/;"	a
l00066	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00066	html/scheduler_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;            RUNNING, <span class="comment">\/\/has cid assigned, managed by the phase barrier<\/span><\/div>$/;"	a
l00066	html/simple__core_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> LoadFunc(THREADID tid, ADDRINT addr);<\/div>$/;"	a
l00066	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div>$/;"	a
l00066	html/stats_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="comment"> *<\/span><\/div>$/;"	a
l00066	html/tick__event_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;};<\/div>$/;"	a
l00066	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        <span class="keywordtype">void<\/span> simulateMissStart(<a class="code" href="classMissStartEvent.html">MissStartEvent<\/a>* ev, uint64_t cycle);<\/div>$/;"	a
l00066	html/timing__core_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        <span class="keywordtype">void<\/span> cSimEnd() {curCycle = cRec.cSimEnd(curCycle);}<\/div>$/;"	a
l00066	html/timing__event_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div>$/;"	a
l00066	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div>$/;"	a
l00066	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<\/div>$/;"	a
l00066	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) {<\/div>$/;"	a
l00066	html/zsim_8h_source.html	/^<div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    PROF_FF = 3,<\/div>$/;"	a
l00067	html/Callback_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;            object(e.object), member(e.member)<\/div>$/;"	a
l00067	html/DRAMSim_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00067	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        uint64_t getNumRecords()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> numRecords;}<\/div>$/;"	a
l00067	html/barrier_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00067	html/bithacks_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="comment"> * Type-wise, you can compare multiple types (e.g., maxN(1, -7, 3.3)), but the<\/span><\/div>$/;"	a
l00067	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;            uint64_t partial = VectorCounter::count(idx);<\/div>$/;"	a
l00067	html/cache_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div>$/;"	a
l00067	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div>$/;"	a
l00067	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="comment"> *    requests (accesses) to upper levels.<\/span><\/div>$/;"	a
l00067	html/config_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div>$/;"	a
l00067	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div>$/;"	a
l00067	html/core_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        uint64_t lastUpdateCycles;<\/div>$/;"	a
l00067	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        g_string name;<\/div>$/;"	a
l00067	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; mask.size(); i++) {<\/div>$/;"	a
l00067	html/cpuid_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    {0x80000005, 0000000000, 0000000000, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00067	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;                buf[cur] = buf[dec(cur)];<\/div>$/;"	a
l00067	html/decoder_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <a class="code" href="structDynUop.html">DynUop<\/a> uop[1];<\/div>$/;"	a
l00067	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        uint64_t writeBurstCount;<\/div>$/;"	a
l00067	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        <span class="comment">\/\/ I&#39;m also not sure why these are here; can we move all the power-related reporting to a separate tool?<\/span><\/div>$/;"	a
l00067	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* getName() {<span class="keywordflow">return<\/span> name.c_str();}<\/div>$/;"	a
l00067	html/event__queue_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;            <span class="keywordflow">if<\/span> (cur &gt;= target) {<\/div>$/;"	a
l00067	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00067	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        drand48_data _buffer;<\/div>$/;"	a
l00067	html/galloc_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div>$/;"	a
l00067	html/hash_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;};<\/div>$/;"	a
l00067	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00067	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        }<\/div>$/;"	a
l00067	html/locks_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        <span class="comment">\/\/Must test again, might have intervening write BEFORE monitor (so we would get stuck in mwait)<\/span><\/div>$/;"	a
l00067	html/log_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="keyword">extern<\/span> FILE* logFdErr;<\/div>$/;"	a
l00067	html/mc_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    uint32_t existInTB(Address tag);<\/div>$/;"	a
l00067	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        <span class="keywordtype">double<\/span> maxRequestsPerCycle;<\/div>$/;"	a
l00067	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div>$/;"	a
l00067	html/mtrand_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="comment">\/\/ LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR<\/span><\/div>$/;"	a
l00067	html/mutex_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;            that.release();<\/div>$/;"	a
l00067	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;            static_assert(LB &gt;= NB, <span class="stringliteral">&quot;Too few PHT entries (you&#39;ll need more XOR&#39;ing)&quot;<\/span>);<\/div>$/;"	a
l00067	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div>$/;"	a
l00067	html/page__placement_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keywordtype">double<\/span> _sample_rate;<\/div>$/;"	a
l00067	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        uint32_t totalSize;<\/div>$/;"	a
l00067	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00067	html/partitioner_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00067	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;                uint64_t respCycle;<\/div>$/;"	a
l00067	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div>$/;"	a
l00067	html/process__tree_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;                        <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;bool&gt;<\/a>&amp; _mask, <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;uint64_t&gt;<\/a>&amp; _ffiPoints, <span class="keyword">const<\/span> g_string&amp; _syscallBlacklistRegex, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>*_patchRoot)<\/div>$/;"	a
l00067	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;            <span class="keywordflow">return<\/span> totalNs + (startNs? (getNs() - startNs) : 0);<\/div>$/;"	a
l00067	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="comment">\/* Legacy support.<\/span><\/div>$/;"	a
l00067	html/scheduler_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;            OUT, <span class="comment">\/\/in leave() this phase, can rejoin immediately<\/span><\/div>$/;"	a
l00067	html/simple__core_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> StoreFunc(THREADID tid, ADDRINT addr);<\/div>$/;"	a
l00067	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keywordtype">void<\/span> clear() {<\/div>$/;"	a
l00067	html/stats_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="comment"> * This design was definitely influenced by the M5 stats facilities, however,<\/span><\/div>$/;"	a
l00067	html/tick__event_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div>$/;"	a
l00067	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        <span class="keywordtype">void<\/span> simulateMissResponse(<a class="code" href="classMissResponseEvent.html">MissResponseEvent<\/a>* ev, uint64_t cycle, <a class="code" href="classMissStartEvent.html">MissStartEvent<\/a>* mse);<\/div>$/;"	a
l00067	html/timing__core_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<\/div>$/;"	a
l00067	html/timing__event_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno"><a class="line" href="classTimingEvent.html">   67<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTimingEvent.html">TimingEvent<\/a> {<\/div>$/;"	a
l00067	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00067	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00067	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;            uint64_t realRespCycle = MD1Memory::access(req);<\/div>$/;"	a
l00067	html/zsim_8h_source.html	/^<div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;};<\/div>$/;"	a
l00068	html/Callback_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    {<\/div>$/;"	a
l00068	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div>$/;"	a
l00068	html/barrier_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        uint32_t parallelThreads;<\/div>$/;"	a
l00068	html/bithacks_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="comment"> * output type is the first arg&#39;s type (e.g., returns 3)<\/span><\/div>$/;"	a
l00068	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;            uint64_t curCycle = MAX(lastCycle, zinfo-&gt;globPhaseCycles);<\/div>$/;"	a
l00068	html/cache_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="comment">\/\/NOTE: reqWriteback is pulled up to true, but not pulled down to false.<\/span><\/div>$/;"	a
l00068	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00068	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="comment"> *  - The TOP controller, which keeps state of lines w.r.t. lower levels of the hierarchy (e.g. sharer lists),<\/span><\/div>$/;"	a
l00068	html/config_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="comment">\/\/ Optional values (default)<\/span><\/div>$/;"	a
l00068	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;            PAD();<\/div>$/;"	a
l00068	html/core_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        uint64_t lastUpdateInstrs;<\/div>$/;"	a
l00068	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div>$/;"	a
l00068	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;            <span class="keywordflow">if<\/span> (i == cid) <span class="keywordflow">return<\/span> count;<\/div>$/;"	a
l00068	html/cpuid_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    {0x80000006, 0000000000, 0000000000, 0000000000, 0x10008040, 0000000000},<\/div>$/;"	a
l00068	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;                cur = dec(cur);<\/div>$/;"	a
l00068	html/decoder_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div>$/;"	a
l00068	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div>$/;"	a
l00068	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="keywordtype">bool<\/span> anyReport;<\/div>$/;"	a
l00068	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div>$/;"	a
l00068	html/event__queue_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;                assert(cur - target &lt;= maxRate); <span class="comment">\/\/otherwise, maxRate was wrong...<\/span><\/div>$/;"	a
l00068	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <a class="code" href="classEventRecorder.html">EventRecorder<\/a>() {<\/div>$/;"	a
l00068	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        g_unordered_map &lt;Address, Address&gt; _tlb;<\/div>$/;"	a
l00068	html/galloc_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno"><a class="line" href="classGlobAlloc.html">   68<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00068	html/hash_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div>$/;"	a
l00068	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        ProxyReplPolicy* rp;<\/div>$/;"	a
l00068	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        p-&gt;next = <span class="keyword">static_cast&lt;<\/span>T*<span class="keyword">&gt;<\/span>(<span class="keyword">this<\/span>);<\/div>$/;"	a
l00068	html/locks_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="keywordflow">if<\/span> (*lock) {<\/div>$/;"	a
l00068	html/log_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div>$/;"	a
l00068	html/mc_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    uint32_t getNumWays() { <span class="keywordflow">return<\/span> _num_ways; };<\/div>$/;"	a
l00068	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="keywordtype">double<\/span> smoothedPhaseAccesses;<\/div>$/;"	a
l00068	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="comment">\/\/Convenience methods for clearer debug traces<\/span><\/div>$/;"	a
l00068	html/mtrand_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="comment">\/\/ CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF<\/span><\/div>$/;"	a
l00068	html/mutex_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        }<\/div>$/;"	a
l00068	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        }<\/div>$/;"	a
l00068	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="comment">\/\/ Future response tracking<\/span><\/div>$/;"	a
l00068	html/page__placement_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    uint32_t _access_count_threshold;<\/div>$/;"	a
l00068	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        uint32_t waySize;<\/div>$/;"	a
l00068	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classProcessPartMapper.html">ProcessPartMapper<\/a>(uint32_t _numProcs) : numProcs(_numProcs) {}<\/div>$/;"	a
l00068	html/partitioner_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <a class="code" href="classLookaheadPartitioner.html">LookaheadPartitioner<\/a>(<a class="code" href="classPartReplPolicy.html">PartReplPolicy<\/a>* _repl, uint32_t _numPartitions, uint32_t _buckets,<\/div>$/;"	a
l00068	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div>$/;"	a
l00068	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    FEMap feMap;<\/div>$/;"	a
l00068	html/process__tree_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;            : patchRoot(_patchRoot), procIdx(_procIdx), groupIdx(_groupIdx), curChildren(0), heartbeats(0), started(<span class="keyword">false<\/span>), inFastForward(_inFastForward),<\/div>$/;"	a
l00068	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        }<\/div>$/;"	a
l00068	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="comment"> * - On each replacement, the controller first calls startReplacement(), indicating the line that will be inserted;<\/span><\/div>$/;"	a
l00068	html/scheduler_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;            BLOCKED, <span class="comment">\/\/inside a system call, no cid assigned, not in the barrier or the runqueue<\/span><\/div>$/;"	a
l00068	html/simple__core_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> BblFunc(THREADID tid, ADDRINT bblAddr, <a class="code" href="structBblInfo.html">BblInfo<\/a>* bblInfo);<\/div>$/;"	a
l00068	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        liveElems = 0;<\/div>$/;"	a
l00068	html/stats_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="comment"> * it is significantly simpler, doesn&#39;t use templates or has formula support,<\/span><\/div>$/;"	a
l00068	html/tick__event_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">#endif  \/\/ TICK_EVENT_H_<\/span><\/div>$/;"	a
l00068	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <span class="keywordtype">void<\/span> simulateMissWriteback(<a class="code" href="classMissWritebackEvent.html">MissWritebackEvent<\/a>* ev, uint64_t cycle, <a class="code" href="classMissStartEvent.html">MissStartEvent<\/a>* mse);<\/div>$/;"	a
l00068	html/timing__core_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00068	html/timing__event_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00068	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <a class="code" href="classTraceDriver.html#ae708770486c6440a8eb8701ffd6fad50">TraceDriver<\/a>(std::string filename, std::string retracefile, std::vector&lt;TraceDriverProxyCache*&gt;&amp; proxies, <span class="keywordtype">bool<\/span> _useSkews, <span class="keywordtype">bool<\/span> _playPuts, <span class="keywordtype">bool<\/span> _playAllGets);<\/div>$/;"	a
l00068	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;        <a class="code" href="classUMon.html">UMon<\/a>(uint32_t _bankLines, uint32_t _umonLines, uint32_t _buckets);<\/div>$/;"	a
l00068	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;            uint32_t realLatency = realRespCycle - req.cycle;<\/div>$/;"	a
l00068	html/zsim_8h_source.html	/^<div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div>$/;"	a
l00069	html/Callback_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    }<\/div>$/;"	a
l00069	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <span class="keyword">inline<\/span> <a class="code" href="structAccessRecord.html">AccessRecord<\/a> read() {<\/div>$/;"	a
l00069	html/barrier_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div>$/;"	a
l00069	html/bithacks_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00069	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;            <span class="keywordflow">return<\/span> partial + ((idx == curState)? (curCycle - lastCycle) : 0);<\/div>$/;"	a
l00069	html/cache_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t invalidate(<span class="keyword">const<\/span> <a class="code" href="structInvReq.html">InvReq<\/a>&amp; req) {<\/div>$/;"	a
l00069	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <a class="code" href="classSetAssocArray.html#ae940b9d5ab4c189c406c01afe01e0186">SetAssocArray<\/a>(uint32_t _numLines, uint32_t _assoc, <a class="code" href="classReplPolicy.html">ReplPolicy<\/a>* _rp, <a class="code" href="classHashFamily.html">HashFamily<\/a>* _hf);<\/div>$/;"	a
l00069	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="comment"> *    and issues requests (invalidates) to lower levels.<\/span><\/div>$/;"	a
l00069	html/config_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; T <span class="keyword">get<\/span>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* key, T def);<\/div>$/;"	a
l00069	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div>$/;"	a
l00069	html/core_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div>$/;"	a
l00069	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00069	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;            <span class="keywordflow">if<\/span> (mask[i]) count++;<\/div>$/;"	a
l00069	html/cpuid_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    {0x80000007, 0000000000, 0000000000, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00069	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;                <span class="keywordflow">if<\/span> (cur == idx) <span class="keywordflow">break<\/span>;  <span class="comment">\/\/ we&#39;re the oldest in the window<\/span><\/div>$/;"	a
l00069	html/decoder_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="keyword">static<\/span> uint32_t bytes(uint32_t uops) {<\/div>$/;"	a
l00069	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        uint64_t idlePowerDownCycle;<\/div>$/;"	a
l00069	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <span class="keywordtype">bool<\/span> accAvgPowerReport;<\/div>$/;"	a
l00069	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00069	html/event__queue_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;                fire();<\/div>$/;"	a
l00069	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;            tr.clear();<\/div>$/;"	a
l00069	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        g_unordered_set &lt;Address&gt; _exist_pgnum; <\/div>$/;"	a
l00069	html/galloc_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00069	html/hash_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="preprocessor">#endif  \/\/ HASH_H_<\/span><\/div>$/;"	a
l00069	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <a class="code" href="classCC.html">CC<\/a>* cc;<\/div>$/;"	a
l00069	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        prev = p;<\/div>$/;"	a
l00069	html/locks_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;            _mm_mwait(0, 0);<\/div>$/;"	a
l00069	html/log_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="comment">\/* Set per-process header for log\/info\/warn\/panic messages<\/span><\/div>$/;"	a
l00069	html/mc_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div>$/;"	a
l00069	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        uint32_t zeroLoadLatency;<\/div>$/;"	a
l00069	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* AccessTypeName(AccessType t);<\/div>$/;"	a
l00069	html/mtrand_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="comment">\/\/ SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS<\/span><\/div>$/;"	a
l00069	html/mutex_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div>$/;"	a
l00069	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div>$/;"	a
l00069	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <span class="keyword">struct <\/span>FutureResponse {<\/div>$/;"	a
l00069	html/page__placement_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    uint32_t _max_count_size;<\/div>$/;"	a
l00069	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        uint32_t ways;<\/div>$/;"	a
l00069	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getNumPartitions() {<span class="keywordflow">return<\/span> numProcs;}<\/div>$/;"	a
l00069	html/partitioner_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;                             uint32_t _minAlloc = 1, <span class="keywordtype">double<\/span> _allocPortion = 1.0, <span class="keywordtype">bool<\/span>* _forbidden = <span class="keyword">nullptr<\/span>);<\/div>$/;"	a
l00069	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;                <span class="keywordtype">void<\/span> fill(uint32_t s, uint64_t r) { startCycle = s; respCycle = r; }<\/div>$/;"	a
l00069	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div>$/;"	a
l00069	html/process__tree_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;              inPause(_inPause), restartsLeft(_restarts), syncedFastForward(_syncedFastForward), clockDomain(_clockDomain), portDomain(_portDomain), dumpHeartbeats(_dumpHeartbeats), dumpsResetHeartbeats(_dumpsResetHeartbeats), mask(_mask), ffiPoints(_ffiPoints), syscallBlacklistRegex(_syscallBlacklistRegex) {}<\/div>$/;"	a
l00069	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;};<\/div>$/;"	a
l00069	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="comment"> *   then it calls recordCandidate() for each candidate it finds; finally, it calls getBestCandidate() to get the<\/span><\/div>$/;"	a
l00069	html/scheduler_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;            SLEEPING, <span class="comment">\/\/inside a patched sleep syscall; no cid assigned, in sleepQueue; it is our responsibility to wake this thread up when its deadline arrives<\/span><\/div>$/;"	a
l00069	html/simple__core_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> PredLoadFunc(THREADID tid, ADDRINT addr, BOOL pred);<\/div>$/;"	a
l00069	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        usedBytes = 0;<\/div>$/;"	a
l00069	html/stats_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="comment"> * and has an emphasis on fixed-size records for periodic stats.<\/span><\/div>$/;"	a
l00069	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <span class="keywordtype">void<\/span> simulateReplAccess(<a class="code" href="classReplAccessEvent.html">ReplAccessEvent<\/a>* ev, uint64_t cycle);<\/div>$/;"	a
l00069	html/timing__core_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> loadAndRecord(Address addr);<\/div>$/;"	a
l00069	html/timing__event_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        uint64_t privCycle; <span class="comment">\/\/only touched by ContentionSim<\/span><\/div>$/;"	a
l00069	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00069	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00069	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<\/div>$/;"	a
l00069	html/zsim_8h_source.html	/^<div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="keyword">enum<\/span> ProcExitStatus {<\/div>$/;"	a
l00070	html/Callback_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div>$/;"	a
l00070	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;            assert(cur &lt; max);<\/div>$/;"	a
l00070	html/barrier_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <span class="keyword">enum<\/span> State {OFFLINE, WAITING, RUNNING, LEFT};<\/div>$/;"	a
l00070	html/bithacks_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">static<\/span> <span class="keyword">inline<\/span> T maxN(T a) { <span class="keywordflow">return<\/span> a; }<\/div>$/;"	a
l00070	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        }<\/div>$/;"	a
l00070	html/cache_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;            startInvalidate();<\/div>$/;"	a
l00070	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div>$/;"	a
l00070	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="comment"> * The naming scheme is PROTOCOL-CENTRIC, i.e. if you draw a multi-level hierarchy, between each pair of levels<\/span><\/div>$/;"	a
l00070	html/config_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; T <span class="keyword">get<\/span>(<span class="keyword">const<\/span> std::string&amp; key, T def) {<span class="keywordflow">return<\/span> get&lt;T&gt;(key.c_str(), def);}<\/div>$/;"	a
l00070	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;            <span class="keyword">volatile<\/span> uint64_t curCycle;<\/div>$/;"	a
l00070	html/core_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00070	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <a class="code" href="classCoreRecorder.html">CoreRecorder<\/a>(uint32_t _domain, g_string&amp; _name);<\/div>$/;"	a
l00070	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        }<\/div>$/;"	a
l00070	html/cpuid_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    {0x80000008, 0000000000, 0x00003024, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00070	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;            }<\/div>$/;"	a
l00070	html/decoder_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <span class="keywordflow">return<\/span> offsetof(<a class="code" href="structDynBbl.html">DynBbl<\/a>, uop) + <span class="keyword">sizeof<\/span>(<a class="code" href="structDynUop.html">DynUop<\/a>)*uops <span class="comment">\/*wtf... offsetof doesn&#39;t work with uop[uops]*\/<\/span>;<\/div>$/;"	a
l00070	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        uint64_t actvPowerDownCycle;<\/div>$/;"	a
l00070	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <span class="keywordtype">bool<\/span> curAvgPowerReport;<\/div>$/;"	a
l00070	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div>$/;"	a
l00070	html/event__queue_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;                period = 0; <span class="comment">\/\/event queue will dispose of us<\/span><\/div>$/;"	a
l00070	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        }<\/div>$/;"	a
l00070	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00070	html/galloc_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <span class="keyword">virtual<\/span> ~<a class="code" href="classGlobAlloc.html">GlobAlloc<\/a>() {}<\/div>$/;"	a
l00070	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div>$/;"	a
l00070	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        owner = lst;<\/div>$/;"	a
l00070	html/locks_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        }<\/div>$/;"	a
l00070	html/log_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="comment"> * Calling this is not needed (the default header is &quot;&quot;),<\/span><\/div>$/;"	a
l00070	html/mc_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="comment">\/\/ return: if the address can be inserted to tag buffer or not.<\/span><\/div>$/;"	a
l00070	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        uint32_t curLatency;<\/div>$/;"	a
l00070	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* InvTypeName(InvType t);<\/div>$/;"	a
l00070	html/mtrand_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="comment">\/\/ INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN<\/span><\/div>$/;"	a
l00070	html/mutex_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <a class="code" href="classscoped__mutex.html">scoped_mutex<\/a>()<\/div>$/;"	a
l00070	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <span class="comment">\/\/ Predicts and updates; returns false if mispredicted<\/span><\/div>$/;"	a
l00070	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;            uint64_t zllStartCycle;<\/div>$/;"	a
l00070	html/page__placement_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordtype">bool<\/span> _enable_replace;<\/div>$/;"	a
l00070	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div>$/;"	a
l00070	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getPartition(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00070	html/partitioner_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <span class="keywordtype">void<\/span> partition();<\/div>$/;"	a
l00070	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;            };<\/div>$/;"	a
l00070	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    uint64_t curBlock;<\/div>$/;"	a
l00070	html/process__tree_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div>$/;"	a
l00070	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div>$/;"	a
l00070	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="comment"> *   line chosen for eviction. When the replacement is done, replaced() is called. The division of getBestCandidate()<\/span><\/div>$/;"	a
l00070	html/scheduler_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;            QUEUED <span class="comment">\/\/in the runqueue<\/span><\/div>$/;"	a
l00070	html/simple__core_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> PredStoreFunc(THREADID tid, ADDRINT addr, BOOL pred);<\/div>$/;"	a
l00070	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    }<\/div>$/;"	a
l00070	html/stats_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00070	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div>$/;"	a
l00070	html/timing__core_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> storeAndRecord(Address addr);<\/div>$/;"	a
l00070	html/timing__event_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div>$/;"	a
l00070	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;        <span class="keywordtype">void<\/span> setParent(<a class="code" href="classMemObject.html">MemObject<\/a>* _parent);<\/div>$/;"	a
l00070	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<\/div>$/;"	a
l00070	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;            uint64_t respCycle = req.cycle + ((req.type == PUTS)? 0 : boundLatency);<\/div>$/;"	a
l00070	html/zsim_8h_source.html	/^<div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    PROC_RUNNING = 0,<\/div>$/;"	a
l00071	html/Callback_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    ReturnT operator()(Param1T param1, Param2T param2, Param3T param3)<\/div>$/;"	a
l00071	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;            <a class="code" href="structPackedAccessRecord.html">PackedAccessRecord<\/a>&amp; pr = buf[cur++];<\/div>$/;"	a
l00071	html/barrier_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/bithacks_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T, <span class="keyword">typename<\/span> U, <span class="keyword">typename<\/span> ... V&gt; <span class="keyword">static<\/span> <span class="keyword">inline<\/span> T maxN(T a, U b, V... c) {<\/div>$/;"	a
l00071	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;};<\/div>$/;"	a
l00071	html/cache_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;            <span class="keywordflow">return<\/span> finishInvalidate(req);<\/div>$/;"	a
l00071	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        int32_t lookup(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, <span class="keywordtype">bool<\/span> updateReplacement);<\/div>$/;"	a
l00071	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="comment"> * there is a top CC at the top and a bottom CC at the bottom. Unfortunately, if you look at the caches, the<\/span><\/div>$/;"	a
l00071	html/config_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;            lock_t pqLock; <span class="comment">\/\/used on phase 1 enqueues<\/span><\/div>$/;"	a
l00071	html/core_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        g_string name;<\/div>$/;"	a
l00071	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        panic(<span class="stringliteral">&quot;Something went horribly wrong with the process masks... are they dynamic now?&quot;<\/span>);<\/div>$/;"	a
l00071	html/cpuid_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    {0x80000009, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00071	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;            buf[cur] = actCycle;<\/div>$/;"	a
l00071	html/decoder_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    }<\/div>$/;"	a
l00071	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        uint64_t idleStandbyCycle;<\/div>$/;"	a
l00071	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        <span class="keywordtype">bool<\/span> bandwidthReport;<\/div>$/;"	a
l00071	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        <span class="comment">\/\/ Record accesses<\/span><\/div>$/;"	a
l00071	html/event__queue_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00071	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        <a class="code" href="classFilterCache.html">FilterCache<\/a>(uint32_t _numSets, uint32_t _numLines, <a class="code" href="classCC.html">CC<\/a>* _cc, <a class="code" href="classCacheArray.html">CacheArray<\/a>* _array,<\/div>$/;"	a
l00071	html/galloc_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00071	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    }<\/div>$/;"	a
l00071	html/locks_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="preprocessor">#else<\/span><\/div>$/;"	a
l00071	html/log_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="comment"> * but it helps in multi-process runs<\/span><\/div>$/;"	a
l00071	html/mc_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keywordtype">bool<\/span> canInsert(Address tag);<\/div>$/;"	a
l00071	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* MESIStateName(MESIState s);<\/div>$/;"	a
l00071	html/mtrand_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="comment">\/\/ CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)<\/span><\/div>$/;"	a
l00071	html/mutex_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;                : mut(0) {}<\/div>$/;"	a
l00071	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> predict(Address branchPc, <span class="keywordtype">bool<\/span> taken) {<\/div>$/;"	a
l00071	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;            <a class="code" href="classOOORespEvent.html">OOORespEvent<\/a>* ev;  <span class="comment">\/\/ may be stale if we&#39;ve gone over zllStartCycle<\/span><\/div>$/;"	a
l00071	html/page__placement_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        <span class="keyword">struct <\/span>WayPartInfo {<\/div>$/;"	a
l00071	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;};<\/div>$/;"	a
l00071	html/partitioner_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    uint64_t elems;<\/div>$/;"	a
l00071	html/process__tree_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        <span class="keywordtype">void<\/span> addChild(<a class="code" href="classProcessTreeNode.html">ProcessTreeNode<\/a>* child) {<\/div>$/;"	a
l00071	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="comment">\/* Implements multi-state time profiling. Always starts at state 0.<\/span><\/div>$/;"	a
l00071	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="comment"> *   and replaced() happens because the former is called in preinsert(), and the latter in postinsert(). Note how the<\/span><\/div>$/;"	a
l00071	html/scheduler_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        };<\/div>$/;"	a
l00071	html/simple__core_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/stats_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00071	html/timing__core_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> bblAndRecord(Address bblAddr, <a class="code" href="structBblInfo.html">BblInfo<\/a>* bblInstrs);<\/div>$/;"	a
l00071	html/timing__event_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00071	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<\/div>$/;"	a
l00071	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;        <span class="keywordtype">void<\/span> access(Address lineAddr);<\/div>$/;"	a
l00071	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;            assert(realRespCycle &gt;= respCycle);<\/div>$/;"	a
l00071	html/zsim_8h_source.html	/^<div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    PROC_EXITED = 1,<\/div>$/;"	a
l00072	html/Callback_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    {<\/div>$/;"	a
l00072	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;            <a class="code" href="structAccessRecord.html">AccessRecord<\/a> rec = {pr.lineAddr, pr.reqCycle, pr.latency, pr.childId, (AccessType) pr.type};<\/div>$/;"	a
l00072	html/barrier_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        <span class="keyword">struct <\/span>ThreadSyncInfo {<\/div>$/;"	a
l00072	html/bithacks_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keywordflow">return<\/span> maxN(((a &gt; b)? a : b), c...);<\/div>$/;"	a
l00072	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div>$/;"	a
l00072	html/cache_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        }<\/div>$/;"	a
l00072	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        uint32_t preinsert(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, Address* wbLineAddr);<\/div>$/;"	a
l00072	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="comment"> * bottom CC is at the top is at the bottom. So the cache class may seem a bit weird at times, but the controller<\/span><\/div>$/;"	a
l00072	html/config_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        <span class="comment">\/\/Get subgroups in a specific key<\/span><\/div>$/;"	a
l00072	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;            <span class="comment">\/\/lock_t domainLock; \/\/used by simulation thread<\/span><\/div>$/;"	a
l00072	html/core_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div>$/;"	a
l00072	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        <span class="comment">\/\/Methods called in the bound phase<\/span><\/div>$/;"	a
l00072	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        <span class="keywordflow">return<\/span> -1;<\/div>$/;"	a
l00072	html/cpuid_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    {0x8000000a, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00072	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div>$/;"	a
l00072	html/decoder_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div>$/;"	a
l00072	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div>$/;"	a
l00072	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        <span class="keywordtype">bool<\/span> addrTrace;<\/div>$/;"	a
l00072	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req, <span class="keywordtype">int<\/span> type, uint32_t data_size = 4);<\/div>$/;"	a
l00072	html/event__queue_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;                period = (target - cur)\/maxRate;<\/div>$/;"	a
l00072	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        <span class="comment">\/\/Alloc interface<\/span><\/div>$/;"	a
l00072	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;                <a class="code" href="classReplPolicy.html">ReplPolicy<\/a>* _rp, uint32_t _accLat, uint32_t _invLat, g_string&amp; _name, <a class="code" href="classConfig.html">Config<\/a> &amp;config)<\/div>$/;"	a
l00072	html/galloc_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span>* <span class="keyword">operator<\/span> <span class="keyword">new<\/span> (<span class="keywordtype">size_t<\/span> sz) {<\/div>$/;"	a
l00072	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classIdealLRUArray.html">IdealLRUArray<\/a>(uint32_t _numLines) : numLines(_numLines), cc(<span class="keyword">nullptr<\/span>) {<\/div>$/;"	a
l00072	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;};<\/div>$/;"	a
l00072	html/locks_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor"><\/span>        <span class="comment">\/\/If we don&#39;t have mwait, we can at least pause<\/span><\/div>$/;"	a
l00072	html/log_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="comment"> * If file is nullptr or InitLog is not called, logs to stdout\/stderr<\/span><\/div>$/;"	a
l00072	html/mc_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keywordtype">bool<\/span> canInsert(Address tag1, Address tag2);<\/div>$/;"	a
l00072	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        PAD();<\/div>$/;"	a
l00072	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div>$/;"	a
l00072	html/mtrand_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="comment">\/\/ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE<\/span><\/div>$/;"	a
l00072	html/mutex_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div>$/;"	a
l00072	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;            uint32_t bhsrMask = (1 &lt;&lt; NB) - 1;<\/div>$/;"	a
l00072	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        };<\/div>$/;"	a
l00072	html/page__placement_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="comment">\/\/ Stats<\/span><\/div>$/;"	a
l00072	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;            Address addr; <span class="comment">\/\/FIXME: This is redundant due to the replacement policy interface<\/span><\/div>$/;"	a
l00072	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div>$/;"	a
l00072	html/partitioner_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00072	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;            <a class="code" href="structStreamPrefetcher_1_1Entry_1_1AccessTimes.html">AccessTimes<\/a> times[64];<\/div>$/;"	a
l00072	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div>$/;"	a
l00072	html/process__tree_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;            children.push_back(child);<\/div>$/;"	a
l00072	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="comment"> * Using this with an enum will help retain your sanity. Does not stop,<\/span><\/div>$/;"	a
l00072	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="comment"> *   same restrictions on concurrent insertions extend to this class, i.e. startReplacement()\/recordCandidate()\/<\/span><\/div>$/;"	a
l00072	html/scheduler_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div>$/;"	a
l00072	html/simple__core_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> BranchFunc(THREADID, ADDRINT, BOOL, ADDRINT, ADDRINT) {}<\/div>$/;"	a
l00072	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <span class="keywordtype">void<\/span>* alloc(uint32_t bytes) {<\/div>$/;"	a
l00072	html/stats_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">#ifndef STATS_H_<\/span><\/div>$/;"	a
l00072	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        uint64_t highPrioAccess(uint64_t cycle);<\/div>$/;"	a
l00072	html/timing__core_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> record(uint64_t startCycle);<\/div>$/;"	a
l00072	html/timing__event_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* next; <span class="comment">\/\/used by PrioQueue --- PRIVATE<\/span><\/div>$/;"	a
l00072	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;        uint64_t invalidate(uint32_t childId, Address lineAddr, InvType type, <span class="keywordtype">bool<\/span>* reqWriteback, uint64_t reqCycle, uint32_t srcId);<\/div>$/;"	a
l00072	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div>$/;"	a
l00072	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;            assert(req.type == PUTS || realLatency &gt;= zeroLoadLatency);<\/div>$/;"	a
l00072	html/zsim_8h_source.html	/^<div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    PROC_RESTARTME  = 2<\/div>$/;"	a
l00073	html/Callback_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        <span class="keywordflow">return<\/span> (const_cast&lt;ConsumerT*&gt;(<span class="keywordtype">object<\/span>)-&gt;*member)<\/div>$/;"	a
l00073	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;            <span class="keywordflow">if<\/span> (unlikely(cur == max)) nextChunk();<\/div>$/;"	a
l00073	html/barrier_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;            <span class="keyword">volatile<\/span> State state;<\/div>$/;"	a
l00073	html/bithacks_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;}<\/div>$/;"	a
l00073	html/breakdown__stats_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="preprocessor">#endif  \/\/ BREAKDOWN_STATS_H_<\/span><\/div>$/;"	a
l00073	html/cache_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div>$/;"	a
l00073	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        <span class="keywordtype">void<\/span> postinsert(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, uint32_t candidate);<\/div>$/;"	a
l00073	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="comment"> * classes make more sense.<\/span><\/div>$/;"	a
l00073	html/config_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        <span class="keywordtype">void<\/span> subgroups(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* key, std::vector&lt;const char*&gt;&amp; grps);<\/div>$/;"	a
l00073	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div>$/;"	a
l00073	html/core_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00073	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        uint64_t notifyJoin(uint64_t curCycle); <span class="comment">\/\/returns th updated curCycle, if it needs updating<\/span><\/div>$/;"	a
l00073	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00073	html/cpuid_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    {0x8000000b, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00073	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;            idx = inc(idx);<\/div>$/;"	a
l00073	html/decoder_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="keywordtype">void<\/span> init(uint64_t _addr, uint32_t _uops, uint32_t _approxInstrs) {<\/div>$/;"	a
l00073	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        uint64_t prevIdlePowerDownCycle;<\/div>$/;"	a
l00073	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div>$/;"	a
l00073	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req); <span class="comment">\/\/ { return access(req, 0, 1); };<\/span><\/div>$/;"	a
l00073	html/event__queue_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;                <span class="keywordflow">if<\/span> (period == 0) period = 1;<\/div>$/;"	a
l00073	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div>$/;"	a
l00073	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;            : <a class="code" href="classCache.html#a398112ee381973ef3777746a31900320">Cache<\/a>(_numLines, _cc, _array, _rp, _accLat, _invLat, _name)<\/div>$/;"	a
l00073	html/galloc_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;            <span class="keywordflow">return<\/span> gm_malloc(sz);<\/div>$/;"	a
l00073	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;            array = gm_calloc&lt;Entry&gt;(numLines);<\/div>$/;"	a
l00073	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div>$/;"	a
l00073	html/locks_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        _mm_pause();<\/div>$/;"	a
l00073	html/log_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00073	html/mc_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="keywordtype">void<\/span> insert(Address tag, <span class="keywordtype">bool<\/span> remap);<\/div>$/;"	a
l00073	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div>$/;"	a
l00073	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> IsGet(AccessType t) { <span class="keywordflow">return<\/span> t == GETS || t == GETX; }<\/div>$/;"	a
l00073	html/mtrand_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="comment">\/\/ POSSIBILITY OF SUCH DAMAGE.<\/span><\/div>$/;"	a
l00073	html/mutex_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        ~<a class="code" href="classscoped__mutex.html">scoped_mutex<\/a>() {<\/div>$/;"	a
l00073	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;            uint32_t histMask = (1 &lt;&lt; HB) - 1;<\/div>$/;"	a
l00073	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div>$/;"	a
l00073	html/page__placement_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    uint64_t * _histogram;<\/div>$/;"	a
l00073	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;            uint64_t ts; <span class="comment">\/\/timestamp, &gt;0 if in the cache, == 0 if line is empty<\/span><\/div>$/;"	a
l00073	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno"><a class="line" href="classInstrDataProcessPartMapper.html">   73<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classInstrDataProcessPartMapper.html">InstrDataProcessPartMapper<\/a> : <span class="keyword">public<\/span> <a class="code" href="classPartMapper.html">PartMapper<\/a> {<\/div>$/;"	a
l00073	html/partitioner_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        <a class="code" href="classPartReplPolicy.html">PartReplPolicy<\/a>* repl;<\/div>$/;"	a
l00073	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;            std::bitset&lt;64&gt; valid;<\/div>$/;"	a
l00073	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00073	html/process__tree_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        }<\/div>$/;"	a
l00073	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="comment"> * so just transition to a dummy state if you want to stop profiling.<\/span><\/div>$/;"	a
l00073	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="comment"> *   getBestCandidate() will be atomic, but there may be intervening update() calls between getBestCandidate() and<\/span><\/div>$/;"	a
l00073	html/scheduler_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        <span class="keyword">enum<\/span> ContextState {<\/div>$/;"	a
l00073	html/simple__core_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;}  ATTR_LINE_ALIGNED; <span class="comment">\/\/This needs to take up a whole cache line, or false sharing will be extremely frequent<\/span><\/div>$/;"	a
l00073	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="preprocessor">#if 1 \/\/no effort to align, but objs are a multiple of 8 bytes, so all allocs are as well<\/span><\/div>$/;"	a
l00073	html/stats_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define STATS_H_<\/span><\/div>$/;"	a
l00073	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        uint64_t tryLowPrioAccess(uint64_t cycle);<\/div>$/;"	a
l00073	html/timing__core_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div>$/;"	a
l00073	html/timing__event_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div>$/;"	a
l00073	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div>$/;"	a
l00073	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;        uint64_t getNumAccesses() <span class="keyword">const<\/span>;<\/div>$/;"	a
l00073	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div>$/;"	a
l00073	html/zsim_8h_source.html	/^<div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;};<\/div>$/;"	a
l00074	html/Callback_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;               (param1,param2,param3);<\/div>$/;"	a
l00074	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;            <span class="keywordflow">return<\/span> rec;<\/div>$/;"	a
l00074	html/barrier_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;            <span class="keyword">volatile<\/span> uint32_t futexWord;<\/div>$/;"	a
l00074	html/bithacks_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div>$/;"	a
l00074	html/cache_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00074	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;};<\/div>$/;"	a
l00074	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00074	html/config_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="keywordtype">void<\/span> subgroups(<span class="keyword">const<\/span> std::string&amp; key, std::vector&lt;const char*&gt;&amp; grps) {subgroups(key.c_str(), grps);}<\/div>$/;"	a
l00074	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;            uint32_t prio;<\/div>$/;"	a
l00074	html/core_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classCore.html">Core<\/a>(g_string&amp; _name) : lastUpdateCycles(0), lastUpdateInstrs(0), name(_name) {}<\/div>$/;"	a
l00074	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="keywordtype">void<\/span> notifyLeave(uint64_t curCycle);<\/div>$/;"	a
l00074	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="keywordflow">if<\/span> (cid &gt; zinfo-&gt;numCores) {  <span class="comment">\/\/ not scheduled<\/span><\/div>$/;"	a
l00074	html/cpuid_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    {0x8000000c, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00074	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        }<\/div>$/;"	a
l00074	html/decoder_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="comment">\/\/ NOTE: this is a POD type, so we don&#39;t need to call a constructor; otherwise, we should use placement new<\/span><\/div>$/;"	a
l00074	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        uint64_t prevActvPowerDownCycle;<\/div>$/;"	a
l00074	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="comment">\/\/ Memory Controller Parameter<\/span><\/div>$/;"	a
l00074	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div>$/;"	a
l00074	html/event__queue_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;            }<\/div>$/;"	a
l00074	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div>$/;"	a
l00074	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        {<\/div>$/;"	a
l00074	html/galloc_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        }<\/div>$/;"	a
l00074	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; numLines; i++) {<\/div>$/;"	a
l00074	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div>$/;"	a
l00074	html/locks_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00074	html/log_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="keywordtype">void<\/span> InitLog(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* header, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* file = <span class="keyword">nullptr<\/span>);<\/div>$/;"	a
l00074	html/mc_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="keywordtype">double<\/span> getOccupancy() { <span class="keywordflow">return<\/span> 1.0 * _entry_occupied \/ _num_ways \/ _num_sets; };<\/div>$/;"	a
l00074	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profReads;<\/div>$/;"	a
l00074	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> IsPut(AccessType t) { <span class="keywordflow">return<\/span> t == PUTS || t == PUTX; }<\/div>$/;"	a
l00074	html/mtrand_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div>$/;"	a
l00074	html/mutex_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;            <span class="keywordflow">if<\/span> (mut) mut-&gt;unlock();<\/div>$/;"	a
l00074	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;            uint32_t phtMask  = (1 &lt;&lt; LB) - 1;<\/div>$/;"	a
l00074	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="keyword">struct <\/span>CompareRespEvents : <span class="keyword">public<\/span> std::binary_function&lt;const FutureResponse&amp;, const FutureResponse&amp;, bool&gt; {<\/div>$/;"	a
l00074	html/page__placement_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    uint64_t _num_counter_read;<\/div>$/;"	a
l00074	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;            uint32_t p;<\/div>$/;"	a
l00074	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00074	html/partitioner_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        uint32_t numPartitions;<\/div>$/;"	a
l00074	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div>$/;"	a
l00074	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <a class="code" href="classPrioQueue.html">PrioQueue<\/a>() {<\/div>$/;"	a
l00074	html/process__tree_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div>$/;"	a
l00074	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="comment"> * count() accounts for partial time in current state; count() is used<\/span><\/div>$/;"	a
l00074	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="comment"> *   replaced().<\/span><\/div>$/;"	a
l00074	html/scheduler_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;            IDLE,<\/div>$/;"	a
l00074	html/simple__core_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div>$/;"	a
l00074	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="preprocessor"><\/span>        <span class="keywordtype">char<\/span>* ptr = buf + usedBytes;<\/div>$/;"	a
l00074	html/stats_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00074	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;};<\/div>$/;"	a
l00074	html/timing__core_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> LoadAndRecordFunc(THREADID tid, ADDRINT addr);<\/div>$/;"	a
l00074	html/timing__event_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00074	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="comment">\/\/Returns false if done, true otherwise<\/span><\/div>$/;"	a
l00074	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;        <span class="keywordtype">void<\/span> getMisses(uint64_t* misses);<\/div>$/;"	a
l00074	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;            <span class="keywordflow">if<\/span> ((req.type != PUTS) &amp;&amp; zinfo-&gt;eventRecorders[req.srcId]) {<\/div>$/;"	a
l00074	html/zsim_8h_source.html	/^<div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div>$/;"	a
l00075	html/Callback_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    }<\/div>$/;"	a
l00075	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        }<\/div>$/;"	a
l00075	html/barrier_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;            uint32_t lastIdx;<\/div>$/;"	a
l00075	html/bithacks_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">static<\/span> <span class="keyword">inline<\/span> T minN(T a) { <span class="keywordflow">return<\/span> a; }<\/div>$/;"	a
l00075	html/cache_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        <span class="keywordtype">void<\/span> initCacheStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* cacheStat);<\/div>$/;"	a
l00075	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div>$/;"	a
l00075	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div>$/;"	a
l00075	html/config_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div>$/;"	a
l00075	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;            uint64_t queuePrio;<\/div>$/;"	a
l00075	html/core_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div>$/;"	a
l00075	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div>$/;"	a
l00075	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;            <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;bool&gt;<\/a>&amp; mask = zinfo-&gt;procArray[pid]-&gt;getMask();<\/div>$/;"	a
l00075	html/cpuid_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    {0x8000000d, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00075	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div>$/;"	a
l00075	html/decoder_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        uops = _uops;<\/div>$/;"	a
l00075	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        uint64_t prevIdleStandbyCycle;<\/div>$/;"	a
l00075	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        uint32_t totalCapacity; <span class="comment">\/\/ mega byte<\/span><\/div>$/;"	a
l00075	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        <span class="comment">\/\/ Event-driven simulation (phase 2)<\/span><\/div>$/;"	a
l00075	html/event__queue_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        }<\/div>$/;"	a
l00075	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        T* alloc() {<\/div>$/;"	a
l00075	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;            numSets = _numSets;<\/div>$/;"	a
l00075	html/galloc_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div>$/;"	a
l00075	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;                Entry* e = <span class="keyword">new<\/span> (&amp;array[i]) Entry(i);<\/div>$/;"	a
l00075	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classInList.html">InList<\/a> {<\/div>$/;"	a
l00075	html/locks_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor"><\/span>    }<\/div>$/;"	a
l00075	html/log_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div>$/;"	a
l00075	html/mc_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    <span class="keywordtype">void<\/span> clearTagBuffer();<\/div>$/;"	a
l00075	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profWrites;<\/div>$/;"	a
l00075	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div>$/;"	a
l00075	html/mtrand_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="comment">\/\/ The original code included the following notice:<\/span><\/div>$/;"	a
l00075	html/mutex_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        }<\/div>$/;"	a
l00075	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div>$/;"	a
l00075	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;            <span class="keywordtype">bool<\/span> operator()(<span class="keyword">const<\/span> FutureResponse&amp; lhs, <span class="keyword">const<\/span> FutureResponse&amp; rhs) <span class="keyword">const<\/span>;<\/div>$/;"	a
l00075	html/page__placement_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    uint64_t _num_counter_write;<\/div>$/;"	a
l00075	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        };<\/div>$/;"	a
l00075	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        uint32_t numProcs;<\/div>$/;"	a
l00075	html/partitioner_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        uint32_t buckets;<\/div>$/;"	a
l00075	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;            <span class="comment">\/\/ Weave-phase end-of-access event. Used to avoid early responses with weave models.<\/span><\/div>$/;"	a
l00075	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;            curBlock = 0;<\/div>$/;"	a
l00075	html/process__tree_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        <a class="code" href="classProcessTreeNode.html">ProcessTreeNode<\/a>* getNextChild() {<\/div>$/;"	a
l00075	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="comment"> * because we extend VectorCounter (TODO: we should have a VectorStat)<\/span><\/div>$/;"	a
l00075	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00075	html/scheduler_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;            USED<\/div>$/;"	a
l00075	html/simple__core_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor">#endif  \/\/ SIMPLE_CORE_H_<\/span><\/div>$/;"	a
l00075	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        usedBytes += bytes;<\/div>$/;"	a
l00075	html/stats_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="comment">\/* TODO: I want these to be POD types, but polymorphism (needed by dynamic_cast) probably disables it. Dang. *\/<\/span><\/div>$/;"	a
l00075	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<\/div>$/;"	a
l00075	html/timing__core_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> StoreAndRecordFunc(THREADID tid, ADDRINT addr);<\/div>$/;"	a
l00075	html/timing__event_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        EventState state;<\/div>$/;"	a
l00075	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        <span class="keywordtype">bool<\/span> executePhase();<\/div>$/;"	a
l00075	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;        <span class="keywordtype">void<\/span> startNextInterval();<\/div>$/;"	a
l00075	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;                <a class="code" href="classWeaveMemAccEvent.html">WeaveMemAccEvent<\/a>* memEv = <span class="keyword">new<\/span> (zinfo-&gt;eventRecorders[req.srcId]) <a class="code" href="classWeaveMemAccEvent.html">WeaveMemAccEvent<\/a>(realLatency-zeroLoadLatency, domain, preDelay, postDelay);<\/div>$/;"	a
l00075	html/zsim_8h_source.html	/^<div class="line"><a name="l00075"><\/a><span class="lineno"><a class="line" href="structGlobSimInfo.html">   75<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structGlobSimInfo.html">GlobSimInfo<\/a> {<\/div>$/;"	a
l00076	html/Callback_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div>$/;"	a
l00076	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div>$/;"	a
l00076	html/barrier_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;            uint32_t pad;<\/div>$/;"	a
l00076	html/bithacks_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T, <span class="keyword">typename<\/span> U, <span class="keyword">typename<\/span> ... V&gt; <span class="keyword">static<\/span> <span class="keyword">inline<\/span> T minN(T a, U b, V... c) {<\/div>$/;"	a
l00076	html/cache_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div>$/;"	a
l00076	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="comment">\/* The cache array that started this simulator :) *\/<\/span><\/div>$/;"	a
l00076	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCache.html">Cache<\/a>;<\/div>$/;"	a
l00076	html/config_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00076	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div>$/;"	a
l00076	html/core_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t getInstrs() <span class="keyword">const<\/span> = 0; <span class="comment">\/\/ typically used to find out termination conditions or dumps<\/span><\/div>$/;"	a
l00076	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        <span class="comment">\/\/This better be inlined 100% of the time, it&#39;s called on EVERY access<\/span><\/div>$/;"	a
l00076	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; mask.size(); i++) {<\/div>$/;"	a
l00076	html/cpuid_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    {0x8000000e, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00076	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00076	html/decoder_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        approxInstrs = _approxInstrs;<\/div>$/;"	a
l00076	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div>$/;"	a
l00076	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        uint32_t channelCount;<\/div>$/;"	a
l00076	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        uint32_t tick(uint64_t cycle);<\/div>$/;"	a
l00076	html/event__queue_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;};<\/div>$/;"	a
l00076	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;            <span class="keywordflow">return<\/span> slabAlloc.alloc&lt;T&gt;();<\/div>$/;"	a
l00076	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;            setMask = numSets - 1;<\/div>$/;"	a
l00076	html/galloc_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        <span class="comment">\/\/Placement new<\/span><\/div>$/;"	a
l00076	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;                lruList.push_front(e);<\/div>$/;"	a
l00076	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00076	html/locks_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;}<\/div>$/;"	a
l00076	html/log_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="comment">\/* Helper class to print expression with values<\/span><\/div>$/;"	a
l00076	html/mc_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keywordtype">void<\/span> setClearTime(uint64_t time) { _last_clear_time = time; };<\/div>$/;"	a
l00076	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profTotalRdLat;<\/div>$/;"	a
l00076	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div>$/;"	a
l00076	html/mtrand_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00076	html/mutex_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div>$/;"	a
l00076	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;            <span class="comment">\/\/ Predict<\/span><\/div>$/;"	a
l00076	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        };<\/div>$/;"	a
l00076	html/page__placement_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    uint64_t _num_empty_replace;<\/div>$/;"	a
l00076	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div>$/;"	a
l00076	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00076	html/partitioner_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        uint32_t* curAllocs;<\/div>$/;"	a
l00076	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;            <span class="comment">\/\/ Self-cleaning (PrefetchResponseEvent sets this to nullptr when it fires),<\/span><\/div>$/;"	a
l00076	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;            elems = 0;<\/div>$/;"	a
l00076	html/process__tree_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;            <span class="keywordflow">if<\/span> (curChildren == children.size()) { <span class="comment">\/\/allocate a new child<\/span><\/div>$/;"	a
l00076	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00076	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno"><a class="line" href="classLegacyReplPolicy.html">   76<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classLegacyReplPolicy.html">LegacyReplPolicy<\/a> : <span class="keyword">public<\/span> <span class="keyword">virtual<\/span> <a class="code" href="classReplPolicy.html">ReplPolicy<\/a> {<\/div>$/;"	a
l00076	html/scheduler_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        };<\/div>$/;"	a
l00076	html/simple__core_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00076	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor">#else \/\/align to some block size --- performs worse in my analysis, the loss in locality does not compensate<\/span><\/div>$/;"	a
l00076	html/stats_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div>$/;"	a
l00076	html/timing__cache_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor">#endif  \/\/ TIMING_CACHE_H_<\/span><\/div>$/;"	a
l00076	html/timing__core_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> BblAndRecordFunc(THREADID tid, ADDRINT bblAddr, <a class="code" href="structBblInfo.html">BblInfo<\/a>* bblInfo);<\/div>$/;"	a
l00076	html/timing__event_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;        uint64_t cycle;<\/div>$/;"	a
l00076	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div>$/;"	a
l00076	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<\/div>$/;"	a
l00076	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;                memEv-&gt;setMinStartCycle(req.cycle);<\/div>$/;"	a
l00076	html/zsim_8h_source.html	/^<div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="comment">\/\/System configuration values, all read-only, set at initialization<\/span><\/div>$/;"	a
l00077	html/Callback_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="keyword">private<\/span>:<\/div>$/;"	a
l00077	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00077	html/barrier_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        };<\/div>$/;"	a
l00077	html/bithacks_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordflow">return<\/span> minN(((a &lt; b)? a : b), c...);<\/div>$/;"	a
l00077	html/cache_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        <span class="keywordtype">void<\/span> startInvalidate(); <span class="comment">\/\/ grabs cc&#39;s downLock<\/span><\/div>$/;"	a
l00077	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno"><a class="line" href="classZArray.html">   77<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classZArray.html">ZArray<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCacheArray.html">CacheArray<\/a> {<\/div>$/;"	a
l00077	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classNetwork.html">Network<\/a>;<\/div>$/;"	a
l00077	html/config_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; T genericGet(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* key);<\/div>$/;"	a
l00077	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;            PAD();<\/div>$/;"	a
l00077	html/core_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t getPhaseCycles() <span class="keyword">const<\/span> = 0; <span class="comment">\/\/ used by RDTSC faking --- we need to know how far along we are in the phase, but not the total number of phases<\/span><\/div>$/;"	a
l00077	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> record(uint64_t startCycle) {<\/div>$/;"	a
l00077	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;                <span class="keywordflow">if<\/span> (mask[i]) <span class="keywordflow">return<\/span> i;  <span class="comment">\/\/ first core that can run this pid<\/span><\/div>$/;"	a
l00077	html/cpuid_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    {0x8000000f, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00077	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t inc(uint32_t i)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> (i &lt; buf.size()-1)? i+1 : 0; }<\/div>$/;"	a
l00077	html/decoder_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    }<\/div>$/;"	a
l00077	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00077	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        uint32_t interleaveType;<\/div>$/;"	a
l00077	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        <span class="keywordtype">void<\/span> enqueue(DRAMSimAccEvent* ev, uint64_t cycle);<\/div>$/;"	a
l00077	html/event__queue_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div>$/;"	a
l00077	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        }<\/div>$/;"	a
l00077	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;            filterArray = gm_memalign&lt;FilterEntry&gt;(CACHE_LINE_BYTES, numSets);<\/div>$/;"	a
l00077	html/galloc_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span>* <span class="keyword">operator<\/span> <span class="keyword">new<\/span> (<span class="keywordtype">size_t<\/span> sz, <span class="keywordtype">void<\/span>* ptr) {<\/div>$/;"	a
l00077	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;            }<\/div>$/;"	a
l00077	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        T* head;<\/div>$/;"	a
l00077	html/locks_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div>$/;"	a
l00077	html/log_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="comment"> * Inpired by Phil Nash&#39;s CATCH, https:\/\/github.com\/philsquared\/Catch<\/span><\/div>$/;"	a
l00077	html/mc_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    uint64_t getClearTime() { <span class="keywordflow">return<\/span> _last_clear_time; };<\/div>$/;"	a
l00077	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profTotalWrLat;<\/div>$/;"	a
l00077	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="comment">\/* Memory request *\/<\/span><\/div>$/;"	a
l00077	html/mtrand_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="comment">\/\/     When you use this, send an email to: m-mat@math.sci.hiroshima-u.ac.jp<\/span><\/div>$/;"	a
l00077	html/mutex_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        <a class="code" href="classscoped__mutex.html">scoped_mutex<\/a>&amp; operator=(<a class="code" href="classscoped__mutex.html">scoped_mutex<\/a>&amp;&amp; that) {<\/div>$/;"	a
l00077	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;            <span class="comment">\/\/ uint32_t bhsrIdx = ((uint32_t)( branchPc ^ (branchPc &gt;&gt; NB) ^ (branchPc &gt;&gt; 2*NB) )) &amp; bhsrMask;<\/span><\/div>$/;"	a
l00077	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div>$/;"	a
l00077	html/page__placement_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;};<\/div>$/;"	a
l00077	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        WayPartInfo* array;<\/div>$/;"	a
l00077	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classInstrDataProcessPartMapper.html">InstrDataProcessPartMapper<\/a>(uint32_t _numProcs) : numProcs(_numProcs) {}<\/div>$/;"	a
l00077	html/partitioner_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;};<\/div>$/;"	a
l00077	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;            <span class="comment">\/\/ so can&#39;t be stale.<\/span><\/div>$/;"	a
l00077	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        }<\/div>$/;"	a
l00077	html/process__tree_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;                uint32_t childProcIdx = __sync_fetch_and_add(&amp;zinfo-&gt;numProcs, 1);<\/div>$/;"	a
l00077	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno"><a class="line" href="classTimeBreakdownStat.html">   77<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTimeBreakdownStat.html">TimeBreakdownStat<\/a> : <span class="keyword">public<\/span> <a class="code" href="classVectorCounter.html">VectorCounter<\/a> {<\/div>$/;"	a
l00077	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00077	html/scheduler_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div>$/;"	a
l00077	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define ALIGN_SZ 64<\/span><\/div>$/;"	a
l00077	html/stats_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00077	html/timing__core_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> PredLoadAndRecordFunc(THREADID tid, ADDRINT addr, BOOL pred);<\/div>$/;"	a
l00077	html/timing__event_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div>$/;"	a
l00077	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00077	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;        uint32_t getBuckets()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> buckets; }<\/div>$/;"	a
l00077	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;                <a class="code" href="structTimingRecord.html">TimingRecord<\/a> tr = {req.lineAddr, req.cycle, respCycle, req.type, memEv, memEv};<\/div>$/;"	a
l00077	html/zsim_8h_source.html	/^<div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    uint32_t numCores;<\/div>$/;"	a
l00078	html/Callback_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div>$/;"	a
l00078	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        <span class="keywordtype">void<\/span> nextChunk();<\/div>$/;"	a
l00078	html/barrier_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div>$/;"	a
l00078	html/bithacks_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;}<\/div>$/;"	a
l00078	html/cache_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        uint64_t finishInvalidate(<span class="keyword">const<\/span> <a class="code" href="structInvReq.html">InvReq<\/a>&amp; req); <span class="comment">\/\/ performs inv and releases downLock<\/span><\/div>$/;"	a
l00078	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00078	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div>$/;"	a
l00078	html/config_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; T genericGet(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* key, T def);<\/div>$/;"	a
l00078	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div>$/;"	a
l00078	html/core_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t getCycles() <span class="keyword">const<\/span> = 0;<\/div>$/;"	a
l00078	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;            <span class="keywordflow">if<\/span> (unlikely(eventRecorder.hasRecord())) recordAccess(startCycle);<\/div>$/;"	a
l00078	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;            }<\/div>$/;"	a
l00078	html/cpuid_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    {0x80000010, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00078	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t dec(uint32_t i)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> i? i-1 : buf.size()-1; }<\/div>$/;"	a
l00078	html/decoder_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;};<\/div>$/;"	a
l00078	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        <a class="code" href="classMemRankBase.html#aacf0992ac12f1a10c2159b7de3f8b464">MemRankBase<\/a>(uint32_t _myId, uint32_t _parentId, uint32_t _bankCount);<\/div>$/;"	a
l00078	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        uint32_t powerDownCycle;<\/div>$/;"	a
l00078	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div>$/;"	a
l00078	html/event__queue_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> G, <span class="keyword">typename<\/span> F&gt;<\/div>$/;"	a
l00078	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div>$/;"	a
l00078	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; numSets; i++) filterArray[i].clear();<\/div>$/;"	a
l00078	html/galloc_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;            <span class="keywordflow">return<\/span> ptr;<\/div>$/;"	a
l00078	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;            rp = <span class="keyword">new<\/span> ProxyReplPolicy(<span class="keyword">this<\/span>);<\/div>$/;"	a
l00078	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        T* tail;<\/div>$/;"	a
l00078	html/locks_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> spin_trylock(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00078	html/log_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="comment"> * const enough that asserts that use this are still optimized through<\/span><\/div>$/;"	a
l00078	html/mc_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="keyword">private<\/span>:<\/div>$/;"	a
l00078	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profLoad;<\/div>$/;"	a
l00078	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno"><a class="line" href="structMemReq.html">   78<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structMemReq.html">MemReq<\/a> {<\/div>$/;"	a
l00078	html/mtrand_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="comment">\/\/     with an appropriate reference to your work.<\/span><\/div>$/;"	a
l00078	html/mutex_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;            this-&gt;~<a class="code" href="classscoped__mutex.html">scoped_mutex<\/a>();<\/div>$/;"	a
l00078	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;            uint32_t bhsrIdx = ((uint32_t)( branchPc &gt;&gt; 1)) &amp; bhsrMask;<\/div>$/;"	a
l00078	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        std::priority_queue&lt;FutureResponse, g_vector&lt;FutureResponse&gt;, CompareRespEvents&gt; futureResponses;<\/div>$/;"	a
l00078	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div>$/;"	a
l00078	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getNumPartitions() {<span class="keywordflow">return<\/span> 2*numProcs;}<\/div>$/;"	a
l00078	html/partitioner_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div>$/;"	a
l00078	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;            std::array&lt;PrefetchResponseEvent*, 64&gt; respEvents;<\/div>$/;"	a
l00078	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<\/div>$/;"	a
l00078	html/process__tree_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;                <span class="keywordflow">if<\/span> (childProcIdx &gt;= (uint32_t)zinfo-&gt;lineSize) {<\/div>$/;"	a
l00078	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00078	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> startReplacement(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {} <span class="comment">\/\/many policies don&#39;t need it<\/span><\/div>$/;"	a
l00078	html/scheduler_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        void (*atSyncFunc)(void); <span class="comment">\/\/executed by syncing thread while others are waiting. Good for non-thread-safe stuff<\/span><\/div>$/;"	a
l00078	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="preprocessor"><\/span>        <span class="keywordtype">char<\/span>* base = buf+used;<\/div>$/;"	a
l00078	html/stats_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div>$/;"	a
l00078	html/timing__core_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> PredStoreAndRecordFunc(THREADID tid, ADDRINT addr, BOOL pred);<\/div>$/;"	a
l00078	html/timing__event_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        uint64_t minStartCycle;<\/div>$/;"	a
l00078	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> executeAccess(<a class="code" href="structAccessRecord.html">AccessRecord<\/a> acc);<\/div>$/;"	a
l00078	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;};<\/div>$/;"	a
l00078	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;                zinfo-&gt;eventRecorders[req.srcId]-&gt;pushRecord(tr);<\/div>$/;"	a
l00078	html/zsim_8h_source.html	/^<div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    uint32_t lineSize;<\/div>$/;"	a
l00079	html/Callback_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    ConsumerT* <span class="keyword">const<\/span> object;<\/div>$/;"	a
l00079	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;};<\/div>$/;"	a
l00079	html/barrier_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        ThreadSyncInfo threadList[MAX_THREADS];<\/div>$/;"	a
l00079	html/bithacks_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div>$/;"	a
l00079	html/cache_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;};<\/div>$/;"	a
l00079	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        Address* array; <span class="comment">\/\/maps line id to address<\/span><\/div>$/;"	a
l00079	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="comment">\/* NOTE: To avoid virtual function overheads, there is no BottomCC interface, since we only have a MESI controller for now *\/<\/span><\/div>$/;"	a
l00079	html/config_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;};<\/div>$/;"	a
l00079	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;            <a class="code" href="classClockStat.html">ClockStat<\/a> profTime;<\/div>$/;"	a
l00079	html/core_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div>$/;"	a
l00079	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        }<\/div>$/;"	a
l00079	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;            panic(<span class="stringliteral">&quot;Empty mask for pid %d?&quot;<\/span>, pid);<\/div>$/;"	a
l00079	html/cpuid_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    {0x80000011, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00079	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;};<\/div>$/;"	a
l00079	html/decoder_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div>$/;"	a
l00079	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        <span class="keyword">virtual<\/span> ~<a class="code" href="classMemRankBase.html">MemRankBase<\/a>();<\/div>$/;"	a
l00079	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        uint32_t controllerLatency;<\/div>$/;"	a
l00079	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00079	html/event__queue_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<a class="code" href="classAdaptiveEvent.html">AdaptiveEvent&lt;G, F&gt;<\/a>* makeAdaptiveEvent(G <span class="keyword">get<\/span>, F fire, uint64_t start, uint64_t target, uint64_t maxRate) {<\/div>$/;"	a
l00079	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        <span class="keywordtype">void<\/span>* alloc(<span class="keywordtype">size_t<\/span> sz) {<\/div>$/;"	a
l00079	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;            futex_init(&amp;filterLock);<\/div>$/;"	a
l00079	html/galloc_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        }<\/div>$/;"	a
l00079	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        }<\/div>$/;"	a
l00079	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        <span class="keywordtype">size_t<\/span> elems;<\/div>$/;"	a
l00079	html/locks_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="keywordflow">return<\/span> !((*lock) == 0 <span class="comment">\/*T*\/<\/span> &amp;&amp; __sync_bool_compare_and_swap(lock, 0, 1) <span class="comment">\/*T&amp;S*\/<\/span>);<\/div>$/;"	a
l00079	html/log_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="comment"> * loop-invariant code motion<\/span><\/div>$/;"	a
l00079	html/mc_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="keywordtype">void<\/span> updateLRU(uint32_t set_num, uint32_t way);<\/div>$/;"	a
l00079	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profUpdates;<\/div>$/;"	a
l00079	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    Address lineAddr;<\/div>$/;"	a
l00079	html/mtrand_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00079	html/mutex_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;            mut = that.mut;<\/div>$/;"	a
l00079	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;            uint32_t phtIdx = bhsr[bhsrIdx];<\/div>$/;"	a
l00079	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div>$/;"	a
l00079	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        uint32_t* wayPartIndex; <span class="comment">\/\/stores partition of each way<\/span><\/div>$/;"	a
l00079	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getPartition(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00079	html/partitioner_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="comment">\/\/ *********************************************************************<\/span><\/div>$/;"	a
l00079	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div>$/;"	a
l00079	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        <span class="keywordtype">void<\/span> enqueue(T* obj, uint64_t cycle) {<\/div>$/;"	a
l00079	html/process__tree_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;                    panic(<span class="stringliteral">&quot;Cannot simulate more than sys.lineSize=%d processes (to avoid aliasing), limit reached&quot;<\/span>, zinfo-&gt;lineSize);<\/div>$/;"	a
l00079	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        uint32_t curState;<\/div>$/;"	a
l00079	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> recordCandidate(uint32_t <span class="keywordtype">id<\/span>) = 0;<\/div>$/;"	a
l00079	html/scheduler_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        <a class="code" href="classBarrier.html">Barrier<\/a> bar;<\/div>$/;"	a
l00079	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        <span class="keywordtype">char<\/span>* ptr = <span class="keyword">static_cast&lt;<\/span><span class="keywordtype">char<\/span>*<span class="keyword">&gt;<\/span>(((uint64_t)(base+(ALIGN_SZ))) &amp; (-ALIGN_SZ)); <span class="comment">\/\/aligned<\/span><\/div>$/;"	a
l00079	html/stats_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="preprocessor">#include &quot;g_std\/g_vector.h&quot;<\/span><\/div>$/;"	a
l00079	html/timing__core_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div>$/;"	a
l00079	html/timing__event_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;        <span class="keyword">union <\/span>{<\/div>$/;"	a
l00079	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;};<\/div>$/;"	a
l00079	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div>$/;"	a
l00079	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;            }<\/div>$/;"	a
l00079	html/zsim_8h_source.html	/^<div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div>$/;"	a
l00080	html/Callback_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <span class="keyword">const<\/span> PtrMember  member;<\/div>$/;"	a
l00080	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/barrier_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/bithacks_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/cache_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        uint32_t* lookupArray; <span class="comment">\/\/maps physical position to lineId<\/span><\/div>$/;"	a
l00080	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/config_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/core_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat) = 0;<\/div>$/;"	a
l00080	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;            <span class="keywordflow">return<\/span> -1;<\/div>$/;"	a
l00080	html/cpuid_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    {0x80000012, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00080	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/decoder_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structBblInfo.html">BblInfo<\/a>;  <span class="comment">\/\/ defined in core.h<\/span><\/div>$/;"	a
l00080	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        uint32_t cacheLineSize;<\/div>$/;"	a
l00080	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        <span class="keywordtype">void<\/span> DRAM_read_return_cb(uint32_t <span class="keywordtype">id<\/span>, uint64_t addr, uint64_t returnCycle);<\/div>$/;"	a
l00080	html/event__queue_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">new<\/span> <a class="code" href="classAdaptiveEvent.html">AdaptiveEvent&lt;G, F&gt;<\/a>(<span class="keyword">get<\/span>, fire, start, target, maxRate);<\/div>$/;"	a
l00080	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;            <span class="keywordflow">return<\/span> slabAlloc.alloc(sz);<\/div>$/;"	a
l00080	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;            fGETSHit = fGETXHit = 0;<\/div>$/;"	a
l00080	html/galloc_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/locks_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;}<\/div>$/;"	a
l00080	html/log_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00080	html/mc_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <a class="code" href="classTagBufferEntry.html">TagBufferEntry<\/a> ** _tag_buffer;<\/div>$/;"	a
l00080	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profClampedLoads;<\/div>$/;"	a
l00080	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    AccessType type;<\/div>$/;"	a
l00080	html/mtrand_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="comment">\/\/ It would be nice to CC: wagnerr@umich.edu and Cokus@math.washington.edu<\/span><\/div>$/;"	a
l00080	html/mutex_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;            that.release();<\/div>$/;"	a
l00080	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        uint64_t lastEvSimulatedZllStartCycle;<\/div>$/;"	a
l00080	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;};<\/div>$/;"	a
l00080	html/partitioner_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;            uint32_t lastPos;<\/div>$/;"	a
l00080	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;            uint64_t absBlock = cycle\/64;<\/div>$/;"	a
l00080	html/process__tree_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;                }<\/div>$/;"	a
l00080	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        uint64_t startNs;<\/div>$/;"	a
l00080	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getBestCandidate() = 0;<\/div>$/;"	a
l00080	html/scheduler_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        uint32_t numCores;<\/div>$/;"	a
l00080	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        used = (ptr-buf)+bytes;<\/div>$/;"	a
l00080	html/stats_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="preprocessor">#include &quot;log.h&quot;<\/span><\/div>$/;"	a
l00080	html/timing__core_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> BranchFunc(THREADID, ADDRINT, BOOL, ADDRINT, ADDRINT) {}<\/div>$/;"	a
l00080	html/timing__event_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;            <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* child;<\/div>$/;"	a
l00080	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="preprocessor">#endif  \/\/ UTILITY_MONITOR_H_<\/span><\/div>$/;"	a
l00080	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div>$/;"	a
l00080	html/zsim_8h_source.html	/^<div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <span class="comment">\/\/Cores<\/span><\/div>$/;"	a
l00081	html/Callback_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;};<\/div>$/;"	a
l00081	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno"><a class="line" href="classAccessTraceWriter.html">   81<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classAccessTraceWriter.html">AccessTraceWriter<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00081	html/barrier_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        uint32_t* runList;<\/div>$/;"	a
l00081	html/bithacks_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#endif  \/\/ BITHACKS_H_<\/span><\/div>$/;"	a
l00081	html/cache_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#endif  \/\/ CACHE_H_<\/span><\/div>$/;"	a
l00081	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        <a class="code" href="classReplPolicy.html">ReplPolicy<\/a>* rp;<\/div>$/;"	a
l00081	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno"><a class="line" href="classMESIBottomCC.html">   81<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMESIBottomCC.html">MESIBottomCC<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00081	html/config_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div>$/;"	a
l00081	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#if PROFILE_CROSSINGS<\/span><\/div>$/;"	a
l00081	html/core_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> contextSwitch(int32_t gid) = 0; <span class="comment">\/\/gid == -1 means descheduled, otherwise this is the new gid<\/span><\/div>$/;"	a
l00081	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        <span class="comment">\/\/Methods called between the bound and weave phases<\/span><\/div>$/;"	a
l00081	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00081	html/cpuid_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    {0x80000013, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00081	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="comment">\/\/ Read or write queues, ordered\/inserted by arrival time, out-of-order finish<\/span><\/div>$/;"	a
l00081	html/decoder_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div>$/;"	a
l00081	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> access(uint64_t accessCycle, uint64_t issuedCycle, uint32_t row, uint32_t col, uint32_t bank, MemAccessType type);<\/div>$/;"	a
l00081	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        uint32_t byteOffsetWidth;<\/div>$/;"	a
l00081	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        <span class="keywordtype">void<\/span> DRAM_write_return_cb(uint32_t <span class="keywordtype">id<\/span>, uint64_t addr, uint64_t returnCycle);<\/div>$/;"	a
l00081	html/event__queue_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;}<\/div>$/;"	a
l00081	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        }<\/div>$/;"	a
l00081	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;            srcId = -1;<\/div>$/;"	a
l00081	html/galloc_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <span class="keyword">operator<\/span> <span class="keyword">delete<\/span>(<span class="keywordtype">void<\/span> *p, <span class="keywordtype">size_t<\/span> sz) {<\/div>$/;"	a
l00081	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        int32_t lookup(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, <span class="keywordtype">bool<\/span> updateReplacement) {<\/div>$/;"	a
l00081	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00081	html/locks_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div>$/;"	a
l00081	html/log_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno"><a class="line" href="classPrintExpr.html">   81<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPrintExpr.html">PrintExpr<\/a> {<\/div>$/;"	a
l00081	html/mc_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    uint32_t _num_ways;<\/div>$/;"	a
l00081	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        uint32_t curPhaseAccesses;<\/div>$/;"	a
l00081	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    uint32_t childId;<\/div>$/;"	a
l00081	html/mtrand_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="comment">\/\/ when you write.<\/span><\/div>$/;"	a
l00081	html/mutex_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;            <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;<\/div>$/;"	a
l00081	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;            <span class="comment">\/\/ Shift-XOR-mask to fit in PHT<\/span><\/div>$/;"	a
l00081	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        uint64_t lastEvSimulatedStartCycle;<\/div>$/;"	a
l00081	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        <span class="keywordtype">bool<\/span> testMode;<\/div>$/;"	a
l00081	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div>$/;"	a
l00081	html/partitioner_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="comment">\/\/ monitors the usage of partitions in a cache and generates miss curves<\/span><\/div>$/;"	a
l00081	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;            uint32_t lastLastPos;<\/div>$/;"	a
l00081	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;            assert(absBlock &gt;= curBlock);<\/div>$/;"	a
l00081	html/process__tree_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;                <a class="code" href="classProcessTreeNode.html">ProcessTreeNode<\/a>* child = <span class="keyword">new<\/span> <a class="code" href="classProcessTreeNode.html">ProcessTreeNode<\/a>(*<span class="keyword">this<\/span>);<\/div>$/;"	a
l00081	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div>$/;"	a
l00081	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div>$/;"	a
l00081	html/scheduler_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;        uint32_t schedQuantum; <span class="comment">\/\/in phases<\/span><\/div>$/;"	a
l00081	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00081	html/stats_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div>$/;"	a
l00081	html/timing__core_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;} ATTR_LINE_ALIGNED;<\/div>$/;"	a
l00081	html/timing__event_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;            <a class="code" href="structTimingEventBlock.html">TimingEventBlock<\/a>* children;<\/div>$/;"	a
l00081	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<\/div>$/;"	a
l00081	html/utility__monitor_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00081	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;            <span class="comment">\/\/ info(&quot;Access to %lx at %ld, %d lat, returning %d&quot;, req.lineAddr, req.cycle, realLatency, zeroLoadLatency);<\/span><\/div>$/;"	a
l00081	html/zsim_8h_source.html	/^<div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <a class="code" href="classCore.html">Core<\/a>** cores;<\/div>$/;"	a
l00082	html/Callback_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00082	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00082	html/barrier_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;        uint32_t runListSize;<\/div>$/;"	a
l00082	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;        <a class="code" href="classHashFamily.html">HashFamily<\/a>* hf;<\/div>$/;"	a
l00082	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00082	html/config_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="comment">\/* Parsing functions used for configuration *\/<\/span><\/div>$/;"	a
l00082	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor"><\/span>            <a class="code" href="classVectorCounter.html">VectorCounter<\/a> profIncomingCrossingSims;<\/div>$/;"	a
l00082	html/core_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00082	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;        uint64_t cSimStart(uint64_t curCycle); <span class="comment">\/\/returns updated curCycle<\/span><\/div>$/;"	a
l00082	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;            <span class="keywordflow">return<\/span> cid;<\/div>$/;"	a
l00082	html/cpuid_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    {0x80000014, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00082	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div>$/;"	a
l00082	html/decoder_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="comment">\/* These are absolute maximums per instruction. If there is some non-conforming instruction, either increase these limits or<\/span><\/div>$/;"	a
l00082	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> refresh(uint64_t lastCycle);<\/div>$/;"	a
l00082	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;        uint32_t accessLogDepth;<\/div>$/;"	a
l00082	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;};<\/div>$/;"	a
l00082	html/event__queue_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00082	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00082	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;            reqFlags = 0;<\/div>$/;"	a
l00082	html/galloc_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;            gm_free(p);<\/div>$/;"	a
l00082	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;            g_unordered_map&lt;Address, uint32_t&gt;::iterator it = lineMap.find(lineAddr);<\/div>$/;"	a
l00082	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;        <a class="code" href="classInList.html">InList<\/a>() : head(nullptr), tail(nullptr), elems(0) {}<\/div>$/;"	a
l00082	html/locks_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00082	html/log_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00082	html/mc_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    uint32_t _num_sets;<\/div>$/;"	a
l00082	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00082	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    MESIState* state;<\/div>$/;"	a
l00082	html/mtrand_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00082	html/mutex_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;        }<\/div>$/;"	a
l00082	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;            phtIdx ^= (phtIdx &amp; ~phtMask) &gt;&gt; (HB - LB); <span class="comment">\/\/ take the [HB-1, LB] bits of bshr, XOR with [LB-1, ...] bits<\/span><\/div>$/;"	a
l00082	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00082	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00082	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno"><a class="line" href="classProcessGroupPartMapper.html">   82<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProcessGroupPartMapper.html">ProcessGroupPartMapper<\/a> : <span class="keyword">public<\/span> <a class="code" href="classPartMapper.html">PartMapper<\/a> {<\/div>$/;"	a
l00082	html/partitioner_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno"><a class="line" href="classPartitionMonitor.html">   82<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPartitionMonitor.html">PartitionMonitor<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00082	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;            uint32_t lastPrefetchPos;<\/div>$/;"	a
l00082	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00082	html/process__tree_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;                child-&gt;procIdx = childProcIdx;<\/div>$/;"	a
l00082	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00082	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00082	html/scheduler_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00082	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor"><\/span>        <span class="comment">\/\/info(&quot;Allocation starting at %p, %d bytes&quot;, ptr, bytes);<\/span><\/div>$/;"	a
l00082	html/stats_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno"><a class="line" href="classStat.html">   82<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classStat.html">Stat<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00082	html/timing__core_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00082	html/timing__event_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;        };<\/div>$/;"	a
l00082	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno"><a class="line" href="classTraceDriverProxyCache.html">   82<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTraceDriverProxyCache.html">TraceDriverProxyCache<\/a> : <span class="keyword">public<\/span> <a class="code" href="classBaseCache.html">BaseCache<\/a> {<\/div>$/;"	a
l00082	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;            <span class="keywordflow">return<\/span> respCycle;<\/div>$/;"	a
l00082	html/zsim_8h_source.html	/^<div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<\/div>$/;"	a
l00083	html/Callback_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="classDRAMSim_1_1CallbackBase.html">CallbackBase &lt;void, unsigned, uint64_t, uint64_t&gt;<\/a> <a class="code" href="classDRAMSim_1_1CallbackBase.html">TransactionCompleteCB<\/a>;<\/div>$/;"	a
l00083	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        <a class="code" href="structPackedAccessRecord.html">PackedAccessRecord<\/a>* buf;<\/div>$/;"	a
l00083	html/barrier_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        uint32_t curThreadIdx;<\/div>$/;"	a
l00083	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00083	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        MESIState* array;<\/div>$/;"	a
l00083	html/config_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div>$/;"	a
l00083	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;            <a class="code" href="classVectorCounter.html">VectorCounter<\/a> profIncomingCrossings;<\/div>$/;"	a
l00083	html/core_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        <span class="comment">\/\/Called by scheduler on every leave and join action, before barrier methods are called<\/span><\/div>$/;"	a
l00083	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        uint64_t cSimEnd(uint64_t curCycle); <span class="comment">\/\/returns updated curCycle<\/span><\/div>$/;"	a
l00083	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        }<\/div>$/;"	a
l00083	html/cpuid_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    {0x80000015, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00083	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno"><a class="line" href="classRequestQueue.html">   83<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classRequestQueue.html">RequestQueue<\/a> {<\/div>$/;"	a
l00083	html/decoder_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="comment"> * treat it as a special case.<\/span><\/div>$/;"	a
l00083	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div>$/;"	a
l00083	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        <span class="keywordtype">bool<\/span> mergeContinuous;<\/div>$/;"	a
l00083	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div>$/;"	a
l00083	html/event__queue_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div>$/;"	a
l00083	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        <span class="comment">\/\/Event recording interface<\/span><\/div>$/;"	a
l00083	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;            _enable_tlb = config.get&lt;<span class="keywordtype">bool<\/span>&gt;(<span class="stringliteral">&quot;sim.enableTLB&quot;<\/span>, <span class="keyword">false<\/span>);<\/div>$/;"	a
l00083	html/galloc_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        }<\/div>$/;"	a
l00083	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;            <span class="keywordflow">if<\/span> (it == lineMap.end()) <span class="keywordflow">return<\/span> -1;<\/div>$/;"	a
l00083	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        <span class="keywordtype">bool<\/span> empty()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> !head;}<\/div>$/;"	a
l00083	html/locks_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> spin_unlock(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00083	html/log_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        std::stringstream&amp; ss;<\/div>$/;"	a
l00083	html/mc_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    uint32_t _entry_occupied;<\/div>$/;"	a
l00083	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        g_string name; <span class="comment">\/\/barely used<\/span><\/div>$/;"	a
l00083	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    uint64_t cycle; <span class="comment">\/\/cycle where request arrives at component<\/span><\/div>$/;"	a
l00083	html/mtrand_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">#ifndef MTRAND_H_<\/span><\/div>$/;"	a
l00083	html/mutex_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<\/div>$/;"	a
l00083	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;            phtIdx &amp;= phtMask;<\/div>$/;"	a
l00083	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        <span class="comment">\/\/Cycle accounting<\/span><\/div>$/;"	a
l00083	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        PAD();<\/div>$/;"	a
l00083	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00083	html/partitioner_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00083	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;            uint64_t lastCycle;  <span class="comment">\/\/ updated on alloc and hit<\/span><\/div>$/;"	a
l00083	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;            <span class="keywordflow">if<\/span> (absBlock &lt; curBlock + B) {<\/div>$/;"	a
l00083	html/process__tree_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;                child-&gt;started = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00083	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        <a class="code" href="classTimeBreakdownStat.html">TimeBreakdownStat<\/a>() : <a class="code" href="classVectorCounter.html">VectorCounter<\/a>() {}<\/div>$/;"	a
l00083	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> C&gt; <span class="keyword">inline<\/span> uint32_t rank(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, C cands) {<\/div>$/;"	a
l00083	html/scheduler_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        <span class="keyword">struct <\/span>FakeLeaveInfo;<\/div>$/;"	a
l00083	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        <span class="keywordflow">if<\/span> (usedBytes &lt; <span class="keyword">sizeof<\/span>(buf)) {<\/div>$/;"	a
l00083	html/stats_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00083	html/timing__core_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">#endif  \/\/ TIMING_CORE_H_<\/span><\/div>$/;"	a
l00083	html/timing__event_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        int32_t domain; <span class="comment">\/\/-1 if none; if none, it acquires it from the parent. Cannot be a starting event (no parents at enqueue time) and get -1 as domain<\/span><\/div>$/;"	a
l00083	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00083	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;        }<\/div>$/;"	a
l00083	html/zsim_8h_source.html	/^<div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    PAD();<\/div>$/;"	a
l00084	html/Callback_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;} <span class="comment">\/\/ namespace DRAMSim<\/span><\/div>$/;"	a
l00084	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        uint32_t cur;<\/div>$/;"	a
l00084	html/barrier_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00084	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        uint32_t numSets;<\/div>$/;"	a
l00084	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;MemObject*&gt;<\/a> parents;<\/div>$/;"	a
l00084	html/config_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;std::vector&lt;bool&gt; ParseMask(<span class="keyword">const<\/span> std::string&amp; maskStr, uint32_t maskSize);<\/div>$/;"	a
l00084	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;            <a class="code" href="classVectorCounter.html">VectorCounter<\/a> profIncomingCrossingHist;<\/div>$/;"	a
l00084	html/core_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> leave() {}<\/div>$/;"	a
l00084	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00084	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    }<\/div>$/;"	a
l00084	html/cpuid_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    {0x80000016, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00084	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00084	html/decoder_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00084	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        <span class="comment">\/\/ FIXME(dsm): This huge amount of getters\/setters is a telltale sign<\/span><\/div>$/;"	a
l00084	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        uint32_t schedulerQueueCount;<\/div>$/;"	a
l00084	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="comment">\/\/DRAMSIM does not support non-pow2 channels, so:<\/span><\/div>$/;"	a
l00084	html/event__queue_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno"><a class="line" href="classEventQueue.html">   84<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classEventQueue.html">EventQueue<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00084	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00084	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;            srand48_r((uint64_t)<span class="keyword">this<\/span>, &amp;_buffer);<\/div>$/;"	a
l00084	html/galloc_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00084	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00084	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00084	html/locks_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    assert(*lock == 1); <span class="comment">\/\/should own lock if we&#39;re unlocking...<\/span><\/div>$/;"	a
l00084	html/log_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00084	html/mc_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    uint64_t _last_clear_time;<\/div>$/;"	a
l00084	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        lock_t updateLock;<\/div>$/;"	a
l00084	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00084	html/mtrand_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define MTRAND_H_<\/span><\/div>$/;"	a
l00084	html/mutex_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        <span class="keywordtype">void<\/span> release() {<\/div>$/;"	a
l00084	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00084	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        uint64_t totalGapCycles; <span class="comment">\/\/does not include gapCycles<\/span><\/div>$/;"	a
l00084	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00084	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        <a class="code" href="classProcessGroupPartMapper.html">ProcessGroupPartMapper<\/a>() {}<\/div>$/;"	a
l00084	html/partitioner_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classPartitionMonitor.html">PartitionMonitor<\/a>(uint32_t _buckets) : buckets(_buckets) {}<\/div>$/;"	a
l00084	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;            uint64_t ts;<\/div>$/;"	a
l00084	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;                uint32_t i = absBlock % B;<\/div>$/;"	a
l00084	html/process__tree_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;                child-&gt;curChildren = 0;<\/div>$/;"	a
l00084	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00084	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;            startReplacement(req);<\/div>$/;"	a
l00084	html/scheduler_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00084	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;            liveElems++;  <span class="comment">\/\/ allocation is unsynced, no need for atomic op<\/span><\/div>$/;"	a
l00084	html/stats_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* _name;<\/div>$/;"	a
l00084	html/timing__event_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        uint32_t numChildren;<\/div>$/;"	a
l00084	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;        <a class="code" href="classTraceDriver.html">TraceDriver<\/a>* drv;<\/div>$/;"	a
l00084	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;};<\/div>$/;"	a
l00084	html/zsim_8h_source.html	/^<div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div>$/;"	a
l00085	html/Callback_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div>$/;"	a
l00085	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        uint32_t max;<\/div>$/;"	a
l00085	html/barrier_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        uint32_t runningThreads; <span class="comment">\/\/threads in RUNNING state<\/span><\/div>$/;"	a
l00085	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        uint32_t ways;<\/div>$/;"	a
l00085	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;uint32_t&gt;<\/a> parentRTTs;<\/div>$/;"	a
l00085	html/config_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div>$/;"	a
l00085	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00085	html/core_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> join() {}<\/div>$/;"	a
l00085	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        <span class="comment">\/\/Methods called in the weave phase<\/span><\/div>$/;"	a
l00085	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;}<\/div>$/;"	a
l00085	html/cpuid_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    {0x80000017, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00085	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        <span class="keyword">struct <\/span>Node : <a class="code" href="structInListNode.html">InListNode<\/a>&lt;Node&gt; {<\/div>$/;"	a
l00085	html/decoder_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="preprocessor">#define MAX_INSTR_LOADS 4<\/span><\/div>$/;"	a
l00085	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        <span class="comment">\/\/ of bad design (if an external class needs to access all these<\/span><\/div>$/;"	a
l00085	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div>$/;"	a
l00085	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="comment">\/\/ - Encapsulate multiple DRAMSim controllers<\/span><\/div>$/;"	a
l00085	html/event__queue_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00085	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        <span class="keywordtype">void<\/span> pushRecord(<span class="keyword">const<\/span> <a class="code" href="structTimingRecord.html">TimingRecord<\/a>&amp; rec) {<\/div>$/;"	a
l00085	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        }<\/div>$/;"	a
l00085	html/galloc_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        <span class="comment">\/\/Placement delete... make ICC happy. This would only fire on an exception<\/span><\/div>$/;"	a
l00085	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;            uint32_t lineId = it-&gt;second;<\/div>$/;"	a
l00085	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        T* front()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> head;}<\/div>$/;"	a
l00085	html/locks_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    *lock = 0;<\/div>$/;"	a
l00085	html/log_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00085	html/mc_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;};<\/div>$/;"	a
l00085	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        PAD();<\/div>$/;"	a
l00085	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="comment">\/\/Used for race detection\/sync<\/span><\/div>$/;"	a
l00085	html/mtrand_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00085	html/mutex_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;            mut = 0;<\/div>$/;"	a
l00085	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;            <span class="comment">\/\/ If uncommented, behaves like a global history predictor<\/span><\/div>$/;"	a
l00085	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        uint64_t totalHaltedCycles; <span class="comment">\/\/does not include cycles since last transition to HALTED<\/span><\/div>$/;"	a
l00085	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        <span class="comment">\/\/Replacement process state (RW)<\/span><\/div>$/;"	a
l00085	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getNumPartitions();<\/div>$/;"	a
l00085	html/partitioner_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div>$/;"	a
l00085	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div>$/;"	a
l00085	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;                uint32_t offset = cycle % 64;<\/div>$/;"	a
l00085	html/process__tree_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;                child-&gt;heartbeats = 0;<\/div>$/;"	a
l00085	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc, uint32_t size) {<\/div>$/;"	a
l00085	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;            <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span> ci = cands.begin(); ci != cands.end(); ci.inc()) {<\/div>$/;"	a
l00085	html/scheduler_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        <span class="keyword">enum<\/span> FutexJoinAction {FJA_NONE, FJA_WAKE, FJA_WAIT};<\/div>$/;"	a
l00085	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;            <span class="keywordflow">return<\/span> ptr;<\/div>$/;"	a
l00085	html/stats_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* _desc;<\/div>$/;"	a
l00085	html/timing__event_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        uint32_t numParents;<\/div>$/;"	a
l00085	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;        uint32_t id;<\/div>$/;"	a
l00085	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div>$/;"	a
l00085	html/zsim_8h_source.html	/^<div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <a class="code" href="classEventQueue.html">EventQueue<\/a>* eventQueue;<\/div>$/;"	a
l00086	html/Callback_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00086	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        g_string fname;<\/div>$/;"	a
l00086	html/barrier_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        uint32_t leftThreads; <span class="comment">\/\/threads in LEFT state<\/span><\/div>$/;"	a
l00086	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        uint32_t cands;<\/div>$/;"	a
l00086	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00086	html/config_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="comment">\/* Parses a delimiter-separated list of T&#39;s (typically ints, see\/add specializtions in .cpp)<\/span><\/div>$/;"	a
l00086	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="preprocessor"><\/span>        };<\/div>$/;"	a
l00086	html/core_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<\/div>$/;"	a
l00086	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> reportEventSimulated(<a class="code" href="classTimingCoreEvent.html">TimingCoreEvent<\/a>* ev);<\/div>$/;"	a
l00086	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<\/div>$/;"	a
l00086	html/cpuid_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    {0x80000018, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00086	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;            T elem;<\/div>$/;"	a
l00086	html/decoder_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define MAX_INSTR_REG_READS 4<\/span><\/div>$/;"	a
l00086	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        <span class="comment">\/\/ fields, why is not the logic of that class here? and if the logic is<\/span><\/div>$/;"	a
l00086	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        <span class="comment">\/\/ Device Architectural Parameter<\/span><\/div>$/;"	a
l00086	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="comment">\/\/ - Fan out addresses interleaved across banks, and change the address to a &quot;memory address&quot;<\/span><\/div>$/;"	a
l00086	html/event__queue_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        g_multimap&lt;uint64_t, Event*&gt; evMap;<\/div>$/;"	a
l00086	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;            assert(!tr.isValid());<\/div>$/;"	a
l00086	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<\/div>$/;"	a
l00086	html/galloc_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        <span class="keywordtype">void<\/span> <span class="keyword">operator<\/span> <span class="keyword">delete<\/span> (<span class="keywordtype">void<\/span>* p, <span class="keywordtype">void<\/span>* ptr) {}<\/div>$/;"	a
l00086	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;            <span class="keywordflow">if<\/span> (updateReplacement) {<\/div>$/;"	a
l00086	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        T* back()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> tail;}<\/div>$/;"	a
l00086	html/locks_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    __sync_synchronize();<\/div>$/;"	a
l00086	html/log_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        <a class="code" href="classPrintExpr.html">PrintExpr<\/a>(std::stringstream&amp; _ss) : ss(_ss) {}<\/div>$/;"	a
l00086	html/mc_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<\/div>$/;"	a
l00086	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<\/div>$/;"	a
l00086	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    lock_t* childLock;<\/div>$/;"	a
l00086	html/mtrand_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="comment">\/\/ Not thread safe (unless auto-initialization is avoided and each thread has<\/span><\/div>$/;"	a
l00086	html/mutex_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        }<\/div>$/;"	a
l00086	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;            <span class="comment">\/\/ bhsrIdx = 0;<\/span><\/div>$/;"	a
l00086	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        uint64_t lastUnhaltedCycle; <span class="comment">\/\/set on transition to HALTED<\/span><\/div>$/;"	a
l00086	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        int32_t bestId;<\/div>$/;"	a
l00086	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getPartition(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00086	html/partitioner_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getNumPartitions() <span class="keyword">const<\/span> = 0;<\/div>$/;"	a
l00086	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;            <span class="keywordtype">void<\/span> alloc(uint64_t curCycle) {<\/div>$/;"	a
l00086	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;                blocks[i].enqueue(obj, offset);<\/div>$/;"	a
l00086	html/process__tree_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;                child-&gt;children.clear();<\/div>$/;"	a
l00086	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;            VectorCounter::init(name, desc, size);<\/div>$/;"	a
l00086	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;                recordCandidate(*ci);<\/div>$/;"	a
l00086	html/scheduler_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        <span class="keyword">struct <\/span>FutexJoinInfo {<\/div>$/;"	a
l00086	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00086	html/stats_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<\/div>$/;"	a
l00086	html/timing__event_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        uint32_t preDelay;<\/div>$/;"	a
l00086	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;        g_string name;<\/div>$/;"	a
l00086	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="comment">\/\/ OK, even simpler...<\/span><\/div>$/;"	a
l00086	html/zsim_8h_source.html	/^<div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <a class="code" href="classScheduler.html">Scheduler<\/a>* sched;<\/div>$/;"	a
l00087	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div>$/;"	a
l00087	html/barrier_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;        <span class="comment">\/\/Threads in OFFLINE state are not on the runlist, so runListSize - runningThreads - leftThreads == waitingThreads<\/span><\/div>$/;"	a
l00087	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;        uint32_t setMask;<\/div>$/;"	a
l00087	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;        uint32_t selfId;<\/div>$/;"	a
l00087	html/config_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="comment"> * 0-elem lists are OK<\/span><\/div>$/;"	a
l00087	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div>$/;"	a
l00087	html/core_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;        <span class="keyword">virtual<\/span> <a class="code" href="structInstrFuncPtrs.html">InstrFuncPtrs<\/a> GetFuncPtrs() = 0;<\/div>$/;"	a
l00087	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div>$/;"	a
l00087	html/cpuenum_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="preprocessor">#endif  \/\/ CPUENUM_H_<\/span><\/div>$/;"	a
l00087	html/cpuid_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    {0x80000019, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00087	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;        };<\/div>$/;"	a
l00087	html/decoder_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define MAX_INSTR_REG_WRITES 4<\/span><\/div>$/;"	a
l00087	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;        <span class="comment">\/\/ not here, why is this not a struct internal to that class?)<\/span><\/div>$/;"	a
l00087	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;        uint32_t chipCapacity; <span class="comment">\/\/ megabits<\/span><\/div>$/;"	a
l00087	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno"><a class="line" href="classSplitAddrMemory.html">   87<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classSplitAddrMemory.html">SplitAddrMemory<\/a> : <span class="keyword">public<\/span> <a class="code" href="classMemObject.html">MemObject<\/a> {<\/div>$/;"	a
l00087	html/event__queue_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;        lock_t qLock;<\/div>$/;"	a
l00087	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;            tr = rec;<\/div>$/;"	a
l00087	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;        <span class="keywordtype">void<\/span> setSourceId(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00087	html/galloc_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;};<\/div>$/;"	a
l00087	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;                lruList.remove(&amp;array[lineId]);<\/div>$/;"	a
l00087	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div>$/;"	a
l00087	html/locks_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;}<\/div>$/;"	a
l00087	html/log_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div>$/;"	a
l00087	html/mc_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno"><a class="line" href="classTLBEntry.html">   87<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTLBEntry.html">TLBEntry<\/a><\/div>$/;"	a
l00087	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00087	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    MESIState initialState;<\/div>$/;"	a
l00087	html/mtrand_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="comment">\/\/ its own MTRand object)<\/span><\/div>$/;"	a
l00087	html/mutex_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div>$/;"	a
l00087	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;            <span class="comment">\/\/ phtIdx = (bhsr[bhsrIdx] ^ ((uint32_t)branchPc)) &amp; phtMask;<\/span><\/div>$/;"	a
l00087	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div>$/;"	a
l00087	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;        uint32_t candIdx;<\/div>$/;"	a
l00087	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;};<\/div>$/;"	a
l00087	html/partitioner_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div>$/;"	a
l00087	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;                stride = 1;<\/div>$/;"	a
l00087	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00087	html/process__tree_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;                addChild(child);<\/div>$/;"	a
l00087	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;            curState = 0;<\/div>$/;"	a
l00087	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;            }<\/div>$/;"	a
l00087	html/scheduler_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;            FutexJoinAction action;<\/div>$/;"	a
l00087	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;            <span class="keywordflow">return<\/span> <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00087	html/stats_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00087	html/timing__event_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;        uint32_t postDelay; <span class="comment">\/\/we could get by with one delay, but pre\/post makes it easier to code<\/span><\/div>$/;"	a
l00087	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;        <a class="code" href="classMemObject.html">MemObject<\/a>* parent;<\/div>$/;"	a
l00087	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno"><a class="line" href="classWeaveSimpleMemory.html">   87<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classWeaveSimpleMemory.html">WeaveSimpleMemory<\/a> : <span class="keyword">public<\/span> <a class="code" href="classSimpleMemory.html">SimpleMemory<\/a> {<\/div>$/;"	a
l00087	html/zsim_8h_source.html	/^<div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div>$/;"	a
l00088	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00088	html/barrier_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div>$/;"	a
l00088	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div>$/;"	a
l00088	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div>$/;"	a
l00088	html/config_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="comment"> * panics on parsing and size-violation errors<\/span><\/div>$/;"	a
l00088	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        <span class="keyword">struct <\/span>CompareDomains : <span class="keyword">public<\/span> std::binary_function&lt;DomainData*, DomainData*, bool&gt; {<\/div>$/;"	a
l00088	html/core_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;};<\/div>$/;"	a
l00088	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        <span class="comment">\/\/Misc<\/span><\/div>$/;"	a
l00088	html/cpuid_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    {0x8000001a, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00088	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        <a class="code" href="classInList.html">InList&lt;Node&gt;<\/a> reqList;  <span class="comment">\/\/ FIFO<\/span><\/div>$/;"	a
l00088	html/decoder_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define MAX_INSTR_STORES 4<\/span><\/div>$/;"	a
l00088	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        uint32_t GetBankCount(<span class="keywordtype">void<\/span>) {<span class="keywordflow">return<\/span> bankCount; }<\/div>$/;"	a
l00088	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        uint32_t bankCount;<\/div>$/;"	a
l00088	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00088	html/event__queue_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div>$/;"	a
l00088	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;            assert(tr.isValid());<\/div>$/;"	a
l00088	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;            srcId = id;<\/div>$/;"	a
l00088	html/galloc_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div>$/;"	a
l00088	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;                lruList.push_front(&amp;array[lineId]);<\/div>$/;"	a
l00088	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        <span class="keywordtype">void<\/span> push_front(T* e) {<\/div>$/;"	a
l00088	html/locks_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div>$/;"	a
l00088	html/log_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        <span class="comment">\/\/ Start capturing values<\/span><\/div>$/;"	a
l00088	html/mc_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;{<\/div>$/;"	a
l00088	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        <a class="code" href="classMD1Memory.html">MD1Memory<\/a>(uint32_t lineSize, uint32_t megacyclesPerSecond, uint32_t megabytesPerSecond, uint32_t _zeroLoadLatency, g_string&amp; _name);<\/div>$/;"	a
l00088	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div>$/;"	a
l00088	html/mtrand_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div>$/;"	a
l00088	html/mutex_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classmutex.html">mutex<\/a>* <span class="keyword">get<\/span>() <span class="keyword">const<\/span> {<\/div>$/;"	a
l00088	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div>$/;"	a
l00088	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        uint32_t domain;<\/div>$/;"	a
l00088	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        uint32_t incomingLinePart; <span class="comment">\/\/to what partition does the incoming line belong?<\/span><\/div>$/;"	a
l00088	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div>$/;"	a
l00088	html/partitioner_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        <span class="comment">\/\/ called by PartReplPolicy on a memory reference<\/span><\/div>$/;"	a
l00088	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;                lastPos = 0;<\/div>$/;"	a
l00088	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;                <span class="comment">\/\/info(&quot;XXX far enq() %ld&quot;, cycle);<\/span><\/div>$/;"	a
l00088	html/process__tree_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;                zinfo-&gt;procArray[childProcIdx] = child;<\/div>$/;"	a
l00088	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;            startNs = getNs();<\/div>$/;"	a
l00088	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;            <span class="keywordflow">return<\/span> getBestCandidate();<\/div>$/;"	a
l00088	html/scheduler_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;            uint32_t maxWakes;<\/div>$/;"	a
l00088	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        }<\/div>$/;"	a
l00088	html/stats_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;        <a class="code" href="classStat.html">Stat<\/a>() : _name(<span class="keyword">nullptr<\/span>), _desc(<span class="keyword">nullptr<\/span>) {}<\/div>$/;"	a
l00088	html/timing__event_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<\/div>$/;"	a
l00088	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00088	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00088	html/zsim_8h_source.html	/^<div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;    <span class="comment">\/\/Contention simulation<\/span><\/div>$/;"	a
l00089	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        <a class="code" href="classAccessTraceWriter.html">AccessTraceWriter<\/a>(g_string fname, uint32_t numChildren);<\/div>$/;"	a
l00089	html/barrier_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        uint32_t phaseCount; <span class="comment">\/\/INTERNAL, for LEFT-&gt;OFFLINE bookkeeping overhead reduction purposes<\/span><\/div>$/;"	a
l00089	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        <span class="comment">\/\/preinsert() stores the swaps that must be done here, postinsert() does the swaps<\/span><\/div>$/;"	a
l00089	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        <span class="comment">\/\/Profiling counters<\/span><\/div>$/;"	a
l00089	html/config_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00089	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;             <span class="keywordtype">bool<\/span> operator()(DomainData* d1, DomainData* d2) <span class="keyword">const<\/span>;<\/div>$/;"	a
l00089	html/core_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div>$/;"	a
l00089	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        <span class="keyword">inline<\/span> <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* getEventRecorder() {<span class="keywordflow">return<\/span> &amp;eventRecorder;}<\/div>$/;"	a
l00089	html/cpuid_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    {0x8000001b, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00089	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        <a class="code" href="classInList.html">InList&lt;Node&gt;<\/a> freeList; <span class="comment">\/\/ LIFO (higher locality)<\/span><\/div>$/;"	a
l00089	html/decoder_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00089	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        uint32_t GetLastBank(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> lastBank; }<\/div>$/;"	a
l00089	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        uint32_t rowAddrWidth;<\/div>$/;"	a
l00089	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;MemObject*&gt;<\/a> mems;<\/div>$/;"	a
l00089	html/event__queue_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00089	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        }<\/div>$/;"	a
l00089	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        }<\/div>$/;"	a
l00089	html/galloc_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="preprocessor">#endif  \/\/ GALLOC_H_<\/span><\/div>$/;"	a
l00089	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;            }<\/div>$/;"	a
l00089	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;            assert(e &amp;&amp; e-&gt;next == <span class="keyword">nullptr<\/span> &amp;&amp; e-&gt;prev == <span class="keyword">nullptr<\/span> &amp;&amp; e-&gt;owner == <span class="keyword">nullptr<\/span>);<\/div>$/;"	a
l00089	html/locks_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="comment">\/* TICKET LOCK: Provides FIFO ordering for fairness.<\/span><\/div>$/;"	a
l00089	html/log_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator-&gt;* (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00089	html/mc_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="keyword">public<\/span>:<\/div>$/;"	a
l00089	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div>$/;"	a
l00089	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="comment">\/\/Requester id --- used for contention simulation<\/span><\/div>$/;"	a
l00089	html/mtrand_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="preprocessor">#include &lt;climits&gt;<\/span><\/div>$/;"	a
l00089	html/mutex_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;            <span class="keywordflow">return<\/span> mut;<\/div>$/;"	a
l00089	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;            <span class="keywordtype">bool<\/span> pred = pht[phtIdx] &gt; 1;<\/div>$/;"	a
l00089	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        g_string name;<\/div>$/;"	a
l00089	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        Address incomingLineAddr;<\/div>$/;"	a
l00089	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="preprocessor">#endif  \/\/ PARTITION_MAPPER_H_<\/span><\/div>$/;"	a
l00089	html/partitioner_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> access(uint32_t partition, Address lineAddr) = 0;<\/div>$/;"	a
l00089	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;                lastLastPos = 0;<\/div>$/;"	a
l00089	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;                feMap.insert(std::pair&lt;uint64_t, T*&gt;(cycle, obj));<\/div>$/;"	a
l00089	html/process__tree_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;                info(<span class="stringliteral">&quot;Created child process %d on the fly, inheriting %d&#39;s config&quot;<\/span>, childProcIdx, procIdx);<\/div>$/;"	a
l00089	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        }<\/div>$/;"	a
l00089	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        }<\/div>$/;"	a
l00089	html/scheduler_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;            uint32_t wokenUp;<\/div>$/;"	a
l00089	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    }<\/div>$/;"	a
l00089	html/stats_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div>$/;"	a
l00089	html/timing__event_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00089	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        <a class="code" href="classTraceDriverProxyCache.html">TraceDriverProxyCache<\/a>(g_string&amp; _name) : drv(<span class="keyword">nullptr<\/span>), id(-1), name(_name) {}<\/div>$/;"	a
l00089	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;        uint32_t zeroLoadLatency;<\/div>$/;"	a
l00089	html/zsim_8h_source.html	/^<div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;    uint32_t numDomains;<\/div>$/;"	a
l00090	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/barrier_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        uint32_t* swapArray; <span class="comment">\/\/contains physical positions<\/span><\/div>$/;"	a
l00090	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profGETSHit, profGETSMiss, profGETXHit, profGETXMissIM <span class="comment">\/*from invalid*\/<\/span>, profGETXMissSM <span class="comment">\/*from S, i.e. upgrade misses*\/<\/span>;<\/div>$/;"	a
l00090	html/config_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; std::vector&lt;T&gt; ParseList(<span class="keyword">const<\/span> std::string&amp; listStr, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* delimiters);<\/div>$/;"	a
l00090	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        };<\/div>$/;"	a
l00090	html/core_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor">#endif  \/\/ CORE_H_<\/span><\/div>$/;"	a
l00090	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/cpuid_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    {0x8000001c, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00090	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/decoder_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor">#define MAX_UOPS_PER_INSTR 12  \/\/ technically, even full decoders produce 1-4 uops; we increase this for common microsequenced instructions (e.g. xchg).<\/span><\/div>$/;"	a
l00090	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        uint32_t GetLastRow(uint32_t bank) { <span class="keywordflow">return<\/span> lastRow[bank]; }<\/div>$/;"	a
l00090	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        uint32_t colAddrWidth;<\/div>$/;"	a
l00090	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        <span class="keyword">const<\/span> g_string name;<\/div>$/;"	a
l00090	html/event__queue_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        <a class="code" href="classEventQueue.html">EventQueue<\/a>() { futex_init(&amp;qLock); }<\/div>$/;"	a
l00090	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;            <span class="keywordflow">return<\/span> lineId;<\/div>$/;"	a
l00090	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;            <span class="keywordflow">if<\/span> (empty()) {<\/div>$/;"	a
l00090	html/locks_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="comment"> * WARNING: Will not work with more than 64K threads<\/span><\/div>$/;"	a
l00090	html/log_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/mc_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;   uint64_t tag;<\/div>$/;"	a
l00090	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat) {<\/div>$/;"	a
l00090	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    uint32_t srcId;<\/div>$/;"	a
l00090	html/mtrand_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor">#include &lt;cmath&gt;<\/span><\/div>$/;"	a
l00090	html/mutex_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        }<\/div>$/;"	a
l00090	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00090	html/partitioner_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;                lastPrefetchPos = 0;<\/div>$/;"	a
l00090	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;            }<\/div>$/;"	a
l00090	html/process__tree_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;            }<\/div>$/;"	a
l00090	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/scheduler_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        };<\/div>$/;"	a
l00090	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<\/div>$/;"	a
l00090	html/stats_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        <span class="keyword">virtual<\/span> ~<a class="code" href="classStat.html">Stat<\/a>() {}<\/div>$/;"	a
l00090	html/timing__event_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        <a class="code" href="classTimingEvent.html">TimingEvent<\/a>(uint32_t _preDelay, uint32_t _postDelay, int32_t _domain = -1) : next(<span class="keyword">nullptr<\/span>), state(EV_NONE), cycle(0), minStartCycle(-1L), child(<span class="keyword">nullptr<\/span>),<\/div>$/;"	a
l00090	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* getName() {<span class="keywordflow">return<\/span> name.c_str();}<\/div>$/;"	a
l00090	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;        uint32_t domain;<\/div>$/;"	a
l00090	html/zsim_8h_source.html	/^<div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <a class="code" href="classContentionSim.html">ContentionSim<\/a>* contentionSim;<\/div>$/;"	a
l00091	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> write(<a class="code" href="structAccessRecord.html">AccessRecord<\/a>&amp; acc) {<\/div>$/;"	a
l00091	html/barrier_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        uint32_t pad[16];<\/div>$/;"	a
l00091	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        uint32_t swapArrayLen; <span class="comment">\/\/set in preinsert()<\/span><\/div>$/;"	a
l00091	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profPUTS, profPUTX <span class="comment">\/*received from downstream*\/<\/span>;<\/div>$/;"	a
l00091	html/config_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div>$/;"	a
l00091	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div>$/;"	a
l00091	html/core_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00091	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        <span class="comment">\/\/Stats (called fully synchronized)<\/span><\/div>$/;"	a
l00091	html/cpuid_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    {0x8000001d, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00091	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00091	html/decoder_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00091	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        MemAccessType GetLastType(uint32_t bank) { <span class="keywordflow">return<\/span> lastType[bank]; }<\/div>$/;"	a
l00091	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        uint32_t dataBusWidth;<\/div>$/;"	a
l00091	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        uint32_t _mapping_granu;   <\/div>$/;"	a
l00091	html/event__queue_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div>$/;"	a
l00091	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        <span class="comment">\/\/ Inline to avoid extra copy<\/span><\/div>$/;"	a
l00091	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        <span class="keywordtype">void<\/span> setFlags(uint32_t flags) {<\/div>$/;"	a
l00091	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        }<\/div>$/;"	a
l00091	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;                head = e;<\/div>$/;"	a
l00091	html/locks_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00091	html/log_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        <span class="comment">\/\/ Overloads for all lower-precedence operators<\/span><\/div>$/;"	a
l00091	html/mc_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;   uint64_t way;<\/div>$/;"	a
l00091	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;            <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* memStats = <span class="keyword">new<\/span> <a class="code" href="classAggregateStat.html">AggregateStat<\/a>();<\/div>$/;"	a
l00091	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div>$/;"	a
l00091	html/mtrand_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<span class="preprocessor">#include &lt;cstdio&gt;<\/span><\/div>$/;"	a
l00091	html/mutex_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div>$/;"	a
l00091	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;            <span class="comment">\/\/ info(&quot;BP Pred: 0x%lx bshr[%d]=%x taken=%d pht=%d pred=%d&quot;, branchPc, bhsrIdx, phtIdx, taken, pht[phtIdx], pred);<\/span><\/div>$/;"	a
l00091	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00091	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        <span class="comment">\/\/Globally incremented, but bears little significance per se<\/span><\/div>$/;"	a
l00091	html/partition__mapper_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div>$/;"	a
l00091	html/partitioner_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        <span class="comment">\/\/ called by Partitioner to get misses<\/span><\/div>$/;"	a
l00091	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;                conf.reset();<\/div>$/;"	a
l00091	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;            elems++;<\/div>$/;"	a
l00091	html/process__tree_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div>$/;"	a
l00091	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        <span class="comment">\/\/I need to define this even though it is completely unnecessary, but only if I override init. gcc bug or C++ oddity?<\/span><\/div>$/;"	a
l00091	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        DECL_RANK_BINDINGS;<\/div>$/;"	a
l00091	html/scheduler_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div>$/;"	a
l00091	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> freeElem();<\/div>$/;"	a
l00091	html/stats_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div>$/;"	a
l00091	html/timing__event_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;                    domain(_domain), numChildren(0), numParents(0), preDelay(_preDelay), postDelay(_postDelay) {}<\/div>$/;"	a
l00091	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<\/div>$/;"	a
l00091	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;        uint32_t preDelay, postDelay;<\/div>$/;"	a
l00091	html/zsim_8h_source.html	/^<div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <a class="code" href="classEventRecorder.html">EventRecorder<\/a>** eventRecorders; <span class="comment">\/\/CID-&gt;EventRecorder* array<\/span><\/div>$/;"	a
l00092	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;            buf[cur++] = {acc.lineAddr, acc.reqCycle, acc.latency, (uint16_t) acc.childId, (uint8_t) acc.type};<\/div>$/;"	a
l00092	html/barrier_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div>$/;"	a
l00092	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div>$/;"	a
l00092	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profINV, profINVX, profFWD <span class="comment">\/*received from upstream*\/<\/span>;<\/div>$/;"	a
l00092	html/config_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; std::vector&lt;T&gt; ParseList(<span class="keyword">const<\/span> std::string&amp; listStr) { <span class="keywordflow">return<\/span> ParseList&lt;T&gt;(listStr, <span class="stringliteral">&quot; &quot;<\/span>); }<\/div>$/;"	a
l00092	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <span class="keyword">struct <\/span>SimThreadData {<\/div>$/;"	a
l00092	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        uint64_t getUnhaltedCycles(uint64_t curCycle) <span class="keyword">const<\/span>;<\/div>$/;"	a
l00092	html/cpuid_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    {0x8000001d, 0x00000001, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00092	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <span class="keywordtype">void<\/span> init(<span class="keywordtype">size_t<\/span> size) {<\/div>$/;"	a
l00092	html/decoder_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="comment">\/* Temporary register offsets *\/<\/span><\/div>$/;"	a
l00092	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        uint64_t GetLastRdWrCycle(uint32_t bank) { <span class="keywordflow">return<\/span> lastRdWrCycle[bank]; }<\/div>$/;"	a
l00092	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div>$/;"	a
l00092	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00092	html/event__queue_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <span class="keywordtype">void<\/span> tick() {<\/div>$/;"	a
l00092	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <span class="keyword">inline<\/span> <a class="code" href="structTimingRecord.html">TimingRecord<\/a> popRecord() __attribute__((always_inline)) {<\/div>$/;"	a
l00092	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;            reqFlags = flags;<\/div>$/;"	a
l00092	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div>$/;"	a
l00092	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;                tail = e;<\/div>$/;"	a
l00092	html/locks_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div>$/;"	a
l00092	html/log_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator == (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; == &quot;<\/span> &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00092	html/mc_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;   uint64_t count; <span class="comment">\/\/ for OS based placement policy<\/span><\/div>$/;"	a
l00092	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;            memStats-&gt;init(name.c_str(), <span class="stringliteral">&quot;Memory controller stats&quot;<\/span>);<\/div>$/;"	a
l00092	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="comment">\/\/Flags propagate across levels, though not to evictions<\/span><\/div>$/;"	a
l00092	html/mtrand_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="preprocessor">#include &lt;ctime&gt;<\/span><\/div>$/;"	a
l00092	html/mutex_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00092	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div>$/;"	a
l00092	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <a class="code" href="classOOOCoreRecorder.html">OOOCoreRecorder<\/a>(uint32_t _domain, g_string&amp; _name);<\/div>$/;"	a
l00092	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        uint64_t timestamp;<\/div>$/;"	a
l00092	html/partitioner_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t <span class="keyword">get<\/span>(uint32_t partition, uint32_t bucket) <span class="keyword">const<\/span> = 0;<\/div>$/;"	a
l00092	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;                valid.reset();<\/div>$/;"	a
l00092	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        }<\/div>$/;"	a
l00092	html/process__tree_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;            assert_msg(curChildren &lt; children.size(), <span class="stringliteral">&quot;ProcessTreeNode::getNextChild, procIdx=%d curChildren=%d numChildren=%ld&quot;<\/span>, procIdx, curChildren, children.size());<\/div>$/;"	a
l00092	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc, uint32_t size, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>** names) {<\/div>$/;"	a
l00092	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;};<\/div>$/;"	a
l00092	html/scheduler_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <span class="keyword">struct <\/span>ThreadInfo : <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a>, <a class="code" href="structInListNode.html">InListNode<\/a>&lt;ThreadInfo&gt; {<\/div>$/;"	a
l00092	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;};<\/div>$/;"	a
l00092	html/stats_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00092	html/timing__event_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classTimingEvent.html">TimingEvent<\/a>(int32_t _domain = -1) : next(<span class="keyword">nullptr<\/span>), state(EV_NONE), minStartCycle(-1L), child(<span class="keyword">nullptr<\/span>),<\/div>$/;"	a
l00092	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;        <span class="keywordtype">void<\/span> setParents(uint32_t _childId, <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;MemObject*&gt;<\/a>&amp; parents, <a class="code" href="classNetwork.html">Network<\/a>* network) {<span class="keywordtype">id<\/span> = _childId; assert(parents.size() == 1); parent = parents[0];}; <span class="comment">\/\/FIXME: Support multi-banked caches...<\/span><\/div>$/;"	a
l00092	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div>$/;"	a
l00092	html/zsim_8h_source.html	/^<div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div>$/;"	a
l00093	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;            <span class="keywordflow">if<\/span> (unlikely(cur == max)) {<\/div>$/;"	a
l00093	html/barrier_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        <span class="comment">\/* NOTE(dsm): I was initially misled that having a single lock protecting the barrier was a performance hog, and coded a lock-free version.<\/span><\/div>$/;"	a
l00093	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        uint32_t lastCandIdx;<\/div>$/;"	a
l00093	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        <span class="comment">\/\/Counter profWBIncl, profWBCoh \/* writebacks due to inclusion or coherence, received from downstream, does not include PUTS *\/;<\/span><\/div>$/;"	a
l00093	html/config_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div>$/;"	a
l00093	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;            lock_t wakeLock; <span class="comment">\/\/used to sleep\/wake up simulation thread<\/span><\/div>$/;"	a
l00093	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        uint64_t getContentionCycles() <span class="keyword">const<\/span>;<\/div>$/;"	a
l00093	html/cpuid_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    {0x8000001d, 0x00000002, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00093	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;            assert(reqList.empty() &amp;&amp; freeList.empty());<\/div>$/;"	a
l00093	html/decoder_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<span class="preprocessor">#define REG_LOAD_TEMP (REG_LAST + 1)  \/\/ REG_LAST defined by PIN<\/span><\/div>$/;"	a
l00093	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        uint64_t GetLastRefreshCycle(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> lastRefreshCycle; }<\/div>$/;"	a
l00093	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        uint32_t chipCountPerRank;<\/div>$/;"	a
l00093	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        <a class="code" href="classSplitAddrMemory.html">SplitAddrMemory<\/a>(<span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;MemObject*&gt;<\/a>&amp; _mems, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* _name, <a class="code" href="classConfig.html">Config<\/a>&amp; config) <\/div>$/;"	a
l00093	html/event__queue_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;            futex_lock(&amp;qLock);<\/div>$/;"	a
l00093	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;            <a class="code" href="structTimingRecord.html">TimingRecord<\/a> rec = tr;<\/div>$/;"	a
l00093	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        }<\/div>$/;"	a
l00093	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        uint32_t preinsert(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, Address* wbLineAddr) {<\/div>$/;"	a
l00093	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00093	html/locks_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<span class="preprocessor">#define TICKET_MASK ((1&lt;&lt;16) - 1)<\/span><\/div>$/;"	a
l00093	html/log_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator != (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; != &quot;<\/span> &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00093	html/mc_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div>$/;"	a
l00093	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;            profReads.init(<span class="stringliteral">&quot;rd&quot;<\/span>, <span class="stringliteral">&quot;Read requests&quot;<\/span>); memStats-&gt;append(&amp;profReads);<\/div>$/;"	a
l00093	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="comment">\/\/Some other things that can be indicated here: Demand vs prefetch accesses, TLB accesses, etc.<\/span><\/div>$/;"	a
l00093	html/mtrand_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div>$/;"	a
l00093	html/mutex_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        <a class="code" href="classmutex.html">mutex<\/a>* mut;<\/div>$/;"	a
l00093	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;            <span class="comment">\/\/ Update<\/span><\/div>$/;"	a
l00093	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div>$/;"	a
l00093	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div>$/;"	a
l00093	html/partitioner_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div>$/;"	a
l00093	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;                respEvents.fill(<span class="keyword">nullptr<\/span>);<\/div>$/;"	a
l00093	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div>$/;"	a
l00093	html/process__tree_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;            <span class="keywordflow">return<\/span> children[curChildren++];<\/div>$/;"	a
l00093	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;            VectorCounter::init(name, desc, size, names); <span class="comment">\/\/will call our init(name, desc, size)<\/span><\/div>$/;"	a
l00093	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div>$/;"	a
l00093	html/scheduler_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;            <span class="keyword">const<\/span> uint32_t gid;<\/div>$/;"	a
l00093	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div>$/;"	a
l00093	html/stats_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;            assert(_name);<\/div>$/;"	a
l00093	html/timing__event_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;                    domain(_domain), numChildren(0), numParents(0), preDelay(0), postDelay(0) {} <span class="comment">\/\/no delegating constructors until gcc 4.7...<\/span><\/div>$/;"	a
l00093	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;        <span class="keywordtype">void<\/span> setChildren(<span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;BaseCache*&gt;<\/a>&amp; children, <a class="code" href="classNetwork.html">Network<\/a>* network) {panic(<span class="stringliteral">&quot;Should not be called, this must be terminal&quot;<\/span>);};<\/div>$/;"	a
l00093	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00093	html/zsim_8h_source.html	/^<div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;    PAD();<\/div>$/;"	a
l00094	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;                dump(<span class="keyword">true<\/span>);<\/div>$/;"	a
l00094	html/barrier_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="comment">         * Profiling doesn&#39;t show that, however. What happened was that shorter phases caused a worse interaction with PIN locks in the memory<\/span><\/div>$/;"	a
l00094	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<\/div>$/;"	a
l00094	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;        <span class="comment">\/\/ TODO: Measuring writebacks is messy, do if needed<\/span><\/div>$/;"	a
l00094	html/config_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="comment">\/\/ fills remaining elems till maxSize with fillValue<\/span><\/div>$/;"	a
l00094	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            uint32_t firstDomain;<\/div>$/;"	a
l00094	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<\/div>$/;"	a
l00094	html/cpuid_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    {0x8000001d, 0x00000003, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00094	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            Node* buf = gm_calloc&lt;Node&gt;(size);<\/div>$/;"	a
l00094	html/decoder_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define REG_STORE_TEMP (REG_LOAD_TEMP + MAX_INSTR_LOADS)<\/span><\/div>$/;"	a
l00094	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<\/div>$/;"	a
l00094	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;        uint32_t rankCount;<\/div>$/;"	a
l00094	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            : mems(_mems), name(_name) <\/div>$/;"	a
l00094	html/event__queue_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            uint64_t curPhase = zinfo-&gt;numPhases;<\/div>$/;"	a
l00094	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            tr.clear();<\/div>$/;"	a
l00094	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<\/div>$/;"	a
l00094	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            Entry* e = lruList.back();<\/div>$/;"	a
l00094	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;                assert(head &amp;&amp; head-&gt;prev == <span class="keyword">nullptr<\/span> &amp;&amp; head-&gt;owner == <span class="keyword">this<\/span>);<\/div>$/;"	a
l00094	html/locks_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00094	html/log_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator &lt;= (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; &lt;= &quot;<\/span> &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00094	html/mc_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;   <span class="comment">\/\/ the following two are only for UnisonCache<\/span><\/div>$/;"	a
l00094	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            profWrites.init(<span class="stringliteral">&quot;wr&quot;<\/span>, <span class="stringliteral">&quot;Write requests&quot;<\/span>); memStats-&gt;append(&amp;profWrites);<\/div>$/;"	a
l00094	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="keyword">enum<\/span> Flag {<\/div>$/;"	a
l00094	html/mtrand_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;<\/span><\/div>$/;"	a
l00094	html/mutex_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;};<\/div>$/;"	a
l00094	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            pht[phtIdx] = taken? (pred? 3 : (pht[phtIdx]+1)) : (pred? (pht[phtIdx]-1) : 0); <span class="comment">\/\/2-bit saturating counter<\/span><\/div>$/;"	a
l00094	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;        <span class="comment">\/\/Methods called in the bound phase<\/span><\/div>$/;"	a
l00094	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00094	html/partitioner_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t getNumAccesses(uint32_t partition) <span class="keyword">const<\/span> = 0;<\/div>$/;"	a
l00094	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;                lastCycle = curCycle;<\/div>$/;"	a
l00094	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;        T* dequeue(uint64_t&amp; deqCycle) {<\/div>$/;"	a
l00094	html/process__tree_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;        }<\/div>$/;"	a
l00094	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;        }<\/div>$/;"	a
l00094	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="comment">\/* Plain ol&#39; LRU, though this one is sharers-aware, prioritizing lines that have<\/span><\/div>$/;"	a
l00094	html/scheduler_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            <span class="keyword">const<\/span> uint32_t linuxPid;<\/div>$/;"	a
l00094	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno"><a class="line" href="classslab_1_1SlabAlloc.html">   94<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classslab_1_1SlabAlloc.html">SlabAlloc<\/a> {<\/div>$/;"	a
l00094	html/stats_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;            <span class="keywordflow">return<\/span> _name;<\/div>$/;"	a
l00094	html/timing__event_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<\/div>$/;"	a
l00094	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<\/div>$/;"	a
l00094	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;        <a class="code" href="classWeaveSimpleMemory.html">WeaveSimpleMemory<\/a>(uint32_t _latency, uint32_t _zeroLoadLatency, uint32_t _domain, g_string&amp; _name, <a class="code" href="classConfig.html">Config<\/a>&amp; config) :<\/div>$/;"	a
l00094	html/zsim_8h_source.html	/^<div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<\/div>$/;"	a
l00095	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;                assert(cur &lt; max);<\/div>$/;"	a
l00095	html/barrier_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="comment">         * hierarchy (which use yield, not futex?). The lock-free version was actually a bit slower, as we&#39;re already serializing on curThreadIdx and<\/span><\/div>$/;"	a
l00095	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> statSwaps;<\/div>$/;"	a
l00095	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profGETNextLevelLat, profGETNetLat;<\/div>$/;"	a
l00095	html/config_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; std::vector&lt;T&gt; ParseList(<span class="keyword">const<\/span> std::string&amp; listStr, uint32_t maxSize, uint32_t fillValue) {<\/div>$/;"	a
l00095	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            uint32_t supDomain; <span class="comment">\/\/supreme, ie first not included<\/span><\/div>$/;"	a
l00095	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00095	html/cpuid_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    {0x8000001d, 0x00000004, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00095	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; size; i++) {<\/div>$/;"	a
l00095	html/decoder_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define REG_STORE_ADDR_TEMP (REG_STORE_TEMP + MAX_INSTR_STORES)<\/span><\/div>$/;"	a
l00095	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        <span class="keywordtype">bool<\/span> GetBankOpen(uint32_t bank) { <span class="keywordflow">return<\/span> bankinfo[bank]; }<\/div>$/;"	a
l00095	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        uint32_t rankWidth;<\/div>$/;"	a
l00095	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        {<\/div>$/;"	a
l00095	html/event__queue_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            g_multimap&lt;uint64_t, Event*&gt;::iterator it = evMap.begin();<\/div>$/;"	a
l00095	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            <span class="keywordflow">return<\/span> rec;<\/div>$/;"	a
l00095	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat) {<\/div>$/;"	a
l00095	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            *wbLineAddr = e-&gt;lineAddr;<\/div>$/;"	a
l00095	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;                e-&gt;next = head;<\/div>$/;"	a
l00095	html/locks_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> ticket_init(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00095	html/log_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator &gt;= (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; &gt;= &quot;<\/span> &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00095	html/mc_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;   <span class="comment">\/\/ due to space cosntraint, it is not feasible to keep one bit for each line, <\/span><\/div>$/;"	a
l00095	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            profTotalRdLat.init(<span class="stringliteral">&quot;rdlat&quot;<\/span>, <span class="stringliteral">&quot;Total latency experienced by read requests&quot;<\/span>); memStats-&gt;append(&amp;profTotalRdLat);<\/div>$/;"	a
l00095	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        IFETCH        = (1&lt;&lt;1), <span class="comment">\/\/For instruction fetches. Purely informative for now, does not imply NOEXCL (but ifetches should be marked NOEXCL)<\/span><\/div>$/;"	a
l00095	html/mtrand_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="preprocessor">#include &quot;galloc.h&quot;<\/span><\/div>$/;"	a
l00095	html/mutex_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div>$/;"	a
l00095	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            bhsr[bhsrIdx] = ((bhsr[bhsrIdx] &lt;&lt; 1) &amp; histMask ) | (taken? 1: 0); <span class="comment">\/\/we apply phtMask here, dependence is further away<\/span><\/div>$/;"	a
l00095	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        uint64_t notifyJoin(uint64_t curCycle); <span class="comment">\/\/returns th updated curCycle, if it needs updating<\/span><\/div>$/;"	a
l00095	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        <a class="code" href="classWayPartReplPolicy.html">WayPartReplPolicy<\/a>(<a class="code" href="classPartitionMonitor.html">PartitionMonitor<\/a>* _monitor, <a class="code" href="classPartMapper.html">PartMapper<\/a>* _mapper, uint64_t _lines, uint32_t _ways, <span class="keywordtype">bool<\/span> _testMode)<\/div>$/;"	a
l00095	html/partitioner_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div>$/;"	a
l00095	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            }<\/div>$/;"	a
l00095	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            assert(elems);<\/div>$/;"	a
l00095	html/process__tree_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div>$/;"	a
l00095	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<\/div>$/;"	a
l00095	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="comment"> * sharers down in the hierarchy vs lines not shared by anyone.<\/span><\/div>$/;"	a
l00095	html/scheduler_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            <span class="keyword">const<\/span> uint32_t linuxTid;<\/div>$/;"	a
l00095	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00095	html/stats_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        }<\/div>$/;"	a
l00095	html/timing__event_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t getDomain()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> domain;}<\/div>$/;"	a
l00095	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;        <a class="code" href="classMemObject.html">MemObject<\/a>* getParent()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> parent;}<\/div>$/;"	a
l00095	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;            <a class="code" href="classSimpleMemory.html#a1e09dc89a2c76c6c031334096b27235e">SimpleMemory<\/a>(_latency, _name, config), zeroLoadLatency(_zeroLoadLatency), domain(_domain)<\/div>$/;"	a
l00095	html/zsim_8h_source.html	/^<div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;    <span class="comment">\/\/World-readable<\/span><\/div>$/;"	a
l00096	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;            }<\/div>$/;"	a
l00096	html/barrier_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="comment">         * the lock-free version required to volatilize pretty much every variable. If serialization on sync() ever becomes an issue, ask me for the<\/span><\/div>$/;"	a
l00096	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div>$/;"	a
l00096	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div>$/;"	a
l00096	html/config_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    std::vector&lt;T&gt; res = ParseList&lt;T&gt;(listStr);<\/div>$/;"	a
l00096	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div>$/;"	a
l00096	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        <span class="keywordtype">void<\/span> recordAccess(uint64_t startCycle);<\/div>$/;"	a
l00096	html/cpuid_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    {0x8000001d, 0x00000005, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00096	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;                <span class="keyword">new<\/span> (&amp;buf[i]) Node();<\/div>$/;"	a
l00096	html/decoder_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define REG_EXEC_TEMP (REG_STORE_ADDR_TEMP + MAX_INSTR_STORES)<\/span><\/div>$/;"	a
l00096	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        <span class="keywordtype">void<\/span> SetBankOpen(uint32_t bank)  { bankinfo[bank] = <span class="keyword">true<\/span>; }<\/div>$/;"	a
l00096	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        uint32_t channelWidth;<\/div>$/;"	a
l00096	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;            <span class="comment">\/\/ 64 cachelines = 4096 bytes (page granularity mapping)<\/span><\/div>$/;"	a
l00096	html/event__queue_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;            <span class="keywordflow">while<\/span> (it != evMap.end() &amp;&amp; it-&gt;first &lt;= curPhase) {<\/div>$/;"	a
l00096	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        }<\/div>$/;"	a
l00096	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;            <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* cacheStat = <span class="keyword">new<\/span> <a class="code" href="classAggregateStat.html">AggregateStat<\/a>();<\/div>$/;"	a
l00096	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;            <span class="keywordflow">return<\/span> e-&gt;lineId;<\/div>$/;"	a
l00096	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;                head-&gt;prev = e;<\/div>$/;"	a
l00096	html/locks_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    *lock = 0;<\/div>$/;"	a
l00096	html/log_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator &lt;  (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; &lt; &quot;<\/span>  &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00096	html/mc_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;   <span class="comment">\/\/ so we use 1 bit for 4 lines.<\/span><\/div>$/;"	a
l00096	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;            profTotalWrLat.init(<span class="stringliteral">&quot;wrlat&quot;<\/span>, <span class="stringliteral">&quot;Total latency experienced by write requests&quot;<\/span>); memStats-&gt;append(&amp;profTotalWrLat);<\/div>$/;"	a
l00096	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        NOEXCL        = (1&lt;&lt;2), <span class="comment">\/\/Do not give back E on a GETS request (turns MESI protocol into MSI for this line). Used on e.g., ifetches and NUCA.<\/span><\/div>$/;"	a
l00096	html/mtrand_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div>$/;"	a
l00096	html/mutex_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="comment">\/* Read-write mutex based on futex locks. Fair implementation, with read<\/span><\/div>$/;"	a
l00096	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div>$/;"	a
l00096	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        <span class="keywordtype">void<\/span> notifyLeave(uint64_t curCycle);<\/div>$/;"	a
l00096	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;                : <a class="code" href="classPartReplPolicy.html">PartReplPolicy<\/a>(_monitor, _mapper), totalSize(_lines), ways(_ways), testMode(_testMode)<\/div>$/;"	a
l00096	html/partitioner_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        <span class="comment">\/\/ called by Partitioner each interval to reset miss counters<\/span><\/div>$/;"	a
l00096	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        };<\/div>$/;"	a
l00096	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;            <span class="keywordflow">while<\/span> (!blocks[curBlock % B].occ) {<\/div>$/;"	a
l00096	html/process__tree_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        uint32_t getProcIdx()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> procIdx;}<\/div>$/;"	a
l00096	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        <span class="keywordtype">void<\/span> transition(uint32_t newState) {<\/div>$/;"	a
l00096	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00096	html/scheduler_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div>$/;"	a
l00096	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        <a class="code" href="structslab_1_1Slab.html">Slab<\/a>* curSlab;<\/div>$/;"	a
l00096	html/stats_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<\/div>$/;"	a
l00096	html/timing__event_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t getNumChildren()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> numChildren;}<\/div>$/;"	a
l00096	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        <span class="keywordtype">void<\/span> setDriver(<a class="code" href="classTraceDriver.html">TraceDriver<\/a>* driver) {drv = driver;}<\/div>$/;"	a
l00096	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;        {<\/div>$/;"	a
l00096	html/zsim_8h_source.html	/^<div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;    uint32_t phaseLength;<\/div>$/;"	a
l00097	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        }<\/div>$/;"	a
l00097	html/barrier_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<span class="comment">         * lock-free code.<\/span><\/div>$/;"	a
l00097	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00097	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        <span class="keywordtype">bool<\/span> nonInclusiveHack;<\/div>$/;"	a
l00097	html/config_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <span class="keywordflow">if<\/span> (res.size() &gt; maxSize) panic(<span class="stringliteral">&quot;ParseList: Too many elements, max %d, got %ld&quot;<\/span>, maxSize, res.size());<\/div>$/;"	a
l00097	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;            std::vector&lt;std::pair&lt;uint64_t, TimingEvent*&gt; &gt; logVec;<\/div>$/;"	a
l00097	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;};<\/div>$/;"	a
l00097	html/cpuid_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    {0x8000001d, 0x00000006, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00097	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;                freeList.push_back(&amp;buf[i]);<\/div>$/;"	a
l00097	html/decoder_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00097	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        <span class="keywordtype">void<\/span> SetBankClose(uint32_t bank) { bankinfo[bank] = <span class="keyword">false<\/span>; }<\/div>$/;"	a
l00097	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        uint32_t bankWidth;<\/div>$/;"	a
l00097	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;            _mapping_granu = config.get&lt;uint32_t&gt;(<span class="stringliteral">&quot;sys.mem.mapGranu&quot;<\/span>, 64); <\/div>$/;"	a
l00097	html/event__queue_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;                <span class="keywordflow">if<\/span> (unlikely(it-&gt;first != curPhase)) panic(<span class="stringliteral">&quot;First event should have ticked on phase %ld, this is %ld&quot;<\/span>, it-&gt;first, curPhase);<\/div>$/;"	a
l00097	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<\/div>$/;"	a
l00097	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;            cacheStat-&gt;init(name.c_str(), <span class="stringliteral">&quot;Filter cache stats&quot;<\/span>);<\/div>$/;"	a
l00097	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        }<\/div>$/;"	a
l00097	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;                head = e;<\/div>$/;"	a
l00097	html/locks_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    __sync_synchronize();<\/div>$/;"	a
l00097	html/log_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator &gt;  (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; &gt; &quot;<\/span>  &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00097	html/mc_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;   uint64_t touch_bitvec; <span class="comment">\/\/ whether a line is touched in a page<\/span><\/div>$/;"	a
l00097	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;            profLoad.init(<span class="stringliteral">&quot;load&quot;<\/span>, <span class="stringliteral">&quot;Sum of load factors (0-100) per update&quot;<\/span>); memStats-&gt;append(&amp;profLoad);<\/div>$/;"	a
l00097	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        NONINCLWB     = (1&lt;&lt;3), <span class="comment">\/\/This is a non-inclusive writeback. Do not assume that the line was in the lower level. Used on NUCA (BankDir).<\/span><\/div>$/;"	a
l00097	html/mtrand_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno"><a class="line" href="classMTRand.html">   97<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMTRand.html">MTRand<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00097	html/mutex_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<span class="comment"> * operations being somewhat less expensive in the common case of multiple<\/span><\/div>$/;"	a
l00097	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;            <span class="comment">\/\/ info(&quot;BP Update: newPht=%d newBshr=%x&quot;, pht[phtIdx], bhsr[bhsrIdx]);<\/span><\/div>$/;"	a
l00097	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<\/div>$/;"	a
l00097	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        {<\/div>$/;"	a
l00097	html/partitioner_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> reset() = 0;<\/div>$/;"	a
l00097	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<\/div>$/;"	a
l00097	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;                curBlock++;<\/div>$/;"	a
l00097	html/process__tree_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        uint32_t getGroupIdx()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> groupIdx;}<\/div>$/;"	a
l00097	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;            assert(curState &lt; size());<\/div>$/;"	a
l00097	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keywordtype">bool<\/span> sharersAware&gt;<\/div>$/;"	a
l00097	html/scheduler_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;            ThreadState state;<\/div>$/;"	a
l00097	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;Slab*&gt;<\/a> freeList;<\/div>$/;"	a
l00097	html/stats_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00097	html/timing__event_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t getPreDelay()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> preDelay;}<\/div>$/;"	a
l00097	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<\/div>$/;"	a
l00097	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;            assert(_latency &gt;= _zeroLoadLatency);<\/div>$/;"	a
l00097	html/zsim_8h_source.html	/^<div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    uint32_t statsPhaseInterval;<\/div>$/;"	a
l00098	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div>$/;"	a
l00098	html/barrier_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="comment">         *\/<\/span><\/div>$/;"	a
l00098	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        <a class="code" href="classZArray.html">ZArray<\/a>(uint32_t _numLines, uint32_t _ways, uint32_t _candidates, <a class="code" href="classReplPolicy.html">ReplPolicy<\/a>* _rp, <a class="code" href="classHashFamily.html">HashFamily<\/a>* _hf);<\/div>$/;"	a
l00098	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div>$/;"	a
l00098	html/config_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="keywordflow">while<\/span> (res.size() &lt; maxSize) res.push_back(fillValue);<\/div>$/;"	a
l00098	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        };<\/div>$/;"	a
l00098	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div>$/;"	a
l00098	html/cpuid_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    {0x8000001e, 0000000000, 0x07280202, 0000000000, 0000000000, 0000000000},<\/div>$/;"	a
l00098	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;            }<\/div>$/;"	a
l00098	html/decoder_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="preprocessor">#define MAX_REGISTERS (REG_EXEC_TEMP + 64)<\/span><\/div>$/;"	a
l00098	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        uint32_t GetActiveBankCount(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00098	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        uint32_t channelDataWidth; <span class="comment">\/\/ Data bus bits (= JEDEC_BUS_WIDTH)<\/span><\/div>$/;"	a
l00098	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        }<\/div>$/;"	a
l00098	html/event__queue_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;                <span class="comment">\/\/if (it-&gt;first != curPhase) warn(&quot;First event should have ticked on phase %ld, this is %ld&quot;, it-&gt;first, curPhase);<\/span><\/div>$/;"	a
l00098	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">size_t<\/span> hasRecord()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00098	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div>$/;"	a
l00098	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div>$/;"	a
l00098	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;            }<\/div>$/;"	a
l00098	html/locks_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;}<\/div>$/;"	a
l00098	html/log_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator &amp;  (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; &amp; &quot;<\/span>  &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00098	html/mc_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;   uint64_t dirty_bitvec; <span class="comment">\/\/ whether a line is dirty in page<\/span><\/div>$/;"	a
l00098	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;            profUpdates.init(<span class="stringliteral">&quot;ups&quot;<\/span>, <span class="stringliteral">&quot;Number of latency updates&quot;<\/span>); memStats-&gt;append(&amp;profUpdates);<\/div>$/;"	a
l00098	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        PUTX_KEEPEXCL = (1&lt;&lt;4), <span class="comment">\/\/Non-relinquishing PUTX. On a PUTX, maintain the requestor&#39;s E state instead of removing the sharer (i.e., this is a pure writeback)<\/span><\/div>$/;"	a
l00098	html/mtrand_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="comment">\/\/ Data<\/span><\/div>$/;"	a
l00098	html/mutex_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="comment"> * readers. Supports atomic downgrades from writer to reader.<\/span><\/div>$/;"	a
l00098	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;            <span class="keywordflow">return<\/span> (taken == pred);<\/div>$/;"	a
l00098	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        <span class="comment">\/\/This better be inlined 100% of the time, it&#39;s called on EVERY access<\/span><\/div>$/;"	a
l00098	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;            partitions = mapper-&gt;getNumPartitions();<\/div>$/;"	a
l00098	html/partitioner_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div>$/;"	a
l00098	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        uint64_t timestamp;  <span class="comment">\/\/ for LRU<\/span><\/div>$/;"	a
l00098	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;                <span class="keywordflow">if<\/span> ((curBlock % (B\/2)) == 0 &amp;&amp; !feMap.empty()) {<\/div>$/;"	a
l00098	html/process__tree_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<\/div>$/;"	a
l00098	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;            assert(newState &lt; size());<\/div>$/;"	a
l00098	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno"><a class="line" href="classLRUReplPolicy.html">   98<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classLRUReplPolicy.html">LRUReplPolicy<\/a> : <span class="keyword">public<\/span> <a class="code" href="classReplPolicy.html">ReplPolicy<\/a> {<\/div>$/;"	a
l00098	html/scheduler_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;            uint32_t cid; <span class="comment">\/\/only current if RUNNING; otherwise, it&#39;s the last one used.<\/span><\/div>$/;"	a
l00098	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        uint32_t liveSlabs;<\/div>$/;"	a
l00098	html/stats_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;            assert(_desc);<\/div>$/;"	a
l00098	html/timing__event_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t getPostDelay()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> postDelay;}<\/div>$/;"	a
l00098	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) {panic(<span class="stringliteral">&quot;Should never be called&quot;<\/span>);}<\/div>$/;"	a
l00098	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;            preDelay = zeroLoadLatency\/2;<\/div>$/;"	a
l00098	html/zsim_8h_source.html	/^<div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    uint32_t freqMHz;<\/div>$/;"	a
l00099	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        <span class="keywordtype">void<\/span> dump(<span class="keywordtype">bool<\/span> cont);<\/div>$/;"	a
l00099	html/barrier_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        <span class="comment">\/\/lock_t barrierLock; \/\/not used anymore, using the scheduler lock instead since this is called from the scheduler<\/span><\/div>$/;"	a
l00099	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div>$/;"	a
l00099	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        PAD();<\/div>$/;"	a
l00099	html/config_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="keywordflow">return<\/span> res;<\/div>$/;"	a
l00099	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div>$/;"	a
l00099	html/core__recorder_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<span class="preprocessor">#endif  \/\/ CORE_RECORDER_H_<\/span><\/div>$/;"	a
l00099	html/cpuid_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    {0xffffffff, 0}<\/div>$/;"	a
l00099	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        }<\/div>$/;"	a
l00099	html/decoder_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00099	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        uint64_t GetLastAccessCycle(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> lastAccessCycle; }<\/div>$/;"	a
l00099	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        uint32_t channelDataWidthLog; <span class="comment">\/\/ ilog2(Datawdith \/ 8)<\/span><\/div>$/;"	a
l00099	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div>$/;"	a
l00099	html/event__queue_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;                <a class="code" href="classEvent.html">Event<\/a>* ev = it-&gt;second;<\/div>$/;"	a
l00099	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            <span class="keywordflow">return<\/span> tr.isValid();<\/div>$/;"	a
l00099	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            <a class="code" href="classProxyStat.html">ProxyStat<\/a>* fgetsStat = <span class="keyword">new<\/span> <a class="code" href="classProxyStat.html">ProxyStat<\/a>();<\/div>$/;"	a
l00099	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        <span class="keywordtype">void<\/span> postinsert(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, uint32_t lineId) {<\/div>$/;"	a
l00099	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            e-&gt;owner = <span class="keyword">this<\/span>;<\/div>$/;"	a
l00099	html/locks_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div>$/;"	a
l00099	html/log_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator |  (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; | &quot;<\/span>  &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00099	html/mc_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;};<\/div>$/;"	a
l00099	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            profClampedLoads.init(<span class="stringliteral">&quot;clampedLoads&quot;<\/span>, <span class="stringliteral">&quot;Number of updates where the load was clamped to 95%&quot;<\/span>); memStats-&gt;append(&amp;profClampedLoads);<\/div>$/;"	a
l00099	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        PREFETCH      = (1&lt;&lt;5), <span class="comment">\/\/Prefetch GETS access. Only set at level where prefetch is issued; handled early in MESICC<\/span><\/div>$/;"	a
l00099	html/mtrand_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00099	html/mutex_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00099	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        }<\/div>$/;"	a
l00099	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> record(uint64_t curCycle, uint64_t dispatchCycle, uint64_t respCycle) {<\/div>$/;"	a
l00099	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            waySize = totalSize\/ways;<\/div>$/;"	a
l00099	html/partitioner_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        uint32_t getBuckets()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> buckets; }<\/div>$/;"	a
l00099	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        Address* tag;<\/div>$/;"	a
l00099	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;                    uint64_t topCycle = (curBlock + B)*64;<\/div>$/;"	a
l00099	html/process__tree_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        <span class="comment">\/\/Returns true if this is an actual first start, false otherwise (e.g. an exec)<\/span><\/div>$/;"	a
l00099	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div>$/;"	a
l00099	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00099	html/scheduler_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div>$/;"	a
l00099	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        <a class="code" href="classmutex.html">mutex<\/a> freeLock;  <span class="comment">\/\/ used because slab frees may be concurrent<\/span><\/div>$/;"	a
l00099	html/stats_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            <span class="keywordflow">return<\/span> _desc;<\/div>$/;"	a
l00099	html/timing__event_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div>$/;"	a
l00099	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;        uint64_t invalidate(<span class="keyword">const<\/span> <a class="code" href="structInvReq.html">InvReq<\/a>&amp; req) {<\/div>$/;"	a
l00099	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;            postDelay = zeroLoadLatency - preDelay;<\/div>$/;"	a
l00099	html/zsim_8h_source.html	/^<div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<\/div>$/;"	a
l00100	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;};<\/div>$/;"	a
l00100	html/barrier_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<\/div>$/;"	a
l00100	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        int32_t lookup(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, <span class="keywordtype">bool<\/span> updateReplacement);<\/div>$/;"	a
l00100	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        lock_t ccLock;<\/div>$/;"	a
l00100	html/config_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;}<\/div>$/;"	a
l00100	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        <span class="comment">\/\/RO<\/span><\/div>$/;"	a
l00100	html/cpuid_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;};<\/div>$/;"	a
l00100	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<\/div>$/;"	a
l00100	html/decoder_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="keyword">typedef<\/span> std::vector&lt;DynUop&gt; DynUopVec;<\/div>$/;"	a
l00100	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<\/div>$/;"	a
l00100	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<\/div>$/;"	a
l00100	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) {<\/div>$/;"	a
l00100	html/event__queue_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;                evMap.erase(it);<\/div>$/;"	a
l00100	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        }<\/div>$/;"	a
l00100	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;            fgetsStat-&gt;init(<span class="stringliteral">&quot;fhGETS&quot;<\/span>, <span class="stringliteral">&quot;Filtered GETS hits&quot;<\/span>, &amp;fGETSHit);<\/div>$/;"	a
l00100	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;            Entry* e = &amp;array[lineId];<\/div>$/;"	a
l00100	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;            elems++;<\/div>$/;"	a
l00100	html/locks_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> ticket_destroy(<span class="keyword">volatile<\/span> uint32_t* lock) {}<\/div>$/;"	a
l00100	html/log_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator ^  (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; ^ &quot;<\/span>  &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00100	html/mc_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<\/div>$/;"	a
l00100	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;            parentStat-&gt;append(memStats);<\/div>$/;"	a
l00100	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    };<\/div>$/;"	a
l00100	html/mtrand_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        <span class="comment">\/\/ typedef unsigned long uint32;  \/\/ unsigned integer type, at least 32 bits<\/span><\/div>$/;"	a
l00100	html/mutex_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno"><a class="line" href="classrwmutex.html">  100<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classrwmutex.html">rwmutex<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00100	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;};<\/div>$/;"	a
l00100	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;            <span class="keywordflow">if<\/span> (unlikely(eventRecorder.hasRecord())) recordAccess(curCycle, dispatchCycle, respCycle);<\/div>$/;"	a
l00100	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;            assert(waySize*ways == totalSize); <span class="comment">\/\/no partial ways...<\/span><\/div>$/;"	a
l00100	html/partitioner_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<\/div>$/;"	a
l00100	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        Entry* array;<\/div>$/;"	a
l00100	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;                    <span class="comment">\/\/Move every element with cycle &lt; topCycle to blocks[]<\/span><\/div>$/;"	a
l00100	html/process__tree_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        <span class="keywordtype">bool<\/span> notifyStart();<\/div>$/;"	a
l00100	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;            uint64_t curNs = getNs();<\/div>$/;"	a
l00100	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        uint64_t timestamp; <span class="comment">\/\/ incremented on each access<\/span><\/div>$/;"	a
l00100	html/scheduler_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;            <span class="keyword">volatile<\/span> ThreadInfo* handoffThread; <span class="comment">\/\/if at the end of a sync() this is not nullptr, we need to transfer our current context to the thread pointed here.<\/span><\/div>$/;"	a
l00100	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<\/div>$/;"	a
l00100	html/stats_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        }<\/div>$/;"	a
l00100	html/timing__event_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> setPreDelay(uint32_t d) {preDelay = d;}<\/div>$/;"	a
l00100	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;            <span class="keywordflow">return<\/span> drv-&gt;invalidate(<span class="keywordtype">id<\/span>, req.lineAddr, req.type, req.writeback, req.cycle, req.srcId);<\/div>$/;"	a
l00100	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;        }<\/div>$/;"	a
l00100	html/zsim_8h_source.html	/^<div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="comment">\/\/Maxima\/termination conditions<\/span><\/div>$/;"	a
l00101	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/barrier_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        <a class="code" href="classMTRand.html">MTRand<\/a> rnd;<\/div>$/;"	a
l00101	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        uint32_t preinsert(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, Address* wbLineAddr);<\/div>$/;"	a
l00101	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        PAD();<\/div>$/;"	a
l00101	html/config_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        DomainData* domains;<\/div>$/;"	a
l00101	html/cpuid_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> empty()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> reqList.empty(); }<\/div>$/;"	a
l00101	html/decoder_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        uint64_t GetActivateCount(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> activateCount; }<\/div>$/;"	a
l00101	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        <span class="comment">\/\/ Timing Parameters<\/span><\/div>$/;"	a
l00101	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;            Address addr = req.lineAddr;<\/div>$/;"	a
l00101	html/event__queue_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;                ev-&gt;callback(); <span class="comment">\/\/NOTE: Callback cannot call insert(), will deadlock (could use recursive locks if needed)<\/span><\/div>$/;"	a
l00101	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;            <a class="code" href="classProxyStat.html">ProxyStat<\/a>* fgetxStat = <span class="keyword">new<\/span> <a class="code" href="classProxyStat.html">ProxyStat<\/a>();<\/div>$/;"	a
l00101	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        }<\/div>$/;"	a
l00101	html/locks_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/log_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator &amp;&amp; (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; &amp;&amp; &quot;<\/span> &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00101	html/mc_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classLinePlacementPolicy.html">LinePlacementPolicy<\/a>;<\/div>$/;"	a
l00101	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        }<\/div>$/;"	a
l00101	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    uint32_t flags;<\/div>$/;"	a
l00101	html/mtrand_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        <span class="comment">\/\/ dsm: WTF??? In x86-64, unsigned long is 64 bits! Using uint32_t broke<\/span><\/div>$/;"	a
l00101	html/mutex_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00101	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        }<\/div>$/;"	a
l00101	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/partitioner_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00101	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;                    FEMapIterator it = feMap.begin();<\/div>$/;"	a
l00101	html/process__tree_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;            assert(curNs &gt;= startNs);<\/div>$/;"	a
l00101	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        uint64_t* array;<\/div>$/;"	a
l00101	html/scheduler_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;            <span class="keyword">volatile<\/span> uint32_t futexWord;<\/div>$/;"	a
l00101	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00101	html/stats_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/timing__event_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> setPostDelay(uint32_t d) {postDelay = d;}<\/div>$/;"	a
l00101	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;        }<\/div>$/;"	a
l00101	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div>$/;"	a
l00101	html/zsim_8h_source.html	/^<div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    uint64_t maxPhases; <span class="comment">\/\/terminate when this many phases have been reached<\/span><\/div>$/;"	a
l00102	html/access__tracing_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="preprocessor">#endif  \/\/ _ACCESS_TRACING_H<\/span><\/div>$/;"	a
l00102	html/barrier_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        <a class="code" href="classCallee.html">Callee<\/a>* sched; <span class="comment">\/\/FIXME: I don&#39;t like this organization, but don&#39;t have time to refactor the barrier code, this is used for a callback when the phase is done<\/span><\/div>$/;"	a
l00102	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        <span class="keywordtype">void<\/span> postinsert(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, uint32_t candidate);<\/div>$/;"	a
l00102	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div>$/;"	a
l00102	html/config_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="keywordtype">void<\/span> Tokenize(<span class="keyword">const<\/span> std::string&amp; str, std::vector&lt;std::string&gt;&amp; tokens, <span class="keyword">const<\/span> std::string&amp; delimiters);<\/div>$/;"	a
l00102	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        SimThreadData* simThreads;<\/div>$/;"	a
l00102	html/cpuid_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="preprocessor">#endif  \/\/ CPUID_H_<\/span><\/div>$/;"	a
l00102	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> full()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> freeList.empty(); }<\/div>$/;"	a
l00102	html/decoder_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="comment">\/\/Nehalem-style decoder. Fully static for now<\/span><\/div>$/;"	a
l00102	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        <span class="keywordtype">void<\/span> IncActivateCount(<span class="keywordtype">void<\/span>) { activateCount++; }<\/div>$/;"	a
l00102	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        <span class="keywordtype">double<\/span> tCK;<\/div>$/;"	a
l00102	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;            uint32_t mem = (addr \/ _mapping_granu) % mems.size();<\/div>$/;"	a
l00102	html/event__queue_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;                <span class="keywordflow">if<\/span> (ev-&gt;getPeriod()) {<\/div>$/;"	a
l00102	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        <span class="comment">\/\/Called by crossing events<\/span><\/div>$/;"	a
l00102	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;            fgetxStat-&gt;init(<span class="stringliteral">&quot;fhGETX&quot;<\/span>, <span class="stringliteral">&quot;Filtered GETX hits&quot;<\/span>, &amp;fGETXHit);<\/div>$/;"	a
l00102	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;            <span class="comment">\/\/Update addr mapping for lineId<\/span><\/div>$/;"	a
l00102	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div>$/;"	a
l00102	html/locks_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> ticket_lock(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00102	html/log_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator || (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; || &quot;<\/span> &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00102	html/mc_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classPagePlacementPolicy.html">PagePlacementPolicy<\/a>;<\/div>$/;"	a
l00102	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div>$/;"	a
l00102	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div>$/;"	a
l00102	html/mtrand_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        <span class="comment">\/\/ everything using this class, so I just turned all uint32 into uint64_t<\/span><\/div>$/;"	a
l00102	html/mutex_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        <a class="code" href="classmutex.html">mutex<\/a> wq;<\/div>$/;"	a
l00102	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div>$/;"	a
l00102	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div>$/;"	a
l00102	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;            partInfo = gm_calloc&lt;PartInfo&gt;(partitions);<\/div>$/;"	a
l00102	html/partitioner_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        uint32_t buckets;<\/div>$/;"	a
l00102	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profAccesses, profPrefetches, profDoublePrefetches, profPageHits, profHits, profShortHits, profStrideSwitches, profLowConfAccs;<\/div>$/;"	a
l00102	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;                    <span class="keywordflow">while<\/span> (it != feMap.end() &amp;&amp; it-&gt;first &lt; topCycle) {<\/div>$/;"	a
l00102	html/process__tree_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        <span class="comment">\/\/Returns true if this is the last process to end, false otherwise<\/span><\/div>$/;"	a
l00102	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div>$/;"	a
l00102	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00102	html/scheduler_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;            <span class="keyword">volatile<\/span> <span class="keywordtype">bool<\/span> needsJoin; <span class="comment">\/\/after waiting on the scheduler, should we join the barrier, or is our cid good to go already?<\/span><\/div>$/;"	a
l00102	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        <a class="code" href="classslab_1_1SlabAlloc.html">SlabAlloc<\/a>() : curSlab(<span class="keyword">nullptr<\/span>), liveSlabs(0) {<\/div>$/;"	a
l00102	html/stats_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00102	html/timing__event_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div>$/;"	a
l00102	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;};<\/div>$/;"	a
l00102	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) {<\/div>$/;"	a
l00102	html/zsim_8h_source.html	/^<div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;    uint64_t maxMinInstrs; <span class="comment">\/\/terminate when all threads have reached this many instructions<\/span><\/div>$/;"	a
l00103	html/barrier_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div>$/;"	a
l00103	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div>$/;"	a
l00103	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00103	html/config_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div>$/;"	a
l00103	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div>$/;"	a
l00103	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">size_t<\/span> size()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> reqList.size(); }<\/div>$/;"	a
l00103	html/decoder_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno"><a class="line" href="classDecoder.html">  103<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDecoder.html">Decoder<\/a> {<\/div>$/;"	a
l00103	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        uint32_t GetPrechargeCount(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> prechargeCount; }<\/div>$/;"	a
l00103	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        uint32_t tCMD;<\/div>$/;"	a
l00103	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;            Address sel1 = addr \/ _mapping_granu \/ mems.size();<\/div>$/;"	a
l00103	html/event__queue_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;                    evMap.insert(std::pair&lt;uint64_t, Event*&gt;(curPhase + ev-&gt;getPeriod(), ev));<\/div>$/;"	a
l00103	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t getSlack(uint64_t origStartCycle)<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00103	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;            cacheStat-&gt;append(fgetsStat);<\/div>$/;"	a
l00103	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;            lineMap.erase(e-&gt;lineAddr);<\/div>$/;"	a
l00103	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        <span class="keywordtype">void<\/span> push_back(T* e) {<\/div>$/;"	a
l00103	html/locks_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="comment">\/* Technically, we want to do this, but I&#39;m guessing the 64-bit<\/span><\/div>$/;"	a
l00103	html/log_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator +  (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; + &quot;<\/span>  &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00103	html/mc_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classOSPlacementPolicy.html">OSPlacementPolicy<\/a>;<\/div>$/;"	a
l00103	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        <span class="comment">\/\/uint32_t access(Address lineAddr, AccessType type, uint32_t childId, MESIState* state \/*both input and output*\/, MESIState initialState, lock_t* childLock);<\/span><\/div>$/;"	a
l00103	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> set(Flag f) {flags |= f;}<\/div>$/;"	a
l00103	html/mtrand_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div>$/;"	a
l00103	html/mutex_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        <a class="code" href="classmutex.html">mutex<\/a> rb;<\/div>$/;"	a
l00103	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="keyword">template<\/span>&lt;u<span class="keywordtype">int<\/span>32_t H, u<span class="keywordtype">int<\/span>32_t WSZ&gt;<\/div>$/;"	a
l00103	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        <span class="comment">\/\/Methods called between the bound and weave phases<\/span><\/div>$/;"	a
l00103	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; partitions; i++) {<\/div>$/;"	a
l00103	html/partitioner_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;};<\/div>$/;"	a
l00103	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div>$/;"	a
l00103	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;                        uint64_t cycle = it-&gt;first;<\/div>$/;"	a
l00103	html/process__tree_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        <span class="keywordtype">bool<\/span> notifyEnd() __attribute__((warn_unused_result));<\/div>$/;"	a
l00103	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;            inc(curState, curNs - startNs);<\/div>$/;"	a
l00103	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div>$/;"	a
l00103	html/scheduler_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div>$/;"	a
l00103	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;            allocSlab();<\/div>$/;"	a
l00103	html/stats_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> initStat(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc) {<\/div>$/;"	a
l00103	html/timing__event_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t getMinStartCycle()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> minStartCycle;}<\/div>$/;"	a
l00103	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<\/div>$/;"	a
l00103	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;            uint64_t realRespCycle = SimpleMemory::access(req);<\/div>$/;"	a
l00103	html/zsim_8h_source.html	/^<div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;    uint64_t maxTotalInstrs; <span class="comment">\/\/terminate when the aggregate number of instructions reaches this number<\/span><\/div>$/;"	a
l00104	html/barrier_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00104	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        <span class="comment">\/\/zcache-specific, since timing code needs to know the number of swaps, and these depend on idx<\/span><\/div>$/;"	a
l00104	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        <a class="code" href="classMESIBottomCC.html">MESIBottomCC<\/a>(uint32_t _numLines, uint32_t _selfId, <span class="keywordtype">bool<\/span> _nonInclusiveHack) : numLines(_numLines), selfId(_selfId), nonInclusiveHack(_nonInclusiveHack) {<\/div>$/;"	a
l00104	html/config_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<span class="preprocessor">#endif  \/\/ CONFIG_H_<\/span><\/div>$/;"	a
l00104	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        PAD();<\/div>$/;"	a
l00104	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<\/div>$/;"	a
l00104	html/decoder_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00104	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        <span class="keywordtype">void<\/span> IncPrechargeCount(<span class="keywordtype">void<\/span>) { prechargeCount++; }<\/div>$/;"	a
l00104	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        uint32_t tRC;<\/div>$/;"	a
l00104	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            Address sel2 = addr % _mapping_granu;<\/div>$/;"	a
l00104	html/event__queue_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00104	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            <span class="keywordflow">return<\/span> origStartCycle + lastStartSlack;<\/div>$/;"	a
l00104	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            cacheStat-&gt;append(fgetxStat);<\/div>$/;"	a
l00104	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            assert((lineMap.find(lineAddr) == lineMap.end()));<\/div>$/;"	a
l00104	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            assert(e &amp;&amp; e-&gt;next == <span class="keyword">nullptr<\/span> &amp;&amp; e-&gt;prev == <span class="keyword">nullptr<\/span> &amp;&amp; e-&gt;owner == <span class="keyword">nullptr<\/span>);<\/div>$/;"	a
l00104	html/locks_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<span class="comment">     * datapath is not very well optimized for 16-bit xadd...<\/span><\/div>$/;"	a
l00104	html/log_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator -  (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; - &quot;<\/span>  &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00104	html/mc_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<\/div>$/;"	a
l00104	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00104	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> is (Flag f)<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> flags &amp; f;}<\/div>$/;"	a
l00104	html/mtrand_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        <span class="keyword">enum<\/span> { N = 624 };       <span class="comment">\/\/ length of state vector<\/span><\/div>$/;"	a
l00104	html/mutex_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        <span class="keyword">volatile<\/span> uint32_t readers;<\/div>$/;"	a
l00104	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno"><a class="line" href="classWindowStructure.html">  104<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classWindowStructure.html">WindowStructure<\/a> {<\/div>$/;"	a
l00104	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        uint64_t cSimStart(uint64_t curCycle); <span class="comment">\/\/returns updated curCycle<\/span><\/div>$/;"	a
l00104	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;                partInfo[i].targetSize = 0;<\/div>$/;"	a
l00104	html/partitioner_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<\/div>$/;"	a
l00104	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        <a class="code" href="classMemObject.html">MemObject<\/a>* parent;<\/div>$/;"	a
l00104	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;                        T* obj = it-&gt;second;<\/div>$/;"	a
l00104	html/process__tree_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<\/div>$/;"	a
l00104	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            <span class="comment">\/\/info(&quot;%d: %ld \/ %ld&quot;, curState, curNs - startNs, VectorCounter::count(curState));<\/span><\/div>$/;"	a
l00104	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00104	html/scheduler_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            <span class="keywordtype">bool<\/span> markedForSleep; <span class="comment">\/\/if true, we will go to sleep on the next leave()<\/span><\/div>$/;"	a
l00104	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        }<\/div>$/;"	a
l00104	html/stats_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            assert(name);<\/div>$/;"	a
l00104	html/timing__event_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> setMinStartCycle(uint64_t c) {minStartCycle = c;}<\/div>$/;"	a
l00104	html/trace__driver_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<span class="preprocessor">#endif <\/span><span class="comment">\/*__TRACE_DRIVER_H__*\/<\/span><span class="preprocessor"><\/span><\/div>$/;"	a
l00104	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;            uint32_t realLatency = realRespCycle - req.cycle;<\/div>$/;"	a
l00104	html/zsim_8h_source.html	/^<div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    uint64_t maxSimTimeNs; <span class="comment">\/\/terminate when the simulation time (bound+weave) exceeds this many ns<\/span><\/div>$/;"	a
l00105	html/barrier_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        <a class="code" href="classBarrier.html">Barrier<\/a>(uint32_t _parallelThreads, <a class="code" href="classCallee.html">Callee<\/a>* _sched) : parallelThreads(_parallelThreads), rnd(0xBA77137), sched(_sched) {<\/div>$/;"	a
l00105	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        <span class="comment">\/\/Should be called after preinsert(). Allows intervening lookups<\/span><\/div>$/;"	a
l00105	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;            array = gm_calloc&lt;MESIState&gt;(numLines);<\/div>$/;"	a
l00105	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div>$/;"	a
l00105	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        <span class="keyword">inline<\/span> T* alloc() {<\/div>$/;"	a
l00105	html/decoder_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        <span class="keyword">struct <\/span>Instr {<\/div>$/;"	a
l00105	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div>$/;"	a
l00105	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        uint32_t tRAS;<\/div>$/;"	a
l00105	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;            req.lineAddr = sel1 * _mapping_granu + sel2;  <\/div>$/;"	a
l00105	html/event__queue_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;                    <span class="keyword">delete<\/span> ev;<\/div>$/;"	a
l00105	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        }<\/div>$/;"	a
l00105	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div>$/;"	a
l00105	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;            e-&gt;lineAddr = lineAddr;<\/div>$/;"	a
l00105	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;            <span class="keywordflow">if<\/span> (empty()) {<\/div>$/;"	a
l00105	html/locks_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<span class="comment">     * volatile uint16_t* low = ((volatile uint16_t*) lock) + 1;<\/span><\/div>$/;"	a
l00105	html/log_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator *  (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; * &quot;<\/span>  &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00105	html/mc_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<span class="comment">\/\/class PlacementPolicy;<\/span><\/div>$/;"	a
l00105	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div>$/;"	a
l00105	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;};<\/div>$/;"	a
l00105	html/mtrand_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        <span class="keyword">enum<\/span> { SAVE = N + 1 };  <span class="comment">\/\/ length of array for save()<\/span><\/div>$/;"	a
l00105	html/mutex_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div>$/;"	a
l00105	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00105	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        uint64_t cSimEnd(uint64_t curCycle); <span class="comment">\/\/returns updated curCycle<\/span><\/div>$/;"	a
l00105	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div>$/;"	a
l00105	html/partitioner_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<span class="comment">\/\/ Maintains UMONs for each partition as in (Qureshi and Patt, ISCA 2006).<\/span><\/div>$/;"	a
l00105	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        <a class="code" href="classBaseCache.html">BaseCache<\/a>* child;<\/div>$/;"	a
l00105	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div>$/;"	a
l00105	html/process__tree_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        <span class="keywordtype">void<\/span> heartbeat();<\/div>$/;"	a
l00105	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;            curState = newState;<\/div>$/;"	a
l00105	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classLRUReplPolicy.html">LRUReplPolicy<\/a>(uint32_t _numLines) : timestamp(1), numLines(_numLines) {<\/div>$/;"	a
l00105	html/scheduler_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;            uint64_t wakeupPhase; <span class="comment">\/\/if SLEEPING, when do we have to wake up?<\/span><\/div>$/;"	a
l00105	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div>$/;"	a
l00105	html/stats_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;            assert(desc);<\/div>$/;"	a
l00105	html/timing__event_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div>$/;"	a
l00105	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<\/div>$/;"	a
l00105	html/zsim_8h_source.html	/^<div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    uint64_t maxProcEventualDumps; <span class="comment">\/\/term if the number of heartbeat-triggered process dumps reached this (MP\/MT)<\/span><\/div>$/;"	a
l00106	html/barrier_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t t = 0; t &lt; MAX_THREADS; t++) {<\/div>$/;"	a
l00106	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;        uint32_t getLastCandIdx()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> lastCandIdx;}<\/div>$/;"	a
l00106	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; numLines; i++) {<\/div>$/;"	a
l00106	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;        uint32_t numDomains;<\/div>$/;"	a
l00106	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            assert(!full());<\/div>$/;"	a
l00106	html/decoder_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            INS ins;<\/div>$/;"	a
l00106	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;        uint64_t GetReadBurstCount(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> readBurstCount; }<\/div>$/;"	a
l00106	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;        uint32_t tRCD;<\/div>$/;"	a
l00106	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            <span class="comment">\/\/uint32_t mem = addr % mems.size();<\/span><\/div>$/;"	a
l00106	html/event__queue_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;                }<\/div>$/;"	a
l00106	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div>$/;"	a
l00106	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            initCacheStats(cacheStat);<\/div>$/;"	a
l00106	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            lineMap[lineAddr] = lineId;<\/div>$/;"	a
l00106	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;                head = e;<\/div>$/;"	a
l00106	html/locks_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<span class="comment">     * uint32_t ticket = atomic_fetchadd_16(low, 1);<\/span><\/div>$/;"	a
l00106	html/log_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator \/  (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; \/ &quot;<\/span>  &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00106	html/mc_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDDRMemory.html">DDRMemory<\/a>;<\/div>$/;"	a
l00106	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* getName() {<span class="keywordflow">return<\/span> name.c_str();}<\/div>$/;"	a
l00106	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div>$/;"	a
l00106	html/mtrand_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div>$/;"	a
l00106	html/mutex_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00106	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;        <span class="comment">\/\/ NOTE: Nehalem has POPCNT, but we want this to run reasonably fast on Core2&#39;s, so let&#39;s keep track of both count and mask.<\/span><\/div>$/;"	a
l00106	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div>$/;"	a
l00106	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;                <span class="comment">\/\/Need placement new, these object have vptr<\/span><\/div>$/;"	a
l00106	html/partitioner_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<span class="comment">\/\/ Stupid name...but what do you call it? -nzb<\/span><\/div>$/;"	a
l00106	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;        uint32_t childId;<\/div>$/;"	a
l00106	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;                        uint64_t absBlock = cycle\/64;<\/div>$/;"	a
l00106	html/process__tree_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div>$/;"	a
l00106	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            startNs = curNs;<\/div>$/;"	a
l00106	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            array = gm_calloc&lt;uint64_t&gt;(numLines);<\/div>$/;"	a
l00106	html/scheduler_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div>$/;"	a
l00106	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;        <span class="keywordtype">void<\/span>* alloc(<span class="keywordtype">size_t<\/span> sz) {<\/div>$/;"	a
l00106	html/stats_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            assert(!_name);<\/div>$/;"	a
l00106	html/timing__event_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;        <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* addChild(<a class="code" href="classTimingEvent.html">TimingEvent<\/a>* childEv, <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* evRec) {<\/div>$/;"	a
l00106	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;            uint64_t respCycle = req.cycle + ((req.type == PUTS)? 0 : zeroLoadLatency);<\/div>$/;"	a
l00106	html/zsim_8h_source.html	/^<div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div>$/;"	a
l00107	html/barrier_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                threadList[t].state = OFFLINE;<\/div>$/;"	a
l00107	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<\/div>$/;"	a
l00107	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                array[i] = I;<\/div>$/;"	a
l00107	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        uint32_t numSimThreads;<\/div>$/;"	a
l00107	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;            Node* n = freeList.back();<\/div>$/;"	a
l00107	html/decoder_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<\/div>$/;"	a
l00107	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        <span class="keywordtype">void<\/span> IncReadBurstCount(<span class="keywordtype">void<\/span>) { readBurstCount++; }<\/div>$/;"	a
l00107	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        uint32_t tRP;<\/div>$/;"	a
l00107	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;            <span class="comment">\/\/Address ctrlAddr = addr\/mems.size();<\/span><\/div>$/;"	a
l00107	html/event__queue_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                it = evMap.begin();<\/div>$/;"	a
l00107	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t getGapCycles()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00107	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;            parentStat-&gt;append(cacheStat);<\/div>$/;"	a
l00107	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<\/div>$/;"	a
l00107	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                tail = e;<\/div>$/;"	a
l00107	html/locks_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="comment">     *\/<\/span><\/div>$/;"	a
l00107	html/log_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator %  (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; % &quot;<\/span>  &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00107	html/mc_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<\/div>$/;"	a
l00107	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<\/div>$/;"	a
l00107	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="comment">\/* Invalidation\/downgrade request *\/<\/span><\/div>$/;"	a
l00107	html/mtrand_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00107	html/mutex_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        <a class="code" href="classrwmutex.html">rwmutex<\/a>() {<\/div>$/;"	a
l00107	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        <span class="keyword">struct <\/span>WinCycle {<\/div>$/;"	a
l00107	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        <span class="comment">\/\/Methods called in the weave phase<\/span><\/div>$/;"	a
l00107	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[i].profHits) <a class="code" href="classCounter.html">Counter<\/a>;<\/div>$/;"	a
l00107	html/partitioner_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno"><a class="line" href="classUMonMonitor.html">  107<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classUMonMonitor.html">UMonMonitor<\/a> : <span class="keyword">public<\/span> <a class="code" href="classPartitionMonitor.html">PartitionMonitor<\/a> {<\/div>$/;"	a
l00107	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        g_string name;<\/div>$/;"	a
l00107	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;                        assert(absBlock &gt;= curBlock);<\/div>$/;"	a
l00107	html/process__tree_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* getPatchRoot()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00107	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        }<\/div>$/;"	a
l00107	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;        }<\/div>$/;"	a
l00107	html/scheduler_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;            <a class="code" href="classg__vector.html">g_vector&lt;bool&gt;<\/a> mask;<\/div>$/;"	a
l00107	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;            assert(sz &lt; SLAB_SIZE);<\/div>$/;"	a
l00107	html/stats_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;            assert(!_desc);<\/div>$/;"	a
l00107	html/timing__event_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;            assert_msg(state == EV_NONE || state == EV_QUEUED, <span class="stringliteral">&quot;adding child in invalid state %d %s -&gt; %s&quot;<\/span>, state, <span class="keyword">typeid<\/span>(*this).name(), <span class="keyword">typeid<\/span>(*childEv).name()); <span class="comment">\/\/either not scheduled or not executed yet<\/span><\/div>$/;"	a
l00107	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;            assert(realRespCycle &gt;= respCycle);<\/div>$/;"	a
l00107	html/zsim_8h_source.html	/^<div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;    <span class="keywordtype">bool<\/span> ignoreHooks;<\/div>$/;"	a
l00108	html/barrier_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;                threadList[t].futexWord = 0;<\/div>$/;"	a
l00108	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00108	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            }<\/div>$/;"	a
l00108	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;        <span class="keywordtype">bool<\/span> skipContention;<\/div>$/;"	a
l00108	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            freeList.pop_back();<\/div>$/;"	a
l00108	html/decoder_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            uint32_t loadOps[MAX_INSTR_LOADS];<\/div>$/;"	a
l00108	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;        uint64_t GetWriteBurstCount(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> writeBurstCount; }<\/div>$/;"	a
l00108	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;        uint32_t tRPab;<\/div>$/;"	a
l00108	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            <span class="comment">\/\/req.lineAddr = ctrlAddr;<\/span><\/div>$/;"	a
l00108	html/event__queue_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            }<\/div>$/;"	a
l00108	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            <span class="keywordflow">return<\/span> lastGapCycles;<\/div>$/;"	a
l00108	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;        }<\/div>$/;"	a
l00108	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            <span class="comment">\/\/Update repl<\/span><\/div>$/;"	a
l00108	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;                e-&gt;owner = <span class="keyword">this<\/span>;<\/div>$/;"	a
l00108	html/locks_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    uint32_t val, hi, newLo;<\/div>$/;"	a
l00108	html/log_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator &lt;&lt; (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; &lt;&lt; &quot;<\/span> &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00108	html/mc_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno"><a class="line" href="classMemoryController.html">  108<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMemoryController.html">MemoryController<\/a> : <span class="keyword">public<\/span> <a class="code" href="classMemObject.html">MemObject<\/a> {<\/div>$/;"	a
l00108	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00108	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno"><a class="line" href="structInvReq.html">  108<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structInvReq.html">InvReq<\/a> {<\/div>$/;"	a
l00108	html/mtrand_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;        <span class="keyword">enum<\/span> { M = 397 };  <span class="comment">\/\/ period parameter<\/span><\/div>$/;"	a
l00108	html/mutex_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            readers = 0;<\/div>$/;"	a
l00108	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            uint8_t occUnits;<\/div>$/;"	a
l00108	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> reportIssueEventSimulated(<a class="code" href="classOOOIssueEvent.html">OOOIssueEvent<\/a>* ev, uint64_t startCycle);<\/div>$/;"	a
l00108	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[i].profMisses) <a class="code" href="classCounter.html">Counter<\/a>;<\/div>$/;"	a
l00108	html/partitioner_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00108	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div>$/;"	a
l00108	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;                        assert(absBlock &lt; curBlock + B);<\/div>$/;"	a
l00108	html/process__tree_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            <span class="keywordflow">return<\/span> patchRoot;<\/div>$/;"	a
l00108	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div>$/;"	a
l00108	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div>$/;"	a
l00108	html/scheduler_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div>$/;"	a
l00108	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            <span class="keywordtype">void<\/span>* ptr = curSlab-&gt;alloc(sz);<\/div>$/;"	a
l00108	html/stats_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            _name = name;<\/div>$/;"	a
l00108	html/timing__event_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            assert(childEv-&gt;state == EV_NONE);<\/div>$/;"	a
l00108	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;            assert(req.type == PUTS || realLatency &gt;= zeroLoadLatency);<\/div>$/;"	a
l00108	html/zsim_8h_source.html	/^<div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    <span class="keywordtype">bool<\/span> blockingSyscalls;<\/div>$/;"	a
l00109	html/barrier_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            }<\/div>$/;"	a
l00109	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;};<\/div>$/;"	a
l00109	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            futex_init(&amp;ccLock);<\/div>$/;"	a
l00109	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<\/div>$/;"	a
l00109	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            reqList.push_back(n);<\/div>$/;"	a
l00109	html/decoder_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            uint32_t numLoads;<\/div>$/;"	a
l00109	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        <span class="keywordtype">void<\/span> IncWriteBurstCount(<span class="keywordtype">void<\/span>) { writeBurstCount++; }<\/div>$/;"	a
l00109	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        uint32_t tRTRS;<\/div>$/;"	a
l00109	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            uint64_t respCycle = mems[mem]-&gt;access(req);<\/div>$/;"	a
l00109	html/event__queue_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            futex_unlock(&amp;qLock);<\/div>$/;"	a
l00109	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        }<\/div>$/;"	a
l00109	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<\/div>$/;"	a
l00109	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            lruList.remove(e);<\/div>$/;"	a
l00109	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00109	html/locks_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    <span class="keywordflow">while<\/span> (<span class="keyword">true<\/span>) {<\/div>$/;"	a
l00109	html/log_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator &gt;&gt; (T t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; &gt;&gt; &quot;<\/span> &lt;&lt; t; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00109	html/mc_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="keyword">private<\/span>:<\/div>$/;"	a
l00109	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        <span class="keywordtype">void<\/span> updateLatency();<\/div>$/;"	a
l00109	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    Address lineAddr;<\/div>$/;"	a
l00109	html/mtrand_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<\/div>$/;"	a
l00109	html/mutex_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        }<\/div>$/;"	a
l00109	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            uint8_t count;<\/div>$/;"	a
l00109	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<\/div>$/;"	a
l00109	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[i].profSelfEvictions) <a class="code" href="classCounter.html">Counter<\/a>;<\/div>$/;"	a
l00109	html/partitioner_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        <a class="code" href="classUMonMonitor.html#a695c9d9dd2ffc4e565dee9a5201c4e54">UMonMonitor<\/a>(uint32_t _numLines, uint32_t _umonLines, uint32_t _umonBuckets, uint32_t _numPartitions, uint32_t _buckets);<\/div>$/;"	a
l00109	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        uint32_t numBuffers;<\/div>$/;"	a
l00109	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;                        uint32_t i = absBlock % B;<\/div>$/;"	a
l00109	html/process__tree_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        }<\/div>$/;"	a
l00109	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keyword">virtual<\/span> uint64_t count(uint32_t idx)<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00109	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;        ~<a class="code" href="classLRUReplPolicy.html">LRUReplPolicy<\/a>() {<\/div>$/;"	a
l00109	html/scheduler_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            FakeLeaveInfo* fakeLeave; <span class="comment">\/\/ for accurate join-leaves, see below<\/span><\/div>$/;"	a
l00109	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            <span class="keywordflow">if<\/span> (unlikely(!ptr)) {<\/div>$/;"	a
l00109	html/stats_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;            _desc = desc;<\/div>$/;"	a
l00109	html/timing__event_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<\/div>$/;"	a
l00109	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<\/div>$/;"	a
l00109	html/zsim_8h_source.html	/^<div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    <span class="keywordtype">bool<\/span> perProcessCpuEnum; <span class="comment">\/\/if true, cpus are enumerated according to per-process masks (e.g., a 16-core mask in a 64-core sim sees 16 cores)<\/span><\/div>$/;"	a
l00110	html/barrier_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div>$/;"	a
l00110	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div>$/;"	a
l00110	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;        }<\/div>$/;"	a
l00110	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;        PAD();<\/div>$/;"	a
l00110	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;            <span class="keywordflow">return<\/span> &amp;n-&gt;elem;<\/div>$/;"	a
l00110	html/decoder_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div>$/;"	a
l00110	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div>$/;"	a
l00110	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;        uint32_t tRRD;<\/div>$/;"	a
l00110	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;            req.lineAddr = addr;<\/div>$/;"	a
l00110	html/event__queue_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;        }<\/div>$/;"	a
l00110	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div>$/;"	a
l00110	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t load(Address vAddr, uint64_t curCycle) {<\/div>$/;"	a
l00110	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;            lruList.push_front(e);<\/div>$/;"	a
l00110	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;                assert(tail);<\/div>$/;"	a
l00110	html/locks_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;        val = *lock;<\/div>$/;"	a
l00110	html/log_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div>$/;"	a
l00110	html/mc_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    <a class="code" href="classDDRMemory.html">DDRMemory<\/a> * BuildDDRMemory(<a class="code" href="classConfig.html">Config<\/a>&amp; config, uint32_t frequency, uint32_t domain, g_string name, <span class="keyword">const<\/span> std::string&amp; prefix, uint32_t tBL, <span class="keywordtype">double<\/span> timing_scale);<\/div>$/;"	a
l00110	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;};<\/div>$/;"	a
l00110	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    InvType type;<\/div>$/;"	a
l00110	html/mtrand_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;        uint64_t state[N];   <span class="comment">\/\/ internal state<\/span><\/div>$/;"	a
l00110	html/mutex_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div>$/;"	a
l00110	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;            <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> set(uint8_t o, uint8_t c) {occUnits = o; count = c;}<\/div>$/;"	a
l00110	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;        <span class="comment">\/\/Misc<\/span><\/div>$/;"	a
l00110	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[i].profExtEvictions) <a class="code" href="classCounter.html">Counter<\/a>;<\/div>$/;"	a
l00110	html/partitioner_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;        ~<a class="code" href="classUMonMonitor.html">UMonMonitor<\/a>();<\/div>$/;"	a
l00110	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;        <span class="keywordtype">bool<\/span> partitionBuffers; <span class="comment">\/\/ partition stream buffer among data classes<\/span><\/div>$/;"	a
l00110	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;                        uint32_t offset = cycle % 64;<\/div>$/;"	a
l00110	html/process__tree_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div>$/;"	a
l00110	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;            uint64_t partial = VectorCounter::count(idx);<\/div>$/;"	a
l00110	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;            gm_free(array);<\/div>$/;"	a
l00110	html/scheduler_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<\/div>$/;"	a
l00110	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;                allocSlab();<\/div>$/;"	a
l00110	html/stats_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;        }<\/div>$/;"	a
l00110	html/timing__event_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;            <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* res = childEv;<\/div>$/;"	a
l00110	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;            <span class="keywordflow">if<\/span> ((req.type != PUTS) &amp;&amp; zinfo-&gt;eventRecorders[req.srcId]) {<\/div>$/;"	a
l00110	html/zsim_8h_source.html	/^<div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    <span class="keywordtype">bool<\/span> oooDecode; <span class="comment">\/\/if true, Decoder does OOO (instr-&gt;uop) decoding<\/span><\/div>$/;"	a
l00111	html/barrier_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;            runList = gm_calloc&lt;uint32_t&gt;(MAX_THREADS);<\/div>$/;"	a
l00111	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<span class="comment">\/\/ Simple wrapper classes and iterators for candidates in each case; simplifies replacement policy interface without sacrificing performance<\/span><\/div>$/;"	a
l00111	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div>$/;"	a
l00111	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div>$/;"	a
l00111	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        }<\/div>$/;"	a
l00111	html/decoder_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;            <span class="comment">\/\/These contain the register indices; by convention, flags registers are stored last<\/span><\/div>$/;"	a
l00111	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        uint64_t GetIdlePowerDownCycle(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> idlePowerDownCycle; }<\/div>$/;"	a
l00111	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        uint32_t tWR;<\/div>$/;"	a
l00111	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;            <span class="keywordflow">return<\/span> respCycle;<\/div>$/;"	a
l00111	html/event__queue_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div>$/;"	a
l00111	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        <span class="comment">\/\/Called by the core&#39;s recorder<\/span><\/div>$/;"	a
l00111	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;            Address vLineAddr = vAddr &gt;&gt; lineBits;<\/div>$/;"	a
l00111	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        }<\/div>$/;"	a
l00111	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;                e-&gt;linkPrev(tail, <span class="keyword">this<\/span>);<\/div>$/;"	a
l00111	html/locks_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        hi = val &amp; (TICKET_MASK &lt;&lt; 16);<\/div>$/;"	a
l00111	html/log_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        <span class="comment">\/\/ std::nullptr_t overloads (for nullptr&#39;s in assertions)<\/span><\/div>$/;"	a
l00111	html/mc_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <\/div>$/;"	a
l00111	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div>$/;"	a
l00111	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <span class="comment">\/\/ NOTE: writeback should start false, children pull it up to true<\/span><\/div>$/;"	a
l00111	html/mtrand_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        uint64_t *pNext;     <span class="comment">\/\/ next value to get from state<\/span><\/div>$/;"	a
l00111	html/mutex_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        <span class="keywordtype">void<\/span> rdLock() {<\/div>$/;"	a
l00111	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        };<\/div>$/;"	a
l00111	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        <span class="keyword">inline<\/span> <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* getEventRecorder() {<span class="keywordflow">return<\/span> &amp;eventRecorder;}<\/div>$/;"	a
l00111	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;            }<\/div>$/;"	a
l00111	html/partitioner_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div>$/;"	a
l00111	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        uint32_t partitions;<\/div>$/;"	a
l00111	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;                        blocks[i].enqueue(obj, offset);<\/div>$/;"	a
l00111	html/process__tree_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> isInFastForward()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> inFastForward; }<\/div>$/;"	a
l00111	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;            <span class="keywordflow">return<\/span> partial + ((idx == curState)? (getNs() - startNs) : 0);<\/div>$/;"	a
l00111	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;        }<\/div>$/;"	a
l00111	html/scheduler_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;            FutexJoinInfo futexJoin;<\/div>$/;"	a
l00111	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;                ptr = curSlab-&gt;alloc(sz);<\/div>$/;"	a
l00111	html/stats_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;};<\/div>$/;"	a
l00111	html/timing__event_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div>$/;"	a
l00111	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;                <a class="code" href="classWeaveMemAccEvent.html">WeaveMemAccEvent<\/a>* memEv = <span class="keyword">new<\/span> (zinfo-&gt;eventRecorders[req.srcId]) <a class="code" href="classWeaveMemAccEvent.html">WeaveMemAccEvent<\/a>(realLatency-zeroLoadLatency, domain, preDelay, postDelay);<\/div>$/;"	a
l00111	html/zsim_8h_source.html	/^<div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div>$/;"	a
l00112	html/barrier_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;            runListSize = 0;<\/div>$/;"	a
l00112	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<span class="comment">\/\/ NOTE: All must implement the same interface and be POD (we pass them by value)<\/span><\/div>$/;"	a
l00112	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;MemObject*&gt;<\/a>&amp; _parents, <a class="code" href="classNetwork.html">Network<\/a>* network, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name);<\/div>$/;"	a
l00112	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        <span class="comment">\/\/RW<\/span><\/div>$/;"	a
l00112	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div>$/;"	a
l00112	html/decoder_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;            uint32_t inRegs[MAX_INSTR_REG_READS];<\/div>$/;"	a
l00112	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        uint64_t GetActvPowerDownCycle(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> actvPowerDownCycle; }<\/div>$/;"	a
l00112	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        uint32_t tWTR;<\/div>$/;"	a
l00112	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        }<\/div>$/;"	a
l00112	html/event__queue_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        <span class="keywordtype">void<\/span> insert(<a class="code" href="classEvent.html">Event<\/a>* ev, int64_t startDelay = -1) {<\/div>$/;"	a
l00112	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        <span class="comment">\/\/infrequently<\/span><\/div>$/;"	a
l00112	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;            uint32_t idx = vLineAddr &amp; setMask;<\/div>$/;"	a
l00112	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div>$/;"	a
l00112	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;                tail = e;<\/div>$/;"	a
l00112	html/locks_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        newLo = (val + 1) &amp; TICKET_MASK;<\/div>$/;"	a
l00112	html/log_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        <span class="comment">\/\/ Only a few are needed, since most ops w\/ nullptr are invalid<\/span><\/div>$/;"	a
l00112	html/mc_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    g_string _name;<\/div>$/;"	a
l00112	html/mem__ctrls_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<span class="preprocessor">#endif  \/\/ MEM_CTRLS_H_<\/span><\/div>$/;"	a
l00112	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    <span class="keywordtype">bool<\/span>* writeback;<\/div>$/;"	a
l00112	html/mtrand_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        <span class="keywordtype">int<\/span> left;          <span class="comment">\/\/ number of values left before reload needed<\/span><\/div>$/;"	a
l00112	html/mutex_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;            <a class="code" href="classscoped__mutex.html">scoped_mutex<\/a> r(rb);<\/div>$/;"	a
l00112	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div>$/;"	a
l00112	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div>$/;"	a
l00112	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div>$/;"	a
l00112	html/partitioner_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        uint32_t getNumPartitions()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> monitors.size(); }<\/div>$/;"	a
l00112	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        <span class="keyword">static<\/span> constexpr uint32_t MAX_PARTITIONS = 4;<\/div>$/;"	a
l00112	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;                        it++;<\/div>$/;"	a
l00112	html/process__tree_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> isInPause()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> inPause; }<\/div>$/;"	a
l00112	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;        }<\/div>$/;"	a
l00112	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div>$/;"	a
l00112	html/scheduler_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div>$/;"	a
l00112	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;                assert(ptr);<\/div>$/;"	a
l00112	html/stats_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<\/div>$/;"	a
l00112	html/timing__event_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;            <span class="keywordflow">if<\/span> (numChildren == 0) {<\/div>$/;"	a
l00112	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;                memEv-&gt;setMinStartCycle(req.cycle);<\/div>$/;"	a
l00112	html/zsim_8h_source.html	/^<div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    PAD();<\/div>$/;"	a
l00113	html/barrier_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            curThreadIdx = 0;<\/div>$/;"	a
l00113	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno"><a class="line" href="structSetAssocCands.html">  113<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structSetAssocCands.html">SetAssocCands<\/a> {<\/div>$/;"	a
l00113	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div>$/;"	a
l00113	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;        lock_t waitLock;<\/div>$/;"	a
l00113	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno"><a class="line" href="structRequestQueue_1_1iterator.html">  113<\/a><\/span>&#160;        <span class="keyword">struct <\/span><a class="code" href="structRequestQueue_1_1iterator.html">iterator<\/a> {<\/div>$/;"	a
l00113	html/decoder_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            uint32_t numInRegs;<\/div>$/;"	a
l00113	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;        uint64_t GetIdleStandbyCycle(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> idleStandbyCycle; }<\/div>$/;"	a
l00113	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;        uint32_t tCAS;<\/div>$/;"	a
l00113	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div>$/;"	a
l00113	html/event__queue_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            futex_lock(&amp;qLock);<\/div>$/;"	a
l00113	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;        <span class="keywordtype">void<\/span> setGapCycles(uint64_t gapCycles) {<\/div>$/;"	a
l00113	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            uint64_t availCycle = filterArray[idx].availCycle; <span class="comment">\/\/read before, careful with ordering to avoid timing races<\/span><\/div>$/;"	a
l00113	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;        <a class="code" href="classReplPolicy.html">ReplPolicy<\/a>* getRP()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> rp;}<\/div>$/;"	a
l00113	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            }<\/div>$/;"	a
l00113	html/locks_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;        <span class="keywordflow">if<\/span> (__sync_bool_compare_and_swap(lock, val, (hi | newLo))) <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00113	html/log_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator-&gt;* (std::nullptr_t t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot;nullptr&quot;<\/span>; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00113	html/mc_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div>$/;"	a
l00113	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    uint64_t cycle;<\/div>$/;"	a
l00113	html/mtrand_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div>$/;"	a
l00113	html/mutex_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            <span class="keywordflow">if<\/span> (xadd(1) == 0) wq.lock();  <span class="comment">\/\/ first reader disables writers<\/span><\/div>$/;"	a
l00113	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;        WinCycle* curWin;<\/div>$/;"	a
l00113	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;        <span class="comment">\/\/Stats (called fully synchronized)<\/span><\/div>$/;"	a
l00113	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            array = gm_calloc&lt;WayPartInfo&gt;(totalSize); <span class="comment">\/\/all have ts, p == 0...<\/span><\/div>$/;"	a
l00113	html/partitioner_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;        <span class="keywordtype">void<\/span> access(uint32_t partition, Address lineAddr);<\/div>$/;"	a
l00113	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div>$/;"	a
l00113	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;                    }<\/div>$/;"	a
l00113	html/process__tree_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> getSyncedFastForward()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00113	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;};<\/div>$/;"	a
l00113	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;        <span class="keywordtype">void<\/span> update(uint32_t <span class="keywordtype">id<\/span>, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {<\/div>$/;"	a
l00113	html/scheduler_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            ThreadInfo(uint32_t _gid, uint32_t _linuxPid, uint32_t _linuxTid, <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;bool&gt;<\/a>&amp; _mask) :<\/div>$/;"	a
l00113	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;            }<\/div>$/;"	a
l00113	html/stats_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno"><a class="line" href="classAggregateStat.html">  113<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classAggregateStat.html">AggregateStat<\/a> : <span class="keyword">public<\/span> <a class="code" href="classStat.html">Stat<\/a> {<\/div>$/;"	a
l00113	html/timing__event_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;                numChildren = 1;<\/div>$/;"	a
l00113	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;                <a class="code" href="structTimingRecord.html">TimingRecord<\/a> tr = {req.lineAddr, req.cycle, respCycle, req.type, memEv, memEv};<\/div>$/;"	a
l00113	html/zsim_8h_source.html	/^<div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div>$/;"	a
l00114	html/barrier_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;<\/div>$/;"	a
l00114	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno"><a class="line" href="structSetAssocCands_1_1iterator.html">  114<\/a><\/span>&#160;    <span class="keyword">struct <\/span><a class="code" href="structSetAssocCands_1_1iterator.html">iterator<\/a> {<\/div>$/;"	a
l00114	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> isExclusive(uint32_t lineId) {<\/div>$/;"	a
l00114	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;        <span class="keyword">volatile<\/span> uint64_t limit;<\/div>$/;"	a
l00114	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;            Node* n;<\/div>$/;"	a
l00114	html/decoder_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;            uint32_t outRegs[MAX_INSTR_REG_WRITES];<\/div>$/;"	a
l00114	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;        uint64_t GetPrevIdlePowerDownCycle(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> prevIdlePowerDownCycle; }<\/div>$/;"	a
l00114	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;        uint32_t tCWD;<\/div>$/;"	a
l00114	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* getName() {<\/div>$/;"	a
l00114	html/event__queue_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;            uint64_t curPhase = zinfo-&gt;numPhases;<\/div>$/;"	a
l00114	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;            lastGapCycles = gapCycles;<\/div>$/;"	a
l00114	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;            <span class="keywordflow">if<\/span> (vLineAddr == filterArray[idx].rdAddr) {<\/div>$/;"	a
l00114	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;        <span class="keywordtype">void<\/span> setCC(<a class="code" href="classCC.html">CC<\/a>* _cc) {cc = _cc;}<\/div>$/;"	a
l00114	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;            elems++;<\/div>$/;"	a
l00114	html/locks_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    }<\/div>$/;"	a
l00114	html/log_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator == (std::nullptr_t t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; == nullptr&quot;<\/span>; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00114	html/mc_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="comment">\/\/ Trace related code<\/span><\/div>$/;"	a
l00114	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    uint32_t srcId;<\/div>$/;"	a
l00114	html/mtrand_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;        <span class="comment">\/\/ Methods<\/span><\/div>$/;"	a
l00114	html/mutex_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;        }<\/div>$/;"	a
l00114	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;        WinCycle* nextWin;<\/div>$/;"	a
l00114	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;        uint64_t getUnhaltedCycles(uint64_t curCycle) <span class="keyword">const<\/span>;<\/div>$/;"	a
l00114	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;            partInfo[0].size = totalSize; <span class="comment">\/\/ so partition 0 has all the lines<\/span><\/div>$/;"	a
l00114	html/partitioner_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;        uint32_t <span class="keyword">get<\/span>(uint32_t partition, uint32_t bucket) <span class="keyword">const<\/span>;<\/div>$/;"	a
l00114	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00114	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;                    feMap.erase(feMap.begin(), it);<\/div>$/;"	a
l00114	html/process__tree_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;            <span class="keywordflow">return<\/span> syncedFastForward == SFF_ALWAYS || (syncedFastForward == SFF_MULTIPROCESS &amp;&amp; zinfo-&gt;numProcs &gt; 1);<\/div>$/;"	a
l00114	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;<\/div>$/;"	a
l00114	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;            array[id] = timestamp++;<\/div>$/;"	a
l00114	html/scheduler_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;                <a class="code" href="structInListNode.html">InListNode&lt;ThreadInfo&gt;<\/a>(), gid(_gid), linuxPid(_linuxPid), linuxTid(_linuxTid), mask(_mask)<\/div>$/;"	a
l00114	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;            assert((((uintptr_t)ptr) &amp; SLAB_MASK) == (uintptr_t)curSlab)<\/div>$/;"	a
l00114	html/stats_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00114	html/timing__event_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;                child = childEv;<\/div>$/;"	a
l00114	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;                zinfo-&gt;eventRecorders[req.srcId]-&gt;pushRecord(tr);<\/div>$/;"	a
l00114	html/zsim_8h_source.html	/^<div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;    <span class="comment">\/\/Writable, rarely read, unshared in a single phase<\/span><\/div>$/;"	a
l00115	html/barrier_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;            runningThreads = 0;<\/div>$/;"	a
l00115	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        uint32_t x;<\/div>$/;"	a
l00115	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;            MESIState state = array[lineId];<\/div>$/;"	a
l00115	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        <span class="keyword">volatile<\/span> uint64_t lastLimit;<\/div>$/;"	a
l00115	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;            <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="structRequestQueue_1_1iterator.html">iterator<\/a>(Node* _n) : n(_n) {}<\/div>$/;"	a
l00115	html/decoder_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;            uint32_t numOutRegs;<\/div>$/;"	a
l00115	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        uint64_t GetPrevActvPowerDownCycle(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> prevActvPowerDownCycle; }<\/div>$/;"	a
l00115	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        uint32_t tCCD;<\/div>$/;"	a
l00115	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;            <span class="keywordflow">return<\/span> name.c_str();<\/div>$/;"	a
l00115	html/event__queue_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;            uint64_t eventPhase = (startDelay == -1)? (curPhase + ev-&gt;getPeriod()) : (curPhase + startDelay);<\/div>$/;"	a
l00115	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        }<\/div>$/;"	a
l00115	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;                fGETSHit++;<\/div>$/;"	a
l00115	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;};<\/div>$/;"	a
l00115	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        }<\/div>$/;"	a
l00115	html/locks_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<\/div>$/;"	a
l00115	html/log_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator != (std::nullptr_t t)<span class="keyword"> const <\/span>{ ss &lt;&lt; <span class="stringliteral">&quot; != nullptr&quot;<\/span>; <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>; }<\/div>$/;"	a
l00115	html/mc_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    lock_t _lock;<\/div>$/;"	a
l00115	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;};<\/div>$/;"	a
l00115	html/mtrand_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00115	html/mutex_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<\/div>$/;"	a
l00115	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        <span class="keyword">typedef<\/span> g_map&lt;uint64_t, WinCycle&gt; UBWin;<\/div>$/;"	a
l00115	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        uint64_t getContentionCycles() <span class="keyword">const<\/span>;<\/div>$/;"	a
l00115	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<\/div>$/;"	a
l00115	html/partitioner_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        uint32_t getNumAccesses(uint32_t partition) <span class="keyword">const<\/span>;<\/div>$/;"	a
l00115	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        <a class="code" href="classStreamPrefetcher.html">StreamPrefetcher<\/a>(<span class="keyword">const<\/span> g_string&amp; _name, uint32_t _numBuffers, <span class="keywordtype">bool<\/span> _partitionBuffers);<\/div>$/;"	a
l00115	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;                }<\/div>$/;"	a
l00115	html/process__tree_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        }<\/div>$/;"	a
l00115	html/profile__stats_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<span class="preprocessor">#endif  \/\/ PROFILE_STATS_H_<\/span><\/div>$/;"	a
l00115	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        }<\/div>$/;"	a
l00115	html/scheduler_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;            {<\/div>$/;"	a
l00115	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;            <span class="keywordflow">return<\/span> ptr;<\/div>$/;"	a
l00115	html/stats_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;Stat*&gt;<\/a> _children;<\/div>$/;"	a
l00115	html/timing__event_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;            } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (numChildren == 1) {<\/div>$/;"	a
l00115	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;            }<\/div>$/;"	a
l00115	html/zsim_8h_source.html	/^<div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;    uint64_t numPhases;<\/div>$/;"	a
l00116	html/barrier_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;            leftThreads = 0;<\/div>$/;"	a
l00116	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;        <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="structSetAssocCands_1_1iterator.html">iterator<\/a>(uint32_t _x) : x(_x) {}<\/div>$/;"	a
l00116	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;            <span class="keywordflow">return<\/span> (state == E) || (state == M);<\/div>$/;"	a
l00116	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;        <span class="keyword">volatile<\/span> <span class="keywordtype">bool<\/span> terminate;<\/div>$/;"	a
l00116	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;            <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> inc() {n = n-&gt;next;}  <span class="comment">\/\/ overloading prefix\/postfix too messy<\/span><\/div>$/;"	a
l00116	html/decoder_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div>$/;"	a
l00116	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;        uint64_t GetPrevIdleStandbyCycle(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> prevIdleStandbyCycle; }<\/div>$/;"	a
l00116	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;        uint32_t tTrans;<\/div>$/;"	a
l00116	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;        }<\/div>$/;"	a
l00116	html/event__queue_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;            assert(eventPhase &gt;= curPhase);<\/div>$/;"	a
l00116	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div>$/;"	a
l00116	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;                <span class="keywordflow">return<\/span> MAX(curCycle, availCycle);<\/div>$/;"	a
l00116	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div>$/;"	a
l00116	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div>$/;"	a
l00116	html/locks_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    uint32_t ticket = val &amp; TICKET_MASK;<\/div>$/;"	a
l00116	html/log_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div>$/;"	a
l00116	html/mc_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    <span class="keywordtype">bool<\/span> _collect_trace;<\/div>$/;"	a
l00116	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div>$/;"	a
l00116	html/mtrand_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classMTRand.html">MTRand<\/a>(<span class="keyword">const<\/span> uint64_t oneSeed);  <span class="comment">\/\/ initialize with a simple uint64_t<\/span><\/div>$/;"	a
l00116	html/mutex_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;        <span class="keywordtype">void<\/span> rdUnlock() {<\/div>$/;"	a
l00116	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> UBWin::iterator UBWinIterator;<\/div>$/;"	a
l00116	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div>$/;"	a
l00116	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;            wayPartIndex = gm_calloc&lt;uint32_t&gt;(ways);<\/div>$/;"	a
l00116	html/partitioner_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;        <span class="keywordtype">void<\/span> reset();<\/div>$/;"	a
l00116	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;        ~<a class="code" href="classStreamPrefetcher.html">StreamPrefetcher<\/a>();<\/div>$/;"	a
l00116	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;            }<\/div>$/;"	a
l00116	html/process__tree_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div>$/;"	a
l00116	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div>$/;"	a
l00116	html/scheduler_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;                state = STARTED;<\/div>$/;"	a
l00116	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;        }<\/div>$/;"	a
l00116	html/stats_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;        <span class="keywordtype">bool<\/span> _isMutable;<\/div>$/;"	a
l00116	html/timing__event_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;                <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* firstChild = child;<\/div>$/;"	a
l00116	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<\/div>$/;"	a
l00116	html/zsim_8h_source.html	/^<div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;    uint64_t globPhaseCycles; <span class="comment">\/\/just numPhases*phaseCycles. It behooves us to precompute it, since it is very frequently used in tracing code.<\/span><\/div>$/;"	a
l00117	html/barrier_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;            phaseCount = 0;<\/div>$/;"	a
l00117	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> inc() {x++;} <span class="comment">\/\/overloading prefix\/postfix too messy<\/span><\/div>$/;"	a
l00117	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;        }<\/div>$/;"	a
l00117	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div>$/;"	a
l00117	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;            <span class="keyword">inline<\/span> T* operator*()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> &amp;(n-&gt;elem); }<\/div>$/;"	a
l00117	html/decoder_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;            uint32_t storeOps[MAX_INSTR_STORES];<\/div>$/;"	a
l00117	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div>$/;"	a
l00117	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;        uint32_t tTransCrit;<\/div>$/;"	a
l00117	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div>$/;"	a
l00117	html/event__queue_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;            evMap.insert(std::pair&lt;uint64_t, Event*&gt;(eventPhase, ev));<\/div>$/;"	a
l00117	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;        <span class="comment">\/\/frequently<\/span><\/div>$/;"	a
l00117	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00117	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<span class="comment">\/\/Goes with IdealLRUPartArray<\/span><\/div>$/;"	a
l00117	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;        <span class="keywordtype">void<\/span> pop_front() {<\/div>$/;"	a
l00117	html/locks_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div>$/;"	a
l00117	html/log_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00117	html/mc_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    g_string _trace_dir;<\/div>$/;"	a
l00117	html/mtrand_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;        <a class="code" href="classMTRand.html">MTRand<\/a>(uint64_t *<span class="keyword">const<\/span> bigSeed, uint64_t <span class="keyword">const<\/span> seedLength = N);  <span class="comment">\/\/ or array<\/span><\/div>$/;"	a
l00117	html/mutex_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;            <span class="keywordflow">if<\/span> (xadd(-1) == 1) wq.unlock();  <span class="comment">\/\/ last reader enables writers<\/span><\/div>$/;"	a
l00117	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;        UBWin ubWin;<\/div>$/;"	a
l00117	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;        <span class="keyword">const<\/span> g_string&amp; getName()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> name;}<\/div>$/;"	a
l00117	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t w = 0; w &lt; ways; w++) {<\/div>$/;"	a
l00117	html/partitioner_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div>$/;"	a
l00117	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00117	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div>$/;"	a
l00117	html/process__tree_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;        <span class="comment">\/\/In cpp file, they need to access zinfo<\/span><\/div>$/;"	a
l00117	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;        <span class="keywordtype">void<\/span> replaced(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00117	html/scheduler_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;                cid = 0;<\/div>$/;"	a
l00117	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div>$/;"	a
l00117	html/stats_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;        <span class="keywordtype">bool<\/span> _isRegular;<\/div>$/;"	a
l00117	html/timing__event_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;                children = <span class="keyword">new<\/span> (evRec) <a class="code" href="structTimingEventBlock.html">TimingEventBlock<\/a>();<\/div>$/;"	a
l00117	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;            <span class="comment">\/\/ info(&quot;Access to %lx at %ld, %d lat, returning %d&quot;, req.lineAddr, req.cycle, realLatency, zeroLoadLatency);<\/span><\/div>$/;"	a
l00117	html/zsim_8h_source.html	/^<div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<\/div>$/;"	a
l00118	html/barrier_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;            <span class="comment">\/\/barrierLock = 0;<\/span><\/div>$/;"	a
l00118	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t operator*()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> x; }<\/div>$/;"	a
l00118	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;<\/div>$/;"	a
l00118	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        <span class="keyword">volatile<\/span> uint32_t threadsDone;<\/div>$/;"	a
l00118	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;            <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> operator==(<span class="keyword">const<\/span> <a class="code" href="structRequestQueue_1_1iterator.html">iterator<\/a>&amp; it)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> it.n == n; }<\/div>$/;"	a
l00118	html/decoder_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;            uint32_t numStores;<\/div>$/;"	a
l00118	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        <span class="keywordtype">void<\/span> SetIdlePowerDownCycle(uint64_t cycle) { assert(idlePowerDownCycle &lt;= cycle); idlePowerDownCycle = cycle; }<\/div>$/;"	a
l00118	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        uint32_t tXP;<\/div>$/;"	a
l00118	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat) {<\/div>$/;"	a
l00118	html/event__queue_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;            futex_unlock(&amp;qLock);<\/div>$/;"	a
l00118	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> setStartSlack(uint64_t startSlack) {<\/div>$/;"	a
l00118	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                <span class="keywordflow">return<\/span> replace(vLineAddr, idx, <span class="keyword">true<\/span>, curCycle);<\/div>$/;"	a
l00118	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno"><a class="line" href="classIdealLRUPartReplPolicy.html">  118<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classIdealLRUPartReplPolicy.html">IdealLRUPartReplPolicy<\/a> : <span class="keyword">public<\/span> <a class="code" href="classPartReplPolicy.html">PartReplPolicy<\/a> {<\/div>$/;"	a
l00118	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;            <span class="keywordflow">if<\/span> (empty()) <span class="keywordflow">return<\/span>;<\/div>$/;"	a
l00118	html/locks_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keywordflow">while<\/span> ((((*lock) &gt;&gt; 16) &amp; TICKET_MASK) != ticket) {<\/div>$/;"	a
l00118	html/log_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        <span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> T&gt; <span class="keyword">const<\/span> <a class="code" href="classPrintExpr.html">PrintExpr<\/a> operator =  (T t) <span class="keyword">const<\/span>;  <span class="comment">\/\/ will fail, can&#39;t assign in assertion<\/span><\/div>$/;"	a
l00118	html/mc_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    Address _address_trace[10000];<\/div>$/;"	a
l00118	html/mtrand_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        <a class="code" href="classMTRand.html">MTRand<\/a>();  <span class="comment">\/\/ auto-initialize with \/dev\/urandom or time() and clock()<\/span><\/div>$/;"	a
l00118	html/mutex_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        }<\/div>$/;"	a
l00118	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        uint32_t occupancy;  <span class="comment">\/\/ elements scheduled in the future<\/span><\/div>$/;"	a
l00118	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;<\/div>$/;"	a
l00118	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                <span class="comment">\/\/Do initial way assignment, partitioner has no profiling info yet<\/span><\/div>$/;"	a
l00118	html/partitioner_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00118	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* getName() { <span class="keywordflow">return<\/span> name.c_str();}<\/div>$/;"	a
l00118	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;            <span class="comment">\/\/We&#39;re now at the first populated block<\/span><\/div>$/;"	a
l00118	html/process__tree_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        <span class="keywordtype">void<\/span> enterFastForward();<\/div>$/;"	a
l00118	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;            array[id] = 0;<\/div>$/;"	a
l00118	html/scheduler_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                handoffThread = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00118	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;        <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt; T* alloc() { <span class="keywordflow">return<\/span> (T*)alloc(<span class="keyword">sizeof<\/span>(T)); }<\/div>$/;"	a
l00118	html/stats_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;<\/div>$/;"	a
l00118	html/timing__event_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;                children-&gt;events[0] = firstChild;<\/div>$/;"	a
l00118	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;            <span class="keywordflow">return<\/span> respCycle;<\/div>$/;"	a
l00118	html/zsim_8h_source.html	/^<div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    uint64_t procEventualDumps;<\/div>$/;"	a
l00119	html/barrier_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        }<\/div>$/;"	a
l00119	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> operator==(<span class="keyword">const<\/span> <a class="code" href="structSetAssocCands_1_1iterator.html">iterator<\/a>&amp; it)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> it.x == x; }<\/div>$/;"	a
l00119	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat) {<\/div>$/;"	a
l00119	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        <span class="keyword">volatile<\/span> uint32_t threadTicket; <span class="comment">\/\/used only at init<\/span><\/div>$/;"	a
l00119	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;            <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> operator!=(<span class="keyword">const<\/span> <a class="code" href="structRequestQueue_1_1iterator.html">iterator<\/a>&amp; it)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> it.n != n; }<\/div>$/;"	a
l00119	html/decoder_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div>$/;"	a
l00119	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        <span class="keywordtype">void<\/span> SetActvPowerDownCycle(uint64_t cycle) { assert(actvPowerDownCycle &lt;= cycle); actvPowerDownCycle = cycle; }<\/div>$/;"	a
l00119	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        uint32_t tREFI;<\/div>$/;"	a
l00119	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;            <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span> mem : mems) mem-&gt;initStats(parentStat);<\/div>$/;"	a
l00119	html/event__queue_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        }<\/div>$/;"	a
l00119	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;            <span class="comment">\/\/Avoid a write, it can cost a bunch of coherence misses<\/span><\/div>$/;"	a
l00119	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;            }<\/div>$/;"	a
l00119	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00119	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;            T* e = head;<\/div>$/;"	a
l00119	html/locks_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<span class="preprocessor">#if WITH_MWAIT<\/span><\/div>$/;"	a
l00119	html/log_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;};<\/div>$/;"	a
l00119	html/mc_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    uint32_t _type_trace[10000];<\/div>$/;"	a
l00119	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classAggregateStat.html">AggregateStat<\/a>;<\/div>$/;"	a
l00119	html/mtrand_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classMTRand.html">MTRand<\/a>(<span class="keyword">const<\/span> <a class="code" href="classMTRand.html">MTRand<\/a>&amp; o);  <span class="comment">\/\/ copy<\/span><\/div>$/;"	a
l00119	html/mutex_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div>$/;"	a
l00119	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div>$/;"	a
l00119	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00119	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;                uint32_t p = w*partitions\/ways; <span class="comment">\/\/ in [0, ..., partitions-1]<\/span><\/div>$/;"	a
l00119	html/partitioner_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        <span class="keywordtype">void<\/span> getMissCurves() <span class="keyword">const<\/span>;<\/div>$/;"	a
l00119	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        <span class="keywordtype">void<\/span> setParents(uint32_t _childId, <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;MemObject*&gt;<\/a>&amp; parents, <a class="code" href="classNetwork.html">Network<\/a>* network);<\/div>$/;"	a
l00119	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;            uint32_t offset;<\/div>$/;"	a
l00119	html/process__tree_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        <span class="keywordtype">void<\/span> exitFastForward();<\/div>$/;"	a
l00119	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        }<\/div>$/;"	a
l00119	html/scheduler_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;                futexWord = 0;<\/div>$/;"	a
l00119	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div>$/;"	a
l00119	html/stats_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00119	html/timing__event_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;                children-&gt;events[1] = childEv;<\/div>$/;"	a
l00119	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;        }<\/div>$/;"	a
l00119	html/zsim_8h_source.html	/^<div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<\/div>$/;"	a
l00120	html/barrier_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div>$/;"	a
l00120	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> operator!=(<span class="keyword">const<\/span> <a class="code" href="structSetAssocCands_1_1iterator.html">iterator<\/a>&amp; it)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> it.x != x; }<\/div>$/;"	a
l00120	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;            profGETSHit.init(<span class="stringliteral">&quot;hGETS&quot;<\/span>, <span class="stringliteral">&quot;GETS hits&quot;<\/span>);<\/div>$/;"	a
l00120	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div>$/;"	a
l00120	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        };<\/div>$/;"	a
l00120	html/decoder_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;            <span class="keyword">explicit<\/span> Instr(INS _ins);<\/div>$/;"	a
l00120	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        <span class="keywordtype">void<\/span> SetIdleStandbyCycle(uint64_t cycle) { assert(idleStandbyCycle &lt;= cycle); idleStandbyCycle = cycle; }<\/div>$/;"	a
l00120	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        uint32_t tRFC;<\/div>$/;"	a
l00120	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        }<\/div>$/;"	a
l00120	html/event__queue_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;};<\/div>$/;"	a
l00120	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;            <span class="keywordflow">if<\/span> (lastStartSlack != startSlack) lastStartSlack = startSlack;<\/div>$/;"	a
l00120	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        }<\/div>$/;"	a
l00120	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno"><a class="line" href="structIdealLRUPartReplPolicy_1_1Entry.html">  120<\/a><\/span>&#160;        <span class="keyword">struct <\/span><a class="code" href="structIdealLRUPartReplPolicy_1_1Entry.html">Entry<\/a> : <a class="code" href="structInListNode.html">InListNode<\/a>&lt;Entry&gt; {<\/div>$/;"	a
l00120	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;            head = e-&gt;next;<\/div>$/;"	a
l00120	html/locks_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<span class="preprocessor"><\/span>        <span class="comment">\/\/Monitor \/ mwait<\/span><\/div>$/;"	a
l00120	html/log_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div>$/;"	a
l00120	html/mc_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    uint32_t _cur_trace_len;<\/div>$/;"	a
l00120	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classNetwork.html">Network<\/a>;<\/div>$/;"	a
l00120	html/mtrand_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div>$/;"	a
l00120	html/mutex_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        <span class="keywordtype">void<\/span> wrLock() {<\/div>$/;"	a
l00120	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        uint32_t curPos;<\/div>$/;"	a
l00120	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        <span class="keywordtype">void<\/span> recordAccess(uint64_t curCycle, uint64_t dispatchCycle, uint64_t respCycle);<\/div>$/;"	a
l00120	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;                wayPartIndex[w] = p;<\/div>$/;"	a
l00120	html/partitioner_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        <span class="keywordtype">void<\/span> getMissCurve(uint32_t* misses, uint32_t partition) <span class="keyword">const<\/span>;<\/div>$/;"	a
l00120	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        <span class="keywordtype">void<\/span> setChildren(<span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;BaseCache*&gt;<\/a>&amp; children, <a class="code" href="classNetwork.html">Network<\/a>* network);<\/div>$/;"	a
l00120	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;            T* obj = blocks[curBlock % B].dequeue(offset);<\/div>$/;"	a
l00120	html/process__tree_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div>$/;"	a
l00120	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div>$/;"	a
l00120	html/scheduler_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;                markedForSleep = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00120	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00120	html/stats_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;        <span class="comment">\/* An aggregate stat is regular if all its children are 1) aggregate and 2) of the same type (e.g. all the threads).<\/span><\/div>$/;"	a
l00120	html/timing__event_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;                numChildren = 2;<\/div>$/;"	a
l00120	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;};<\/div>$/;"	a
l00120	html/zsim_8h_source.html	/^<div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    PAD();<\/div>$/;"	a
l00121	html/barrier_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        ~<a class="code" href="classBarrier.html">Barrier<\/a>() {}<\/div>$/;"	a
l00121	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    };<\/div>$/;"	a
l00121	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;            profGETXHit.init(<span class="stringliteral">&quot;hGETX&quot;<\/span>, <span class="stringliteral">&quot;GETX hits&quot;<\/span>);<\/div>$/;"	a
l00121	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        <span class="keyword">volatile<\/span> <span class="keywordtype">bool<\/span> inCSim; <span class="comment">\/\/true when inside contention simulation<\/span><\/div>$/;"	a
l00121	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div>$/;"	a
l00121	html/decoder_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div>$/;"	a
l00121	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        <span class="keywordtype">void<\/span> SaveBackgroundCycles(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00121	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        uint32_t tFAW;<\/div>$/;"	a
l00121	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;};<\/div>$/;"	a
l00121	html/event__queue_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div>$/;"	a
l00121	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        }<\/div>$/;"	a
l00121	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div>$/;"	a
l00121	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;            <span class="keyword">const<\/span> uint32_t lineId;<\/div>$/;"	a
l00121	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;            e-&gt;unlink(<span class="keyword">this<\/span>);<\/div>$/;"	a
l00121	html/locks_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        _mm_monitor((<span class="keyword">const<\/span> <span class="keywordtype">void<\/span>*)lock, 0, 0);<\/div>$/;"	a
l00121	html/log_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div>$/;"	a
l00121	html/mc_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;    uint32_t _max_trace_len;<\/div>$/;"	a
l00121	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div>$/;"	a
l00121	html/mtrand_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        <span class="comment">\/\/ Do NOT use for CRYPTOGRAPHY without securely hashing several returned<\/span><\/div>$/;"	a
l00121	html/mutex_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;            <a class="code" href="classscoped__mutex.html">scoped_mutex<\/a> r(rb);<\/div>$/;"	a
l00121	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div>$/;"	a
l00121	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        <span class="keywordtype">void<\/span> addIssueEvent(uint64_t evCycle);<\/div>$/;"	a
l00121	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;                partInfo[p].targetSize += waySize;<\/div>$/;"	a
l00121	html/partitioner_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div>$/;"	a
l00121	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div>$/;"	a
l00121	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;            elems--;<\/div>$/;"	a
l00121	html/process__tree_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t getClockDomain()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00121	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> C&gt; <span class="keyword">inline<\/span> uint32_t rank(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, C cands) {<\/div>$/;"	a
l00121	html/scheduler_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;                wakeupPhase = 0;<\/div>$/;"	a
l00121	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;        <span class="keywordtype">void<\/span> allocSlab() {<\/div>$/;"	a
l00121	html/stats_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<span class="comment">         * This lets us express all the subtypes of instances of a common datatype, and this collection as an array. It is<\/span><\/div>$/;"	a
l00121	html/timing__event_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00121	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div>$/;"	a
l00121	html/zsim_8h_source.html	/^<div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<\/div>$/;"	a
l00122	html/barrier_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div>$/;"	a
l00122	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div>$/;"	a
l00122	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;            profGETSMiss.init(<span class="stringliteral">&quot;mGETS&quot;<\/span>, <span class="stringliteral">&quot;GETS misses&quot;<\/span>);<\/div>$/;"	a
l00122	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div>$/;"	a
l00122	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;        <span class="keyword">inline<\/span> <a class="code" href="structRequestQueue_1_1iterator.html">iterator<\/a> begin()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> <a class="code" href="structRequestQueue_1_1iterator.html">iterator<\/a>(reqList.front());}<\/div>$/;"	a
l00122	html/decoder_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;            <span class="keyword">private<\/span>:<\/div>$/;"	a
l00122	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div>$/;"	a
l00122	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;        uint32_t tRTP;<\/div>$/;"	a
l00122	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div>$/;"	a
l00122	html/event__queue_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="preprocessor">#endif  \/\/ EVENT_QUEUE_H_<\/span><\/div>$/;"	a
l00122	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div>$/;"	a
l00122	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t store(Address vAddr, uint64_t curCycle) {<\/div>$/;"	a
l00122	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;            uint32_t p;<\/div>$/;"	a
l00122	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;            <span class="keywordflow">if<\/span> (!head) tail = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00122	html/locks_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div>$/;"	a
l00122	html/log_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="preprocessor">#define panic(args...) \\<\/span><\/div>$/;"	a
l00122	html/mc_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div>$/;"	a
l00122	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="comment">\/* Base class for all memory objects (caches and memories) *\/<\/span><\/div>$/;"	a
l00122	html/mtrand_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;        <span class="comment">\/\/ values together, otherwise the generator state can be learned after<\/span><\/div>$/;"	a
l00122	html/mutex_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;            wq.lock();<\/div>$/;"	a
l00122	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;        uint8_t lastPort;<\/div>$/;"	a
l00122	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;};<\/div>$/;"	a
l00122	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;            }<\/div>$/;"	a
l00122	html/partitioner_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;        <span class="keyword">mutable<\/span> uint32_t* missCache;<\/div>$/;"	a
l00122	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00122	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div>$/;"	a
l00122	html/process__tree_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;            <span class="keywordflow">return<\/span> clockDomain;<\/div>$/;"	a
l00122	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;            uint32_t bestCand = -1;<\/div>$/;"	a
l00122	html/scheduler_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;                assert(mask.size() == zinfo-&gt;numCores);<\/div>$/;"	a
l00122	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;            <a class="code" href="classscoped__mutex.html">scoped_mutex<\/a> sm(freeLock);<\/div>$/;"	a
l00122	html/stats_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="comment">         * useful with HDF5, where we would otherwise be forced to have huge compund datatypes, which HDF5 can&#39;t do after some<\/span><\/div>$/;"	a
l00122	html/timing__event_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;                uint32_t idx = numChildren % TIMING_BLOCK_EVENTS;<\/div>$/;"	a
l00122	html/weave__md1__mem_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="preprocessor">#endif  \/\/ WEAVE_MD1_MEM_H_<\/span><\/div>$/;"	a
l00122	html/zsim_8h_source.html	/^<div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;    <a class="code" href="structClockDomainInfo.html">ClockDomainInfo<\/a> clockDomainInfo[MAX_CLOCK_DOMAINS];<\/div>$/;"	a
l00123	html/barrier_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;        <span class="comment">\/\/Called with schedLock held; returns with schedLock unheld<\/span><\/div>$/;"	a
l00123	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    uint32_t b, e;<\/div>$/;"	a
l00123	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;            profGETXMissIM.init(<span class="stringliteral">&quot;mGETXIM&quot;<\/span>, <span class="stringliteral">&quot;GETX I-&gt;M misses&quot;<\/span>);<\/div>$/;"	a
l00123	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;        PAD();<\/div>$/;"	a
l00123	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;        <span class="keyword">inline<\/span> iterator end()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> iterator(<span class="keyword">nullptr<\/span>);}<\/div>$/;"	a
l00123	html/decoder_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;                <span class="comment">\/\/Put registers in some canonical order -- non-flags first<\/span><\/div>$/;"	a
l00123	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;        <span class="keywordtype">void<\/span> SetRefreshNum(uint32_t num) { assert(refreshNum &lt;= num); refreshNum = num;}<\/div>$/;"	a
l00123	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<\/div>$/;"	a
l00123	html/dramsim__mem__ctrl_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<span class="preprocessor">#endif  \/\/ DRAMSIM_MEM_CTRL_H_<\/span><\/div>$/;"	a
l00123	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;        uint32_t getSourceId()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> srcId;}<\/div>$/;"	a
l00123	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;            Address vLineAddr = vAddr &gt;&gt; lineBits;<\/div>$/;"	a
l00123	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;            <span class="keywordtype">bool<\/span> used; <span class="comment">\/\/careful, true except when just evicted, even if invalid<\/span><\/div>$/;"	a
l00123	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;            elems--;<\/div>$/;"	a
l00123	html/locks_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;        <span class="comment">\/\/Must test again, might have intervening write BEFORE monitor (so we would get stuck in mwait)<\/span><\/div>$/;"	a
l00123	html/log_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<span class="preprocessor">{ \\<\/span><\/div>$/;"	a
l00123	html/mc_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    <span class="comment">\/\/ External Dram Configuration<\/span><\/div>$/;"	a
l00123	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno"><a class="line" href="classMemObject.html">  123<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMemObject.html">MemObject<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00123	html/mtrand_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;        <span class="comment">\/\/ reading 624 consecutive values.<\/span><\/div>$/;"	a
l00123	html/mutex_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;        }<\/div>$/;"	a
l00123	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<\/div>$/;"	a
l00123	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<\/div>$/;"	a
l00123	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<\/div>$/;"	a
l00123	html/partitioner_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;        <span class="keyword">mutable<\/span> <span class="keywordtype">bool<\/span> missCacheValid;<\/div>$/;"	a
l00123	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;        uint64_t invalidate(<span class="keyword">const<\/span> <a class="code" href="structInvReq.html">InvReq<\/a>&amp; req);<\/div>$/;"	a
l00123	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;            deqCycle = curBlock*64 + offset;<\/div>$/;"	a
l00123	html/process__tree_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;        }<\/div>$/;"	a
l00123	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;            uint64_t bestScore = (uint64_t)-1L;<\/div>$/;"	a
l00123	html/scheduler_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;                uint32_t count = 0;<\/div>$/;"	a
l00123	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;            <span class="keywordflow">if<\/span> (!freeList.empty()) {<\/div>$/;"	a
l00123	html/stats_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<span class="comment">         * point.<\/span><\/div>$/;"	a
l00123	html/timing__event_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;                <span class="keywordflow">if<\/span> (idx == 0) {<\/div>$/;"	a
l00123	html/zsim_8h_source.html	/^<div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    PortVirtualizer* portVirt[MAX_PORT_DOMAINS];<\/div>$/;"	a
l00124	html/barrier_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;        <span class="keywordtype">void<\/span> join(uint32_t tid, lock_t* schedLock) {<\/div>$/;"	a
l00124	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keyword">inline<\/span> <a class="code" href="structSetAssocCands.html">SetAssocCands<\/a>(uint32_t _b, uint32_t _e) : b(_b), e(_e) {}<\/div>$/;"	a
l00124	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;            profGETXMissSM.init(<span class="stringliteral">&quot;mGETXSM&quot;<\/span>, <span class="stringliteral">&quot;GETX S-&gt;M misses (upgrade misses)&quot;<\/span>);<\/div>$/;"	a
l00124	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div>$/;"	a
l00124	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div>$/;"	a
l00124	html/decoder_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;                <span class="keywordtype">void<\/span> reorderRegs(uint32_t* regArray, uint32_t numRegs);<\/div>$/;"	a
l00124	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;        uint32_t GetRefreshNum(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> refreshNum; }<\/div>$/;"	a
l00124	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;        <span class="comment">\/\/ Power Parameters<\/span><\/div>$/;"	a
l00124	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;        <span class="keywordtype">void<\/span> setSourceId(uint32_t i) {srcId = i;}<\/div>$/;"	a
l00124	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;            uint32_t idx = vLineAddr &amp; setMask;<\/div>$/;"	a
l00124	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;            <a class="code" href="structIdealLRUPartReplPolicy_1_1Entry.html">Entry<\/a>(uint32_t _id, uint32_t _p) : lineId(_id), p(_p), used(<span class="keyword">true<\/span>) {}<\/div>$/;"	a
l00124	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;        }<\/div>$/;"	a
l00124	html/locks_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;        <span class="keywordflow">if<\/span> (*lock) {<\/div>$/;"	a
l00124	html/log_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<span class="preprocessor">    fprintf(logFdErr, &quot;%sPanic on %s:%d: &quot;, logHeader, __FILE__, __LINE__); \\<\/span><\/div>$/;"	a
l00124	html/mc_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <a class="code" href="classMemObject.html">MemObject<\/a> * _ext_dram;<\/div>$/;"	a
l00124	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00124	html/mtrand_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div>$/;"	a
l00124	html/mutex_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div>$/;"	a
l00124	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00124	html/ooo__core__recorder_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<span class="preprocessor">#endif  \/\/ OOO_CORE_RECORDER_H_<\/span><\/div>$/;"	a
l00124	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;            candIdx = 0;<\/div>$/;"	a
l00124	html/partitioner_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;UMon*&gt;<\/a> monitors;       <span class="comment">\/\/ individual monitors per partition<\/span><\/div>$/;"	a
l00124	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div>$/;"	a
l00124	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;            <span class="keywordflow">return<\/span> obj;<\/div>$/;"	a
l00124	html/process__tree_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div>$/;"	a
l00124	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;            <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span> ci = cands.begin(); ci != cands.end(); ci.inc()) {<\/div>$/;"	a
l00124	html/scheduler_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;                <span class="keywordflow">for<\/span> (<span class="keyword">auto<\/span> b : mask) <span class="keywordflow">if<\/span> (b) count++;<\/div>$/;"	a
l00124	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;                curSlab = freeList.back();<\/div>$/;"	a
l00124	html/stats_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<span class="comment">         *\/<\/span><\/div>$/;"	a
l00124	html/timing__event_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;                    <a class="code" href="structTimingEventBlock.html">TimingEventBlock<\/a>* tmp = children;<\/div>$/;"	a
l00124	html/zsim_8h_source.html	/^<div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<\/div>$/;"	a
l00125	html/barrier_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;            DEBUG_BARRIER(<span class="stringliteral">&quot;[%d] Joining, runningThreads %d, prevState %d&quot;<\/span>, tid, runningThreads, threadList[tid].state);<\/div>$/;"	a
l00125	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    <span class="keyword">inline<\/span> iterator begin()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> iterator(b);}<\/div>$/;"	a
l00125	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;            profPUTS.init(<span class="stringliteral">&quot;PUTS&quot;<\/span>, <span class="stringliteral">&quot;Clean evictions (from lower level)&quot;<\/span>);<\/div>$/;"	a
l00125	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        <span class="comment">\/\/lock_t testLock;<\/span><\/div>$/;"	a
l00125	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <span class="keyword">remove<\/span>(iterator i) {<\/div>$/;"	a
l00125	html/decoder_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        };<\/div>$/;"	a
l00125	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        <span class="keywordtype">void<\/span> SetAccessInRefresh(uint32_t num) { accessInRefresh = num; }<\/div>$/;"	a
l00125	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        <span class="comment">\/\/ Voltage<\/span><\/div>$/;"	a
l00125	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<\/div>$/;"	a
l00125	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;            uint64_t availCycle = filterArray[idx].availCycle; <span class="comment">\/\/read before, careful with ordering to avoid timing races<\/span><\/div>$/;"	a
l00125	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        };<\/div>$/;"	a
l00125	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<\/div>$/;"	a
l00125	html/locks_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;            _mm_mwait(0, 0);<\/div>$/;"	a
l00125	html/log_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<span class="preprocessor">    fprintf(logFdErr, args); \\<\/span><\/div>$/;"	a
l00125	html/mc_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    g_string _ext_type; <\/div>$/;"	a
l00125	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        <span class="comment">\/\/Returns response cycle<\/span><\/div>$/;"	a
l00125	html/mtrand_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        <span class="comment">\/\/ Access to 32-bit random numbers<\/span><\/div>$/;"	a
l00125	html/mutex_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        <span class="keywordtype">void<\/span> wrUnlock() {<\/div>$/;"	a
l00125	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        <a class="code" href="classWindowStructure.html">WindowStructure<\/a>() {<\/div>$/;"	a
l00125	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;            bestId = -1;<\/div>$/;"	a
l00125	html/partitioner_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;};<\/div>$/;"	a
l00125	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        <span class="keywordtype">void<\/span> simulatePrefetchResponse(<a class="code" href="classPrefetchResponseEvent.html">PrefetchResponseEvent<\/a>* ev, uint64_t cycle);<\/div>$/;"	a
l00125	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        }<\/div>$/;"	a
l00125	html/process__tree_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t getPortDomain()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00125	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;                uint32_t s = score(*ci);<\/div>$/;"	a
l00125	html/scheduler_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;                <span class="keywordflow">if<\/span> (count == 0) panic(<span class="stringliteral">&quot;Empty mask on gid %d!&quot;<\/span>, gid);<\/div>$/;"	a
l00125	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;                freeList.pop_back();<\/div>$/;"	a
l00125	html/stats_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classAggregateStat.html">AggregateStat<\/a>(<span class="keywordtype">bool<\/span> isRegular = <span class="keyword">false<\/span>) : <a class="code" href="classStat.html">Stat<\/a>(), _isMutable(<span class="keyword">true<\/span>), _isRegular(isRegular) {}<\/div>$/;"	a
l00125	html/timing__event_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;                    children = <span class="keyword">new<\/span> (evRec) <a class="code" href="structTimingEventBlock.html">TimingEventBlock<\/a>();<\/div>$/;"	a
l00125	html/zsim_8h_source.html	/^<div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    lock_t ffLock; <span class="comment">\/\/global, grabbed in all ff entry\/exit ops.<\/span><\/div>$/;"	a
l00126	html/barrier_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;            assert(threadList[tid].state == LEFT || threadList[tid].state == OFFLINE);<\/div>$/;"	a
l00126	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    <span class="keyword">inline<\/span> iterator end()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> iterator(e);}<\/div>$/;"	a
l00126	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;            profPUTX.init(<span class="stringliteral">&quot;PUTX&quot;<\/span>, <span class="stringliteral">&quot;Dirty evictions (from lower level)&quot;<\/span>);<\/div>$/;"	a
l00126	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;        lock_t postMortemLock;<\/div>$/;"	a
l00126	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;            assert(i.n);<\/div>$/;"	a
l00126	html/decoder_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<\/div>$/;"	a
l00126	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;        uint32_t GetAccessInRefresh(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> accessInRefresh; }<\/div>$/;"	a
l00126	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;        uint32_t VDD1;<\/div>$/;"	a
l00126	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;        <span class="keyword">inline<\/span> <a class="code" href="classg__vector.html">CrossingStack<\/a>&amp; getCrossingStack() {<\/div>$/;"	a
l00126	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;            <span class="keywordflow">if<\/span> (vLineAddr == filterArray[idx].wrAddr) {<\/div>$/;"	a
l00126	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<\/div>$/;"	a
l00126	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;        <span class="keywordtype">void<\/span> pop_back() {<\/div>$/;"	a
l00126	html/locks_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;        }<\/div>$/;"	a
l00126	html/log_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<span class="preprocessor">    fprintf(logFdErr, &quot;\\n&quot;); \\<\/span><\/div>$/;"	a
l00126	html/mc_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<span class="keyword">public<\/span>: <\/div>$/;"	a
l00126	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) = 0;<\/div>$/;"	a
l00126	html/mtrand_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;        uint64_t randInt();                     <span class="comment">\/\/ integer in [0,2^32-1]<\/span><\/div>$/;"	a
l00126	html/mutex_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;            wq.unlock();<\/div>$/;"	a
l00126	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;            curWin = gm_calloc&lt;WinCycle&gt;(H);<\/div>$/;"	a
l00126	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;            timestamp = 1;<\/div>$/;"	a
l00126	html/partitioner_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<\/div>$/;"	a
l00126	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;};<\/div>$/;"	a
l00126	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<\/div>$/;"	a
l00126	html/process__tree_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;            <span class="keywordflow">return<\/span> portDomain;<\/div>$/;"	a
l00126	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;                bestCand = (s &lt; bestScore)? *ci : bestCand;<\/div>$/;"	a
l00126	html/scheduler_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;                fakeLeave = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00126	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;                assert(curSlab);<\/div>$/;"	a
l00126	html/stats_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<\/div>$/;"	a
l00126	html/timing__event_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;                    children-&gt;next = tmp;<\/div>$/;"	a
l00126	html/zsim_8h_source.html	/^<div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<\/div>$/;"	a
l00127	html/barrier_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;            <span class="keywordflow">if<\/span> (threadList[tid].state == OFFLINE) {<\/div>$/;"	a
l00127	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;    <span class="keyword">inline<\/span> uint32_t numCands()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> e-b; }<\/div>$/;"	a
l00127	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;            profINV.init(<span class="stringliteral">&quot;INV&quot;<\/span>, <span class="stringliteral">&quot;Invalidates (from upper level)&quot;<\/span>);<\/div>$/;"	a
l00127	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div>$/;"	a
l00127	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;            reqList.remove(i.n);<\/div>$/;"	a
l00127	html/decoder_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00127	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div>$/;"	a
l00127	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div>$/;"	a
l00127	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;            <span class="keywordflow">return<\/span> crossingStack;<\/div>$/;"	a
l00127	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                fGETXHit++;<\/div>$/;"	a
l00127	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno"><a class="line" href="structIdealLRUPartReplPolicy_1_1IdPartInfo.html">  127<\/a><\/span>&#160;        <span class="keyword">struct <\/span><a class="code" href="structIdealLRUPartReplPolicy_1_1IdPartInfo.html">IdPartInfo<\/a> : <span class="keyword">public<\/span> <a class="code" href="structPartInfo.html">PartInfo<\/a> {<\/div>$/;"	a
l00127	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;            <span class="keywordflow">if<\/span> (empty()) <span class="keywordflow">return<\/span>;<\/div>$/;"	a
l00127	html/locks_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<span class="preprocessor">#else<\/span><\/div>$/;"	a
l00127	html/log_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<span class="preprocessor">    fflush(logFdErr); \\<\/span><\/div>$/;"	a
l00127	html/mc_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;    <span class="comment">\/\/ MC-Dram Configuration<\/span><\/div>$/;"	a
l00127	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req, <span class="keywordtype">int<\/span> type, uint32_t data_size) { assert(<span class="keyword">false<\/span>); }; <span class="comment">\/\/ return access(req); };<\/span><\/div>$/;"	a
l00127	html/mtrand_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;        uint64_t randInt(<span class="keyword">const<\/span> uint64_t n);     <span class="comment">\/\/ integer in [0,n] for n &lt; 2^32<\/span><\/div>$/;"	a
l00127	html/mutex_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;        }<\/div>$/;"	a
l00127	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;            nextWin = gm_calloc&lt;WinCycle&gt;(H);<\/div>$/;"	a
l00127	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;        }<\/div>$/;"	a
l00127	html/partitioner_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<span class="preprocessor">#endif  \/\/ PARTITIONER_H_<\/span><\/div>$/;"	a
l00127	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<\/div>$/;"	a
l00127	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t size()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00127	html/process__tree_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;        }<\/div>$/;"	a
l00127	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                bestScore = MIN(s, bestScore);<\/div>$/;"	a
l00127	html/scheduler_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                futexJoin.action = FJA_NONE;<\/div>$/;"	a
l00127	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00127	html/stats_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;        <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc) {<\/div>$/;"	a
l00127	html/timing__event_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;                }<\/div>$/;"	a
l00127	html/zsim_8h_source.html	/^<div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;    <span class="keyword">volatile<\/span> uint32_t globalActiveProcs; <span class="comment">\/\/used for termination<\/span><\/div>$/;"	a
l00128	html/barrier_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;                runList[runListSize++] = tid;<\/div>$/;"	a
l00128	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;};<\/div>$/;"	a
l00128	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;            profINVX.init(<span class="stringliteral">&quot;INVX&quot;<\/span>, <span class="stringliteral">&quot;Downgrades (from upper level)&quot;<\/span>);<\/div>$/;"	a
l00128	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00128	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;            freeList.push_back(i.n);<\/div>$/;"	a
l00128	html/decoder_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;        <span class="comment">\/\/If oooDecoding is true, produces a DynBbl with DynUops that can be used in OOO cores<\/span><\/div>$/;"	a
l00128	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;        uint64_t GetLastActCycle(uint32_t bank) { <span class="keywordflow">return<\/span> lastActCycle[bank]; }<\/div>$/;"	a
l00128	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno"><a class="line" href="structMemParam_1_1IDDs.html">  128<\/a><\/span>&#160;        <span class="keyword">struct <\/span><a class="code" href="structMemParam_1_1IDDs.html">IDDs<\/a> {<\/div>$/;"	a
l00128	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;        }<\/div>$/;"	a
l00128	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;                <span class="comment">\/\/NOTE: Stores don&#39;t modify availCycle; we&#39;ll catch matches in the core<\/span><\/div>$/;"	a
l00128	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;            <a class="code" href="classInList.html">InList&lt;Entry&gt;<\/a> lruList;<\/div>$/;"	a
l00128	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;            T* e = tail;<\/div>$/;"	a
l00128	html/locks_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<span class="preprocessor"><\/span>        <span class="comment">\/\/If we don&#39;t have mwait, we can at least pause<\/span><\/div>$/;"	a
l00128	html/log_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<span class="preprocessor"> <\/span><span class="comment">\/*SIGSEGVs*\/<\/span><span class="preprocessor"> \\<\/span><\/div>$/;"	a
l00128	html/mc_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    <a class="code" href="classMemObject.html">MemObject<\/a> ** _mcdram;<\/div>$/;"	a
l00128	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat) {}<\/div>$/;"	a
l00128	html/mtrand_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;        <span class="keywordtype">double<\/span> rand();                        <span class="comment">\/\/ real number in [0,1]<\/span><\/div>$/;"	a
l00128	html/mutex_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<\/div>$/;"	a
l00128	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;            curPos = 0;<\/div>$/;"	a
l00128	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<\/div>$/;"	a
l00128	html/prefetcher_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<span class="preprocessor">#endif  \/\/ PREFETCHER_H_<\/span><\/div>$/;"	a
l00128	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;            <span class="keywordflow">return<\/span> elems;<\/div>$/;"	a
l00128	html/process__tree_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<\/div>$/;"	a
l00128	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;            }<\/div>$/;"	a
l00128	html/scheduler_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;            }<\/div>$/;"	a
l00128	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;                assert(<span class="keyword">sizeof<\/span>(<a class="code" href="structslab_1_1Slab.html">Slab<\/a>) == SLAB_SIZE);<\/div>$/;"	a
l00128	html/stats_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;            assert(_isMutable);<\/div>$/;"	a
l00128	html/timing__event_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;                children-&gt;events[idx] = childEv;<\/div>$/;"	a
l00128	html/zsim_8h_source.html	/^<div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    <span class="comment">\/\/Counters below are used for deadlock detection<\/span><\/div>$/;"	a
l00129	html/barrier_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00129	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<\/div>$/;"	a
l00129	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;            profFWD.init(<span class="stringliteral">&quot;FWD&quot;<\/span>, <span class="stringliteral">&quot;Forwards (from upper level)&quot;<\/span>);<\/div>$/;"	a
l00129	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        <a class="code" href="classContentionSim.html">ContentionSim<\/a>(uint32_t _numDomains, uint32_t _numSimThreads);<\/div>$/;"	a
l00129	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        }<\/div>$/;"	a
l00129	html/decoder_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        <span class="keyword">static<\/span> <a class="code" href="structBblInfo.html">BblInfo<\/a>* decodeBbl(BBL bbl, <span class="keywordtype">bool<\/span> oooDecoding);<\/div>$/;"	a
l00129	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        <span class="keywordtype">void<\/span> SetLastActCycle(uint32_t bank, uint64_t cycle) { assert(lastActCycle[bank] &lt;= cycle); lastActCycle[bank] = cycle; }<\/div>$/;"	a
l00129	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;            uint32_t IDD0;<\/div>$/;"	a
l00129	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;};<\/div>$/;"	a
l00129	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;                <span class="comment">\/\/filterArray[idx].availCycle = curCycle; \/\/do optimistic store-load forwarding<\/span><\/div>$/;"	a
l00129	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        };<\/div>$/;"	a
l00129	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;            tail = e-&gt;prev;<\/div>$/;"	a
l00129	html/locks_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        _mm_pause();<\/div>$/;"	a
l00129	html/log_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<span class="preprocessor">    exit(PANIC_EXIT_CODE); \\<\/span><\/div>$/;"	a
l00129	html/mc_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    uint32_t _mcdram_per_mc;<\/div>$/;"	a
l00129	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* getName() = 0;<\/div>$/;"	a
l00129	html/mtrand_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        <span class="keywordtype">double<\/span> rand(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> n);        <span class="comment">\/\/ real number in [0,n]<\/span><\/div>$/;"	a
l00129	html/mutex_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        <span class="comment">\/\/ NOTE: upgrade and downgrade have uncontended fastpaths. If this is a bottleneck, they could be optimized.<\/span><\/div>$/;"	a
l00129	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;            occupancy = 0;<\/div>$/;"	a
l00129	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat) {<\/div>$/;"	a
l00129	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        }<\/div>$/;"	a
l00129	html/process__tree_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        <span class="keywordtype">void<\/span> exitPause() {<\/div>$/;"	a
l00129	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;            <span class="keywordflow">return<\/span> bestCand;<\/div>$/;"	a
l00129	html/scheduler_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;        };<\/div>$/;"	a
l00129	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;                curSlab = gm_memalign&lt;Slab&gt;(<span class="keyword">sizeof<\/span>(<a class="code" href="structslab_1_1Slab.html">Slab<\/a>));<\/div>$/;"	a
l00129	html/stats_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;            initStat(name, desc);<\/div>$/;"	a
l00129	html/timing__event_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;                numChildren++;<\/div>$/;"	a
l00129	html/zsim_8h_source.html	/^<div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    <span class="keyword">volatile<\/span> uint32_t globalSyncedFFProcs; <span class="comment">\/\/count of processes that are in synced FF<\/span><\/div>$/;"	a
l00130	html/barrier_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;                leftThreads--;<\/div>$/;"	a
l00130	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div>$/;"	a
l00130	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;            profGETNextLevelLat.init(<span class="stringliteral">&quot;latGETnl&quot;<\/span>, <span class="stringliteral">&quot;GET request latency on next level&quot;<\/span>);<\/div>$/;"	a
l00130	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div>$/;"	a
l00130	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;};<\/div>$/;"	a
l00130	html/decoder_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div>$/;"	a
l00130	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;        uint64_t GetLastPreCycle(uint32_t bank) { <span class="keywordflow">return<\/span> lastPreCycle[bank]; }<\/div>$/;"	a
l00130	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;            uint32_t IDD2P;<\/div>$/;"	a
l00130	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div>$/;"	a
l00130	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;                <span class="keywordflow">return<\/span> MAX(curCycle, availCycle);<\/div>$/;"	a
l00130	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div>$/;"	a
l00130	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;            e-&gt;unlink(<span class="keyword">this<\/span>);<\/div>$/;"	a
l00130	html/locks_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00130	html/log_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<span class="preprocessor">}<\/span><\/div>$/;"	a
l00130	html/mc_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    g_string _mcdram_type;<\/div>$/;"	a
l00130	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;};<\/div>$/;"	a
l00130	html/mtrand_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;        <span class="keywordtype">double<\/span> randExc();                     <span class="comment">\/\/ real number in [0,1)<\/span><\/div>$/;"	a
l00130	html/mutex_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div>$/;"	a
l00130	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;        }<\/div>$/;"	a
l00130	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;            <span class="comment">\/\/AggregateStat* partsStat = new AggregateStat(true \/*this is a regular aggregate, ONLY PARTITION STATS GO IN HERE*\/);<\/span><\/div>$/;"	a
l00130	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div>$/;"	a
l00130	html/process__tree_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;            assert(inPause);<\/div>$/;"	a
l00130	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;        }<\/div>$/;"	a
l00130	html/scheduler_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<\/div>$/;"	a
l00130	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;                assert((((uintptr_t)curSlab) &amp; SLAB_MASK) == (uintptr_t)curSlab);<\/div>$/;"	a
l00130	html/stats_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;        }<\/div>$/;"	a
l00130	html/timing__event_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;            }<\/div>$/;"	a
l00130	html/zsim_8h_source.html	/^<div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;    <span class="keyword">volatile<\/span> uint32_t globalFFProcs; <span class="comment">\/\/count of processes that are in either synced or unsynced FF<\/span><\/div>$/;"	a
l00131	html/barrier_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;                <span class="comment">\/\/If we have already run in this phase, reschedule ourselves in it<\/span><\/div>$/;"	a
l00131	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno"><a class="line" href="structZWalkInfo.html">  131<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structZWalkInfo.html">ZWalkInfo<\/a> {<\/div>$/;"	a
l00131	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;            profGETNetLat.init(<span class="stringliteral">&quot;latGETnet&quot;<\/span>, <span class="stringliteral">&quot;GET request latency on network to next level&quot;<\/span>);<\/div>$/;"	a
l00131	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00131	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div>$/;"	a
l00131	html/decoder_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="preprocessor">#ifdef BBL_PROFILING<\/span><\/div>$/;"	a
l00131	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;        <span class="keywordtype">void<\/span> SetLastPreCycle(uint32_t bank, uint64_t cycle) { assert(lastPreCycle[bank] &lt;= cycle); lastPreCycle[bank] = cycle; }<\/div>$/;"	a
l00131	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;            uint32_t IDD2N;<\/div>$/;"	a
l00131	html/event__recorder_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="preprocessor">#endif  \/\/ EVENT_RECORDER_H_<\/span><\/div>$/;"	a
l00131	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00131	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;        <a class="code" href="structIdealLRUPartReplPolicy_1_1Entry.html">Entry<\/a>* array;<\/div>$/;"	a
l00131	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;            <span class="keywordflow">if<\/span> (!tail) head = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00131	html/locks_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="preprocessor"><\/span>    }<\/div>$/;"	a
l00131	html/log_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00131	html/mc_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;    <\/div>$/;"	a
l00131	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div>$/;"	a
l00131	html/mtrand_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;        <span class="keywordtype">double<\/span> randExc(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> n);     <span class="comment">\/\/ real number in [0,n)<\/span><\/div>$/;"	a
l00131	html/mutex_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;        <span class="comment">\/\/ rdlocker -&gt; wrlocker<\/span><\/div>$/;"	a
l00131	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div>$/;"	a
l00131	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;            <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* partsStat = <span class="keyword">new<\/span> <a class="code" href="classAggregateStat.html">AggregateStat<\/a>(<span class="keyword">false<\/span>); <span class="comment">\/\/don&#39;t make it a regular aggregate... it gets compacted in periodic stats and becomes useless!<\/span><\/div>$/;"	a
l00131	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t firstCycle()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00131	html/process__tree_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;            inPause = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00131	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div>$/;"	a
l00131	html/scheduler_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;        <span class="keyword">struct <\/span>ContextInfo : <a class="code" href="structInListNode.html">InListNode<\/a>&lt;ContextInfo&gt; {<\/div>$/;"	a
l00131	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;                curSlab-&gt;init(<span class="keyword">this<\/span>);  <span class="comment">\/\/ NOTE: Slab is POD<\/span><\/div>$/;"	a
l00131	html/stats_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div>$/;"	a
l00131	html/timing__event_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div>$/;"	a
l00131	html/zsim_8h_source.html	/^<div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<\/div>$/;"	a
l00132	html/barrier_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;                uint32_t lastIdx = threadList[tid].lastIdx;<\/div>$/;"	a
l00132	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    uint32_t pos;<\/div>$/;"	a
l00132	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<\/div>$/;"	a
l00132	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<\/div>$/;"	a
l00132	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDDRMemoryAccEvent.html">DDRMemoryAccEvent<\/a>;<\/div>$/;"	a
l00132	html/decoder_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<span class="preprocessor"><\/span>        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> profileBbl(uint64_t bblIdx);<\/div>$/;"	a
l00132	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;        uint64_t GetFAWCycle(<span class="keywordtype">void<\/span>) { <span class="keywordflow">return<\/span> tFAWCycle[tFAWIndex]; }<\/div>$/;"	a
l00132	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;            uint32_t IDD3P;<\/div>$/;"	a
l00132	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;                <span class="keywordflow">return<\/span> replace(vLineAddr, idx, <span class="keyword">false<\/span>, curCycle);<\/div>$/;"	a
l00132	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;        <a class="code" href="structIdealLRUPartReplPolicy_1_1IdPartInfo.html">IdPartInfo<\/a>* partInfo;<\/div>$/;"	a
l00132	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;            elems--;<\/div>$/;"	a
l00132	html/locks_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;}<\/div>$/;"	a
l00132	html/log_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<span class="preprocessor">#define warn(args...) \\<\/span><\/div>$/;"	a
l00132	html/mc_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    uint64_t getNumRequests() { <span class="keywordflow">return<\/span> _num_requests; };<\/div>$/;"	a
l00132	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<span class="comment">\/* Base class for all cache objects *\/<\/span><\/div>$/;"	a
l00132	html/mtrand_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;        <span class="keywordtype">double<\/span> randDblExc();                  <span class="comment">\/\/ real number in (0,1)<\/span><\/div>$/;"	a
l00132	html/mutex_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;        <span class="comment">\/\/ MUST lose atomicity<\/span><\/div>$/;"	a
l00132	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<\/div>$/;"	a
l00132	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;            partsStat-&gt;init(<span class="stringliteral">&quot;part&quot;<\/span>, <span class="stringliteral">&quot;Partition stats&quot;<\/span>);<\/div>$/;"	a
l00132	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;            assert(elems);<\/div>$/;"	a
l00132	html/process__tree_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;            __sync_synchronize();<\/div>$/;"	a
l00132	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;        DECL_RANK_BINDINGS;<\/div>$/;"	a
l00132	html/scheduler_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;            uint32_t cid;<\/div>$/;"	a
l00132	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;            }<\/div>$/;"	a
l00132	html/stats_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;        <span class="comment">\/\/Returns true if it is a non-empty type, false otherwise. Empty types are culled by the parent.<\/span><\/div>$/;"	a
l00132	html/timing__event_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;            <span class="keywordflow">if<\/span> (domain != -1 &amp;&amp; childEv-&gt;domain == -1) {<\/div>$/;"	a
l00132	html/zsim_8h_source.html	/^<div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keyword">volatile<\/span> <span class="keywordtype">bool<\/span> terminationConditionMet;<\/div>$/;"	a
l00133	html/barrier_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;                <span class="keywordflow">if<\/span> (curThreadIdx &gt; lastIdx) { <span class="comment">\/\/curThreadIdx points to the FIRST thread that tryWakeNext checks<\/span><\/div>$/;"	a
l00133	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    uint32_t lineId;<\/div>$/;"	a
l00133	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;            parentStat-&gt;append(&amp;profGETSHit);<\/div>$/;"	a
l00133	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;        <span class="keywordtype">void<\/span> postInit(); <span class="comment">\/\/must be called after the simulator is initialized<\/span><\/div>$/;"	a
l00133	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classSchedEvent.html">SchedEvent<\/a>;<\/div>$/;"	a
l00133	html/decoder_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> dumpBblProfile();<\/div>$/;"	a
l00133	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;        <span class="keywordtype">void<\/span> SetFAWCycle(uint32_t bank, uint64_t cycle) { assert(tFAWCycle[bank] &lt;= cycle); tFAWCycle[bank] = cycle; }<\/div>$/;"	a
l00133	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;            uint32_t IDD3N;<\/div>$/;"	a
l00133	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;            }<\/div>$/;"	a
l00133	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;        uint32_t partitions;<\/div>$/;"	a
l00133	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;        }<\/div>$/;"	a
l00133	html/locks_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<\/div>$/;"	a
l00133	html/log_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<span class="preprocessor">{ \\<\/span><\/div>$/;"	a
l00133	html/mc_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;    uint64_t getNumSets()     { <span class="keywordflow">return<\/span> _num_sets; };<\/div>$/;"	a
l00133	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno"><a class="line" href="classBaseCache.html">  133<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classBaseCache.html">BaseCache<\/a> : <span class="keyword">public<\/span> <a class="code" href="classMemObject.html">MemObject<\/a> {<\/div>$/;"	a
l00133	html/mtrand_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;        <span class="keywordtype">double<\/span> randDblExc(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> n);  <span class="comment">\/\/ real number in (0,n)<\/span><\/div>$/;"	a
l00133	html/mutex_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;        <span class="keywordtype">void<\/span> upgrade() {<\/div>$/;"	a
l00133	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;        <span class="keywordtype">void<\/span> schedule(uint64_t&amp; curCycle, uint64_t&amp; schedCycle, uint8_t portMask, uint32_t extraSlots = 0) {<\/div>$/;"	a
l00133	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t p = 0; p &lt; partitions; p++) {<\/div>$/;"	a
l00133	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; B\/2; i++) {<\/div>$/;"	a
l00133	html/process__tree_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;        }<\/div>$/;"	a
l00133	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<\/div>$/;"	a
l00133	html/scheduler_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;            ContextState state;<\/div>$/;"	a
l00133	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;            liveSlabs++;<\/div>$/;"	a
l00133	html/stats_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;        <span class="keywordtype">bool<\/span> makeImmutable() {<\/div>$/;"	a
l00133	html/timing__event_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;                childEv-&gt;propagateDomain(domain);<\/div>$/;"	a
l00133	html/zsim_8h_source.html	/^<div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<\/div>$/;"	a
l00134	html/barrier_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;                    DEBUG_BARRIER(<span class="stringliteral">&quot;[%d] Doing same-phase join reschedule&quot;<\/span>, tid);<\/div>$/;"	a
l00134	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    int32_t parentIdx;<\/div>$/;"	a
l00134	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;            parentStat-&gt;append(&amp;profGETXHit);<\/div>$/;"	a
l00134	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div>$/;"	a
l00134	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div>$/;"	a
l00134	html/decoder_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00134	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;        uint64_t GetFAWCycle(uint32_t bank) { <span class="keywordflow">return<\/span> tFAWCycle[bank]; }<\/div>$/;"	a
l00134	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;            uint32_t IDD4R;<\/div>$/;"	a
l00134	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;        }<\/div>$/;"	a
l00134	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00134	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div>$/;"	a
l00134	html/locks_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> ticket_trylock(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00134	html/log_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="preprocessor">    log_lock(); \\<\/span><\/div>$/;"	a
l00134	html/mc_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    uint32_t getNumWays()     { <span class="keywordflow">return<\/span> _num_ways; };<\/div>$/;"	a
l00134	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00134	html/mtrand_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;        <span class="keywordtype">double<\/span> operator()();                  <span class="comment">\/\/ same as rand()<\/span><\/div>$/;"	a
l00134	html/mutex_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;            rdUnlock();<\/div>$/;"	a
l00134	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;            <span class="keywordflow">if<\/span> (!extraSlots) {<\/div>$/;"	a
l00134	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;                std::stringstream pss;<\/div>$/;"	a
l00134	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;                uint64_t occ = blocks[(curBlock + i) % B].occ;<\/div>$/;"	a
l00134	html/process__tree_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div>$/;"	a
l00134	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00134	html/scheduler_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;            ThreadInfo* curThread; <span class="comment">\/\/only current if used, otherwise nullptr<\/span><\/div>$/;"	a
l00134	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;            <span class="comment">\/\/info(&quot;allocated slab %p, %d live, %ld in freeList&quot;, curSlab, liveSlabs, freeList.size());<\/span><\/div>$/;"	a
l00134	html/stats_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;            assert(_isMutable);<\/div>$/;"	a
l00134	html/timing__event_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;            }<\/div>$/;"	a
l00134	html/zsim_8h_source.html	/^<div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* outputDir; <span class="comment">\/\/all the output files mst be dumped here. Stored because complex workloads often change dir, then spawn...<\/span><\/div>$/;"	a
l00135	html/barrier_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;                    curThreadIdx--;<\/div>$/;"	a
l00135	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<\/div>$/;"	a
l00135	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;            parentStat-&gt;append(&amp;profGETSMiss);<\/div>$/;"	a
l00135	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        <span class="keywordtype">void<\/span> enqueue(<a class="code" href="classTimingEvent.html">TimingEvent<\/a>* ev, uint64_t cycle);<\/div>$/;"	a
l00135	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="comment">\/\/ Single-channel controller. For multiple channels, use multiple controllers.<\/span><\/div>$/;"	a
l00135	html/decoder_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00135	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        <span class="keywordtype">void<\/span> SetFAWCycle(uint64_t cycle) { assert(tFAWCycle[tFAWIndex] &lt;= cycle); tFAWCycle[tFAWIndex++] = cycle; tFAWIndex %= 4; }<\/div>$/;"	a
l00135	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;            uint32_t IDD4W;<\/div>$/;"	a
l00135	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<\/div>$/;"	a
l00135	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        uint32_t numBuckets;<\/div>$/;"	a
l00135	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        <span class="comment">\/\/Note how remove is O(1)<\/span><\/div>$/;"	a
l00135	html/locks_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    uint32_t val = *lock;<\/div>$/;"	a
l00135	html/log_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="preprocessor">    fprintf(logFdErr, &quot;%sWARN: &quot;, logHeader); \\<\/span><\/div>$/;"	a
l00135	html/mc_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;    <span class="keywordtype">double<\/span> getRecentMissRate(){ <span class="keywordflow">return<\/span> (<span class="keywordtype">double<\/span>) _num_miss_per_step \/ (_num_miss_per_step + _num_hit_per_step); };<\/div>$/;"	a
l00135	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> setParents(uint32_t _childId, <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;MemObject*&gt;<\/a>&amp; parents, <a class="code" href="classNetwork.html">Network<\/a>* network) = 0;<\/div>$/;"	a
l00135	html/mtrand_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<\/div>$/;"	a
l00135	html/mutex_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;            wrLock();<\/div>$/;"	a
l00135	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;                scheduleInternal&lt;true, false&gt;(curCycle, schedCycle, portMask);<\/div>$/;"	a
l00135	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;                pss &lt;&lt; <span class="stringliteral">&quot;part-&quot;<\/span> &lt;&lt; p;<\/div>$/;"	a
l00135	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;                <span class="keywordflow">if<\/span> (occ) {<\/div>$/;"	a
l00135	html/process__tree_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;bool&gt;<\/a>&amp; getMask()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00135	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t score(uint32_t <span class="keywordtype">id<\/span>) { <span class="comment">\/\/higher is least evictable<\/span><\/div>$/;"	a
l00135	html/scheduler_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        };<\/div>$/;"	a
l00135	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;        }<\/div>$/;"	a
l00135	html/stats_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;            assert(_name != <span class="keyword">nullptr<\/span>); <span class="comment">\/\/Should have been initialized<\/span><\/div>$/;"	a
l00135	html/timing__event_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<\/div>$/;"	a
l00135	html/zsim_8h_source.html	/^<div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<\/div>$/;"	a
l00136	html/barrier_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;                    <span class="comment">\/\/Swap our runlist tid with the last thread&#39;s<\/span><\/div>$/;"	a
l00136	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> set(uint32_t p, uint32_t i, int32_t x) {pos = p; lineId = i; parentIdx = x;}<\/div>$/;"	a
l00136	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;            parentStat-&gt;append(&amp;profGETXMissIM);<\/div>$/;"	a
l00136	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;        <span class="keywordtype">void<\/span> enqueueSynced(<a class="code" href="classTimingEvent.html">TimingEvent<\/a>* ev, uint64_t cycle);<\/div>$/;"	a
l00136	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno"><a class="line" href="classDDRMemory.html">  136<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDDRMemory.html">DDRMemory<\/a> : <span class="keyword">public<\/span> <a class="code" href="classMemObject.html">MemObject<\/a> {<\/div>$/;"	a
l00136	html/decoder_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00136	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;};<\/div>$/;"	a
l00136	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;            uint32_t IDD5;<\/div>$/;"	a
l00136	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;        uint64_t replace(Address vLineAddr, uint32_t idx, <span class="keywordtype">bool<\/span> isLoad, uint64_t curCycle) {<\/div>$/;"	a
l00136	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div>$/;"	a
l00136	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;        <span class="keywordtype">void<\/span> <span class="keyword">remove<\/span>(T* e) {<\/div>$/;"	a
l00136	html/locks_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    uint32_t hi = (val &gt;&gt; 16) &amp; TICKET_MASK;<\/div>$/;"	a
l00136	html/log_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<span class="preprocessor">    fprintf(logFdErr, args); \\<\/span><\/div>$/;"	a
l00136	html/mc_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    Scheme getScheme()      { <span class="keywordflow">return<\/span> _scheme; };<\/div>$/;"	a
l00136	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> setChildren(<span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;BaseCache*&gt;<\/a>&amp; children, <a class="code" href="classNetwork.html">Network<\/a>* network) = 0;<\/div>$/;"	a
l00136	html/mtrand_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;        <span class="comment">\/\/ Access to 53-bit random numbers (capacity of IEEE double precision)<\/span><\/div>$/;"	a
l00136	html/mutex_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;        }<\/div>$/;"	a
l00136	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00136	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;                <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* partStat = <span class="keyword">new<\/span> <a class="code" href="classAggregateStat.html">AggregateStat<\/a>();<\/div>$/;"	a
l00136	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;                    uint64_t pos = __builtin_ctzl(occ);<\/div>$/;"	a
l00136	html/process__tree_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;            <span class="keywordflow">return<\/span> mask;<\/div>$/;"	a
l00136	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;            <span class="comment">\/\/array[id] &lt; timestamp always, so this prioritizes by:<\/span><\/div>$/;"	a
l00136	html/scheduler_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div>$/;"	a
l00136	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<\/div>$/;"	a
l00136	html/stats_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;            _isMutable = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00136	html/timing__event_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;            childEv-&gt;numParents++;<\/div>$/;"	a
l00136	html/zsim_8h_source.html	/^<div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* rootStat;<\/div>$/;"	a
l00137	html/barrier_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;                    assert(tid == runList[lastIdx]);<\/div>$/;"	a
l00137	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;};<\/div>$/;"	a
l00137	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;            parentStat-&gt;append(&amp;profGETXMissSM);<\/div>$/;"	a
l00137	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;        <span class="keywordtype">void<\/span> enqueueCrossing(<a class="code" href="classCrossingEvent.html">CrossingEvent<\/a>* ev, uint64_t cycle, uint32_t srcId, uint32_t srcDomain, uint32_t dstDomain, <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* evRec);<\/div>$/;"	a
l00137	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00137	html/decoder_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;        <span class="comment">\/\/Return true if inaccurate decoding, false if accurate<\/span><\/div>$/;"	a
l00137	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<\/div>$/;"	a
l00137	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;        };<\/div>$/;"	a
l00137	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;            Address pLineAddr;<\/div>$/;"	a
l00137	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00137	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;            <span class="comment">\/\/info(&quot;Remove PRE h=%p t=%p e=%p&quot;, head, tail, e);<\/span><\/div>$/;"	a
l00137	html/locks_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    uint32_t lo = val &amp; TICKET_MASK;<\/div>$/;"	a
l00137	html/log_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<span class="preprocessor">    fprintf(logFdErr, &quot;\\n&quot;); \\<\/span><\/div>$/;"	a
l00137	html/mc_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    <a class="code" href="classSet.html">Set<\/a> * getSets()         { <span class="keywordflow">return<\/span> _cache; };<\/div>$/;"	a
l00137	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t invalidate(<span class="keyword">const<\/span> <a class="code" href="structInvReq.html">InvReq<\/a>&amp; req) = 0;<\/div>$/;"	a
l00137	html/mtrand_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;        <span class="keywordtype">double<\/span> rand53();  <span class="comment">\/\/ real number in [0,1)<\/span><\/div>$/;"	a
l00137	html/mutex_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<\/div>$/;"	a
l00137	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;                scheduleInternal&lt;true, true&gt;(curCycle, schedCycle, portMask);<\/div>$/;"	a
l00137	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;                partStat-&gt;init(gm_strdup(pss.str().c_str()), <span class="stringliteral">&quot;Partition stats&quot;<\/span>);<\/div>$/;"	a
l00137	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;                    <span class="keywordflow">return<\/span> (curBlock + i)*64 + pos;<\/div>$/;"	a
l00137	html/process__tree_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;        }<\/div>$/;"	a
l00137	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;            <span class="comment">\/\/ (1) valid (if not valid, it&#39;s 0)<\/span><\/div>$/;"	a
l00137	html/scheduler_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;        g_unordered_map&lt;uint32_t, ThreadInfo*&gt; gidMap;<\/div>$/;"	a
l00137	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;        <span class="keywordtype">void<\/span> freeSlab(<a class="code" href="structslab_1_1Slab.html">Slab<\/a>* s) {<\/div>$/;"	a
l00137	html/stats_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;            <a class="code" href="classg__vector.html">g_vector&lt;Stat*&gt;::iterator<\/a> it;<\/div>$/;"	a
l00137	html/timing__event_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;            <span class="keywordflow">return<\/span> res; <span class="comment">\/\/useful for chaining<\/span><\/div>$/;"	a
l00137	html/zsim_8h_source.html	/^<div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;    <a class="code" href="classg__vector.html">g_vector&lt;StatsBackend*&gt;<\/a>* statsBackends; <span class="comment">\/\/ used for termination dumps<\/span><\/div>$/;"	a
l00138	html/barrier_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;                    uint32_t otherTid = runList[curThreadIdx];<\/div>$/;"	a
l00138	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div>$/;"	a
l00138	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;            parentStat-&gt;append(&amp;profPUTS);<\/div>$/;"	a
l00138	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div>$/;"	a
l00138	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div>$/;"	a
l00138	html/decoder_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">bool<\/span> decodeInstr(INS ins, DynUopVec&amp; uops);<\/div>$/;"	a
l00138	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<span class="comment">\/\/ DRAM channel base class<\/span><\/div>$/;"	a
l00138	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;        <span class="comment">\/\/ Statically Allocate<\/span><\/div>$/;"	a
l00138	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;            <span class="comment">\/\/ page num = vLineAddr shifted by 6 bits. So it is shifted by 12 bits in total (4KB page size)<\/span><\/div>$/;"	a
l00138	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;        <a class="code" href="classIdealLRUPartReplPolicy.html">IdealLRUPartReplPolicy<\/a>(<a class="code" href="classPartitionMonitor.html">PartitionMonitor<\/a>* _monitor, <a class="code" href="classPartMapper.html">PartMapper<\/a>* _mapper, uint32_t _numLines, uint32_t _numBuckets) : <a class="code" href="classPartReplPolicy.html">PartReplPolicy<\/a>(_monitor, _mapper), numLines(_numLines), numBuckets(_numBuckets) {<\/div>$/;"	a
l00138	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;            <span class="keywordflow">if<\/span> (e == head) head = e-&gt;next;<\/div>$/;"	a
l00138	html/locks_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    uint32_t newLo = (lo + 1) &amp; TICKET_MASK;<\/div>$/;"	a
l00138	html/log_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<span class="preprocessor">    fflush(logFdErr); \\<\/span><\/div>$/;"	a
l00138	html/mc_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    g_unordered_map&lt;Address, TLBEntry&gt; * getTLB() { <span class="keywordflow">return<\/span> &amp;_tlb; };<\/div>$/;"	a
l00138	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;};<\/div>$/;"	a
l00138	html/mtrand_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div>$/;"	a
l00138	html/mutex_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;        <span class="comment">\/\/ wrlocker -&gt; rdlocker<\/span><\/div>$/;"	a
l00138	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;                uint64_t extraSlotCycle = schedCycle+1;<\/div>$/;"	a
l00138	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;                <a class="code" href="classProxyStat.html">ProxyStat<\/a>* pStat;<\/div>$/;"	a
l00138	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;                }<\/div>$/;"	a
l00138	html/process__tree_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div>$/;"	a
l00138	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;            <span class="comment">\/\/ (2) sharers, and<\/span><\/div>$/;"	a
l00138	html/scheduler_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;ContextInfo&gt;<\/a> contexts;<\/div>$/;"	a
l00138	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;            <a class="code" href="classscoped__mutex.html">scoped_mutex<\/a> sm(freeLock);<\/div>$/;"	a
l00138	html/stats_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;            <a class="code" href="classg__vector.html">g_vector&lt;Stat*&gt;<\/a> newChildren;<\/div>$/;"	a
l00138	html/timing__event_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;        }<\/div>$/;"	a
l00138	html/zsim_8h_source.html	/^<div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    <a class="code" href="classStatsBackend.html">StatsBackend<\/a>* periodicStatsBackend;<\/div>$/;"	a
l00139	html/barrier_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<\/div>$/;"	a
l00139	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno"><a class="line" href="structZCands.html">  139<\/a><\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structZCands.html">ZCands<\/a> {<\/div>$/;"	a
l00139	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;            parentStat-&gt;append(&amp;profPUTX);<\/div>$/;"	a
l00139	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;        <span class="keywordtype">void<\/span> simulatePhase(uint64_t limit);<\/div>$/;"	a
l00139	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;        <span class="keyword">struct <\/span>AddrLoc {<\/div>$/;"	a
l00139	html/decoder_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<\/div>$/;"	a
l00139	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno"><a class="line" href="classMemChannelBase.html">  139<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMemChannelBase.html">MemChannelBase<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00139	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;        <a class="code" href="structMemParam_1_1IDDs.html">IDDs<\/a> IDD_VDD1;<\/div>$/;"	a
l00139	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;            <span class="keywordflow">if<\/span> (_enable_tlb) {<\/div>$/;"	a
l00139	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;            partitions = mapper-&gt;getNumPartitions();<\/div>$/;"	a
l00139	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;            <span class="keywordflow">if<\/span> (e == tail) tail = e-&gt;prev;<\/div>$/;"	a
l00139	html/locks_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    <span class="keywordflow">return<\/span> (hi == lo <span class="comment">\/*This is up for grabs*\/<\/span> &amp;&amp; __sync_bool_compare_and_swap(lock, val, ((hi &lt;&lt; 16) | newLo)) <span class="comment">\/*T&amp;S*\/<\/span>);<\/div>$/;"	a
l00139	html/log_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<span class="preprocessor">    log_unlock(); \\<\/span><\/div>$/;"	a
l00139	html/mc_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    <a class="code" href="classTagBuffer.html">TagBuffer<\/a> * getTagBuffer() { <span class="keywordflow">return<\/span> _tag_buffer; };<\/div>$/;"	a
l00139	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<\/div>$/;"	a
l00139	html/mtrand_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;        <span class="comment">\/\/ Access to nonuniform random number distributions<\/span><\/div>$/;"	a
l00139	html/mutex_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;        <span class="keywordtype">void<\/span> downgrade() {<\/div>$/;"	a
l00139	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;                uint8_t extraSlotPortMask = 1 &lt;&lt; lastPort;<\/div>$/;"	a
l00139	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;                pStat = <span class="keyword">new<\/span> <a class="code" href="classProxyStat.html">ProxyStat<\/a>(); pStat-&gt;init(<span class="stringliteral">&quot;sz&quot;<\/span>, <span class="stringliteral">&quot;Actual size&quot;<\/span>, &amp;partInfo[p].size); partStat-&gt;append(pStat);<\/div>$/;"	a
l00139	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;            }<\/div>$/;"	a
l00139	html/process__tree_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;        <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;uint64_t&gt;<\/a>&amp; getFFIPoints()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00139	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;            <span class="comment">\/\/ (3) timestamp<\/span><\/div>$/;"	a
l00139	html/scheduler_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<\/div>$/;"	a
l00139	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;            <span class="comment">\/\/info(&quot;freeing slab %p, %d live, %ld in freeList&quot;, s, liveSlabs, freeList.size());<\/span><\/div>$/;"	a
l00139	html/stats_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;            <span class="keywordflow">for<\/span> (it = _children.begin(); it != _children.end(); it++) {<\/div>$/;"	a
l00139	html/timing__event_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<\/div>$/;"	a
l00139	html/zsim_8h_source.html	/^<div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    <a class="code" href="classStatsBackend.html">StatsBackend<\/a>* eventualStatsBackend;<\/div>$/;"	a
l00140	html/barrier_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;                    runList[lastIdx] = otherTid;<\/div>$/;"	a
l00140	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno"><a class="line" href="structZCands_1_1iterator.html">  140<\/a><\/span>&#160;    <span class="keyword">struct <\/span><a class="code" href="structZCands_1_1iterator.html">iterator<\/a> {<\/div>$/;"	a
l00140	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;            parentStat-&gt;append(&amp;profINV);<\/div>$/;"	a
l00140	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div>$/;"	a
l00140	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;            uint64_t row;<\/div>$/;"	a
l00140	html/decoder_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;        <span class="comment">\/* Every emit function can produce 0 or more uops; it returns the number of uops. These are basic templates to make our life easier *\/<\/span><\/div>$/;"	a
l00140	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00140	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div>$/;"	a
l00140	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;                Address vpgnum = vLineAddr &gt;&gt; 6; <\/div>$/;"	a
l00140	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;            partInfo = gm_calloc&lt;IdPartInfo&gt;(partitions);<\/div>$/;"	a
l00140	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;            e-&gt;unlink(<span class="keyword">this<\/span>);<\/div>$/;"	a
l00140	html/locks_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;}<\/div>$/;"	a
l00140	html/log_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<span class="preprocessor">}<\/span><\/div>$/;"	a
l00140	html/mc_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<\/div>$/;"	a
l00140	html/memory__hierarchy_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<span class="preprocessor">#endif  \/\/ MEMORY_HIERARCHY_H_<\/span><\/div>$/;"	a
l00140	html/mtrand_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;        <span class="keywordtype">double<\/span> randNorm(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> mean = 0.0, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> stddev = 1.0);<\/div>$/;"	a
l00140	html/mutex_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;            <span class="comment">\/\/ This sequence does not drop atomically. We&#39;d like to go from writer to reader without allowing intervening writers<\/span><\/div>$/;"	a
l00140	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;                <span class="comment">\/\/ This is not entirely accurate, as an instruction may have been scheduled already<\/span><\/div>$/;"	a
l00140	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;                pStat = <span class="keyword">new<\/span> <a class="code" href="classProxyStat.html">ProxyStat<\/a>(); pStat-&gt;init(<span class="stringliteral">&quot;tgtSz&quot;<\/span>, <span class="stringliteral">&quot;Target size&quot;<\/span>, &amp;partInfo[p].targetSize); partStat-&gt;append(pStat);<\/div>$/;"	a
l00140	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = B\/2; i &lt; B; i++) { <span class="comment">\/\/beyond B\/2 blocks, there may be a far element that comes earlier<\/span><\/div>$/;"	a
l00140	html/process__tree_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;            <span class="keywordflow">return<\/span> ffiPoints;<\/div>$/;"	a
l00140	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;            <span class="keywordflow">return<\/span> (sharersAware? cc-&gt;numSharers(<span class="keywordtype">id<\/span>) : 0)*timestamp + array[<span class="keywordtype">id<\/span>]*cc-&gt;isValid(<span class="keywordtype">id<\/span>);<\/div>$/;"	a
l00140	html/scheduler_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;        <a class="code" href="classInList.html">InList&lt;ContextInfo&gt;<\/a> freeList;<\/div>$/;"	a
l00140	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;            s-&gt;clear();<\/div>$/;"	a
l00140	html/stats_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;                <a class="code" href="classStat.html">Stat<\/a>* s = *it;<\/div>$/;"	a
l00140	html/timing__event_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;        <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* addChild(<a class="code" href="classTimingEvent.html">TimingEvent<\/a>* childEv, <a class="code" href="classEventRecorder.html">EventRecorder<\/a>&amp; evRec) {<\/div>$/;"	a
l00140	html/zsim_8h_source.html	/^<div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;    <a class="code" href="classProcessStats.html">ProcessStats<\/a>* processStats;<\/div>$/;"	a
l00141	html/barrier_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;                    runList[curThreadIdx] = tid;<\/div>$/;"	a
l00141	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;        <a class="code" href="structZWalkInfo.html">ZWalkInfo<\/a>* x;<\/div>$/;"	a
l00141	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;            parentStat-&gt;append(&amp;profINVX);<\/div>$/;"	a
l00141	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;        <span class="keywordtype">void<\/span> finish();<\/div>$/;"	a
l00141	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;            uint32_t bank;<\/div>$/;"	a
l00141	html/decoder_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div>$/;"	a
l00141	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;        uint32_t myId;<\/div>$/;"	a
l00141	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;        uint32_t readDqPin;<\/div>$/;"	a
l00141	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;                uint64_t pgnum;<\/div>$/;"	a
l00141	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div>$/;"	a
l00141	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;            elems--;<\/div>$/;"	a
l00141	html/locks_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div>$/;"	a
l00141	html/log_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00141	html/mc_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    uint64_t getGranularity() { <span class="keywordflow">return<\/span> _granularity; };<\/div>$/;"	a
l00141	html/mtrand_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div>$/;"	a
l00141	html/mutex_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<span class="preprocessor">#if 0<\/span><\/div>$/;"	a
l00141	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;                <span class="comment">\/\/ on this port and we&#39;ll have a non-contiguous allocation. In practice, this is rare.<\/span><\/div>$/;"	a
l00141	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;                partInfo[p].profHits.init(<span class="stringliteral">&quot;hits&quot;<\/span>, <span class="stringliteral">&quot;Hits&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profHits);<\/div>$/;"	a
l00141	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;                uint64_t occ = blocks[(curBlock + i) % B].occ;<\/div>$/;"	a
l00141	html/process__tree_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;        }<\/div>$/;"	a
l00141	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;        }<\/div>$/;"	a
l00141	html/scheduler_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div>$/;"	a
l00141	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<span class="preprocessor">#ifdef DEBUG_SLAB_ALLOC<\/span><\/div>$/;"	a
l00141	html/stats_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;                <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* as = <span class="keyword">dynamic_cast&lt;<\/span><a class="code" href="classAggregateStat.html">AggregateStat<\/a>*<span class="keyword">&gt;<\/span>(s);<\/div>$/;"	a
l00141	html/timing__event_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;            <span class="keywordflow">return<\/span> addChild(childEv, &amp;evRec);<\/div>$/;"	a
l00141	html/zsim_8h_source.html	/^<div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    <a class="code" href="classProcStats.html">ProcStats<\/a>* procStats;<\/div>$/;"	a
l00142	html/barrier_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;                    threadList[otherTid].lastIdx = lastIdx;<\/div>$/;"	a
l00142	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;        <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="structZCands_1_1iterator.html">iterator<\/a>(<a class="code" href="structZWalkInfo.html">ZWalkInfo<\/a>* _x) : x(_x) {}<\/div>$/;"	a
l00142	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;            parentStat-&gt;append(&amp;profFWD);<\/div>$/;"	a
l00142	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div>$/;"	a
l00142	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;            uint32_t rank;<\/div>$/;"	a
l00142	html/decoder_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;        <span class="comment">\/\/By default, these emit to temporary registers that depend on the index; this can be overriden, e.g. for moves<\/span><\/div>$/;"	a
l00142	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;        <a class="code" href="classMemParam.html">MemParam<\/a> *mParam;<\/div>$/;"	a
l00142	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;        uint32_t writeDqPin;<\/div>$/;"	a
l00142	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;                futex_lock(&amp;filterLock);<\/div>$/;"	a
l00142	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t p = 0; p &lt;= partitions; p++) {<\/div>$/;"	a
l00142	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;            <span class="comment">\/\/info(&quot;Remove POST h=%p t=%p e=%p&quot;, head, tail);<\/span><\/div>$/;"	a
l00142	html/locks_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div>$/;"	a
l00142	html/log_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="preprocessor">#define info(args...) \\<\/span><\/div>$/;"	a
l00142	html/mc_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div>$/;"	a
l00142	html/mtrand_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;        <span class="comment">\/\/ Re-seeding functions with same behavior as initializers<\/span><\/div>$/;"	a
l00142	html/mutex_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="preprocessor"><\/span>            wrUnlock();<\/div>$/;"	a
l00142	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;                <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; extraSlots; i++) {<\/div>$/;"	a
l00142	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;                partInfo[p].profMisses.init(<span class="stringliteral">&quot;misses&quot;<\/span>, <span class="stringliteral">&quot;Misses&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profMisses);<\/div>$/;"	a
l00142	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;                <span class="keywordflow">if<\/span> (occ) {<\/div>$/;"	a
l00142	html/process__tree_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div>$/;"	a
l00142	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;};<\/div>$/;"	a
l00142	html/scheduler_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;        <a class="code" href="classInList.html">InList&lt;ThreadInfo&gt;<\/a> runQueue;<\/div>$/;"	a
l00142	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="preprocessor"><\/span>            memset(s-&gt;buf, -1, <span class="keyword">sizeof<\/span>(s-&gt;buf));<\/div>$/;"	a
l00142	html/stats_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;                <span class="keywordflow">if<\/span> (as) {<\/div>$/;"	a
l00142	html/timing__event_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;        }<\/div>$/;"	a
l00142	html/zsim_8h_source.html	/^<div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<\/div>$/;"	a
l00143	html/barrier_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;                    threadList[tid].lastIdx = curThreadIdx;<\/div>$/;"	a
l00143	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> inc() {x++;} <span class="comment">\/\/overloading prefix\/postfix too messy<\/span><\/div>$/;"	a
l00143	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;            parentStat-&gt;append(&amp;profGETNextLevelLat);<\/div>$/;"	a
l00143	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;        uint64_t getLastLimit() {<span class="keywordflow">return<\/span> lastLimit;}<\/div>$/;"	a
l00143	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;            uint32_t col;<\/div>$/;"	a
l00143	html/decoder_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitLoad(Instr&amp; instr, uint32_t idx, DynUopVec&amp; uops, uint32_t destReg = 0);<\/div>$/;"	a
l00143	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<\/div>$/;"	a
l00143	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;        uint32_t readTermPin;<\/div>$/;"	a
l00143	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;                <span class="keywordflow">if<\/span> (_tlb.find(vpgnum) == _tlb.end()) {<\/div>$/;"	a
l00143	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[p]) <a class="code" href="structIdealLRUPartReplPolicy_1_1IdPartInfo.html">IdPartInfo<\/a>();<\/div>$/;"	a
l00143	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;        }<\/div>$/;"	a
l00143	html/locks_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> ticket_unlock(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00143	html/log_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="preprocessor">{ \\<\/span><\/div>$/;"	a
l00143	html/mc_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="keyword">private<\/span>:<\/div>$/;"	a
l00143	html/mtrand_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;        <span class="keywordtype">void<\/span> seed(<span class="keyword">const<\/span> uint64_t oneSeed);<\/div>$/;"	a
l00143	html/mutex_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;            rdLock();<\/div>$/;"	a
l00143	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;                    scheduleInternal&lt;false, false&gt;(curCycle, extraSlotCycle, extraSlotPortMask);<\/div>$/;"	a
l00143	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;                partInfo[p].profSelfEvictions.init(<span class="stringliteral">&quot;selfEvs&quot;<\/span>, <span class="stringliteral">&quot;Evictions caused by us&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profSelfEvictions);<\/div>$/;"	a
l00143	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;                    uint64_t pos = __builtin_ctzl(occ);<\/div>$/;"	a
l00143	html/process__tree_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;        <span class="keyword">const<\/span> g_string&amp; getSyscallBlacklistRegex()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00143	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<\/div>$/;"	a
l00143	html/scheduler_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;        <a class="code" href="classInList.html">InList&lt;ThreadInfo&gt;<\/a> outQueue;<\/div>$/;"	a
l00143	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00143	html/stats_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;                    <span class="keywordtype">bool<\/span> emptyChild = as-&gt;makeImmutable();<\/div>$/;"	a
l00143	html/timing__event_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<\/div>$/;"	a
l00143	html/zsim_8h_source.html	/^<div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;    <a class="code" href="classTimeBreakdownStat.html">TimeBreakdownStat<\/a>* profSimTime;<\/div>$/;"	a
l00144	html/barrier_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;                    <span class="comment">\/\/now we&#39;ll be scheduled next :)<\/span><\/div>$/;"	a
l00144	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t operator*()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> x-&gt;lineId; }<\/div>$/;"	a
l00144	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;            parentStat-&gt;append(&amp;profGETNetLat);<\/div>$/;"	a
l00144	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div>$/;"	a
l00144	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;        };<\/div>$/;"	a
l00144	html/decoder_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitStore(Instr&amp; instr, uint32_t idx, DynUopVec&amp; uops, uint32_t srcReg = 0);<\/div>$/;"	a
l00144	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector &lt;MemRankBase*&gt;<\/a> ranks;<\/div>$/;"	a
l00144	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;        uint32_t writeTermPin;<\/div>$/;"	a
l00144	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;                    <span class="keywordflow">do<\/span> {<\/div>$/;"	a
l00144	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;                partInfo[p].targetSize = numLines\/partitions;<\/div>$/;"	a
l00144	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<\/div>$/;"	a
l00144	html/locks_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;    __sync_fetch_and_add(lock, 1&lt;&lt;16);<\/div>$/;"	a
l00144	html/log_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="preprocessor">    log_lock(); \\<\/span><\/div>$/;"	a
l00144	html/mc_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;    <span class="comment">\/\/ For Alloy Cache.<\/span><\/div>$/;"	a
l00144	html/mtrand_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;        <span class="keywordtype">void<\/span> seed(uint64_t *<span class="keyword">const<\/span> bigSeed, <span class="keyword">const<\/span> uint64_t seedLength = N);<\/div>$/;"	a
l00144	html/mutex_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="preprocessor">#else<\/span><\/div>$/;"	a
l00144	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;                    <span class="comment">\/\/ info(&quot;extra slot %d allocated on cycle %ld&quot;, i, extraSlotCycle);<\/span><\/div>$/;"	a
l00144	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;                partInfo[p].profExtEvictions.init(<span class="stringliteral">&quot;extEvs&quot;<\/span>, <span class="stringliteral">&quot;Evictions caused by others&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profExtEvictions);<\/div>$/;"	a
l00144	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;                    uint64_t cycle = (curBlock + i)*64 + pos;<\/div>$/;"	a
l00144	html/process__tree_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;            <span class="keywordflow">return<\/span> syscallBlacklistRegex;<\/div>$/;"	a
l00144	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="comment">\/\/This is VERY inefficient, uses LRU timestamps to do something that in essence requires a few bits.<\/span><\/div>$/;"	a
l00144	html/scheduler_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;        <a class="code" href="classInList.html">InList&lt;ThreadInfo&gt;<\/a> sleepQueue; <span class="comment">\/\/contains all the sleeping threads, it is ORDERED by wakeup time<\/span><\/div>$/;"	a
l00144	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="preprocessor"><\/span>            <span class="keywordflow">if<\/span> (s != curSlab) {<\/div>$/;"	a
l00144	html/stats_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;                    <span class="keywordflow">if<\/span> (!emptyChild) newChildren.push_back(s);<\/div>$/;"	a
l00144	html/timing__event_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classTimingEvent.html#a55e7e2942d6607eb2a9dd484baf39070">parentDone<\/a>(uint64_t startCycle); <span class="comment">\/\/ see cpp<\/span><\/div>$/;"	a
l00144	html/zsim_8h_source.html	/^<div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;    <a class="code" href="classVectorCounter.html">VectorCounter<\/a>* profHeartbeats; <span class="comment">\/\/global b\/c number of processes cannot be inferred at init time; we just size to max<\/span><\/div>$/;"	a
l00145	html/barrier_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                }<\/div>$/;"	a
l00145	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> operator==(<span class="keyword">const<\/span> <a class="code" href="structZCands_1_1iterator.html">iterator<\/a>&amp; it)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> it.x == x; }<\/div>$/;"	a
l00145	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;        }<\/div>$/;"	a
l00145	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;        uint64_t getCurCycle(uint32_t domain) {<\/div>$/;"	a
l00145	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div>$/;"	a
l00145	html/decoder_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div>$/;"	a
l00145	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;        std::vector&lt;std::pair&lt;uint64_t, uint64_t&gt; &gt; accessLog;<\/div>$/;"	a
l00145	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;};<\/div>$/;"	a
l00145	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                        int64_t rand;<\/div>$/;"	a
l00145	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                partInfo[p].size = 0;<\/div>$/;"	a
l00145	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;        <span class="keywordtype">void<\/span> insertAfter(T* prev, T* e) {<\/div>$/;"	a
l00145	html/locks_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;}<\/div>$/;"	a
l00145	html/log_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<span class="preprocessor">    fprintf(logFdOut, &quot;%s&quot;, logHeader); \\<\/span><\/div>$/;"	a
l00145	html/mc_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;    Address transMCAddress(Address mc_addr);<\/div>$/;"	a
l00145	html/mtrand_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;        <span class="keywordtype">void<\/span> seed();<\/div>$/;"	a
l00145	html/mutex_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<span class="preprocessor"><\/span>            <span class="comment">\/* We want drops to be atomic, i.e., allow other readers to<\/span><\/div>$/;"	a
l00145	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                    extraSlotCycle++;<\/div>$/;"	a
l00145	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div>$/;"	a
l00145	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                    <span class="keywordflow">return<\/span> feMap.empty()? cycle : MIN(cycle, feMap.begin()-&gt;first);<\/div>$/;"	a
l00145	html/process__tree_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;        }<\/div>$/;"	a
l00145	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<span class="comment">\/\/If you want to use this frequently, consider a reimplementation<\/span><\/div>$/;"	a
l00145	html/scheduler_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div>$/;"	a
l00145	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                freeList.push_back(s);<\/div>$/;"	a
l00145	html/stats_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00145	html/timing__event_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div>$/;"	a
l00145	html/zsim_8h_source.html	/^<div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div>$/;"	a
l00146	html/barrier_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;            }<\/div>$/;"	a
l00146	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> operator!=(<span class="keyword">const<\/span> <a class="code" href="structZCands_1_1iterator.html">iterator<\/a>&amp; it)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> it.x != x; }<\/div>$/;"	a
l00146	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div>$/;"	a
l00146	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;            assert(domain &lt; numDomains);<\/div>$/;"	a
l00146	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;        <span class="keyword">struct <\/span>Request : <a class="code" href="structInListNode.html">InListNode<\/a>&lt;Request&gt; {<\/div>$/;"	a
l00146	html/decoder_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;        <span class="comment">\/\/Emit all loads and stores for this uop<\/span><\/div>$/;"	a
l00146	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div>$/;"	a
l00146	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div>$/;"	a
l00146	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;                        lrand48_r(&amp;_buffer, &amp;rand);<\/div>$/;"	a
l00146	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;            }<\/div>$/;"	a
l00146	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;            assert(e &amp;&amp; e-&gt;owner == <span class="keyword">nullptr<\/span>);<\/div>$/;"	a
l00146	html/locks_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div>$/;"	a
l00146	html/log_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="preprocessor">    fprintf(logFdOut, args); \\<\/span><\/div>$/;"	a
l00146	html/mc_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;    <span class="comment">\/\/ For Page Granularity Cache<\/span><\/div>$/;"	a
l00146	html/mtrand_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div>$/;"	a
l00146	html/mutex_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="comment">             * progress with us, but never allow an intervening writer. There<\/span><\/div>$/;"	a
l00146	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;                }<\/div>$/;"	a
l00146	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;                partsStat-&gt;append(partStat);<\/div>$/;"	a
l00146	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;                }<\/div>$/;"	a
l00146	html/process__tree_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<\/div>$/;"	a
l00146	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno"><a class="line" href="classTreeLRUReplPolicy.html">  146<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTreeLRUReplPolicy.html">TreeLRUReplPolicy<\/a> : <span class="keyword">public<\/span> <a class="code" href="classLRUReplPolicy.html">LRUReplPolicy<\/a>&lt;true&gt; {<\/div>$/;"	a
l00146	html/scheduler_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;        PAD();<\/div>$/;"	a
l00146	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;                liveSlabs--;<\/div>$/;"	a
l00146	html/stats_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;                    newChildren.push_back(s);<\/div>$/;"	a
l00146	html/timing__event_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;        <span class="comment">\/\/queue for the first time<\/span><\/div>$/;"	a
l00146	html/zsim_8h_source.html	/^<div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;    uint64_t trigger; <span class="comment">\/\/code with what triggered the current stats dump<\/span><\/div>$/;"	a
l00147	html/barrier_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<\/div>$/;"	a
l00147	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    };<\/div>$/;"	a
l00147	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;        uint64_t processEviction(Address wbLineAddr, uint32_t lineId, <span class="keywordtype">bool<\/span> lowerLevelWriteback, uint64_t cycle, uint32_t srcId);<\/div>$/;"	a
l00147	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;            uint64_t c = domains[domain].curCycle;<\/div>$/;"	a
l00147	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;            Address addr;<\/div>$/;"	a
l00147	html/decoder_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitLoads(Instr&amp; instr, DynUopVec&amp; uops);<\/div>$/;"	a
l00147	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t UpdateRefreshNum(uint32_t rank, uint64_t arrivalCycle);<\/div>$/;"	a
l00147	html/detailed__mem__params_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="preprocessor">#endif  \/\/ DETAILED_MEM_PARAMS_H_<\/span><\/div>$/;"	a
l00147	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;                        pgnum = rand &amp; 0x000fffffffffffff;<\/div>$/;"	a
l00147	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<\/div>$/;"	a
l00147	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;            assert(prev &amp;&amp; prev-&gt;owner == <span class="keyword">this<\/span>);<\/div>$/;"	a
l00147	html/locks_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<\/div>$/;"	a
l00147	html/log_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="preprocessor">    fprintf(logFdOut, &quot;\\n&quot;); \\<\/span><\/div>$/;"	a
l00147	html/mc_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    Address transMCAddressPage(uint64_t set_num, uint32_t way_num); <\/div>$/;"	a
l00147	html/mtrand_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;        <span class="comment">\/\/ Saving and loading generator state<\/span><\/div>$/;"	a
l00147	html/mutex_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="comment">             * are three possible situations:<\/span><\/div>$/;"	a
l00147	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;            }<\/div>$/;"	a
l00147	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;            }<\/div>$/;"	a
l00147	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;            }<\/div>$/;"	a
l00147	html/process__tree_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;        <span class="comment">\/\/Currently there&#39;s no API to get back to a paused state; processes can start in a paused state, but once they are unpaused, they are unpaused for good<\/span><\/div>$/;"	a
l00147	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00147	html/scheduler_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;        lock_t schedLock;<\/div>$/;"	a
l00147	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;            }<\/div>$/;"	a
l00147	html/stats_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;                }<\/div>$/;"	a
l00147	html/timing__event_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;        <span class="comment">\/\/always happens on PHASE 1 (bound), and is synchronized<\/span><\/div>$/;"	a
l00147	html/zsim_8h_source.html	/^<div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<\/div>$/;"	a
l00148	html/barrier_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<\/div>$/;"	a
l00148	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<\/div>$/;"	a
l00148	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<\/div>$/;"	a
l00148	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;            assert(((int64_t)c) &gt;= 0);<\/div>$/;"	a
l00148	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;            AddrLoc loc;<\/div>$/;"	a
l00148	html/decoder_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitStores(Instr&amp; instr, DynUopVec&amp; uops);<\/div>$/;"	a
l00148	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t UpdateLastRefreshCycle(uint32_t rank, uint64_t arrivalCycle, uint32_t refreshNum);<\/div>$/;"	a
l00148	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;                    } <span class="keywordflow">while<\/span> (_exist_pgnum.find(pgnum) != _exist_pgnum.end());<\/div>$/;"	a
l00148	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;            array = gm_calloc&lt;Entry&gt;(numLines);<\/div>$/;"	a
l00148	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;            e-&gt;linkPrev(prev, <span class="keyword">this<\/span>);<\/div>$/;"	a
l00148	html/locks_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> futex_init(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00148	html/log_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<span class="preprocessor">    fflush(logFdOut); \\<\/span><\/div>$/;"	a
l00148	html/mc_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<\/div>$/;"	a
l00148	html/mtrand_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;        <span class="keywordtype">void<\/span> save(uint64_t* saveArray) <span class="keyword">const<\/span>;  <span class="comment">\/\/ to array of size SAVE<\/span><\/div>$/;"	a
l00148	html/mutex_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<span class="comment">             *<\/span><\/div>$/;"	a
l00148	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;            assert(occupancy &lt;= WSZ);<\/div>$/;"	a
l00148	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;            parentStat-&gt;append(partsStat);<\/div>$/;"	a
l00148	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<\/div>$/;"	a
l00148	html/process__tree_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;};<\/div>$/;"	a
l00148	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;        uint32_t* candArray;<\/div>$/;"	a
l00148	html/scheduler_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;        PAD();<\/div>$/;"	a
l00148	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;            assert(liveSlabs);  <span class="comment">\/\/ at least curSlab<\/span><\/div>$/;"	a
l00148	html/stats_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;            }<\/div>$/;"	a
l00148	html/timing__event_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;        <span class="keywordtype">void<\/span> queue(uint64_t qCycle); <span class="comment">\/\/see cpp<\/span><\/div>$/;"	a
l00148	html/zsim_8h_source.html	/^<div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;    <a class="code" href="classProcessTreeNode.html">ProcessTreeNode<\/a>* procTree;<\/div>$/;"	a
l00149	html/barrier_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;            threadList[tid].state = WAITING;<\/div>$/;"	a
l00149	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;    <a class="code" href="structZWalkInfo.html">ZWalkInfo<\/a>* b;<\/div>$/;"	a
l00149	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;        uint64_t processAccess(Address lineAddr, uint32_t lineId, AccessType type, uint64_t cycle, uint32_t srcId, uint32_t flags);<\/div>$/;"	a
l00149	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;            <span class="keywordflow">return<\/span> c;<\/div>$/;"	a
l00149	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;            <span class="keywordtype">bool<\/span> write;<\/div>$/;"	a
l00149	html/decoder_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div>$/;"	a
l00149	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> UpdatePowerDownCycle(uint32_t rank, uint64_t arrivalCycle, uint64_t lastPhaseCycle, uint32_t refreshNum);<\/div>$/;"	a
l00149	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;                    _tlb[vpgnum] = pgnum;<\/div>$/;"	a
l00149	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; numLines; i++) {<\/div>$/;"	a
l00149	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;            <span class="keywordflow">if<\/span> (prev == tail) tail = e;<\/div>$/;"	a
l00149	html/locks_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;    spin_init(lock);<\/div>$/;"	a
l00149	html/log_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<span class="preprocessor">    log_unlock(); \\<\/span><\/div>$/;"	a
l00149	html/mc_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;    <span class="comment">\/\/ For Tagless.<\/span><\/div>$/;"	a
l00149	html/mtrand_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;        <span class="keywordtype">void<\/span> load(uint64_t *<span class="keyword">const<\/span> loadArray);  <span class="comment">\/\/ from such array<\/span><\/div>$/;"	a
l00149	html/mutex_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<span class="comment">             * 1.- Nobody is blocked in anything else -&gt; readers == 0, and we<\/span><\/div>$/;"	a
l00149	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;        }<\/div>$/;"	a
l00149	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;        }<\/div>$/;"	a
l00149	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;            <span class="keywordflow">return<\/span> feMap.begin()-&gt;first;<\/div>$/;"	a
l00149	html/process__tree_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div>$/;"	a
l00149	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;        uint32_t numCands;<\/div>$/;"	a
l00149	html/scheduler_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div>$/;"	a
l00149	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;        }<\/div>$/;"	a
l00149	html/stats_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;            _children = newChildren;<\/div>$/;"	a
l00149	html/timing__event_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div>$/;"	a
l00149	html/zsim_8h_source.html	/^<div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;    <a class="code" href="classProcessTreeNode.html">ProcessTreeNode<\/a>** procArray; <span class="comment">\/\/a flat view of the process tree, where each process is indexed by procIdx<\/span><\/div>$/;"	a
l00150	html/barrier_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;            threadList[tid].futexWord = 1;<\/div>$/;"	a
l00150	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    <a class="code" href="structZWalkInfo.html">ZWalkInfo<\/a>* e;<\/div>$/;"	a
l00150	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<\/div>$/;"	a
l00150	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;        }<\/div>$/;"	a
l00150	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;            uint32_t data_size; <span class="comment">\/\/ access data size. 1 for cacheline, 64 for page<\/span><\/div>$/;"	a
l00150	html/decoder_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;        <span class="comment">\/\/Emits a load-store fence uop<\/span><\/div>$/;"	a
l00150	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> UpdateDataBusCycle(uint64_t start, uint64_t end);<\/div>$/;"	a
l00150	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;                    _exist_pgnum.insert( pgnum );<\/div>$/;"	a
l00150	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;                Entry* e = <span class="keyword">new<\/span> (&amp;array[i]) Entry(i, 0);<\/div>$/;"	a
l00150	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;            elems++;<\/div>$/;"	a
l00150	html/locks_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;}<\/div>$/;"	a
l00150	html/log_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="preprocessor">}<\/span><\/div>$/;"	a
l00150	html/mc_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    <span class="comment">\/\/ For Tagless, we don&#39;t use &quot;Set * _cache;&quot; as other schemes. Instead, we use the following <\/span><\/div>$/;"	a
l00150	html/mtrand_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;        <span class="keyword">friend<\/span> std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, <span class="keyword">const<\/span> <a class="code" href="classMTRand.html">MTRand<\/a>&amp; mtrand);<\/div>$/;"	a
l00150	html/mutex_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="comment">             * can just become the first reader and keep wrlock.<\/span><\/div>$/;"	a
l00150	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<\/div>$/;"	a
l00150	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<\/div>$/;"	a
l00150	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;        }<\/div>$/;"	a
l00150	html/process__tree_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="keywordtype">void<\/span> CreateProcessTree(<a class="code" href="classConfig.html">Config<\/a>&amp; config);<\/div>$/;"	a
l00150	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;        uint32_t candIdx;<\/div>$/;"	a
l00150	html/scheduler_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;        uint64_t curPhase;<\/div>$/;"	a
l00150	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<\/div>$/;"	a
l00150	html/stats_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;            <span class="keywordflow">return<\/span> _children.size() == 0;<\/div>$/;"	a
l00150	html/timing__event_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;        <span class="comment">\/\/mark an already-dequeued event for reexecution (simulate will be called again at the specified cycle)<\/span><\/div>$/;"	a
l00150	html/zsim_8h_source.html	/^<div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    ProcExitStatus* procExited; <span class="comment">\/\/starts with all set to PROC_RUNNING, each process sets to PROC_EXITED or PROC_RESTARTME on exit. Used to detect untimely deaths (that don;t go thropugh SimEnd) in the harness and abort.<\/span><\/div>$/;"	a
l00151	html/barrier_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;            tryWakeNext(tid); <span class="comment">\/\/NOTE: You can&#39;t cause a phase to end here.<\/span><\/div>$/;"	a
l00151	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    <span class="keyword">inline<\/span> <a class="code" href="structZCands.html">ZCands<\/a>(<a class="code" href="structZWalkInfo.html">ZWalkInfo<\/a>* _b, <a class="code" href="structZWalkInfo.html">ZWalkInfo<\/a>* _e) : b(_b), e(_e) {}<\/div>$/;"	a
l00151	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;        <span class="keywordtype">void<\/span> processWritebackOnAccess(Address lineAddr, uint32_t lineId, AccessType type);<\/div>$/;"	a
l00151	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div>$/;"	a
l00151	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div>$/;"	a
l00151	html/decoder_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitFence(DynUopVec&amp; uops, uint32_t lat);<\/div>$/;"	a
l00151	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div>$/;"	a
l00151	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;                } <span class="keywordflow">else<\/span> <\/div>$/;"	a
l00151	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;                partInfo[0].lruList.push_front(e);<\/div>$/;"	a
l00151	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;        }<\/div>$/;"	a
l00151	html/locks_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div>$/;"	a
l00151	html/log_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00151	html/mc_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    <span class="comment">\/\/ structure to model a fully associative cache with FIFO replacement <\/span><\/div>$/;"	a
l00151	html/mtrand_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;        <span class="keyword">friend<\/span> std::istream&amp; operator&gt;&gt;(std::istream&amp; is, <a class="code" href="classMTRand.html">MTRand<\/a>&amp; mtrand);<\/div>$/;"	a
l00151	html/mutex_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="comment">             *<\/span><\/div>$/;"	a
l00151	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> advancePos(uint64_t&amp; curCycle) {<\/div>$/;"	a
l00151	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;        <span class="keywordtype">void<\/span> update(uint32_t <span class="keywordtype">id<\/span>, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {<\/div>$/;"	a
l00151	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;};<\/div>$/;"	a
l00151	html/process__tree_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div>$/;"	a
l00151	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<\/div>$/;"	a
l00151	html/scheduler_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;        <span class="comment">\/\/uint32_t nextVictim;<\/span><\/div>$/;"	a
l00151	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;        <span class="keyword">friend<\/span> <span class="keyword">struct <\/span><a class="code" href="structslab_1_1Slab.html">Slab<\/a>;<\/div>$/;"	a
l00151	html/stats_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;        }<\/div>$/;"	a
l00151	html/timing__event_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;        <span class="comment">\/\/always happens on PHASE 2 (weave), and is unsynchronized<\/span><\/div>$/;"	a
l00151	html/zsim_8h_source.html	/^<div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    uint32_t numProcs;<\/div>$/;"	a
l00152	html/barrier_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;            futex_unlock(schedLock);<\/div>$/;"	a
l00152	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    <span class="keyword">inline<\/span> iterator begin()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> iterator(b);}<\/div>$/;"	a
l00152	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div>$/;"	a
l00152	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;        <span class="keywordtype">void<\/span> setPrio(uint32_t domain, uint32_t prio) {domains[domain].prio = prio;}<\/div>$/;"	a
l00152	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;            uint64_t rowHitSeq; <span class="comment">\/\/ sequence number used to throttle max # row hits<\/span><\/div>$/;"	a
l00152	html/decoder_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div>$/;"	a
l00152	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> IssueActivate(uint32_t rank, uint32_t bank, uint64_t issuedCycle);<\/div>$/;"	a
l00152	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;                    pgnum = _tlb[vpgnum];   <\/div>$/;"	a
l00152	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;                partInfo[0].size++;<\/div>$/;"	a
l00152	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div>$/;"	a
l00152	html/locks_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="comment">\/* NOTE: The current implementation of this lock is quite unfair. Not that we care for its current use. *\/<\/span><\/div>$/;"	a
l00152	html/log_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="comment">\/* I would call these macros log, but there&#39;s this useless math function<\/span><\/div>$/;"	a
l00152	html/mc_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    <span class="comment">\/\/vector&lt;Address&gt; _idx_to_address;<\/span><\/div>$/;"	a
l00152	html/mtrand_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;        <a class="code" href="classMTRand.html">MTRand<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classMTRand.html">MTRand<\/a>&amp; o);<\/div>$/;"	a
l00152	html/mutex_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="comment">             * 2.- A writer is blocked in wq, and is possibly blocking all the<\/span><\/div>$/;"	a
l00152	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;            occupancy -= curWin[curPos].count;<\/div>$/;"	a
l00152	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;            WayPartInfo* e = &amp;array[id];<\/div>$/;"	a
l00152	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div>$/;"	a
l00152	html/process__tree_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div>$/;"	a
l00152	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00152	html/scheduler_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;        <a class="code" href="classMTRand.html">MTRand<\/a> rnd;<\/div>$/;"	a
l00152	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;};<\/div>$/;"	a
l00152	html/stats_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div>$/;"	a
l00152	html/timing__event_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;        <span class="keywordtype">void<\/span> requeue(uint64_t cycle); <span class="comment">\/\/see cpp<\/span><\/div>$/;"	a
l00152	html/zsim_8h_source.html	/^<div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    uint32_t numProcGroups;<\/div>$/;"	a
l00153	html/barrier_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div>$/;"	a
l00153	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;    <span class="keyword">inline<\/span> iterator end()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> iterator(e);}<\/div>$/;"	a
l00153	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;        <span class="keywordtype">void<\/span> processInval(Address lineAddr, uint32_t lineId, InvType type, <span class="keywordtype">bool<\/span>* reqWriteback);<\/div>$/;"	a
l00153	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div>$/;"	a
l00153	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div>$/;"	a
l00153	html/decoder_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitExecUop(uint32_t rs0, uint32_t rs1, uint32_t rd0, uint32_t rd1,<\/div>$/;"	a
l00153	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> IssuePrecharge(uint32_t rank, uint32_t bank, uint64_t issuedCycle, <span class="keywordtype">bool<\/span> continuous = <span class="keyword">false<\/span>);<\/div>$/;"	a
l00153	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;                pLineAddr = procMask | (pgnum &lt;&lt; 6) | (vLineAddr &amp; 0x3f); <\/div>$/;"	a
l00153	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;            }<\/div>$/;"	a
l00153	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;        <span class="keywordtype">size_t<\/span> size()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00153	html/locks_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> futex_lock(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00153	html/log_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="comment"> * that happens to conflict with this...<\/span><\/div>$/;"	a
l00153	html/mc_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;    uint64_t _next_evict_idx;<\/div>$/;"	a
l00153	html/mtrand_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div>$/;"	a
l00153	html/mutex_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="comment">             * readers and writers on rb -&gt; readers == 0, same.<\/span><\/div>$/;"	a
l00153	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;            curWin[curPos].set(0, 0);<\/div>$/;"	a
l00153	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;            <span class="keywordflow">if<\/span> (e-&gt;ts &gt; 0) { <span class="comment">\/\/this is a hit update<\/span><\/div>$/;"	a
l00153	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="preprocessor">#endif  \/\/ PRIO_QUEUE_H_<\/span><\/div>$/;"	a
l00153	html/process__tree_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="preprocessor">#endif  \/\/ PROCESS_TREE_H_<\/span><\/div>$/;"	a
l00153	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;        <a class="code" href="classTreeLRUReplPolicy.html">TreeLRUReplPolicy<\/a>(uint32_t _numLines, uint32_t _numCands) : <a class="code" href="classLRUReplPolicy.html">LRUReplPolicy&lt;true&gt;<\/a>(_numLines), numCands(_numCands), candIdx(0) {<\/div>$/;"	a
l00153	html/scheduler_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div>$/;"	a
l00153	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div>$/;"	a
l00153	html/stats_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;        <span class="keywordtype">void<\/span> append(<a class="code" href="classStat.html">Stat<\/a>* child) {<\/div>$/;"	a
l00153	html/timing__event_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div>$/;"	a
l00153	html/zsim_8h_source.html	/^<div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<\/div>$/;"	a
l00154	html/barrier_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;            <span class="keywordflow">if<\/span> (threadList[tid].state == WAITING) {<\/div>$/;"	a
l00154	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    <span class="keyword">inline<\/span> uint32_t numCands()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> e-b; }<\/div>$/;"	a
l00154	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<\/div>$/;"	a
l00154	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="preprocessor">#if PROFILE_CROSSINGS<\/span><\/div>$/;"	a
l00154	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;            <span class="comment">\/\/ Cycle accounting<\/span><\/div>$/;"	a
l00154	html/decoder_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;                DynUopVec&amp; uops, uint32_t lat, uint8_t ports, uint8_t extraSlots = 0);<\/div>$/;"	a
l00154	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<\/div>$/;"	a
l00154	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;            } <span class="keywordflow">else<\/span> <\/div>$/;"	a
l00154	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;        }<\/div>$/;"	a
l00154	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;            <span class="keywordflow">return<\/span> elems;<\/div>$/;"	a
l00154	html/locks_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    uint32_t c;<\/div>$/;"	a
l00154	html/log_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00154	html/mc_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    <span class="comment">\/\/map&lt;uint64_t, uint64_t&gt; _address_to_idx;<\/span><\/div>$/;"	a
l00154	html/mtrand_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00154	html/mutex_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="comment">             *<\/span><\/div>$/;"	a
l00154	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;            curPos++;<\/div>$/;"	a
l00154	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;                partInfo[e-&gt;p].profHits.inc();<\/div>$/;"	a
l00154	html/prio__queue_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00154	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;            candArray = gm_calloc&lt;uint32_t&gt;(numCands);<\/div>$/;"	a
l00154	html/scheduler_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;        <span class="keyword">volatile<\/span> <span class="keywordtype">bool<\/span> terminateWatchdogThread;<\/div>$/;"	a
l00154	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> Slab::freeElem() {<\/div>$/;"	a
l00154	html/stats_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;            assert(_isMutable);<\/div>$/;"	a
l00154	html/timing__event_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> simulate(uint64_t startCycle) = 0;<\/div>$/;"	a
l00154	html/zsim_8h_source.html	/^<div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    <a class="code" href="classPinCmd.html">PinCmd<\/a>* pinCmd; <span class="comment">\/\/enables calls to exec() to modify Pin&#39;s calling arguments, see zsim.cpp<\/span><\/div>$/;"	a
l00155	html/barrier_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;                DEBUG_BARRIER(<span class="stringliteral">&quot;[%d] Waiting on join&quot;<\/span>, tid);<\/div>$/;"	a
l00155	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;};<\/div>$/;"	a
l00155	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;        uint64_t processNonInclusiveWriteback(Address lineAddr, AccessType type, uint64_t cycle, MESIState* state, uint32_t srcId, uint32_t flags);<\/div>$/;"	a
l00155	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="preprocessor"><\/span>        <span class="keywordtype">void<\/span> profileCrossing(uint32_t srcDomain, uint32_t dstDomain, uint32_t count) {<\/div>$/;"	a
l00155	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;            uint64_t arrivalCycle;  <span class="comment">\/\/ in memCycles<\/span><\/div>$/;"	a
l00155	html/decoder_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div>$/;"	a
l00155	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t CalcIntraIssueCycle(<span class="keywordtype">bool<\/span> rowHit, uint32_t rank, MemAccessType type, uint64_t arrivalCycle, uint32_t refreshNum);<\/div>$/;"	a
l00155	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;                pLineAddr = procMask | vLineAddr;<\/div>$/;"	a
l00155	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div>$/;"	a
l00155	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;        }<\/div>$/;"	a
l00155	html/locks_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;    <span class="keywordflow">do<\/span> {<\/div>$/;"	a
l00155	html/log_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="comment">\/* FIXME: Better conditional tracing (e.g., via mask) *\/<\/span><\/div>$/;"	a
l00155	html/mc_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div>$/;"	a
l00155	html/mtrand_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;        <span class="keywordtype">void<\/span> initialize(<span class="keyword">const<\/span> uint64_t oneSeed);<\/div>$/;"	a
l00155	html/mutex_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="comment">             * 3.- A *reader* is blocked in wq, and is possibly blocking all<\/span><\/div>$/;"	a
l00155	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;            curCycle++;<\/div>$/;"	a
l00155	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;            } <span class="keywordflow">else<\/span> { <span class="comment">\/\/post-miss update, old line has been removed, this is empty<\/span><\/div>$/;"	a
l00155	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;            <span class="keywordflow">if<\/span> (numCands &amp; (numCands-1)) panic(<span class="stringliteral">&quot;Tree LRU needs a power of 2 candidates, %d given&quot;<\/span>, numCands);<\/div>$/;"	a
l00155	html/scheduler_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div>$/;"	a
l00155	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;    uint32_t prevLiveElems = __sync_fetch_and_sub(&amp;liveElems, 1);<\/div>$/;"	a
l00155	html/stats_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;            _children.push_back(child);<\/div>$/;"	a
l00155	html/timing__event_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div>$/;"	a
l00155	html/zsim_8h_source.html	/^<div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div>$/;"	a
l00156	html/barrier_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;                <span class="keywordflow">while<\/span> (<span class="keyword">true<\/span>) {<\/div>$/;"	a
l00156	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<\/div>$/;"	a
l00156	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<\/div>$/;"	a
l00156	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;            domains[dstDomain].profIncomingCrossings.inc(srcDomain);<\/div>$/;"	a
l00156	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;            uint64_t startSysCycle;  <span class="comment">\/\/ in sysCycles<\/span><\/div>$/;"	a
l00156	html/decoder_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;        <span class="comment">\/* Instruction emits *\/<\/span><\/div>$/;"	a
l00156	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t CalcInterIssueCycle(MemAccessType type, uint64_t arrivalCycle);<\/div>$/;"	a
l00156	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;            MESIState dummyState = MESIState::I;<\/div>$/;"	a
l00156	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat) {<\/div>$/;"	a
l00156	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<\/div>$/;"	a
l00156	html/locks_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;        <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; 5; i++) { <span class="comment">\/\/this should be tuned to balance syscall\/context-switch and user-level spinning costs<\/span><\/div>$/;"	a
l00156	html/log_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<span class="preprocessor">#ifdef _LOG_TRACE_<\/span><\/div>$/;"	a
l00156	html/mc_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;    <span class="comment">\/\/ Cache structure<\/span><\/div>$/;"	a
l00156	html/mtrand_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;        <span class="keywordtype">void<\/span> reload();<\/div>$/;"	a
l00156	html/mutex_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<span class="comment">             * other readers and writers on rb -&gt; readers == 1, if we unlock wq<\/span><\/div>$/;"	a
l00156	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<\/div>$/;"	a
l00156	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;                uint32_t oldPart = e-&gt;p;<\/div>$/;"	a
l00156	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;        }<\/div>$/;"	a
l00156	html/scheduler_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;std::pair&lt;uint32_t, uint32_t&gt;<\/a>&gt; pendingPidCleanups; <span class="comment">\/\/(pid, osPid) pairs of abruptly terminated processes<\/span><\/div>$/;"	a
l00156	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;    assert(prevLiveElems &amp;&amp; prevLiveElems &lt; usedBytes \/* &gt;= 1 bytes\/obj*\/);<\/div>$/;"	a
l00156	html/stats_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;        }<\/div>$/;"	a
l00156	html/timing__event_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> run(uint64_t startCycle) {<\/div>$/;"	a
l00156	html/zsim_8h_source.html	/^<div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;    <span class="comment">\/\/ If true, threads start as shadow and have no effect on simulation until they call the register magic op<\/span><\/div>$/;"	a
l00157	html/barrier_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;                    <span class="keywordtype">int<\/span> futex_res = syscall(SYS_futex, &amp;threadList[tid].futexWord, FUTEX_WAIT, 1 <span class="comment">\/*a racing thread waking us up will change value to 0, and we won&#39;t block*\/<\/span>, <span class="keyword">nullptr<\/span>, <span class="keyword">nullptr<\/span>, 0);<\/div>$/;"	a
l00157	html/cache__arrays_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="preprocessor">#endif  \/\/ CACHE_ARRAYS_H_<\/span><\/div>$/;"	a
l00157	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> lock() {<\/div>$/;"	a
l00157	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;            domains[dstDomain].profIncomingCrossingSims.inc(srcDomain, count);<\/div>$/;"	a
l00157	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<\/div>$/;"	a
l00157	html/decoder_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<\/div>$/;"	a
l00157	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t CalcActConst(uint32_t rank, uint32_t bank, uint64_t issuableCycle);<\/div>$/;"	a
l00157	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;            <a class="code" href="structMemReq.html">MemReq<\/a> req = {pLineAddr, isLoad? GETS : GETX, 0, &amp;dummyState, curCycle, &amp;filterLock, dummyState, srcId, reqFlags};<\/div>$/;"	a
l00157	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;            <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* rpStat = <span class="keyword">new<\/span> <a class="code" href="classAggregateStat.html">AggregateStat<\/a>();<\/div>$/;"	a
l00157	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="preprocessor">#if 0  \/\/ Verify all internal state; call to test list implementation<\/span><\/div>$/;"	a
l00157	html/locks_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;            <span class="keywordflow">if<\/span> (*lock == 0 &amp;&amp; __sync_bool_compare_and_swap(lock, 0, 1)) {<\/div>$/;"	a
l00157	html/log_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define trace(type, args...) \\<\/span><\/div>$/;"	a
l00157	html/mc_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    uint64_t _granularity;<\/div>$/;"	a
l00157	html/mtrand_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;        uint64_t hiBit(<span class="keyword">const<\/span> uint64_t u)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> u &amp; 0x80000000UL; }<\/div>$/;"	a
l00157	html/mutex_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="comment">             * we&#39;ll let that reader and subsequent ones go through, and<\/span><\/div>$/;"	a
l00157	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;            <span class="keywordflow">if<\/span> (curPos == H) {  <span class="comment">\/\/ rebase<\/span><\/div>$/;"	a
l00157	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;                uint32_t newPart = incomingLinePart;<\/div>$/;"	a
l00157	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<\/div>$/;"	a
l00157	html/scheduler_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<\/div>$/;"	a
l00157	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    <span class="comment">\/\/info(&quot;[%p] Slab::freeElem %d prevLiveElems&quot;, this, prevLiveElems);<\/span><\/div>$/;"	a
l00157	html/stats_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<\/div>$/;"	a
l00157	html/timing__event_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;            assert(<span class="keyword">this<\/span>);<\/div>$/;"	a
l00157	html/zsim_8h_source.html	/^<div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    <span class="keywordtype">bool<\/span> registerThreads;<\/div>$/;"	a
l00158	html/barrier_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;                    <span class="keywordflow">if<\/span> (futex_res == 0 || threadList[tid].futexWord != 1) <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00158	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;            futex_lock(&amp;ccLock);<\/div>$/;"	a
l00158	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;            domains[dstDomain].profIncomingCrossingHist.inc(MIN(count, (<span class="keywordtype">unsigned<\/span>)32));<\/div>$/;"	a
l00158	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;            <span class="comment">\/\/ Corresponding event to send a response to<\/span><\/div>$/;"	a
l00158	html/decoder_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitBasicMove(Instr&amp; instr, DynUopVec&amp; uops, uint32_t lat, uint8_t ports);<\/div>$/;"	a
l00158	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t CalcPreConst(uint32_t rank, uint32_t bank, MemAccessType type, uint64_t issuableCycle);<\/div>$/;"	a
l00158	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;            uint64_t respCycle  = access(req);<\/div>$/;"	a
l00158	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;            rpStat-&gt;init(<span class="stringliteral">&quot;part&quot;<\/span>, <span class="stringliteral">&quot;IdealLRUPart replacement policy stats&quot;<\/span>);<\/div>$/;"	a
l00158	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="preprocessor"><\/span>        <span class="keywordtype">void<\/span> verify() {<\/div>$/;"	a
l00158	html/locks_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;                <span class="keywordflow">return<\/span>;<\/div>$/;"	a
l00158	html/log_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="preprocessor">{ \\<\/span><\/div>$/;"	a
l00158	html/mc_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    uint64_t _num_ways;<\/div>$/;"	a
l00158	html/mtrand_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;        uint64_t loBit(<span class="keyword">const<\/span> uint64_t u)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> u &amp; 0x00000001UL; }<\/div>$/;"	a
l00158	html/mutex_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="comment">             * writers will still be locked.<\/span><\/div>$/;"	a
l00158	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;                <span class="comment">\/\/ info(&quot;[%ld] Rebasing, curCycle=%ld&quot;, curCycle\/H, curCycle);<\/span><\/div>$/;"	a
l00158	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;                <span class="keywordflow">if<\/span> (oldPart != newPart) {<\/div>$/;"	a
l00158	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;        ~<a class="code" href="classTreeLRUReplPolicy.html">TreeLRUReplPolicy<\/a>() {<\/div>$/;"	a
l00158	html/scheduler_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;        <span class="comment">\/\/Stats<\/span><\/div>$/;"	a
l00158	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    <span class="keywordflow">if<\/span> (prevLiveElems == 1) {<\/div>$/;"	a
l00158	html/stats_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;        uint32_t size()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00158	html/timing__event_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;            assert_msg(state == EV_NONE || state == EV_QUEUED, <span class="stringliteral">&quot;state %d expected %d (%s)&quot;<\/span>, state, EV_QUEUED, <span class="keyword">typeid<\/span>(*this).name());<\/div>$/;"	a
l00158	html/zsim_8h_source.html	/^<div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<\/div>$/;"	a
l00159	html/barrier_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;                }<\/div>$/;"	a
l00159	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;        }<\/div>$/;"	a
l00159	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;        }<\/div>$/;"	a
l00159	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;            <span class="comment">\/\/ Writes get a response immediately, so this is nullptr for them<\/span><\/div>$/;"	a
l00159	html/decoder_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitConditionalMove(Instr&amp; instr, DynUopVec&amp; uops, uint32_t lat, uint8_t ports);<\/div>$/;"	a
l00159	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t CalcRdWrConst(uint32_t rank, MemAccessType type, uint64_t issuableCycle);<\/div>$/;"	a
l00159	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<\/div>$/;"	a
l00159	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;            <a class="code" href="classProxyStat.html">ProxyStat<\/a>* pStat;<\/div>$/;"	a
l00159	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;            <span class="keywordflow">if<\/span> (empty()) {<\/div>$/;"	a
l00159	html/locks_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;            }<\/div>$/;"	a
l00159	html/log_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<span class="preprocessor">    if ( LOG_##type == LOG_Sched) { \\<\/span><\/div>$/;"	a
l00159	html/mc_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;    uint64_t _cache_size;  <span class="comment">\/\/ in Bytes<\/span><\/div>$/;"	a
l00159	html/mtrand_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;        uint64_t loBits(<span class="keyword">const<\/span> uint64_t u)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> u &amp; 0x7fffffffUL; }<\/div>$/;"	a
l00159	html/mutex_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<span class="comment">             *<\/span><\/div>$/;"	a
l00159	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;                std::swap(curWin, nextWin);<\/div>$/;"	a
l00159	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;                    partInfo[oldPart].size--;<\/div>$/;"	a
l00159	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;            gm_free(candArray);<\/div>$/;"	a
l00159	html/scheduler_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> threadsCreated, threadsFinished;<\/div>$/;"	a
l00159	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;        allocator-&gt;freeSlab(<span class="keyword">this<\/span>);<\/div>$/;"	a
l00159	html/stats_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;            assert(!_isMutable);<\/div>$/;"	a
l00159	html/timing__event_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;            state = EV_RUNNING;<\/div>$/;"	a
l00159	html/zsim_8h_source.html	/^<div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;    <span class="comment">\/\/If true, do not output vectors in stats -- they&#39;re bulky and we barely need them<\/span><\/div>$/;"	a
l00160	html/barrier_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;                <span class="comment">\/\/The thread that wakes us up changes this<\/span><\/div>$/;"	a
l00160	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<\/div>$/;"	a
l00160	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00160	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;            <a class="code" href="classDDRMemoryAccEvent.html">DDRMemoryAccEvent<\/a>* ev;<\/div>$/;"	a
l00160	html/decoder_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<\/div>$/;"	a
l00160	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<\/div>$/;"	a
l00160	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;            <span class="comment">\/\/Due to the way we do the locking, at this point the old address might be invalidated, but we have the new address guaranteed until we release the lock<\/span><\/div>$/;"	a
l00160	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t p = 0; p &lt; partitions; p++) {<\/div>$/;"	a
l00160	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;                assert(head == <span class="keyword">nullptr<\/span> &amp;&amp; tail == <span class="keyword">nullptr<\/span> &amp;&amp; elems == 0);<\/div>$/;"	a
l00160	html/locks_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<\/div>$/;"	a
l00160	html/log_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<span class="preprocessor">        log_lock(); \\<\/span><\/div>$/;"	a
l00160	html/mc_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    uint64_t _num_sets;<\/div>$/;"	a
l00160	html/mtrand_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;        uint64_t mixBits(<span class="keyword">const<\/span> uint64_t u, <span class="keyword">const<\/span> uint64_t v)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> hiBit(u) | loBits(v); }<\/div>$/;"	a
l00160	html/mutex_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<span class="comment">             * readers &gt; 1 is impossible, as we have wq. Similarly, because<\/span><\/div>$/;"	a
l00160	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;                curPos = 0;<\/div>$/;"	a
l00160	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;                    partInfo[oldPart].profExtEvictions.inc();<\/div>$/;"	a
l00160	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;        }<\/div>$/;"	a
l00160	html/scheduler_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> scheduleEvents, waitEvents, handoffEvents, sleepEvents;<\/div>$/;"	a
l00160	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    }<\/div>$/;"	a
l00160	html/stats_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;            <span class="keywordflow">return<\/span> _children.size();<\/div>$/;"	a
l00160	html/timing__event_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;            <span class="comment">\/\/ XXX HACK<\/span><\/div>$/;"	a
l00160	html/zsim_8h_source.html	/^<div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;    <span class="keywordtype">bool<\/span> skipStatsVectors;<\/div>$/;"	a
l00161	html/barrier_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;                assert(threadList[tid].state == RUNNING);<\/div>$/;"	a
l00161	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> unlock() {<\/div>$/;"	a
l00161	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00161	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;        };<\/div>$/;"	a
l00161	html/decoder_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;        <span class="comment">\/\/ 1 &quot;exec&quot; uop, 0-2 inputs, 0-2 outputs<\/span><\/div>$/;"	a
l00161	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t GetPowerDownPenalty(uint32_t rank, uint64_t arrivalCycle);<\/div>$/;"	a
l00161	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<\/div>$/;"	a
l00161	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;                std::stringstream pss;<\/div>$/;"	a
l00161	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00161	html/locks_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;            <span class="comment">\/\/ Do linear backoff instead of a single mm_pause; this reduces ping-ponging, and allows more time for the other hyperthread<\/span><\/div>$/;"	a
l00161	html/log_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<span class="preprocessor">        fprintf(logFdErr, &quot;%sLOG(%s): &quot;, logHeader, logTypeNames[(int) LOG_##type]); \\<\/span><\/div>$/;"	a
l00161	html/mc_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    <a class="code" href="classSet.html">Set<\/a> * _cache;<\/div>$/;"	a
l00161	html/mtrand_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;        uint64_t magic(<span class="keyword">const<\/span> uint64_t u)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> loBit(u) ? 0x9908b0dfUL : 0x0UL; }<\/div>$/;"	a
l00161	html/mutex_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<span class="comment">             * both rdLock and wrLock are protected by rb, we cannot have more<\/span><\/div>$/;"	a
l00161	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;                uint64_t nextWinHorizon = curCycle + 2*H;  <span class="comment">\/\/ first cycle out of range<\/span><\/div>$/;"	a
l00161	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;                    partInfo[newPart].size++;<\/div>$/;"	a
l00161	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<\/div>$/;"	a
l00161	html/scheduler_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> idlePhases, idlePeriods;<\/div>$/;"	a
l00161	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;}<\/div>$/;"	a
l00161	html/stats_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;        }<\/div>$/;"	a
l00161	html/timing__event_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;            <span class="comment">\/\/assert_msg(startCycle &gt;= minStartCycle, &quot;startCycle %ld &lt; minStartCycle %ld (%s), preDelay %d postDelay %d numChildren %d str %s&quot;,<\/span><\/div>$/;"	a
l00161	html/zsim_8h_source.html	/^<div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<\/div>$/;"	a
l00162	html/barrier_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;            }<\/div>$/;"	a
l00162	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;            futex_unlock(&amp;ccLock);<\/div>$/;"	a
l00162	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00162	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<\/div>$/;"	a
l00162	html/decoder_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitBasicOp(Instr&amp; instr, DynUopVec&amp; uops, uint32_t lat, uint8_t ports,<\/div>$/;"	a
l00162	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span>     CheckContinuousAccess(uint64_t arrivalCycle, uint32_t rank, uint32_t bank, uint32_t row);<\/div>$/;"	a
l00162	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;            <span class="comment">\/\/Careful with this order<\/span><\/div>$/;"	a
l00162	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;                pss &lt;&lt; <span class="stringliteral">&quot;part-&quot;<\/span> &lt;&lt; p;<\/div>$/;"	a
l00162	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;                T* c = head;<\/div>$/;"	a
l00162	html/locks_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t j = 1; j &lt; i+2; j++) _mm_pause();<\/div>$/;"	a
l00162	html/log_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<span class="preprocessor">        fprintf(logFdErr, args); \\<\/span><\/div>$/;"	a
l00162	html/mc_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    <a class="code" href="classLinePlacementPolicy.html">LinePlacementPolicy<\/a> * _line_placement_policy;<\/div>$/;"	a
l00162	html/mtrand_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;        uint64_t twist(<span class="keyword">const<\/span> uint64_t m, <span class="keyword">const<\/span> uint64_t s0, <span class="keyword">const<\/span> uint64_t s1)<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00162	html/mutex_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<span class="comment">             * than one waiter (reader or writer) in wq.<\/span><\/div>$/;"	a
l00162	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<\/div>$/;"	a
l00162	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00162	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;        <span class="keywordtype">void<\/span> recordCandidate(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00162	html/scheduler_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;        <a class="code" href="classVectorCounter.html">VectorCounter<\/a> occHist, runQueueHist;<\/div>$/;"	a
l00162	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<\/div>$/;"	a
l00162	html/stats_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<\/div>$/;"	a
l00162	html/timing__event_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;            <span class="comment">\/\/        startCycle, minStartCycle, typeid(*this).name(), preDelay, postDelay, numChildren, str().c_str());<\/span><\/div>$/;"	a
l00162	html/zsim_8h_source.html	/^<div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    <span class="comment">\/\/If true, all the regular aggregate stats are summed before dumped, e.g. getting one thread record with instrs&amp;cycles for all the threads<\/span><\/div>$/;"	a
l00163	html/barrier_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        }<\/div>$/;"	a
l00163	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        }<\/div>$/;"	a
l00163	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        <span class="keywordtype">void<\/span> simThreadLoop(uint32_t thid);<\/div>$/;"	a
l00163	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        <span class="keyword">struct <\/span>Bank {<\/div>$/;"	a
l00163	html/decoder_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;                uint8_t extraSlots = 0, <span class="keywordtype">bool<\/span> reportUnhandled = <span class="keyword">true<\/span>);<\/div>$/;"	a
l00163	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<\/div>$/;"	a
l00163	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;            Address oldAddr = filterArray[idx].rdAddr;<\/div>$/;"	a
l00163	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;                <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* partStat = <span class="keyword">new<\/span> <a class="code" href="classAggregateStat.html">AggregateStat<\/a>();<\/div>$/;"	a
l00163	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;                <span class="keywordtype">size_t<\/span> count = 0;<\/div>$/;"	a
l00163	html/locks_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        }<\/div>$/;"	a
l00163	html/log_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<span class="preprocessor">        fprintf(logFdErr, &quot;\\n&quot;); \\<\/span><\/div>$/;"	a
l00163	html/mc_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;    <a class="code" href="classPagePlacementPolicy.html">PagePlacementPolicy<\/a> * _page_placement_policy;<\/div>$/;"	a
l00163	html/mtrand_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;            <span class="keywordflow">return<\/span> m ^ (mixBits(s0, s1)&gt;&gt;1) ^ magic(s1);<\/div>$/;"	a
l00163	html/mutex_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<span class="comment">             *\/<\/span><\/div>$/;"	a
l00163	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;                <span class="keywordflow">if<\/span> (!ubWin.empty()) {<\/div>$/;"	a
l00163	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;                    partInfo[oldPart].profSelfEvictions.inc();<\/div>$/;"	a
l00163	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;            candArray[candIdx++] = id;<\/div>$/;"	a
l00163	html/scheduler_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        uint32_t scheduledThreads;<\/div>$/;"	a
l00163	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> freeElem(<span class="keywordtype">void<\/span>* elem, <span class="keywordtype">size_t<\/span> minSz) {<\/div>$/;"	a
l00163	html/stats_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;        <span class="keywordtype">bool<\/span> isRegular()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00163	html/timing__event_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;            simulate(startCycle);<\/div>$/;"	a
l00163	html/zsim_8h_source.html	/^<div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;    <span class="keywordtype">bool<\/span> compactPeriodicStats;<\/div>$/;"	a
l00164	html/barrier_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div>$/;"	a
l00164	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div>$/;"	a
l00164	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;        <span class="keywordtype">void<\/span> simulatePhaseThread(uint32_t thid);<\/div>$/;"	a
l00164	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;            uint64_t openRow;<\/div>$/;"	a
l00164	html/decoder_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div>$/;"	a
l00164	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00164	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;            filterArray[idx].wrAddr = isLoad? -1L : vLineAddr;<\/div>$/;"	a
l00164	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;                partStat-&gt;init(gm_strdup(pss.str().c_str()), <span class="stringliteral">&quot;Partition stats&quot;<\/span>);<\/div>$/;"	a
l00164	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;                <span class="keywordflow">while<\/span> (c) {<\/div>$/;"	a
l00164	html/locks_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div>$/;"	a
l00164	html/log_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<span class="preprocessor">        fflush(logFdErr); \\<\/span><\/div>$/;"	a
l00164	html/mc_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;    <a class="code" href="classOSPlacementPolicy.html">OSPlacementPolicy<\/a> * _os_placement_policy;<\/div>$/;"	a
l00164	html/mtrand_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;        }<\/div>$/;"	a
l00164	html/mutex_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div>$/;"	a
l00164	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;                    UBWinIterator it = ubWin.begin();<\/div>$/;"	a
l00164	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;                }<\/div>$/;"	a
l00164	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;        }<\/div>$/;"	a
l00164	html/scheduler_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div>$/;"	a
l00164	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<span class="preprocessor">#ifdef DEBUG_SLAB_ALLOC<\/span><\/div>$/;"	a
l00164	html/stats_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;            <span class="keywordflow">return<\/span> _isRegular;<\/div>$/;"	a
l00164	html/timing__event_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;            <span class="comment">\/\/ NOTE: This assertion is invalid now, because a call to done() may destroy the event.<\/span><\/div>$/;"	a
l00164	html/zsim_8h_source.html	/^<div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div>$/;"	a
l00165	html/barrier_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        <span class="comment">\/\/Must be called with schedLock held<\/span><\/div>$/;"	a
l00165	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        <span class="comment">\/* Replacement policy query interface *\/<\/span><\/div>$/;"	a
l00165	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<\/div>$/;"	a
l00165	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;            <span class="keywordtype">bool<\/span> open;  <span class="comment">\/\/ false indicates a PRE has been issued<\/span><\/div>$/;"	a
l00165	html/decoder_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        <span class="comment">\/\/ &gt;1 exec uops in a chain: each uop takes 2 inputs, produces 1 output to the next op<\/span><\/div>$/;"	a
l00165	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        <a class="code" href="classMemChannelBase.html">MemChannelBase<\/a>(uint32_t _myId, <a class="code" href="classMemParam.html">MemParam<\/a> *_mParam);<\/div>$/;"	a
l00165	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;            filterArray[idx].rdAddr = vLineAddr;<\/div>$/;"	a
l00165	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;                pStat = <span class="keyword">new<\/span> <a class="code" href="classProxyStat.html">ProxyStat<\/a>(); pStat-&gt;init(<span class="stringliteral">&quot;sz&quot;<\/span>, <span class="stringliteral">&quot;Actual size&quot;<\/span>, &amp;partInfo[p].size); partStat-&gt;append(pStat);<\/div>$/;"	a
l00165	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;                    <span class="keywordflow">if<\/span> (c-&gt;next) assert(c-&gt;next-&gt;prev);<\/div>$/;"	a
l00165	html/locks_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        <span class="comment">\/\/At this point, we will block<\/span><\/div>$/;"	a
l00165	html/log_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<span class="preprocessor">        log_unlock(); \\<\/span><\/div>$/;"	a
l00165	html/mc_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;    uint64_t _num_requests;<\/div>$/;"	a
l00165	html/mtrand_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        <span class="keyword">static<\/span> uint64_t hash(time_t t, clock_t c);<\/div>$/;"	a
l00165	html/mutex_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;            uint32_t oldReaders = xadd(1);<\/div>$/;"	a
l00165	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;                    <span class="keywordflow">while<\/span> (it != ubWin.end() &amp;&amp; it-&gt;first &lt; nextWinHorizon) {<\/div>$/;"	a
l00165	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;                partInfo[newPart].profMisses.inc();<\/div>$/;"	a
l00165	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<\/div>$/;"	a
l00165	html/scheduler_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        <span class="comment">\/\/ gid &lt;-&gt; (pid, tid) xlat functions<\/span><\/div>$/;"	a
l00165	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<span class="preprocessor"><\/span>    memset(elem, 0, minSz);<\/div>$/;"	a
l00165	html/stats_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;        }<\/div>$/;"	a
l00165	html/timing__event_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;            <span class="comment">\/\/ However, since we check other transitions, this should not be a problem.<\/span><\/div>$/;"	a
l00165	html/zsim_8h_source.html	/^<div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;    <span class="keywordtype">bool<\/span> attachDebugger;<\/div>$/;"	a
l00166	html/barrier_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;        <span class="keywordtype">void<\/span> leave(uint32_t tid) {<\/div>$/;"	a
l00166	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> isValid(uint32_t lineId) {<\/div>$/;"	a
l00166	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> SimThreadTrampoline(<span class="keywordtype">void<\/span>* arg);<\/div>$/;"	a
l00166	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<\/div>$/;"	a
l00166	html/decoder_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;        <span class="comment">\/\/ in the chain; the final op writes to the 0-2 outputs<\/span><\/div>$/;"	a
l00166	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;        <span class="keyword">virtual<\/span> ~<a class="code" href="classMemChannelBase.html">MemChannelBase<\/a>();<\/div>$/;"	a
l00166	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<\/div>$/;"	a
l00166	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;                pStat = <span class="keyword">new<\/span> <a class="code" href="classProxyStat.html">ProxyStat<\/a>(); pStat-&gt;init(<span class="stringliteral">&quot;tgtSz&quot;<\/span>, <span class="stringliteral">&quot;Target size&quot;<\/span>, &amp;partInfo[p].targetSize); partStat-&gt;append(pStat);<\/div>$/;"	a
l00166	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;                    <span class="keywordflow">if<\/span> (!c-&gt;next) assert(c == tail);<\/div>$/;"	a
l00166	html/locks_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;        c = __sync_lock_test_and_set(lock, 2); <span class="comment">\/\/this is not exactly T&amp;S, but atomic exchange; see GCC docs<\/span><\/div>$/;"	a
l00166	html/log_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<span class="preprocessor">    } \\<\/span><\/div>$/;"	a
l00166	html/mc_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;    Scheme _scheme; <\/div>$/;"	a
l00166	html/mtrand_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;};<\/div>$/;"	a
l00166	html/mutex_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;            <span class="keywordflow">if<\/span> (oldReaders == 0) {<\/div>$/;"	a
l00166	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;                        uint32_t nextWinPos = it-&gt;first - H - curCycle;<\/div>$/;"	a
l00166	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;                e-&gt;p = newPart;<\/div>$/;"	a
l00166	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;        uint32_t getBestCandidate() {<\/div>$/;"	a
l00166	html/scheduler_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t getGid(uint32_t pid, uint32_t tid)<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> (pid &lt;&lt; 16) | tid;}<\/div>$/;"	a
l00166	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00166	html/stats_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<\/div>$/;"	a
l00166	html/timing__event_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;            <span class="comment">\/\/assert_msg(state == EV_DONE || state == EV_QUEUED || state == EV_HELD, &quot;post-sim state %d (%s)&quot;, state, typeid(*this).name());<\/span><\/div>$/;"	a
l00166	html/zsim_8h_source.html	/^<div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;    <span class="keywordtype">int<\/span> harnessPid; <span class="comment">\/\/used for debugging purposes<\/span><\/div>$/;"	a
l00167	html/barrier_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;            DEBUG_BARRIER(<span class="stringliteral">&quot;[%d] Leaving, runningThreads %d&quot;<\/span>, tid, runningThreads);<\/div>$/;"	a
l00167	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;            <span class="keywordflow">return<\/span> array[lineId] != I;<\/div>$/;"	a
l00167	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;};<\/div>$/;"	a
l00167	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;            <span class="comment">\/\/ Timing constraints<\/span><\/div>$/;"	a
l00167	html/decoder_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitChainedOp(Instr&amp; instr, DynUopVec&amp; uops, uint32_t numUops,<\/div>$/;"	a
l00167	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div>$/;"	a
l00167	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;            <span class="comment">\/\/For LSU simulation purposes, loads bypass stores even to the same line if there is no conflict,<\/span><\/div>$/;"	a
l00167	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;                partInfo[p].profHits.init(<span class="stringliteral">&quot;hits&quot;<\/span>, <span class="stringliteral">&quot;Hits&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profHits);<\/div>$/;"	a
l00167	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;                    assert(c-&gt;owner == <span class="keyword">this<\/span>);<\/div>$/;"	a
l00167	html/locks_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;        <span class="keywordflow">if<\/span> (c == 0) <span class="keywordflow">return<\/span>;<\/div>$/;"	a
l00167	html/log_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<span class="preprocessor">}<\/span><\/div>$/;"	a
l00167	html/mc_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;    <a class="code" href="classTagBuffer.html">TagBuffer<\/a> * _tag_buffer;<\/div>$/;"	a
l00167	html/mtrand_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div>$/;"	a
l00167	html/mutex_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;                <span class="comment">\/\/ Cases 1, 2, or we raced with a reader but won first spot on xadd (which really is case 1)<\/span><\/div>$/;"	a
l00167	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;                        assert_msg(nextWinPos &lt; H, &quot;WindowStructure: ubWin elem exceeds limit cycle=%ld curCycle=%ld nextWinPos=%d&quot;, it-&gt;first, curCycle, nextWinPos);<\/div>$/;"	a
l00167	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;            }<\/div>$/;"	a
l00167	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;            assert(candIdx == numCands);<\/div>$/;"	a
l00167	html/scheduler_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t getPid(uint32_t gid)<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> gid &gt;&gt; 16;}<\/div>$/;"	a
l00167	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<span class="preprocessor"><\/span>    Slab* s = (Slab*)(((uintptr_t)elem) &amp; SLAB_MASK);<\/div>$/;"	a
l00167	html/stats_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;        <a class="code" href="classStat.html">Stat<\/a>* <span class="keyword">get<\/span>(uint32_t idx) <span class="keyword">const<\/span> {<\/div>$/;"	a
l00167	html/timing__event_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;        }<\/div>$/;"	a
l00167	html/zsim_8h_source.html	/^<div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<\/div>$/;"	a
l00168	html/barrier_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;            <span class="keywordflow">if<\/span> (threadList[tid].state == RUNNING) {<\/div>$/;"	a
l00168	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;        }<\/div>$/;"	a
l00168	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<\/div>$/;"	a
l00168	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;            uint64_t minPreCycle;   <span class="comment">\/\/ if !open, time of last PRE; if open, min cycle PRE can be issued<\/span><\/div>$/;"	a
l00168	html/decoder_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;                uint32_t* latArray, uint8_t* portsArray);<\/div>$/;"	a
l00168	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t LatencySimulate(Address lineAddr, uint64_t arrivalCycle, uint64_t lastPhaseCycle, MemAccessType type);<\/div>$/;"	a
l00168	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;            <span class="comment">\/\/(e.g., st to x, ld from x+8) and we implement store-load forwarding at the core.<\/span><\/div>$/;"	a
l00168	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;                partInfo[p].profMisses.init(<span class="stringliteral">&quot;misses&quot;<\/span>, <span class="stringliteral">&quot;Misses&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profMisses);<\/div>$/;"	a
l00168	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;                    count++;<\/div>$/;"	a
l00168	html/locks_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;        syscall(SYS_futex, lock, FUTEX_WAIT, 2, <span class="keyword">nullptr<\/span>, <span class="keyword">nullptr<\/span>, 0);<\/div>$/;"	a
l00168	html/log_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#else<\/span><\/div>$/;"	a
l00168	html/mc_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;    <\/div>$/;"	a
l00168	html/mtrand_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<span class="comment">\/\/ Functions are defined in order of usage to assist inlining<\/span><\/div>$/;"	a
l00168	html/mutex_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;                <span class="comment">\/\/ We have wq, nothing left to do<\/span><\/div>$/;"	a
l00168	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;                        nextWin[nextWinPos] = it-&gt;second;<\/div>$/;"	a
l00168	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;            e-&gt;ts = timestamp++;<\/div>$/;"	a
l00168	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;            uint32_t start = 0;<\/div>$/;"	a
l00168	html/scheduler_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t getTid(uint32_t gid)<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> gid &amp; 0x0FFFF;}<\/div>$/;"	a
l00168	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;    s-&gt;freeElem();<\/div>$/;"	a
l00168	html/stats_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;            <span class="keywordflow">return<\/span> _children[idx];<\/div>$/;"	a
l00168	html/timing__event_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<\/div>$/;"	a
l00168	html/zsim_8h_source.html	/^<div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;    <span class="keyword">struct <\/span><a class="code" href="structLibInfo.html">LibInfo<\/a> libzsimAddrs;<\/div>$/;"	a
l00169	html/barrier_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;                threadList[tid].state = LEFT;<\/div>$/;"	a
l00169	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div>$/;"	a
l00169	html/contention__sim_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<span class="preprocessor">#endif  \/\/ CONTENTION_SIM_H_<\/span><\/div>$/;"	a
l00169	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;            uint64_t lastActCycle;  <span class="comment">\/\/ cycle of last ACT command<\/span><\/div>$/;"	a
l00169	html/decoder_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div>$/;"	a
l00169	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> AddressMap(Address addr, uint32_t&amp; row, uint32_t&amp; col, uint32_t&amp; rank, uint32_t&amp; bank);<\/div>$/;"	a
l00169	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;            <span class="comment">\/\/So if this is a load, it always sets availCycle; if it is a store hit, it doesn&#39;t<\/span><\/div>$/;"	a
l00169	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;                partInfo[p].profSelfEvictions.init(<span class="stringliteral">&quot;selfEvs&quot;<\/span>, <span class="stringliteral">&quot;Evictions caused by us&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profSelfEvictions);<\/div>$/;"	a
l00169	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;                    c = c-&gt;next;<\/div>$/;"	a
l00169	html/locks_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;        c = __sync_lock_test_and_set(lock, 2); <span class="comment">\/\/atomic exchange<\/span><\/div>$/;"	a
l00169	html/log_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define trace(type, args...)<\/span><\/div>$/;"	a
l00169	html/mc_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;    <span class="comment">\/\/ For HybridCache<\/span><\/div>$/;"	a
l00169	html/mtrand_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div>$/;"	a
l00169	html/mutex_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00169	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;                        <span class="comment">\/\/ info(&quot;Moved %d events from unbounded window, cycle %ld (%d cycles away)&quot;, it-&gt;second, it-&gt;first, it-&gt;first - curCycle);<\/span><\/div>$/;"	a
l00169	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div>$/;"	a
l00169	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;            uint32_t end = numCands;<\/div>$/;"	a
l00169	html/scheduler_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div>$/;"	a
l00169	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;}<\/div>$/;"	a
l00169	html/stats_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;        }<\/div>$/;"	a
l00169	html/timing__event_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;        <span class="comment">\/\/ Used when an external, event-driven object takes control of the object --- it becomes queued, but externally<\/span><\/div>$/;"	a
l00169	html/zsim_8h_source.html	/^<div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div>$/;"	a
l00170	html/barrier_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;                leftThreads++;<\/div>$/;"	a
l00170	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;        <span class="comment">\/\/Could extend with isExclusive, isDirty, etc, but not needed for now.<\/span><\/div>$/;"	a
l00170	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;            uint64_t lastCmdCycle;  <span class="comment">\/\/ RD\/WR command, used for refreshes only<\/span><\/div>$/;"	a
l00170	html/decoder_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;        <span class="comment">\/\/ Some convert ops need 2 chained exec uops, though they have a single input and output<\/span><\/div>$/;"	a
l00170	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;        <span class="keywordtype">bool<\/span> IsRowBufferHit(uint32_t row, uint32_t rank, uint32_t bank);<\/div>$/;"	a
l00170	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;            <span class="keywordflow">if<\/span> (oldAddr != vLineAddr) filterArray[idx].availCycle = respCycle;<\/div>$/;"	a
l00170	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;                partInfo[p].profExtEvictions.init(<span class="stringliteral">&quot;extEvs&quot;<\/span>, <span class="stringliteral">&quot;Evictions caused by others (in transients)&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profExtEvictions);<\/div>$/;"	a
l00170	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;                }<\/div>$/;"	a
l00170	html/locks_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    } <span class="keywordflow">while<\/span> (c != 0);<\/div>$/;"	a
l00170	html/log_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00170	html/mc_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    uint32_t _footprint_size; <\/div>$/;"	a
l00170	html/mtrand_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<span class="keyword">inline<\/span> uint64_t MTRand::hash(time_t t, clock_t c) {<\/div>$/;"	a
l00170	html/mutex_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;                assert(oldReaders == 1);<\/div>$/;"	a
l00170	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;                        it++;<\/div>$/;"	a
l00170	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;            <span class="comment">\/\/Update partitioner...<\/span><\/div>$/;"	a
l00170	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div>$/;"	a
l00170	html/scheduler_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00170	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div>$/;"	a
l00170	html/stats_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<\/div>$/;"	a
l00170	html/timing__event_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> hold() {<\/div>$/;"	a
l00170	html/zsim_8h_source.html	/^<div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;    <span class="keywordtype">bool<\/span> ffReinstrument; <span class="comment">\/\/true if we should reinstrument on ffwd, works fine with ST apps and it&#39;s faster since we run with basically no instrumentation, but it&#39;s not precise with MT apps<\/span><\/div>$/;"	a
l00171	html/barrier_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;                runningThreads--;<\/div>$/;"	a
l00171	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<\/div>$/;"	a
l00171	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<\/div>$/;"	a
l00171	html/decoder_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitConvert2Op(Instr&amp; instr, DynUopVec&amp; uops, uint32_t lat1, uint32_t lat2,<\/div>$/;"	a
l00171	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<\/div>$/;"	a
l00171	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<\/div>$/;"	a
l00171	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;                rpStat-&gt;append(partStat);<\/div>$/;"	a
l00171	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;                assert(count == elems);<\/div>$/;"	a
l00171	html/locks_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;}<\/div>$/;"	a
l00171	html/log_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00171	html/mc_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<\/div>$/;"	a
l00171	html/mtrand_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;    <span class="comment">\/\/ Get a uint64_t from t and c<\/span><\/div>$/;"	a
l00171	html/mutex_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;                <span class="comment">\/\/ Case 3<\/span><\/div>$/;"	a
l00171	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;                    }<\/div>$/;"	a
l00171	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;            monitor-&gt;access(e-&gt;p, e-&gt;addr);<\/div>$/;"	a
l00171	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;            <span class="keywordflow">while<\/span> (end - start &gt; 1) {<\/div>$/;"	a
l00171	html/scheduler_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;        <a class="code" href="classScheduler.html">Scheduler<\/a>(<span class="keywordtype">void<\/span> (*_atSyncFunc)(<span class="keywordtype">void<\/span>), uint32_t _parallelThreads, uint32_t _numCores, uint32_t _schedQuantum) :<\/div>$/;"	a
l00171	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;};  <span class="comment">\/\/ namespace slab<\/span><\/div>$/;"	a
l00171	html/stats_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;        <span class="comment">\/\/ Access-while-mutable interface<\/span><\/div>$/;"	a
l00171	html/timing__event_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;            assert_msg(state == EV_RUNNING, <span class="stringliteral">&quot;called hold() with state %d&quot;<\/span>, state);<\/div>$/;"	a
l00171	html/zsim_8h_source.html	/^<div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<\/div>$/;"	a
l00172	html/barrier_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;                tryWakeNext(tid); <span class="comment">\/\/can trigger phase end<\/span><\/div>$/;"	a
l00172	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00172	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;            uint64_t curRowHits;    <span class="comment">\/\/ row hits on the currently opened row<\/span><\/div>$/;"	a
l00172	html/decoder_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;                uint8_t ports1, uint8_t ports2);<\/div>$/;"	a
l00172	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t GetActivateCount(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00172	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;            futex_unlock(&amp;filterLock);<\/div>$/;"	a
l00172	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;            }<\/div>$/;"	a
l00172	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;            }<\/div>$/;"	a
l00172	html/locks_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;<\/div>$/;"	a
l00172	html/log_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;<\/div>$/;"	a
l00172	html/mc_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    <span class="comment">\/\/ Balance in- and off-package DRAM bandwidth. <\/span><\/div>$/;"	a
l00172	html/mtrand_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    <span class="comment">\/\/ Better than uint64_t(x) in case x is floating point in [0,1]<\/span><\/div>$/;"	a
l00172	html/mutex_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;                wq.unlock();<\/div>$/;"	a
l00172	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;                    ubWin.erase(ubWin.begin(), it);<\/div>$/;"	a
l00172	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;        }<\/div>$/;"	a
l00172	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;                uint32_t pivot = start + (end - start)\/2;<\/div>$/;"	a
l00172	html/scheduler_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;            atSyncFunc(_atSyncFunc), bar(_parallelThreads, <span class="keyword">this<\/span>), numCores(_numCores), schedQuantum(_schedQuantum), rnd(0x5C73D9134)<\/div>$/;"	a
l00172	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;<\/div>$/;"	a
l00172	html/stats_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;        uint32_t curSize()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00172	html/timing__event_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;            state = EV_HELD;<\/div>$/;"	a
l00172	html/zsim_8h_source.html	/^<div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    <span class="comment">\/\/fftoggle stuff<\/span><\/div>$/;"	a
l00173	html/barrier_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00173	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;        uint32_t getParentId(Address lineAddr);<\/div>$/;"	a
l00173	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;<\/div>$/;"	a
l00173	html/decoder_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;<\/div>$/;"	a
l00173	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t GetPrechargeCount(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00173	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;            <span class="keywordflow">return<\/span> respCycle;<\/div>$/;"	a
l00173	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;            parentStat-&gt;append(rpStat);<\/div>$/;"	a
l00173	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;        }<\/div>$/;"	a
l00173	html/locks_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> futex_lock_nospin(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00173	html/log_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;<span class="preprocessor">#ifndef NASSERT<\/span><\/div>$/;"	a
l00173	html/mc_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;    <span class="comment">\/\/ From &quot;BATMAN: Maximizing Bandwidth Utilization of Hybrid Memory Systems&quot;<\/span><\/div>$/;"	a
l00173	html/mtrand_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;    <span class="comment">\/\/ Based on code by Lawrence Kirby (fred@genesis.demon.co.uk)<\/span><\/div>$/;"	a
l00173	html/mutex_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;                <span class="comment">\/\/ waiting reader will relock and proceed, and last of the bunch of concurrent readers will unlock<\/span><\/div>$/;"	a
l00173	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;                }<\/div>$/;"	a
l00173	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;<\/div>$/;"	a
l00173	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;                uint64_t t1 = 0;<\/div>$/;"	a
l00173	html/scheduler_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;        {<\/div>$/;"	a
l00173	html/slab__alloc_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;<span class="preprocessor">#endif  \/\/ SLAB_ALLOC_H_<\/span><\/div>$/;"	a
l00173	html/stats_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;            <span class="keywordflow">return<\/span> _children.size();<\/div>$/;"	a
l00173	html/timing__event_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;        }<\/div>$/;"	a
l00173	html/zsim_8h_source.html	/^<div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;    lock_t ffToggleLocks[256]; <span class="comment">\/\/f*ing Pin and its f*ing inability to handle external signals...<\/span><\/div>$/;"	a
l00174	html/barrier_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;                assert_msg(threadList[tid].state == WAITING, <span class="stringliteral">&quot;leave, tid %d, incorrect state %d&quot;<\/span>, tid, threadList[tid].state);<\/div>$/;"	a
l00174	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;};<\/div>$/;"	a
l00174	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;            <a class="code" href="classInList.html">InList&lt;Request&gt;<\/a> rdReqs;<\/div>$/;"	a
l00174	html/decoder_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;        <span class="comment">\/* Specific cases *\/<\/span><\/div>$/;"	a
l00174	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t GetRefreshCount(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00174	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;        }<\/div>$/;"	a
l00174	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;        }<\/div>$/;"	a
l00174	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00174	html/locks_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;    uint32_t c;<\/div>$/;"	a
l00174	html/log_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define assert(expr) \\<\/span><\/div>$/;"	a
l00174	html/mc_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;    <span class="keywordtype">bool<\/span> _bw_balance; <\/div>$/;"	a
l00174	html/mtrand_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;<\/div>$/;"	a
l00174	html/mutex_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;            }<\/div>$/;"	a
l00174	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;            }<\/div>$/;"	a
l00174	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;        <span class="keywordtype">void<\/span> startReplacement(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {<\/div>$/;"	a
l00174	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;                uint64_t t2 = 0;<\/div>$/;"	a
l00174	html/scheduler_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;            contexts.resize(numCores);<\/div>$/;"	a
l00174	html/stats_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;        }<\/div>$/;"	a
l00174	html/timing__event_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;<\/div>$/;"	a
l00174	html/zsim_8h_source.html	/^<div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;    lock_t pauseLocks[256]; <span class="comment">\/\/per-process pauses<\/span><\/div>$/;"	a
l00175	html/barrier_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;                threadList[tid].state = LEFT;<\/div>$/;"	a
l00175	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div>$/;"	a
l00175	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;            <a class="code" href="classInList.html">InList&lt;Request&gt;<\/a> wrReqs;<\/div>$/;"	a
l00175	html/decoder_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitXchg(Instr&amp; instr, DynUopVec&amp; uops);<\/div>$/;"	a
l00175	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div>$/;"	a
l00175	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div>$/;"	a
l00175	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div>$/;"	a
l00175	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<span class="preprocessor"><\/span>};<\/div>$/;"	a
l00175	html/locks_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;    <span class="keywordflow">do<\/span> {<\/div>$/;"	a
l00175	html/log_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<span class="preprocessor">if (unlikely(!(expr))) { \\<\/span><\/div>$/;"	a
l00175	html/mc_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;    uint64_t _ds_index;<\/div>$/;"	a
l00175	html/mtrand_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;    <span class="keyword">static<\/span> uint64_t differ = 0;  <span class="comment">\/\/ guarantee time-based seeds will change<\/span><\/div>$/;"	a
l00175	html/mutex_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00175	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;        }<\/div>$/;"	a
l00175	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;            assert(candIdx == 0);<\/div>$/;"	a
l00175	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;                <span class="keywordflow">for<\/span> (uint32_t i = start; i &lt; pivot; i++) t1 = MAX(t1, array[candArray[i]]);<\/div>$/;"	a
l00175	html/scheduler_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; numCores; i++) {<\/div>$/;"	a
l00175	html/stats_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<\/div>$/;"	a
l00175	html/timing__event_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> release() {<\/div>$/;"	a
l00175	html/zsim_8h_source.html	/^<div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;    <span class="keyword">volatile<\/span> <span class="keywordtype">bool<\/span> globalPauseFlag; <span class="comment">\/\/if set, pauses simulation on phase end<\/span><\/div>$/;"	a
l00176	html/barrier_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;                leftThreads++;<\/div>$/;"	a
l00176	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div>$/;"	a
l00176	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;        };<\/div>$/;"	a
l00176	html/decoder_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitMul(Instr&amp; instr, DynUopVec&amp; uops);<\/div>$/;"	a
l00176	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t GetBurstEnergy(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00176	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;        uint64_t invalidate(<span class="keyword">const<\/span> <a class="code" href="structInvReq.html">InvReq<\/a>&amp; req) {<\/div>$/;"	a
l00176	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;        <span class="keywordtype">void<\/span> setPartitionSizes(<span class="keyword">const<\/span> uint32_t* sizes) {<\/div>$/;"	a
l00176	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div>$/;"	a
l00176	html/locks_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;        <span class="keywordflow">if<\/span> (*lock == 0 &amp;&amp; __sync_bool_compare_and_swap(lock, 0, 1)) {<\/div>$/;"	a
l00176	html/log_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<span class="preprocessor">    std::stringstream __assert_ss__LINE__; (PrintExpr(__assert_ss__LINE__)-&gt;*expr); \\<\/span><\/div>$/;"	a
l00176	html/mc_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div>$/;"	a
l00176	html/mtrand_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div>$/;"	a
l00176	html/mutex_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<span class="preprocessor"><\/span>        }<\/div>$/;"	a
l00176	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div>$/;"	a
l00176	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;            assert(bestId == -1);<\/div>$/;"	a
l00176	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;                <span class="keywordflow">for<\/span> (uint32_t i = pivot; i &lt; end; i++)   t2 = MAX(t2, array[candArray[i]]);<\/div>$/;"	a
l00176	html/scheduler_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;                contexts[i].cid = i;<\/div>$/;"	a
l00176	html/stats_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;};<\/div>$/;"	a
l00176	html/timing__event_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;            assert_msg(state == EV_HELD, <span class="stringliteral">&quot;state should be %d, %d instead&quot;<\/span>, EV_HELD, state);<\/div>$/;"	a
l00176	html/zsim_8h_source.html	/^<div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;    <span class="keyword">volatile<\/span> <span class="keywordtype">bool<\/span> externalTermPending;<\/div>$/;"	a
l00177	html/barrier_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;            }<\/div>$/;"	a
l00177	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<span class="comment">\/\/Implements the &quot;top&quot; part: Keeps directory information, handles downgrades and invalidates<\/span><\/div>$/;"	a
l00177	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<\/div>$/;"	a
l00177	html/decoder_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitDiv(Instr&amp; instr, DynUopVec&amp; uops);<\/div>$/;"	a
l00177	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t GetActPreEnergy(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00177	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;            Cache::startInvalidate();  <span class="comment">\/\/ grabs cache&#39;s downLock<\/span><\/div>$/;"	a
l00177	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t p = 0; p &lt; partitions; p++) {<\/div>$/;"	a
l00177	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<span class="preprocessor">#endif  \/\/ INTRUSIVE_LIST_H_<\/span><\/div>$/;"	a
l00177	html/locks_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;            <span class="keywordflow">return<\/span>;<\/div>$/;"	a
l00177	html/log_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<span class="preprocessor">    fprintf(logFdErr, &quot;%sFailed assertion on %s:%d &#39;%s&#39; (with &#39;%s&#39;)\\n&quot;, logHeader, __FILE__, __LINE__, #expr, __assert_ss__LINE__.str().c_str()); \\<\/span><\/div>$/;"	a
l00177	html/mc_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;    <span class="comment">\/\/ TLB Hack<\/span><\/div>$/;"	a
l00177	html/mtrand_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;    uint64_t h1 = 0;<\/div>$/;"	a
l00177	html/mutex_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<\/div>$/;"	a
l00177	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;        <span class="keywordtype">void<\/span> longAdvance(uint64_t&amp; curCycle, uint64_t targetCycle) {<\/div>$/;"	a
l00177	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;            incomingLinePart = mapper-&gt;getPartition(*req);<\/div>$/;"	a
l00177	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;                <span class="keywordflow">if<\/span> (t1 &gt; t2) start = pivot;<\/div>$/;"	a
l00177	html/scheduler_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;                contexts[i].state = IDLE;<\/div>$/;"	a
l00177	html/stats_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<\/div>$/;"	a
l00177	html/timing__event_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;            state = EV_RUNNING;<\/div>$/;"	a
l00177	html/zsim_8h_source.html	/^<div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<\/div>$/;"	a
l00178	html/barrier_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;        }<\/div>$/;"	a
l00178	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno"><a class="line" href="classMESITopCC.html">  178<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMESITopCC.html">MESITopCC<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00178	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;        <span class="comment">\/\/ Global timing constraints<\/span><\/div>$/;"	a
l00178	html/decoder_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;<\/div>$/;"	a
l00178	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t GetRefreshEnergy(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00178	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;            futex_lock(&amp;filterLock);<\/div>$/;"	a
l00178	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;                partInfo[p].targetSize = (sizes[p]*numLines)\/numBuckets;<\/div>$/;"	a
l00178	html/intrusive__list_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00178	html/locks_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;        }<\/div>$/;"	a
l00178	html/log_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;<span class="preprocessor">    fflush(logFdErr); \\<\/span><\/div>$/;"	a
l00178	html/mc_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    g_unordered_map &lt;Address, TLBEntry&gt; _tlb;<\/div>$/;"	a
l00178	html/mtrand_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    <span class="keywordtype">unsigned<\/span> <span class="keywordtype">char<\/span> *p = (<span class="keywordtype">unsigned<\/span> <span class="keywordtype">char<\/span> *) &amp;t;<\/div>$/;"	a
l00178	html/mutex_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00178	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;            assert(curCycle &lt;= targetCycle);<\/div>$/;"	a
l00178	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;            incomingLineAddr = req-&gt;lineAddr;<\/div>$/;"	a
l00178	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;                <span class="keywordflow">else<\/span> end = pivot;<\/div>$/;"	a
l00178	html/scheduler_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;                contexts[i].curThread = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00178	html/stats_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;<span class="comment">\/*  General scalar &amp; vector classes *\/<\/span><\/div>$/;"	a
l00178	html/timing__event_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;        }<\/div>$/;"	a
l00178	html/zsim_8h_source.html	/^<div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;    <span class="comment">\/\/ Trace writers (stored globally because they need to be deleted when the simulation ends)<\/span><\/div>$/;"	a
l00179	html/barrier_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<\/div>$/;"	a
l00179	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00179	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;        <span class="comment">\/* We wake up at minSchedCycle, issue one or more requests, and<\/span><\/div>$/;"	a
l00179	html/decoder_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> emitCompareAndExchange(Instr&amp;, DynUopVec&amp;);<\/div>$/;"	a
l00179	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t GetBackGroundEnergy(uint64_t memCycle, uint64_t lastMemCycle, <span class="keywordtype">bool<\/span> bInstant = <span class="keyword">false<\/span>);<\/div>$/;"	a
l00179	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;            uint32_t idx = req.lineAddr &amp; setMask; <span class="comment">\/\/works because of how virtual&lt;-&gt;physical is done...<\/span><\/div>$/;"	a
l00179	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;            }<\/div>$/;"	a
l00179	html/locks_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<\/div>$/;"	a
l00179	html/log_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<span class="preprocessor">    *reinterpret_cast&lt;int*&gt;(0L) = 42; <\/span><span class="comment">\/*SIGSEGVs*\/<\/span><span class="preprocessor"> \\<\/span><\/div>$/;"	a
l00179	html/mc_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    uint64_t _os_quantum;<\/div>$/;"	a
l00179	html/mtrand_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; <span class="keyword">sizeof<\/span>(t); ++i) {<\/div>$/;"	a
l00179	html/mutex_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t xadd(uint32_t v) {<\/div>$/;"	a
l00179	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<\/div>$/;"	a
l00179	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;        }<\/div>$/;"	a
l00179	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;            }<\/div>$/;"	a
l00179	html/scheduler_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;                freeList.push_back(&amp;contexts[i]);<\/div>$/;"	a
l00179	html/stats_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<\/div>$/;"	a
l00179	html/timing__event_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<\/div>$/;"	a
l00179	html/zsim_8h_source.html	/^<div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;    <a class="code" href="classg__vector.html">g_vector&lt;AccessTraceWriter*&gt;<\/a>* traceWriters;<\/div>$/;"	a
l00180	html/barrier_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;        <span class="comment">\/\/Called with schedLock held, returns with schedLock unheld<\/span><\/div>$/;"	a
l00180	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;        <span class="keyword">struct <\/span>Entry {<\/div>$/;"	a
l00180	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<span class="comment">         * reschedule ourselves at the new minSchedCycle if any requests remain<\/span><\/div>$/;"	a
l00180	html/decoder_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<\/div>$/;"	a
l00180	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<\/div>$/;"	a
l00180	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;            <span class="keywordflow">if<\/span> ((filterArray[idx].rdAddr | procMask) == req.lineAddr) { <span class="comment">\/\/FIXME: If another process calls invalidate(), procMask will not match even though we may be doing a capacity-induced invalidation!<\/span><\/div>$/;"	a
l00180	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;        }<\/div>$/;"	a
l00180	html/locks_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;        <span class="comment">\/\/At this point, we will block<\/span><\/div>$/;"	a
l00180	html/log_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<span class="preprocessor">    exit(1); \\<\/span><\/div>$/;"	a
l00180	html/mc_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<\/div>$/;"	a
l00180	html/mtrand_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;        h1 *= UCHAR_MAX + 2U;<\/div>$/;"	a
l00180	html/mutex_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;            <span class="keywordflow">return<\/span> __sync_fetch_and_add(&amp;readers, v);<\/div>$/;"	a
l00180	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;            <span class="comment">\/\/ Drain IW<\/span><\/div>$/;"	a
l00180	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<\/div>$/;"	a
l00180	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;            <span class="comment">\/\/for (uint32_t i = 0; i &lt; numCands; i++) printf(&quot;%8ld &quot;, array[candArray[i]]);<\/span><\/div>$/;"	a
l00180	html/scheduler_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;            }<\/div>$/;"	a
l00180	html/stats_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno"><a class="line" href="classScalarStat.html">  180<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classScalarStat.html">ScalarStat<\/a> : <span class="keyword">public<\/span> <a class="code" href="classStat.html">Stat<\/a> {<\/div>$/;"	a
l00180	html/timing__event_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;        <span class="keywordtype">void<\/span> done(uint64_t doneCycle) {<\/div>$/;"	a
l00180	html/zsim_8h_source.html	/^<div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<\/div>$/;"	a
l00181	html/barrier_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;        <span class="keywordtype">void<\/span> sync(uint32_t tid, lock_t* schedLock) {<\/div>$/;"	a
l00181	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;            uint32_t numSharers;<\/div>$/;"	a
l00181	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<span class="comment">         * unserved.<\/span><\/div>$/;"	a
l00181	html/decoder_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;        <span class="comment">\/* Other helper functions *\/<\/span><\/div>$/;"	a
l00181	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> PeriodicUpdatePower(uint64_t phaseCycle, uint64_t lastPhaseCycle);<\/div>$/;"	a
l00181	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;                filterArray[idx].wrAddr = -1L;<\/div>$/;"	a
l00181	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<\/div>$/;"	a
l00181	html/locks_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;        c = __sync_lock_test_and_set(lock, 2); <span class="comment">\/\/this is not exactly T&amp;S, but atomic exchange; see GCC docs<\/span><\/div>$/;"	a
l00181	html/log_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<span class="preprocessor">};<\/span><\/div>$/;"	a
l00181	html/mc_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    <span class="comment">\/\/ Stats<\/span><\/div>$/;"	a
l00181	html/mtrand_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;        h1 += p[i];<\/div>$/;"	a
l00181	html/mutex_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;        }<\/div>$/;"	a
l00181	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;            <span class="keywordflow">while<\/span> (occupancy &amp;&amp; curCycle &lt; targetCycle) {<\/div>$/;"	a
l00181	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;        <span class="keywordtype">void<\/span> recordCandidate(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00181	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;            <span class="comment">\/\/info(&quot; res: %d (%d %ld)&quot;, start, candArray[start], array[candArray[start]]);<\/span><\/div>$/;"	a
l00181	html/scheduler_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;            schedLock = 0;<\/div>$/;"	a
l00181	html/stats_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00181	html/timing__event_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;            assert(state == EV_RUNNING); <span class="comment">\/\/ContentionSim sets it when calling simulate()<\/span><\/div>$/;"	a
l00181	html/zsim_8h_source.html	/^<div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;    <span class="comment">\/\/ Trace-driven simulation (no cores)<\/span><\/div>$/;"	a
l00182	html/barrier_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;            DEBUG_BARRIER(<span class="stringliteral">&quot;[%d] Sync&quot;<\/span>, tid);<\/div>$/;"	a
l00182	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;            std::bitset&lt;MAX_CACHE_CHILDREN&gt; sharers;<\/div>$/;"	a
l00182	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<span class="comment">         *\/<\/span><\/div>$/;"	a
l00182	html/decoder_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> reportUnhandledCase(Instr&amp; instr, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc);<\/div>$/;"	a
l00182	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;};<\/div>$/;"	a
l00182	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;                filterArray[idx].rdAddr = -1L;<\/div>$/;"	a
l00182	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;        <span class="keywordtype">void<\/span> update(uint32_t <span class="keywordtype">id<\/span>, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {<\/div>$/;"	a
l00182	html/locks_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;        <span class="keywordflow">if<\/span> (c == 0) <span class="keywordflow">return<\/span>;<\/div>$/;"	a
l00182	html/log_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00182	html/mc_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numPlacement;<\/div>$/;"	a
l00182	html/mtrand_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    }<\/div>$/;"	a
l00182	html/mutex_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;};<\/div>$/;"	a
l00182	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;                advancePos(curCycle);<\/div>$/;"	a
l00182	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;            assert(candIdx &lt; ways);<\/div>$/;"	a
l00182	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;            <span class="keywordflow">return<\/span> candArray[start];<\/div>$/;"	a
l00182	html/scheduler_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;            <span class="comment">\/\/nextVictim = 0; \/\/only used when freeList is empty.<\/span><\/div>$/;"	a
l00182	html/stats_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;        <a class="code" href="classScalarStat.html">ScalarStat<\/a>() : <a class="code" href="classStat.html">Stat<\/a>() {}<\/div>$/;"	a
l00182	html/timing__event_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;            state = EV_DONE;<\/div>$/;"	a
l00182	html/zsim_8h_source.html	/^<div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    <span class="keywordtype">bool<\/span> traceDriven;<\/div>$/;"	a
l00183	html/barrier_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;            assert_msg(threadList[tid].state == RUNNING, <span class="stringliteral">&quot;[%d] sync: state was supposed to be %d, it is %d&quot;<\/span>, tid, RUNNING, threadList[tid].state);<\/div>$/;"	a
l00183	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;            <span class="keywordtype">bool<\/span> exclusive;<\/div>$/;"	a
l00183	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;        uint64_t minSchedCycle; <span class="comment">\/\/ TODO: delayed commands still not implemented<\/span><\/div>$/;"	a
l00183	html/decoder_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> populateRegArrays(Instr&amp; instr, uint32_t* srcRegs, uint32_t* dstRegs);<\/div>$/;"	a
l00183	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;<\/div>$/;"	a
l00183	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;            }<\/div>$/;"	a
l00183	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;            Entry* e = &amp;array[id];<\/div>$/;"	a
l00183	html/locks_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;        syscall(SYS_futex, lock, FUTEX_WAIT, 2, <span class="keyword">nullptr<\/span>, <span class="keyword">nullptr<\/span>, 0);<\/div>$/;"	a
l00183	html/log_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;<span class="preprocessor">#define assert_msg(cond, args...) \\<\/span><\/div>$/;"	a
l00183	html/mc_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numCleanEviction;<\/div>$/;"	a
l00183	html/mtrand_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    uint64_t h2 = 0;<\/div>$/;"	a
l00183	html/mutex_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;<\/div>$/;"	a
l00183	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;            }<\/div>$/;"	a
l00183	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;            WayPartInfo* c = &amp;array[id]; <span class="comment">\/\/candidate info<\/span><\/div>$/;"	a
l00183	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;        }<\/div>$/;"	a
l00183	html/scheduler_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;            curPhase = 0;<\/div>$/;"	a
l00183	html/stats_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;<\/div>$/;"	a
l00183	html/timing__event_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;            <span class="keyword">auto<\/span> vLambda = [<span class="keyword">this<\/span>, doneCycle](<a class="code" href="classTimingEvent.html">TimingEvent<\/a>** childPtr) {<\/div>$/;"	a
l00183	html/zsim_8h_source.html	/^<div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;    <a class="code" href="classTraceDriver.html">TraceDriver<\/a>* traceDriver;<\/div>$/;"	a
l00184	html/barrier_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;            threadList[tid].futexWord = 1;<\/div>$/;"	a
l00184	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<\/div>$/;"	a
l00184	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;        <span class="comment">\/\/ Minimum cycle at which the next response may arrive<\/span><\/div>$/;"	a
l00184	html/decoder_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> dropStackRegister(Instr&amp; instr);<\/div>$/;"	a
l00184	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMemAccessEventBase.html">MemAccessEventBase<\/a>;<\/div>$/;"	a
l00184	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;            uint64_t respCycle = Cache::finishInvalidate(req); <span class="comment">\/\/ releases cache&#39;s downLock<\/span><\/div>$/;"	a
l00184	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;            <span class="keywordflow">if<\/span> (e-&gt;used) {<\/div>$/;"	a
l00184	html/locks_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;        c = __sync_lock_test_and_set(lock, 2); <span class="comment">\/\/atomic exchange<\/span><\/div>$/;"	a
l00184	html/log_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<span class="preprocessor">if (unlikely(!(cond))) { \\<\/span><\/div>$/;"	a
l00184	html/mc_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numDirtyEviction;<\/div>$/;"	a
l00184	html/mtrand_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;    p = (<span class="keywordtype">unsigned<\/span> <span class="keywordtype">char<\/span> *) &amp;c;<\/div>$/;"	a
l00184	html/mutex_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<span class="preprocessor">#endif  \/\/ MUTEX_H_<\/span><\/div>$/;"	a
l00184	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<\/div>$/;"	a
l00184	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;            WayPartInfo* best = (bestId &gt;= 0)? &amp;array[bestId] : <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00184	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<\/div>$/;"	a
l00184	html/scheduler_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;            scheduledThreads = 0;<\/div>$/;"	a
l00184	html/stats_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc) {<\/div>$/;"	a
l00184	html/timing__event_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;                checkDomain(*childPtr);<\/div>$/;"	a
l00184	html/zsim_8h_source.html	/^<div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;};<\/div>$/;"	a
l00185	html/barrier_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;            threadList[tid].state = WAITING;<\/div>$/;"	a
l00185	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;            <span class="keywordtype">void<\/span> clear() {<\/div>$/;"	a
l00185	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;        <span class="comment">\/\/ Equivalent to first cycle that the data bus can be used<\/span><\/div>$/;"	a
l00185	html/decoder_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<\/div>$/;"	a
l00185	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<\/div>$/;"	a
l00185	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;            futex_unlock(&amp;filterLock);<\/div>$/;"	a
l00185	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;                partInfo[e-&gt;p].profHits.inc();<\/div>$/;"	a
l00185	html/locks_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    } <span class="keywordflow">while<\/span> (c != 0);<\/div>$/;"	a
l00185	html/log_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<span class="preprocessor">    fprintf(logFdErr, &quot;%sFailed assertion on %s:%d: &quot;, logHeader, __FILE__, __LINE__); \\<\/span><\/div>$/;"	a
l00185	html/mc_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numLoadHit;<\/div>$/;"	a
l00185	html/mtrand_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> j = 0; j &lt; <span class="keyword">sizeof<\/span>(c); ++j) {<\/div>$/;"	a
l00185	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;            <span class="keywordflow">if<\/span> (occupancy) {<\/div>$/;"	a
l00185	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;            uint32_t way = candIdx++;<\/div>$/;"	a
l00185	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;        <span class="keywordtype">void<\/span> replaced(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00185	html/scheduler_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<\/div>$/;"	a
l00185	html/stats_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;            initStat(name, desc);<\/div>$/;"	a
l00185	html/timing__event_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;                (*childPtr)-&gt;parentDone(doneCycle+postDelay);<\/div>$/;"	a
l00185	html/zsim_8h_source.html	/^<div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<\/div>$/;"	a
l00186	html/barrier_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;            runningThreads--;<\/div>$/;"	a
l00186	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;                exclusive = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00186	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;        uint64_t minRespCycle;<\/div>$/;"	a
l00186	html/decoder_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;        <span class="comment">\/* Macro-op (ins) fusion *\/<\/span><\/div>$/;"	a
l00186	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<span class="comment">\/\/ DRAM scheduler base class<\/span><\/div>$/;"	a
l00186	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;            <span class="keywordflow">return<\/span> respCycle;<\/div>$/;"	a
l00186	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;                partInfo[e-&gt;p].lruList.remove(e);<\/div>$/;"	a
l00186	html/locks_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;}<\/div>$/;"	a
l00186	html/log_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<span class="preprocessor">    fprintf(logFdErr, args); \\<\/span><\/div>$/;"	a
l00186	html/mc_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numLoadMiss;<\/div>$/;"	a
l00186	html/mtrand_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;        h2 *= UCHAR_MAX + 2U;<\/div>$/;"	a
l00186	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;                <span class="comment">\/\/ info(&quot;advance: window not drained at %ld, %d uops left&quot;, curCycle, occupancy);<\/span><\/div>$/;"	a
l00186	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;            <span class="comment">\/\/In test mode, this works as LRU<\/span><\/div>$/;"	a
l00186	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;            candIdx = 0;<\/div>$/;"	a
l00186	html/scheduler_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;            maxAllowedFutexWakeups = 0;<\/div>$/;"	a
l00186	html/stats_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;        }<\/div>$/;"	a
l00186	html/timing__event_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;            };<\/div>$/;"	a
l00186	html/zsim_8h_source.html	/^<div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<\/div>$/;"	a
l00187	html/barrier_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;            tryWakeNext(tid); <span class="comment">\/\/can trigger phase end<\/span><\/div>$/;"	a
l00187	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;                numSharers = 0;<\/div>$/;"	a
l00187	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;        <span class="keywordtype">bool<\/span> lastCmdWasWrite;<\/div>$/;"	a
l00187	html/decoder_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">bool<\/span> canFuse(INS ins);<\/div>$/;"	a
l00187	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno"><a class="line" href="classMemSchedulerBase.html">  187<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMemSchedulerBase.html">MemSchedulerBase<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00187	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;        }<\/div>$/;"	a
l00187	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;                partInfo[e-&gt;p].lruList.push_front(e);<\/div>$/;"	a
l00187	html/locks_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<\/div>$/;"	a
l00187	html/log_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<span class="preprocessor">    fprintf(logFdErr, &quot;\\n&quot;); \\<\/span><\/div>$/;"	a
l00187	html/mc_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numStoreHit;<\/div>$/;"	a
l00187	html/mtrand_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;        h2 += p[j];<\/div>$/;"	a
l00187	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;                assert(curCycle == targetCycle);<\/div>$/;"	a
l00187	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;            <span class="keywordflow">if<\/span> (testMode || wayPartIndex[way] == incomingLinePart) { <span class="comment">\/\/this is a way we can fill<\/span><\/div>$/;"	a
l00187	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;            array[id] = 0;<\/div>$/;"	a
l00187	html/scheduler_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;            unmatchedFutexWakeups = 0;<\/div>$/;"	a
l00187	html/stats_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<\/div>$/;"	a
l00187	html/timing__event_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;            visitChildren&lt; decltype(vLambda) &gt;(vLambda);<\/div>$/;"	a
l00187	html/zsim_8h_source.html	/^<div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<span class="comment">\/\/Process-wide global variables, defined in zsim.cpp<\/span><\/div>$/;"	a
l00188	html/barrier_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;            futex_unlock(schedLock);<\/div>$/;"	a
l00188	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;                sharers.reset();<\/div>$/;"	a
l00188	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<\/div>$/;"	a
l00188	html/decoder_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">bool<\/span> decodeFusedInstrs(INS ins, DynUopVec&amp; uops);<\/div>$/;"	a
l00188	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00188	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<\/div>$/;"	a
l00188	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00188	html/locks_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<span class="preprocessor">#define BILLION (1000000000L)<\/span><\/div>$/;"	a
l00188	html/log_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<span class="preprocessor">    fflush(logFdErr); \\<\/span><\/div>$/;"	a
l00188	html/mc_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numStoreMiss;<\/div>$/;"	a
l00188	html/mtrand_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    }<\/div>$/;"	a
l00188	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00188	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;                <span class="keywordflow">if<\/span> (best == <span class="keyword">nullptr<\/span>) {<\/div>$/;"	a
l00188	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;        }<\/div>$/;"	a
l00188	html/scheduler_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<\/div>$/;"	a
l00188	html/stats_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t <span class="keyword">get<\/span>() <span class="keyword">const<\/span> = 0;<\/div>$/;"	a
l00188	html/timing__event_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;            freeEvent();  <span class="comment">\/\/ NOTE: immediately reclaimed!<\/span><\/div>$/;"	a
l00188	html/zsim_8h_source.html	/^<div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<span class="keyword">extern<\/span> <a class="code" href="classCore.html">Core<\/a>* cores[MAX_THREADS]; <span class="comment">\/\/tid-&gt;core array<\/span><\/div>$/;"	a
l00189	html/barrier_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<\/div>$/;"	a
l00189	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;            }<\/div>$/;"	a
l00189	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;        <span class="keyword">static<\/span> <span class="keyword">const<\/span> uint32_t JEDEC_BUS_WIDTH = 64;<\/div>$/;"	a
l00189	html/decoder_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;};<\/div>$/;"	a
l00189	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;        <span class="comment">\/\/ HK: Umm...MemAccessEventBase already has a member named addr. How is the<\/span><\/div>$/;"	a
l00189	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;        <span class="keywordtype">void<\/span> contextSwitch() {<\/div>$/;"	a
l00189	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;                uint32_t oldPart = e-&gt;p;<\/div>$/;"	a
l00189	html/locks_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<span class="preprocessor"><\/span><span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> futex_trylock_nospin_timeout(<span class="keyword">volatile<\/span> uint32_t* lock, uint64_t timeoutNs) {<\/div>$/;"	a
l00189	html/log_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<span class="preprocessor">    *reinterpret_cast&lt;int*&gt;(0L) = 42; <\/span><span class="comment">\/*SIGSEGVs*\/<\/span><span class="preprocessor"> \\<\/span><\/div>$/;"	a
l00189	html/mc_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numCounterAccess; <span class="comment">\/\/ for FBR placement policy  <\/span><\/div>$/;"	a
l00189	html/mtrand_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    <span class="keywordflow">return<\/span> (h1 + differ++) ^ h2;<\/div>$/;"	a
l00189	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;                <span class="comment">\/\/ info(&quot;advance: window drained at %ld, jumping to %ld&quot;, curCycle, targetCycle);<\/span><\/div>$/;"	a
l00189	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;                    bestId = id;<\/div>$/;"	a
l00189	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;};<\/div>$/;"	a
l00189	html/scheduler_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;            blockingSyscalls.resize(MAX_THREADS <span class="comment">\/* TODO: max # procs *\/<\/span>);<\/div>$/;"	a
l00189	html/stats_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;};<\/div>$/;"	a
l00189	html/timing__event_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;        }<\/div>$/;"	a
l00189	html/zsim_8h_source.html	/^<div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<span class="keyword">extern<\/span> uint32_t procIdx;<\/div>$/;"	a
l00190	html/barrier_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;            <span class="keywordflow">if<\/span> (threadList[tid].state == WAITING) {<\/div>$/;"	a
l00190	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<\/div>$/;"	a
l00190	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;        <span class="keyword">const<\/span> uint32_t lineSize, ranksPerChannel, banksPerRank;<\/div>$/;"	a
l00190	html/decoder_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<\/div>$/;"	a
l00190	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;        <span class="comment">\/\/ Address in MemSchedQueueElem different from this?<\/span><\/div>$/;"	a
l00190	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;            futex_lock(&amp;filterLock);<\/div>$/;"	a
l00190	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;                uint32_t newPart = mapper-&gt;getPartition(*req);<\/div>$/;"	a
l00190	html/locks_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    <span class="keywordflow">if<\/span> (*lock == 0 &amp;&amp; __sync_bool_compare_and_swap(lock, 0, 1)) {<\/div>$/;"	a
l00190	html/log_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<span class="preprocessor">    exit(1); \\<\/span><\/div>$/;"	a
l00190	html/mc_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<\/div>$/;"	a
l00190	html/mtrand_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;}<\/div>$/;"	a
l00190	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;                assert(curCycle &lt;= targetCycle);<\/div>$/;"	a
l00190	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00190	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<\/div>$/;"	a
l00190	html/scheduler_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<\/div>$/;"	a
l00190	html/stats_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<\/div>$/;"	a
l00190	html/timing__event_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<\/div>$/;"	a
l00190	html/zsim_8h_source.html	/^<div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<span class="keyword">extern<\/span> uint32_t lineBits; <span class="comment">\/\/process-local for performance, but logically global<\/span><\/div>$/;"	a
l00191	html/barrier_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;                <span class="keywordflow">while<\/span> (<span class="keyword">true<\/span>) {<\/div>$/;"	a
l00191	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;            <span class="keywordtype">bool<\/span> isEmpty() {<\/div>$/;"	a
l00191	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;        <span class="keyword">const<\/span> uint32_t controllerSysLatency;  <span class="comment">\/\/ in sysCycles<\/span><\/div>$/;"	a
l00191	html/decoder_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<span class="preprocessor">#endif  \/\/ DECODER_H_<\/span><\/div>$/;"	a
l00191	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;        <span class="keyword">typedef<\/span> std::pair&lt;MemAccessEventBase*, Address&gt; MemSchedQueueElem;<\/div>$/;"	a
l00191	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; numSets; i++) filterArray[i].clear();<\/div>$/;"	a
l00191	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;                <span class="keywordflow">if<\/span> (oldPart != newPart) {<\/div>$/;"	a
l00191	html/locks_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div>$/;"	a
l00191	html/log_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<span class="preprocessor">};<\/span><\/div>$/;"	a
l00191	html/mc_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numTagLoad;<\/div>$/;"	a
l00191	html/mtrand_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div>$/;"	a
l00191	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;                curCycle = targetCycle;  <span class="comment">\/\/ with zero occupancy, we can just jump to it<\/span><\/div>$/;"	a
l00191	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;                    <span class="comment">\/\/NOTE: This is actually not feasible without tagging. But what IS feasible is to stop updating the LRU position on new fills. We could kill this, and profile the differences.<\/span><\/div>$/;"	a
l00191	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<span class="comment">\/\/2-bit NRU, see A new Case for Skew-Associativity, A. Seznec, 1997<\/span><\/div>$/;"	a
l00191	html/scheduler_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;            info(<span class="stringliteral">&quot;Started RR scheduler, quantum=%d phases&quot;<\/span>, schedQuantum);<\/div>$/;"	a
l00191	html/stats_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno"><a class="line" href="classVectorStat.html">  191<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classVectorStat.html">VectorStat<\/a> : <span class="keyword">public<\/span> <a class="code" href="classStat.html">Stat<\/a> {<\/div>$/;"	a
l00191	html/timing__event_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;        <span class="keywordtype">void<\/span> produceCrossings(<a class="code" href="classEventRecorder.html">EventRecorder<\/a>* evRec);<\/div>$/;"	a
l00191	html/zsim_8h_source.html	/^<div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<span class="keyword">extern<\/span> uint64_t procMask;<\/div>$/;"	a
l00192	html/barrier_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;                    <span class="keywordtype">int<\/span> futex_res = syscall(SYS_futex, &amp;threadList[tid].futexWord, FUTEX_WAIT, 1 <span class="comment">\/*a racing thread waking us up will change value to 0, and we won&#39;t block*\/<\/span>, <span class="keyword">nullptr<\/span>, <span class="keyword">nullptr<\/span>, 0);<\/div>$/;"	a
l00192	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;                <span class="keywordflow">return<\/span> numSharers == 0;<\/div>$/;"	a
l00192	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;        <span class="keyword">const<\/span> uint32_t queueDepth;<\/div>$/;"	a
l00192	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<\/div>$/;"	a
l00192	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;            futex_unlock(&amp;filterLock);<\/div>$/;"	a
l00192	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;                    partInfo[oldPart].size--;<\/div>$/;"	a
l00192	html/locks_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    }<\/div>$/;"	a
l00192	html/log_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#else<\/span><\/div>$/;"	a
l00192	html/mc_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numTagStore;<\/div>$/;"	a
l00192	html/mtrand_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> MTRand::initialize(<span class="keyword">const<\/span> uint64_t seed) {<\/div>$/;"	a
l00192	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;            }<\/div>$/;"	a
l00192	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;                    <span class="keywordflow">if<\/span> ( testMode || (c-&gt;p == incomingLinePart &amp;&amp; best-&gt;p == incomingLinePart) ) {<\/div>$/;"	a
l00192	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno"><a class="line" href="classNRUReplPolicy.html">  192<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classNRUReplPolicy.html">NRUReplPolicy<\/a> : <span class="keyword">public<\/span> <a class="code" href="classLegacyReplPolicy.html">LegacyReplPolicy<\/a> {<\/div>$/;"	a
l00192	html/scheduler_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;            terminateWatchdogThread = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00192	html/stats_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00192	html/timing__event_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<\/div>$/;"	a
l00192	html/zsim_8h_source.html	/^<div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<\/div>$/;"	a
l00193	html/barrier_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;                    <span class="keywordflow">if<\/span> (futex_res == 0 || threadList[tid].futexWord != 1) <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00193	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;            }<\/div>$/;"	a
l00193	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;        <span class="keyword">const<\/span> uint32_t rowHitLimit; <span class="comment">\/\/ row hits not prioritized in FR-FCFS beyond this point<\/span><\/div>$/;"	a
l00193	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;        uint32_t id;<\/div>$/;"	a
l00193	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;        }<\/div>$/;"	a
l00193	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;                    partInfo[oldPart].profExtEvictions.inc();<\/div>$/;"	a
l00193	html/locks_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<\/div>$/;"	a
l00193	html/log_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<span class="preprocessor"><\/span><span class="comment">\/\/ Avoid unused warnings, never emit any code<\/span><\/div>$/;"	a
l00193	html/mc_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    <span class="comment">\/\/ For HybridCache  <\/span><\/div>$/;"	a
l00193	html/mtrand_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    <span class="comment">\/\/ Initialize generator state with seed<\/span><\/div>$/;"	a
l00193	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;        }<\/div>$/;"	a
l00193	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;                        <span class="keywordflow">if<\/span> (c-&gt;ts &lt; best-&gt;ts) bestId = id;<\/div>$/;"	a
l00193	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00193	html/scheduler_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;            startWatchdogThread();<\/div>$/;"	a
l00193	html/stats_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>** _counterNames;<\/div>$/;"	a
l00193	html/timing__event_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;        <span class="keywordtype">void<\/span>* <span class="keyword">operator<\/span> <span class="keyword">new<\/span> (<span class="keywordtype">size_t<\/span> sz, <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* evRec) {<\/div>$/;"	a
l00193	html/zsim_8h_source.html	/^<div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<span class="keyword">extern<\/span> <a class="code" href="structGlobSimInfo.html">GlobSimInfo<\/a>* zinfo;<\/div>$/;"	a
l00194	html/barrier_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;                }<\/div>$/;"	a
l00194	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<\/div>$/;"	a
l00194	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span> deferredWrites;<\/div>$/;"	a
l00194	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;        <a class="code" href="classMemParam.html">MemParam<\/a>* mParam;<\/div>$/;"	a
l00194	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;};<\/div>$/;"	a
l00194	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;                    partInfo[newPart].size++;<\/div>$/;"	a
l00194	html/locks_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;    <span class="comment">\/\/At this point, we will block<\/span><\/div>$/;"	a
l00194	html/log_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<span class="comment">\/\/ see http:\/\/cnicholson.net\/2009\/02\/stupid-c-tricks-adventures-in-assert\/<\/span><\/div>$/;"	a
l00194	html/mc_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numTagBufferFlush;<\/div>$/;"	a
l00194	html/mtrand_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;    <span class="comment">\/\/ See Knuth TAOCP Vol 2, 3rd Ed, p.106 for multiplier.<\/span><\/div>$/;"	a
l00194	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<\/div>$/;"	a
l00194	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;                    } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (c-&gt;p == incomingLinePart &amp;&amp; best-&gt;p != incomingLinePart) {<\/div>$/;"	a
l00194	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;        <span class="comment">\/\/read-only<\/span><\/div>$/;"	a
l00194	html/scheduler_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;        }<\/div>$/;"	a
l00194	html/stats_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<\/div>$/;"	a
l00194	html/timing__event_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;            <span class="keywordflow">return<\/span> evRec-&gt;alloc(sz);<\/div>$/;"	a
l00194	html/zsim_8h_source.html	/^<div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<\/div>$/;"	a
l00195	html/barrier_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;                <span class="comment">\/\/The thread that wakes us up changes this<\/span><\/div>$/;"	a
l00195	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;            <span class="keywordtype">bool<\/span> isExclusive() {<\/div>$/;"	a
l00195	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span> closedPage;<\/div>$/;"	a
l00195	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;        <a class="code" href="classMemChannelBase.html">MemChannelBase<\/a>* mChnl;<\/div>$/;"	a
l00195	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<\/div>$/;"	a
l00195	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00195	html/locks_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    uint32_t c = __sync_lock_test_and_set(lock, 2); <span class="comment">\/\/this is not exactly T&amp;S, but atomic exchange; see GCC docs<\/span><\/div>$/;"	a
l00195	html/log_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<span class="preprocessor">#define assert(cond) do { (void)sizeof(cond); } while (0);<\/span><\/div>$/;"	a
l00195	html/mc_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numTBDirtyHit;<\/div>$/;"	a
l00195	html/mtrand_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    <span class="comment">\/\/ In previous versions, most significant bits (MSBs) of the seed affect<\/span><\/div>$/;"	a
l00195	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;        <span class="comment">\/\/ Poisons a range of cycles; used by the LSU to apply backpressure to the IW<\/span><\/div>$/;"	a
l00195	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;                        <span class="comment">\/\/c wins<\/span><\/div>$/;"	a
l00195	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;        uint32_t* array;<\/div>$/;"	a
l00195	html/scheduler_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<\/div>$/;"	a
l00195	html/stats_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00195	html/timing__event_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;        }<\/div>$/;"	a
l00195	html/zsim_8h_source.html	/^<div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<span class="comment">\/\/Process-wide functions, defined in zsim.cpp<\/span><\/div>$/;"	a
l00196	html/barrier_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;                assert(threadList[tid].state == RUNNING);<\/div>$/;"	a
l00196	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;                <span class="keywordflow">return<\/span> (numSharers == 1) &amp;&amp; (exclusive);<\/div>$/;"	a
l00196	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;        <span class="keyword">const<\/span> uint32_t domain;<\/div>$/;"	a
l00196	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<\/div>$/;"	a
l00196	html/filter__cache_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<span class="preprocessor">#endif  \/\/ FILTER_CACHE_H_<\/span><\/div>$/;"	a
l00196	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;                    partInfo[oldPart].profSelfEvictions.inc();<\/div>$/;"	a
l00196	html/locks_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;    <span class="keywordflow">if<\/span> (c == 0) <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div>$/;"	a
l00196	html/log_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#define assert_msg(cond, args...) do { (void)sizeof(cond); } while (0);<\/span><\/div>$/;"	a
l00196	html/mc_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numTBDirtyMiss;<\/div>$/;"	a
l00196	html/mtrand_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;    <span class="comment">\/\/ only MSBs of the state array.  Modified 9 Jan 2002 by Makoto Matsumoto.<\/span><\/div>$/;"	a
l00196	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;        <span class="keywordtype">void<\/span> poisonRange(uint64_t curCycle, uint64_t targetCycle, uint8_t portMask) {<\/div>$/;"	a
l00196	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;                    } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (c-&gt;p != incomingLinePart &amp;&amp; best-&gt;p == incomingLinePart) {<\/div>$/;"	a
l00196	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;        uint32_t* candArray;<\/div>$/;"	a
l00196	html/scheduler_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;        ~<a class="code" href="classScheduler.html">Scheduler<\/a>() {}<\/div>$/;"	a
l00196	html/stats_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;        <a class="code" href="classVectorStat.html">VectorStat<\/a>() : _counterNames(<span class="keyword">nullptr<\/span>) {}<\/div>$/;"	a
l00196	html/timing__event_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<\/div>$/;"	a
l00196	html/zsim_8h_source.html	/^<div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;uint32_t getCid(uint32_t tid);<\/div>$/;"	a
l00197	html/barrier_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;            }<\/div>$/;"	a
l00197	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;            }<\/div>$/;"	a
l00197	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;<\/div>$/;"	a
l00197	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00197	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;                }<\/div>$/;"	a
l00197	html/locks_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    <span class="keyword">const<\/span> <span class="keyword">struct <\/span>timespec timeout = {(time_t) timeoutNs\/BILLION, (time_t) timeoutNs % BILLION};<\/div>$/;"	a
l00197	html/log_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;<span class="preprocessor"><\/span><span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00197	html/mc_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    <span class="comment">\/\/ For UnisonCache<\/span><\/div>$/;"	a
l00197	html/mtrand_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    <span class="keyword">register<\/span> uint64_t *s = state;<\/div>$/;"	a
l00197	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;            uint64_t startCycle = curCycle;  <span class="comment">\/\/ curCycle should not be modified...<\/span><\/div>$/;"	a
l00197	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;                        <span class="comment">\/\/c loses<\/span><\/div>$/;"	a
l00197	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00197	html/scheduler_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;<\/div>$/;"	a
l00197	html/stats_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;<\/div>$/;"	a
l00197	html/timing__event_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;        <span class="keywordtype">void<\/span>* <span class="keyword">operator<\/span> <span class="keyword">new<\/span> (<span class="keywordtype">size_t<\/span> sz, <a class="code" href="classEventRecorder.html">EventRecorder<\/a>&amp; evRec) {<\/div>$/;"	a
l00197	html/zsim_8h_source.html	/^<div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;uint32_t TakeBarrier(uint32_t tid, uint32_t cid);<\/div>$/;"	a
l00198	html/barrier_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;        }<\/div>$/;"	a
l00198	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;        };<\/div>$/;"	a
l00198	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;        <span class="comment">\/\/ DRAM timing parameters -- initialized in initTech()<\/span><\/div>$/;"	a
l00198	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;<\/div>$/;"	a
l00198	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;                partInfo[newPart].profMisses.inc();<\/div>$/;"	a
l00198	html/locks_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    syscall(SYS_futex, lock, FUTEX_WAIT, 2, &amp;timeout, <span class="keyword">nullptr<\/span>, 0);<\/div>$/;"	a
l00198	html/log_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00198	html/mc_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numTouchedLines;<\/div>$/;"	a
l00198	html/mtrand_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    <span class="keyword">register<\/span> uint64_t *r = state;<\/div>$/;"	a
l00198	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;            uint64_t poisonCycle = curCycle;<\/div>$/;"	a
l00198	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;                        bestId = id;<\/div>$/;"	a
l00198	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;        uint32_t numCands;<\/div>$/;"	a
l00198	html/scheduler_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat) {<\/div>$/;"	a
l00198	html/stats_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t count(uint32_t idx) <span class="keyword">const<\/span> = 0;<\/div>$/;"	a
l00198	html/timing__event_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;            <span class="keywordflow">return<\/span> evRec.alloc(sz);<\/div>$/;"	a
l00198	html/zsim_8h_source.html	/^<div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;<span class="keywordtype">void<\/span> SimEnd(); <span class="comment">\/\/only call point out of zsim.cpp should be watchdog threads<\/span><\/div>$/;"	a
l00199	html/barrier_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div>$/;"	a
l00199	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div>$/;"	a
l00199	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;        <span class="comment">\/\/ All parameters are in memory clocks (multiples of tCK)<\/span><\/div>$/;"	a
l00199	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;        <a class="code" href="classMemSchedulerBase.html">MemSchedulerBase<\/a>(uint32_t <span class="keywordtype">id<\/span>, <a class="code" href="classMemParam.html">MemParam<\/a>* mParam, <a class="code" href="classMemChannelBase.html">MemChannelBase<\/a>* mChnl)<\/div>$/;"	a
l00199	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;                e-&gt;p = newPart;<\/div>$/;"	a
l00199	html/locks_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;    c = __sync_lock_test_and_set(lock, 2); <span class="comment">\/\/atomic exchange<\/span><\/div>$/;"	a
l00199	html/log_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<span class="preprocessor">#define checkpoint()                                            \\<\/span><\/div>$/;"	a
l00199	html/mc_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;    <a class="code" href="classCounter.html">Counter<\/a> _numEvictedLines;<\/div>$/;"	a
l00199	html/mtrand_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;    <span class="keyword">register<\/span> <span class="keywordtype">int<\/span> i = 1;<\/div>$/;"	a
l00199	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;            <span class="keywordflow">while<\/span> (poisonCycle &lt; targetCycle) {<\/div>$/;"	a
l00199	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;                    } <span class="keywordflow">else<\/span> { <span class="comment">\/\/none in our partition, this should be transient but at least enforce LRU<\/span><\/div>$/;"	a
l00199	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div>$/;"	a
l00199	html/scheduler_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;            <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* schedStats = <span class="keyword">new<\/span> <a class="code" href="classAggregateStat.html">AggregateStat<\/a>();<\/div>$/;"	a
l00199	html/stats_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;        <span class="keyword">virtual<\/span> uint32_t size() <span class="keyword">const<\/span> = 0;<\/div>$/;"	a
l00199	html/timing__event_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;        }<\/div>$/;"	a
l00199	html/zsim_8h_source.html	/^<div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<\/div>$/;"	a
l00200	html/barrier_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00200	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;        Entry* array;<\/div>$/;"	a
l00200	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;        uint32_t tBL;    <span class="comment">\/\/ burst length (== tTrans)<\/span><\/div>$/;"	a
l00200	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;            : id(<span class="keywordtype">id<\/span>), mParam(mParam), mChnl(mChnl) {}<\/div>$/;"	a
l00200	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;                partInfo[oldPart].lruList.remove(e);<\/div>$/;"	a
l00200	html/locks_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    <span class="keywordflow">if<\/span> (c == 0) <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div>$/;"	a
l00200	html/log_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<span class="preprocessor">    do {                                                        \\<\/span><\/div>$/;"	a
l00200	html/mc_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<\/div>$/;"	a
l00200	html/mtrand_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    *s++ = seed &amp; 0xffffffffUL;<\/div>$/;"	a
l00200	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;                scheduleInternal&lt;false, false&gt;(curCycle, poisonCycle, portMask);<\/div>$/;"	a
l00200	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;                        <span class="keywordflow">if<\/span> (c-&gt;ts &lt; best-&gt;ts) bestId = id;<\/div>$/;"	a
l00200	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;        <span class="comment">\/\/read-write<\/span><\/div>$/;"	a
l00200	html/scheduler_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;            schedStats-&gt;init(<span class="stringliteral">&quot;sched&quot;<\/span>, <span class="stringliteral">&quot;Scheduler stats&quot;<\/span>);<\/div>$/;"	a
l00200	html/stats_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<\/div>$/;"	a
l00200	html/timing__event_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<\/div>$/;"	a
l00200	html/zsim_8h_source.html	/^<div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<span class="preprocessor">#endif  \/\/ ZSIM_H_<\/span><\/div>$/;"	a
l00201	html/barrier_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> checkEndPhase(uint32_t tid) {<\/div>$/;"	a
l00201	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;BaseCache*&gt;<\/a> children;<\/div>$/;"	a
l00201	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;        uint32_t tCL;    <span class="comment">\/\/ CAS latency<\/span><\/div>$/;"	a
l00201	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;<\/div>$/;"	a
l00201	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;                partInfo[newPart].lruList.push_front(e);<\/div>$/;"	a
l00201	html/locks_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;    <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div>$/;"	a
l00201	html/log_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;<span class="preprocessor">        info(&quot;%s:%d %s&quot;, __FILE__, __LINE__, __FUNCTION__);     \\<\/span><\/div>$/;"	a
l00201	html/mc_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;    uint64_t _num_hit_per_step;<\/div>$/;"	a
l00201	html/mtrand_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;    <span class="keywordflow">for<\/span> (; i &lt; N; ++i) {<\/div>$/;"	a
l00201	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;            }<\/div>$/;"	a
l00201	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;                    }<\/div>$/;"	a
l00201	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;        uint32_t youngLines;<\/div>$/;"	a
l00201	html/scheduler_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;            threadsCreated.init(<span class="stringliteral">&quot;thCr&quot;<\/span>, <span class="stringliteral">&quot;Threads created&quot;<\/span>); schedStats-&gt;append(&amp;threadsCreated);<\/div>$/;"	a
l00201	html/stats_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> hasCounterNames() {<\/div>$/;"	a
l00201	html/timing__event_8h_source.html	/^<div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;        <span class="keywordtype">void<\/span> <span class="keyword">operator<\/span> <span class="keyword">delete<\/span>(<span class="keywordtype">void<\/span>*, size_t) {<\/div>$/;"	a
l00202	html/barrier_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;            <span class="keywordflow">if<\/span> (curThreadIdx == runListSize &amp;&amp; runningThreads == 0) {<\/div>$/;"	a
l00202	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;uint32_t&gt;<\/a> childrenRTTs;<\/div>$/;"	a
l00202	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;        uint32_t tRCD;   <span class="comment">\/\/ ACT to CAS<\/span><\/div>$/;"	a
l00202	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;        <span class="keyword">virtual<\/span> ~<a class="code" href="classMemSchedulerBase.html">MemSchedulerBase<\/a>() {}<\/div>$/;"	a
l00202	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;                e-&gt;used = <span class="keyword">true<\/span>;<\/div>$/;"	a
l00202	html/locks_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;}<\/div>$/;"	a
l00202	html/log_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;<span class="preprocessor">    } while (0)<\/span><\/div>$/;"	a
l00202	html/mc_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;    uint64_t _num_miss_per_step;<\/div>$/;"	a
l00202	html/mtrand_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;        *s++ = (1812433253UL * (*r ^ (*r &gt;&gt; 30)) + i) &amp; 0xffffffffUL;<\/div>$/;"	a
l00202	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;            <span class="comment">\/\/ info(&quot;Poisoned port mask %x from %ld to %ld (tgt %ld)&quot;, portMask, curCycle, poisonCycle, targetCycle);<\/span><\/div>$/;"	a
l00202	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;                }<\/div>$/;"	a
l00202	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;        uint32_t candVal;<\/div>$/;"	a
l00202	html/scheduler_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;            threadsFinished.init(<span class="stringliteral">&quot;thFn&quot;<\/span>, <span class="stringliteral">&quot;Threads finished&quot;<\/span>); schedStats-&gt;append(&amp;threadsFinished);<\/div>$/;"	a
l00202	html/stats_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;            <span class="keywordflow">return<\/span> (_counterNames != <span class="keyword">nullptr<\/span>);<\/div>$/;"	a
l00202	html/timing__event_8h_source.html	/^<div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;            panic(<span class="stringliteral">&quot;TimingEvent::delete should never be called&quot;<\/span>);<\/div>$/;"	a
l00203	html/barrier_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;                <span class="keywordflow">if<\/span> (leftThreads == runListSize) {<\/div>$/;"	a
l00203	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00203	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;        uint32_t tRTP;   <span class="comment">\/\/ RD to PRE<\/span><\/div>$/;"	a
l00203	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;<\/div>$/;"	a
l00203	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;            }<\/div>$/;"	a
l00203	html/locks_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;<\/div>$/;"	a
l00203	html/log_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00203	html/mc_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;    uint64_t _mc_bw_per_step;<\/div>$/;"	a
l00203	html/mtrand_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;        r++;<\/div>$/;"	a
l00203	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;            assert(startCycle == curCycle);<\/div>$/;"	a
l00203	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;            }<\/div>$/;"	a
l00203	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;        uint32_t candIdx;<\/div>$/;"	a
l00203	html/scheduler_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;            scheduleEvents.init(<span class="stringliteral">&quot;schedEvs&quot;<\/span>, <span class="stringliteral">&quot;Schedule events&quot;<\/span>); schedStats-&gt;append(&amp;scheduleEvents);<\/div>$/;"	a
l00203	html/stats_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;        }<\/div>$/;"	a
l00203	html/timing__event_8h_source.html	/^<div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;        }<\/div>$/;"	a
l00204	html/barrier_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;                    DEBUG_BARRIER(<span class="stringliteral">&quot;[%d] All threads left barrier, not ending current phase&quot;<\/span>, tid);<\/div>$/;"	a
l00204	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div>$/;"	a
l00204	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;        uint32_t tRP;    <span class="comment">\/\/ PRE to ACT<\/span><\/div>$/;"	a
l00204	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> CheckSetEvent(<a class="code" href="classMemAccessEventBase.html">MemAccessEventBase<\/a>* ev) = 0;<\/div>$/;"	a
l00204	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div>$/;"	a
l00204	html/locks_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> futex_unlock(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00204	html/log_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<span class="preprocessor">#endif  \/\/ LOG_H_<\/span><\/div>$/;"	a
l00204	html/mc_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;    uint64_t _ext_bw_per_step;<\/div>$/;"	a
l00204	html/mtrand_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;    }<\/div>$/;"	a
l00204	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;        }<\/div>$/;"	a
l00204	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;        }<\/div>$/;"	a
l00204	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div>$/;"	a
l00204	html/scheduler_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;            waitEvents.init(<span class="stringliteral">&quot;waitEvs&quot;<\/span>, <span class="stringliteral">&quot;Wait events&quot;<\/span>); schedStats-&gt;append(&amp;waitEvents);<\/div>$/;"	a
l00204	html/stats_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div>$/;"	a
l00204	html/timing__event_8h_source.html	/^<div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<\/div>$/;"	a
l00205	html/barrier_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;                    <span class="keywordflow">return<\/span>; <span class="comment">\/\/watch the early return<\/span><\/div>$/;"	a
l00205	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;        <span class="keywordtype">bool<\/span> nonInclusiveHack;<\/div>$/;"	a
l00205	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;        uint32_t tRRD;   <span class="comment">\/\/ ACT to ACT<\/span><\/div>$/;"	a
l00205	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;<\/div>$/;"	a
l00205	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;            <span class="comment">\/\/Update partitioner<\/span><\/div>$/;"	a
l00205	html/locks_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    <span class="keywordflow">if<\/span> (__sync_fetch_and_add(lock, -1) != 1) {<\/div>$/;"	a
l00205	html/mc_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    <span class="keywordtype">double<\/span> _miss_rate_trace[MAX_STEPS];<\/div>$/;"	a
l00205	html/mtrand_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;}<\/div>$/;"	a
l00205	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;<\/div>$/;"	a
l00205	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;<\/div>$/;"	a
l00205	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00205	html/scheduler_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;            handoffEvents.init(<span class="stringliteral">&quot;handoffEvs&quot;<\/span>, <span class="stringliteral">&quot;Handoff events&quot;<\/span>); schedStats-&gt;append(&amp;handoffEvents);<\/div>$/;"	a
l00205	html/stats_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* counterName(uint32_t idx)<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00205	html/timing__event_8h_source.html	/^<div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;        <span class="comment">\/\/Placement deletes... make ICC happy. This would only fire on an exception<\/span><\/div>$/;"	a
l00206	html/barrier_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;                }<\/div>$/;"	a
l00206	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;<\/div>$/;"	a
l00206	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;        uint32_t tRAS;   <span class="comment">\/\/ ACT to PRE<\/span><\/div>$/;"	a
l00206	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;        <span class="comment">\/\/ HK: I hope there&#39;s a good reason to be using a reference to a pointer here<\/span><\/div>$/;"	a
l00206	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;            monitor-&gt;access(e-&gt;p, req-&gt;lineAddr);<\/div>$/;"	a
l00206	html/locks_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;        *lock = 0;<\/div>$/;"	a
l00206	html/mc_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;<\/div>$/;"	a
l00206	html/mtrand_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;<\/div>$/;"	a
l00206	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00206	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;        uint32_t getBestCandidate() {<\/div>$/;"	a
l00206	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;        <a class="code" href="classNRUReplPolicy.html">NRUReplPolicy<\/a>(uint32_t _numLines, uint32_t _numCands) :numLines(_numLines), numCands(_numCands), youngLines(0), candIdx(0) {<\/div>$/;"	a
l00206	html/scheduler_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;            sleepEvents.init(<span class="stringliteral">&quot;sleepEvs&quot;<\/span>, <span class="stringliteral">&quot;Sleep events&quot;<\/span>); schedStats-&gt;append(&amp;sleepEvents);<\/div>$/;"	a
l00206	html/stats_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;            <span class="keywordflow">return<\/span> (_counterNames == <span class="keyword">nullptr<\/span>)? <span class="keyword">nullptr<\/span> : _counterNames[idx];<\/div>$/;"	a
l00206	html/timing__event_8h_source.html	/^<div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;        <span class="keywordtype">void<\/span> <span class="keyword">operator<\/span> <span class="keyword">delete<\/span> (<span class="keywordtype">void<\/span>* p, <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* evRec) {<\/div>$/;"	a
l00207	html/barrier_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;                DEBUG_BARRIER(<span class="stringliteral">&quot;[%d] Phase ended&quot;<\/span>, tid);<\/div>$/;"	a
l00207	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;        PAD();<\/div>$/;"	a
l00207	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;        uint32_t tFAW;   <span class="comment">\/\/ No more than 4 ACTs per rank in this window<\/span><\/div>$/;"	a
l00207	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;        <span class="comment">\/\/ Don&#39;t know the code enough at the moment to be able to tell.<\/span><\/div>$/;"	a
l00207	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;        }<\/div>$/;"	a
l00207	html/locks_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;        <span class="comment">\/* This may result in additional wakeups, but avoids completely starving processes that are<\/span><\/div>$/;"	a
l00207	html/mc_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;    uint32_t _num_steps;<\/div>$/;"	a
l00207	html/mtrand_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> MTRand::reload() {<\/div>$/;"	a
l00207	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;        <span class="keyword">template<\/span> &lt;<span class="keywordtype">bool<\/span> touchOccupancy, <span class="keywordtype">bool<\/span> recordPort&gt;<\/div>$/;"	a
l00207	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;            assert(bestId &gt;= 0);<\/div>$/;"	a
l00207	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;            array = gm_calloc&lt;uint32_t&gt;(numLines);<\/div>$/;"	a
l00207	html/scheduler_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;            idlePhases.init(<span class="stringliteral">&quot;idlePhases&quot;<\/span>, <span class="stringliteral">&quot;Phases with no thread active&quot;<\/span>); schedStats-&gt;append(&amp;idlePhases);<\/div>$/;"	a
l00207	html/stats_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;        }<\/div>$/;"	a
l00207	html/timing__event_8h_source.html	/^<div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;            panic(<span class="stringliteral">&quot;TimingEvent::delete PLACEMENT delete called&quot;<\/span>);<\/div>$/;"	a
l00208	html/barrier_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;                <span class="comment">\/\/ End of phase actions<\/span><\/div>$/;"	a
l00208	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;        lock_t ccLock;<\/div>$/;"	a
l00208	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;        uint32_t tWTR;   <span class="comment">\/\/ end of WR burst to RD command<\/span><\/div>$/;"	a
l00208	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;        <span class="comment">\/\/<\/span><\/div>$/;"	a
l00208	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<\/div>$/;"	a
l00208	html/locks_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<span class="comment">         * sleeping on this. Still, if there is lots of contention in userland, this doesn&#39;t work<\/span><\/div>$/;"	a
l00208	html/mc_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<\/div>$/;"	a
l00208	html/mtrand_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;    <span class="comment">\/\/ Generate N new values in state<\/span><\/div>$/;"	a
l00208	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;        <span class="keywordtype">void<\/span> scheduleInternal(uint64_t&amp; curCycle, uint64_t&amp; schedCycle, uint8_t portMask) {<\/div>$/;"	a
l00208	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;            <span class="keywordflow">return<\/span> bestId;<\/div>$/;"	a
l00208	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;            candArray = gm_calloc&lt;uint32_t&gt;(numCands);<\/div>$/;"	a
l00208	html/scheduler_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;            idlePeriods.init(<span class="stringliteral">&quot;idlePeriods&quot;<\/span>, <span class="stringliteral">&quot;Periods with no thread active&quot;<\/span>); schedStats-&gt;append(&amp;idlePeriods);<\/div>$/;"	a
l00208	html/stats_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<\/div>$/;"	a
l00208	html/timing__event_8h_source.html	/^<div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;        }<\/div>$/;"	a
l00209	html/barrier_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;                sched-&gt;callback();<\/div>$/;"	a
l00209	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;        PAD();<\/div>$/;"	a
l00209	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;        uint32_t tWR;    <span class="comment">\/\/ end of WR burst to PRE<\/span><\/div>$/;"	a
l00209	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;        <span class="comment">\/\/ Hmm...so upon further investigation it looks like all of these arguments are<\/span><\/div>$/;"	a
l00209	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;        <span class="keywordtype">void<\/span> replaced(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00209	html/locks_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;<span class="comment">         * that well. But I don&#39;t care that much, as this only happens between phase locks.<\/span><\/div>$/;"	a
l00209	html/mc_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;    <span class="comment">\/\/ to model the SRAM tag<\/span><\/div>$/;"	a
l00209	html/mtrand_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;    <span class="comment">\/\/ Made clearer and faster by Matthew Bellew (matthew.bellew@home.com)<\/span><\/div>$/;"	a
l00209	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;            <span class="comment">\/\/ If the window is full, advance curPos until it&#39;s not<\/span><\/div>$/;"	a
l00209	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;        }<\/div>$/;"	a
l00209	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;            candVal = (1&lt;&lt;20);<\/div>$/;"	a
l00209	html/scheduler_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;            occHist.init(<span class="stringliteral">&quot;occHist&quot;<\/span>, <span class="stringliteral">&quot;Occupancy histogram&quot;<\/span>, numCores+1); schedStats-&gt;append(&amp;occHist);<\/div>$/;"	a
l00209	html/stats_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc) {<\/div>$/;"	a
l00209	html/timing__event_8h_source.html	/^<div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;        <span class="keywordtype">void<\/span> <span class="keyword">operator<\/span> <span class="keyword">delete<\/span> (<span class="keywordtype">void<\/span>* p, <a class="code" href="classEventRecorder.html">EventRecorder<\/a>&amp; evRec) {<\/div>$/;"	a
l00210	html/barrier_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;                curThreadIdx = 0; <span class="comment">\/\/rewind list<\/span><\/div>$/;"	a
l00210	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<\/div>$/;"	a
l00210	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;        uint32_t tRFC;   <span class="comment">\/\/ Refresh to ACT (refresh leaves rows closed)<\/span><\/div>$/;"	a
l00210	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;        <span class="comment">\/\/ written by the function. I am not a big fan of passing WRITE arguments by<\/span><\/div>$/;"	a
l00210	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;            array[id].used = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00210	html/locks_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<span class="comment">         *\/<\/span><\/div>$/;"	a
l00210	html/mc_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;    <span class="keywordtype">bool<\/span>    _sram_tag;<\/div>$/;"	a
l00210	html/mtrand_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">int<\/span> MmN = int(M) - int(N);  <span class="comment">\/\/ in case enums are unsigned<\/span><\/div>$/;"	a
l00210	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;            <span class="keywordflow">while<\/span> (touchOccupancy &amp;&amp; occupancy == WSZ) {<\/div>$/;"	a
l00210	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<\/div>$/;"	a
l00210	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;        }<\/div>$/;"	a
l00210	html/scheduler_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;            uint32_t runQueueHistSize = ((numCores &gt; 16)? numCores : 16) + 1;<\/div>$/;"	a
l00210	html/stats_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;            initStat(name, desc);<\/div>$/;"	a
l00210	html/timing__event_8h_source.html	/^<div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;            panic(<span class="stringliteral">&quot;TimingEvent::delete PLACEMENT delete called&quot;<\/span>);<\/div>$/;"	a
l00211	html/barrier_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;<\/div>$/;"	a
l00211	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00211	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;        uint32_t tREFI;  <span class="comment">\/\/ Refresh interval<\/span><\/div>$/;"	a
l00211	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;        <span class="comment">\/\/ reference. Even more distrubingly, MemSchedQueueElem uses its MemAccessEventBase<\/span><\/div>$/;"	a
l00211	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;        }<\/div>$/;"	a
l00211	html/locks_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;        syscall(SYS_futex, lock, FUTEX_WAKE, 1 <span class="comment">\/*wake next*\/<\/span>, <span class="keyword">nullptr<\/span>, <span class="keyword">nullptr<\/span>, 0);<\/div>$/;"	a
l00211	html/mc_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;    uint32_t _llc_latency;<\/div>$/;"	a
l00211	html/mtrand_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;    <span class="keyword">register<\/span> uint64_t *p = state;<\/div>$/;"	a
l00211	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;                advancePos(curCycle);<\/div>$/;"	a
l00211	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;        <span class="keywordtype">void<\/span> replaced(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00211	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;<\/div>$/;"	a
l00211	html/scheduler_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;            runQueueHist.init(<span class="stringliteral">&quot;rqSzHist&quot;<\/span>, <span class="stringliteral">&quot;Run queue size histogram&quot;<\/span>, runQueueHistSize); schedStats-&gt;append(&amp;runQueueHist);<\/div>$/;"	a
l00211	html/stats_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;        }<\/div>$/;"	a
l00211	html/timing__event_8h_source.html	/^<div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;        }<\/div>$/;"	a
l00212	html/barrier_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;                <span class="keywordflow">if<\/span> (((phaseCount++) &amp; (32-1)) == 0) { <span class="comment">\/\/one out of 32 times, do<\/span><\/div>$/;"	a
l00212	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;        <a class="code" href="classMESITopCC.html">MESITopCC<\/a>(uint32_t _numLines, <span class="keywordtype">bool<\/span> _nonInclusiveHack) : numLines(_numLines), nonInclusiveHack(_nonInclusiveHack) {<\/div>$/;"	a
l00212	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;<\/div>$/;"	a
l00212	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;        <span class="comment">\/\/ member in a weird way, with the member var being nullptr signifying something (I don&#39;t<\/span><\/div>$/;"	a
l00212	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;<\/div>$/;"	a
l00212	html/locks_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;    }<\/div>$/;"	a
l00212	html/mc_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;<span class="keyword">public<\/span>:<\/div>$/;"	a
l00212	html/mtrand_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;    <span class="keyword">register<\/span> <span class="keywordtype">int<\/span> i;<\/div>$/;"	a
l00212	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;            }<\/div>$/;"	a
l00212	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;            candIdx = 0;<\/div>$/;"	a
l00212	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;        ~<a class="code" href="classNRUReplPolicy.html">NRUReplPolicy<\/a>() {<\/div>$/;"	a
l00212	html/scheduler_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;            parentStat-&gt;append(schedStats);<\/div>$/;"	a
l00212	html/stats_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;};<\/div>$/;"	a
l00212	html/timing__event_8h_source.html	/^<div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;<\/div>$/;"	a
l00213	html/barrier_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;                    <span class="comment">\/* Pass over the whole array, OFFLINE the threads that LEFT. If they are on a syscall, they will rejoin;<\/span><\/div>$/;"	a
l00213	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;            array = gm_calloc&lt;Entry&gt;(numLines);<\/div>$/;"	a
l00213	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;        <span class="comment">\/\/ Address mapping information<\/span><\/div>$/;"	a
l00213	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;        <span class="comment">\/\/ know what yet). Will look into this further<\/span><\/div>$/;"	a
l00213	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;        uint32_t rank(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {<\/div>$/;"	a
l00213	html/locks_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;}<\/div>$/;"	a
l00213	html/mc_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;    <a class="code" href="classMemoryController.html">MemoryController<\/a>(g_string&amp; name, uint32_t frequency, uint32_t domain, <a class="code" href="classConfig.html">Config<\/a>&amp; config);<\/div>$/;"	a
l00213	html/mtrand_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;    <span class="keywordflow">for<\/span> (i = N - M; i--; ++p)<\/div>$/;"	a
l00213	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;<\/div>$/;"	a
l00213	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;            bestId = -1;<\/div>$/;"	a
l00213	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;            gm_free(array);<\/div>$/;"	a
l00213	html/scheduler_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;        }<\/div>$/;"	a
l00213	html/stats_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;<\/div>$/;"	a
l00213	html/timing__event_8h_source.html	/^<div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;        <span class="comment">\/\/Describe yourself, useful for debugging<\/span><\/div>$/;"	a
l00214	html/barrier_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;<span class="comment">                     * If they left for good, we avoid long-term traversal overheads on apps with a varying number of threads.<\/span><\/div>$/;"	a
l00214	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; numLines; i++) {<\/div>$/;"	a
l00214	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;        uint32_t colShift, colMask;<\/div>$/;"	a
l00214	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;        <span class="comment">\/\/<\/span><\/div>$/;"	a
l00214	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;            <span class="comment">\/\/Choose part to evict from as a part with highest *proportional* diff between tgt and actual sizes (minimize\/smooth transients); if all parts are within limits, evict from own<\/span><\/div>$/;"	a
l00214	html/locks_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;<\/div>$/;"	a
l00214	html/mc_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;    uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00214	html/mtrand_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;        *p = twist(p[M], p[0], p[1]);<\/div>$/;"	a
l00214	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;            uint32_t delay = (schedCycle &gt; curCycle)? (schedCycle - curCycle) : 0;<\/div>$/;"	a
l00214	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;            array[id].ts = 0;<\/div>$/;"	a
l00214	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;            gm_free(candArray);<\/div>$/;"	a
l00214	html/scheduler_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;<\/div>$/;"	a
l00214	html/stats_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;<\/div>$/;"	a
l00214	html/timing__event_8h_source.html	/^<div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;        <span class="keyword">virtual<\/span> std::string str() { std::string res; <span class="keywordflow">return<\/span> res; }<\/div>$/;"	a
l00215	html/barrier_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<span class="comment">                     *\/<\/span><\/div>$/;"	a
l00215	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;                array[i].clear();<\/div>$/;"	a
l00215	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;        uint32_t rankShift, rankMask;<\/div>$/;"	a
l00215	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;        <span class="comment">\/\/ FIXME(dsm): refpointer? pointeref? Hmmm...<\/span><\/div>$/;"	a
l00215	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;            uint32_t victimPart = mapper-&gt;getPartition(*req);<\/div>$/;"	a
l00215	html/locks_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<span class="comment">\/\/ Returns true if this futex has *detectable waiters*, i.e., waiters in the kernel<\/span><\/div>$/;"	a
l00215	html/mc_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;    <span class="keyword">const<\/span> <span class="keywordtype">char<\/span> * getName() { <span class="keywordflow">return<\/span> _name.c_str(); };<\/div>$/;"	a
l00215	html/mtrand_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;    <span class="keywordflow">for<\/span> (i = M; --i; ++p)<\/div>$/;"	a
l00215	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<\/div>$/;"	a
l00215	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;            array[id].addr = incomingLineAddr;<\/div>$/;"	a
l00215	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;        }<\/div>$/;"	a
l00215	html/scheduler_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;        <span class="keywordtype">void<\/span> start(uint32_t pid, uint32_t tid, <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;bool&gt;<\/a>&amp; mask) {<\/div>$/;"	a
l00215	html/stats_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno"><a class="line" href="classCounter.html">  215<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCounter.html">Counter<\/a> : <span class="keyword">public<\/span> <a class="code" href="classScalarStat.html">ScalarStat<\/a> {<\/div>$/;"	a
l00215	html/timing__event_8h_source.html	/^<div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<\/div>$/;"	a
l00216	html/barrier_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;                    assert(runListSize &gt; 0);<\/div>$/;"	a
l00216	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;            }<\/div>$/;"	a
l00216	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;        uint32_t bankShift, bankMask;<\/div>$/;"	a
l00216	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">bool<\/span> GetEvent(<a class="code" href="classMemAccessEventBase.html">MemAccessEventBase<\/a>*&amp; ev, Address&amp; addr, MemAccessType&amp; type) = 0;<\/div>$/;"	a
l00216	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;            <span class="keywordtype">double<\/span> maxPartDiff = 0.0;<\/div>$/;"	a
l00216	html/locks_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;<span class="comment">\/\/ There may still be waiters spinning, but if you (a) acquire the lock, and (b) want<\/span><\/div>$/;"	a
l00216	html/mc_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;    <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat); <\/div>$/;"	a
l00216	html/mtrand_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;        *p = twist(p[MmN], p[0], p[1]);<\/div>$/;"	a
l00216	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;            <span class="comment">\/\/ Schedule, progressively increasing delay if we cannot find a slot<\/span><\/div>$/;"	a
l00216	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;            <span class="comment">\/\/info(&quot;0x%lx&quot;, incomingLineAddr);<\/span><\/div>$/;"	a
l00216	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;<\/div>$/;"	a
l00216	html/scheduler_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;            futex_lock(&amp;schedLock);<\/div>$/;"	a
l00216	html/stats_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00216	html/timing__event_8h_source.html	/^<div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00217	html/barrier_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;                    uint32_t idx = 0;<\/div>$/;"	a
l00217	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;<\/div>$/;"	a
l00217	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;        uint64_t rowShift;  <span class="comment">\/\/ row&#39;s always top<\/span><\/div>$/;"	a
l00217	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;};<\/div>$/;"	a
l00217	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;            <span class="keywordflow">if<\/span> (partInfo[victimPart].size == 0) maxPartDiff = -2.0; <span class="comment">\/\/force a &gt; 0-size partition<\/span><\/div>$/;"	a
l00217	html/locks_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;<span class="comment">\/\/ to see if someone is queued behind you, this will eventually return true<\/span><\/div>$/;"	a
l00217	html/mc_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;    <span class="comment">\/\/ Use glob mem<\/span><\/div>$/;"	a
l00217	html/mtrand_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;    *p = twist(p[MmN], p[0], state[0]);<\/div>$/;"	a
l00217	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;            uint32_t curWinPos = curPos + delay;<\/div>$/;"	a
l00217	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;        }<\/div>$/;"	a
l00217	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;        <span class="keywordtype">void<\/span> update(uint32_t <span class="keywordtype">id<\/span>, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {<\/div>$/;"	a
l00217	html/scheduler_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;            uint32_t gid = getGid(pid, tid);<\/div>$/;"	a
l00217	html/stats_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;        uint64_t _count;<\/div>$/;"	a
l00217	html/timing__event_8h_source.html	/^<div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;        <span class="keywordtype">void<\/span>* <span class="keyword">operator<\/span> <span class="keyword">new<\/span> (size_t);<\/div>$/;"	a
l00218	html/barrier_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;                    uint32_t newSize = runListSize;<\/div>$/;"	a
l00218	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;            futex_init(&amp;ccLock);<\/div>$/;"	a
l00218	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;<\/div>$/;"	a
l00218	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;<\/div>$/;"	a
l00218	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t p = 0; p &lt; partitions; p++) {<\/div>$/;"	a
l00218	html/locks_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;<span class="comment">\/\/ No false positives (if true, for sure there&#39;s someone)<\/span><\/div>$/;"	a
l00218	html/mc_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;    <span class="comment">\/\/using GlobAlloc::operator new;<\/span><\/div>$/;"	a
l00218	html/mtrand_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;<\/div>$/;"	a
l00218	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;            <span class="keywordflow">while<\/span> (curWinPos &lt; H) {<\/div>$/;"	a
l00218	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;<\/div>$/;"	a
l00218	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;            <span class="comment">\/\/if (array[id]) info(&quot;update PRE %d %d %d&quot;, id, array[id], youngLines);<\/span><\/div>$/;"	a
l00218	html/scheduler_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;            <span class="comment">\/\/info(&quot;[G %d] Start&quot;, gid);<\/span><\/div>$/;"	a
l00218	html/stats_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;<\/div>$/;"	a
l00218	html/timing__event_8h_source.html	/^<div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;<\/div>$/;"	a
l00219	html/barrier_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;                    <span class="keywordflow">while<\/span> (idx &lt; newSize) {<\/div>$/;"	a
l00219	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;        }<\/div>$/;"	a
l00219	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;        uint32_t minRdLatency;<\/div>$/;"	a
l00219	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno"><a class="line" href="classMemSchedulerDefault.html">  219<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMemSchedulerDefault.html">MemSchedulerDefault<\/a> : <span class="keyword">public<\/span> <a class="code" href="classMemSchedulerBase.html">MemSchedulerBase<\/a> {<\/div>$/;"	a
l00219	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;                <span class="keywordtype">double<\/span> diff = ((int32_t)partInfo[p].size - (int32_t)partInfo[p].targetSize)\/((<span class="keywordtype">double<\/span>)(partInfo[p].targetSize + 1));<\/div>$/;"	a
l00219	html/locks_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> futex_haswaiters(<span class="keyword">volatile<\/span> uint32_t* lock) {<\/div>$/;"	a
l00219	html/mc_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;    <span class="comment">\/\/using GlobAlloc::operator delete;<\/span><\/div>$/;"	a
l00219	html/mtrand_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;    left = N, pNext = state;<\/div>$/;"	a
l00219	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;                <span class="keywordflow">if<\/span> (trySchedule&lt;touchOccupancy, recordPort&gt;(curWin[curWinPos], portMask)) {<\/div>$/;"	a
l00219	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00219	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;            youngLines += 1 - (array[id] &gt;&gt; 1); <span class="comment">\/\/+0 if young, +1 if old<\/span><\/div>$/;"	a
l00219	html/scheduler_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;            assert((gidMap.find(gid) == gidMap.end()));<\/div>$/;"	a
l00219	html/stats_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00219	html/timing__event_8h_source.html	/^<div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;        <span class="keywordtype">void<\/span> propagateDomain(int32_t dom) {<\/div>$/;"	a
l00220	html/barrier_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;                        uint32_t wtid = runList[idx];<\/div>$/;"	a
l00220	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;<\/div>$/;"	a
l00220	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;        uint32_t minWrLatency;<\/div>$/;"	a
l00220	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00220	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;                <span class="comment">\/\/info(&quot;YYY %d %f&quot;, p, diff);<\/span><\/div>$/;"	a
l00220	html/locks_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;    <span class="keywordflow">return<\/span> *lock == 2;<\/div>$/;"	a
l00220	html/mc_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;};<\/div>$/;"	a
l00220	html/mtrand_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;}<\/div>$/;"	a
l00220	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;                    schedCycle = curCycle + (curWinPos - curPos);<\/div>$/;"	a
l00220	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;        <span class="keywordtype">void<\/span> setPartitionSizes(<span class="keyword">const<\/span> uint32_t* waysPart) {<\/div>$/;"	a
l00220	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;            array[id] |= 0x2;<\/div>$/;"	a
l00220	html/scheduler_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;            <span class="comment">\/\/ Get pid and tid straight from the OS<\/span><\/div>$/;"	a
l00220	html/stats_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a>() : <a class="code" href="classScalarStat.html">ScalarStat<\/a>(), _count(0) {}<\/div>$/;"	a
l00220	html/timing__event_8h_source.html	/^<div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;            assert(domain == -1);<\/div>$/;"	a
l00221	html/barrier_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;                        <span class="keywordflow">if<\/span> (threadList[wtid].state == LEFT) {<\/div>$/;"	a
l00221	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;        <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;BaseCache*&gt;<\/a>&amp; _children, <a class="code" href="classNetwork.html">Network<\/a>* network, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name);<\/div>$/;"	a
l00221	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;        uint32_t preDelay, postDelayRd, postDelayWr;<\/div>$/;"	a
l00221	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;        MemAccessType prioritizedAccessType;<\/div>$/;"	a
l00221	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;                <span class="keywordflow">if<\/span> (diff &gt; maxPartDiff &amp;&amp; partInfo[p].size &gt; 0) {<\/div>$/;"	a
l00221	html/locks_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;}<\/div>$/;"	a
l00221	html/mc_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;<\/div>$/;"	a
l00221	html/mtrand_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;<\/div>$/;"	a
l00221	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;                    <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00221	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;            uint32_t curWay = 0;<\/div>$/;"	a
l00221	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;<\/div>$/;"	a
l00221	html/scheduler_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;            <span class="comment">\/\/ - SYS_gettid because glibc does not implement gettid()<\/span><\/div>$/;"	a
l00221	html/stats_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;<\/div>$/;"	a
l00221	html/timing__event_8h_source.html	/^<div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;            domain = dom;<\/div>$/;"	a
l00222	html/barrier_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;                            threadList[wtid].state = OFFLINE;<\/div>$/;"	a
l00222	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;<\/div>$/;"	a
l00222	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;<\/div>$/;"	a
l00222	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;        uint32_t wrQueueSize;<\/div>$/;"	a
l00222	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;                    maxPartDiff = diff;<\/div>$/;"	a
l00222	html/locks_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;<\/div>$/;"	a
l00222	html/mc_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00222	html/mtrand_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> MTRand::seed(<span class="keyword">const<\/span> uint64_t oneSeed) {<\/div>$/;"	a
l00222	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00222	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t p = 0; p &lt; partitions; p++) {<\/div>$/;"	a
l00222	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;            <span class="keywordflow">if<\/span> (youngLines &gt;= numLines\/2) {<\/div>$/;"	a
l00222	html/scheduler_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;            <span class="comment">\/\/ - SYS_getpid because after a fork (where zsim calls ThreadStart),<\/span><\/div>$/;"	a
l00222	html/stats_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;        <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc) {<\/div>$/;"	a
l00222	html/timing__event_8h_source.html	/^<div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;            <span class="keyword">auto<\/span> vLambda = [<span class="keyword">this<\/span>](<a class="code" href="classTimingEvent.html">TimingEvent<\/a>** childPtr) {<\/div>$/;"	a
l00223	html/barrier_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;                            uint32_t stid = runList[newSize-1];<\/div>$/;"	a
l00223	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;        uint64_t processEviction(Address wbLineAddr, uint32_t lineId, <span class="keywordtype">bool<\/span>* reqWriteback, uint64_t cycle, uint32_t srcId);<\/div>$/;"	a
l00223	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;        <a class="code" href="classRequestQueue.html">RequestQueue&lt;Request&gt;<\/a> rdQueue, wrQueue;<\/div>$/;"	a
l00223	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;        uint32_t wrQueueHighWatermark;<\/div>$/;"	a
l00223	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;                    victimPart = p;<\/div>$/;"	a
l00223	html/locks_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;<span class="preprocessor">#endif  \/\/ LOCKS_H_<\/span><\/div>$/;"	a
l00223	html/mtrand_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;    <span class="comment">\/\/ Seed the generator with a simple uint64_t<\/span><\/div>$/;"	a
l00223	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;                    curWinPos++;<\/div>$/;"	a
l00223	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;                partInfo[p].targetSize = totalSize*waysPart[p]\/ways;<\/div>$/;"	a
l00223	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;                <span class="comment">\/\/info(&quot;youngLines = %d, shifting&quot;, youngLines);<\/span><\/div>$/;"	a
l00223	html/scheduler_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;            <span class="comment">\/\/   getpid() returns the parent&#39;s pid (getpid() caches, and I&#39;m<\/span><\/div>$/;"	a
l00223	html/stats_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;            initStat(name, desc);<\/div>$/;"	a
l00223	html/timing__event_8h_source.html	/^<div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;                <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* child = *childPtr;<\/div>$/;"	a
l00224	html/barrier_8h_source.html	/^<div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;                            runList[idx] = stid;<\/div>$/;"	a
l00224	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;<\/div>$/;"	a
l00224	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;        std::deque&lt;Request&gt; overflowQueue;<\/div>$/;"	a
l00224	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;        uint32_t wrQueueLowWatermark;<\/div>$/;"	a
l00224	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;                }<\/div>$/;"	a
l00224	html/mtrand_8h_source.html	/^<div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;    initialize(oneSeed);<\/div>$/;"	a
l00224	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;                }<\/div>$/;"	a
l00224	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;<span class="preprocessor">#if UMON_INFO<\/span><\/div>$/;"	a
l00224	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;                <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; numLines; i++) array[i] &gt;&gt;= 1;<\/div>$/;"	a
l00224	html/scheduler_8h_source.html	/^<div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;            <span class="comment">\/\/   guessing it hasn&#39;t flushed its cached pid at this point)<\/span><\/div>$/;"	a
l00224	html/stats_8h_source.html	/^<div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;            _count = 0;<\/div>$/;"	a
l00224	html/timing__event_8h_source.html	/^<div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;                <span class="keywordflow">if<\/span> (child-&gt;domain == -1) child-&gt;propagateDomain(domain);<\/div>$/;"	a
l00225	html/barrier_8h_source.html	/^<div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;                            threadList[stid].lastIdx = idx;<\/div>$/;"	a
l00225	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;        uint64_t processAccess(Address lineAddr, uint32_t lineId, AccessType type, uint32_t childId, <span class="keywordtype">bool<\/span> haveExclusive,<\/div>$/;"	a
l00225	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;<\/div>$/;"	a
l00225	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;<\/div>$/;"	a
l00225	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;            }<\/div>$/;"	a
l00225	html/mtrand_8h_source.html	/^<div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;    reload();<\/div>$/;"	a
l00225	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;            }<\/div>$/;"	a
l00225	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;<span class="preprocessor"><\/span>                info(<span class="stringliteral">&quot;part %d assigned %d ways&quot;<\/span>, p, waysPart[p]);<\/div>$/;"	a
l00225	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;                youngLines = 0;<\/div>$/;"	a
l00225	html/scheduler_8h_source.html	/^<div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;            gidMap[gid] = <span class="keyword">new<\/span> ThreadInfo(gid, syscall(SYS_getpid), syscall(SYS_gettid), mask);<\/div>$/;"	a
l00225	html/stats_8h_source.html	/^<div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;        }<\/div>$/;"	a
l00225	html/timing__event_8h_source.html	/^<div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;            };<\/div>$/;"	a
l00226	html/barrier_8h_source.html	/^<div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;<\/div>$/;"	a
l00226	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;                MESIState* childState, <span class="keywordtype">bool<\/span>* inducedWriteback, uint64_t cycle, uint32_t srcId, uint32_t flags);<\/div>$/;"	a
l00226	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt; g_vector&lt;Bank&gt;<\/a> &gt; banks; <span class="comment">\/\/ indexed by rank, bank<\/span><\/div>$/;"	a
l00226	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector &lt;MemSchedQueueElem&gt;<\/a> rdQueue;<\/div>$/;"	a
l00226	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;            <span class="comment">\/\/assert(maxPartDiff &gt;= -1e-8, &quot;Evicting from non-full line! diff=%f victimPart %d (sz %d tgt %d) origPart %d&quot;, ); \/\/someone must be over...<\/span><\/div>$/;"	a
l00226	html/mtrand_8h_source.html	/^<div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;}<\/div>$/;"	a
l00226	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;            <span class="keywordflow">if<\/span> (curWinPos &gt;= H) {<\/div>$/;"	a
l00226	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00226	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;            }<\/div>$/;"	a
l00226	html/scheduler_8h_source.html	/^<div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;            threadsCreated.inc();<\/div>$/;"	a
l00226	html/stats_8h_source.html	/^<div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;<\/div>$/;"	a
l00226	html/timing__event_8h_source.html	/^<div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;            visitChildren&lt; decltype(vLambda) &gt;(vLambda);<\/div>$/;"	a
l00227	html/barrier_8h_source.html	/^<div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;                            newSize--; <span class="comment">\/\/last elem is now garbage<\/span><\/div>$/;"	a
l00227	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<\/div>$/;"	a
l00227	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;ActWindow&gt;<\/a> rankActWindows;<\/div>$/;"	a
l00227	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector &lt;MemSchedQueueElem&gt;<\/a> wrQueue;<\/div>$/;"	a
l00227	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;            <span class="keywordflow">if<\/span> (maxPartDiff &lt; -1e-8) {<\/div>$/;"	a
l00227	html/mtrand_8h_source.html	/^<div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<\/div>$/;"	a
l00227	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;                uint32_t nextWinPos = curWinPos - H;<\/div>$/;"	a
l00227	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<span class="preprocessor"><\/span>                <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; waysPart[p]; i++) wayPartIndex[curWay++] = p;<\/div>$/;"	a
l00227	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;            <span class="comment">\/\/info(&quot;update POST %d %d %d&quot;, id, array[id], youngLines);<\/span><\/div>$/;"	a
l00227	html/scheduler_8h_source.html	/^<div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;            futex_unlock(&amp;schedLock);<\/div>$/;"	a
l00227	html/stats_8h_source.html	/^<div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> inc(uint64_t delta) {<\/div>$/;"	a
l00227	html/timing__event_8h_source.html	/^<div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;        }<\/div>$/;"	a
l00228	html/barrier_8h_source.html	/^<div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;                        } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00228	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;        uint64_t processInval(Address lineAddr, uint32_t lineId, InvType type, <span class="keywordtype">bool<\/span>* reqWriteback, uint64_t cycle, uint32_t srcId);<\/div>$/;"	a
l00228	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;<\/div>$/;"	a
l00228	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector &lt;MemSchedQueueElem&gt;<\/a> wrDoneQueue;<\/div>$/;"	a
l00228	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;                warn(<span class="stringliteral">&quot;Evicting from non-full part! diff=%f victimPart %d (sz %ld tgt %ld) origPart %d&quot;<\/span>,<\/div>$/;"	a
l00228	html/mtrand_8h_source.html	/^<div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> MTRand::seed(uint64_t *<span class="keyword">const<\/span> bigSeed, <span class="keyword">const<\/span> uint64_t seedLength) {<\/div>$/;"	a
l00228	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;                <span class="keywordflow">while<\/span> (nextWinPos &lt; H) {<\/div>$/;"	a
l00228	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;            }<\/div>$/;"	a
l00228	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;        }<\/div>$/;"	a
l00228	html/scheduler_8h_source.html	/^<div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;        }<\/div>$/;"	a
l00228	html/stats_8h_source.html	/^<div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;            _count += delta;<\/div>$/;"	a
l00228	html/timing__event_8h_source.html	/^<div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;<\/div>$/;"	a
l00229	html/barrier_8h_source.html	/^<div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;                            idx++; <span class="comment">\/\/this one is OK, keep going<\/span><\/div>$/;"	a
l00229	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<\/div>$/;"	a
l00229	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;        <span class="comment">\/\/ Event scheduling<\/span><\/div>$/;"	a
l00229	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<\/div>$/;"	a
l00229	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;                    maxPartDiff, victimPart, partInfo[victimPart].size, partInfo[victimPart].targetSize, mapper-&gt;getPartition(*req));<\/div>$/;"	a
l00229	html/mtrand_8h_source.html	/^<div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;    <span class="comment">\/\/ Seed the generator with an array of uint64_t&#39;s<\/span><\/div>$/;"	a
l00229	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;                    <span class="keywordflow">if<\/span> (trySchedule&lt;touchOccupancy, recordPort&gt;(nextWin[nextWinPos], portMask)) {<\/div>$/;"	a
l00229	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<span class="preprocessor">#if UMON_INFO<\/span><\/div>$/;"	a
l00229	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<\/div>$/;"	a
l00229	html/scheduler_8h_source.html	/^<div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<\/div>$/;"	a
l00229	html/stats_8h_source.html	/^<div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;        }<\/div>$/;"	a
l00229	html/timing__event_8h_source.html	/^<div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;        <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> F&gt; <span class="comment">\/\/F has to be decltype(f)<\/span><\/div>$/;"	a
l00230	html/barrier_8h_source.html	/^<div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;                        }<\/div>$/;"	a
l00230	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> lock() {<\/div>$/;"	a
l00230	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;        <a class="code" href="classSchedEvent.html">SchedEvent<\/a>* nextSchedEvent;<\/div>$/;"	a
l00230	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;        <span class="keywordtype">bool<\/span> FindBestRequest(<a class="code" href="classg__vector.html">g_vector &lt;MemSchedQueueElem&gt;<\/a> *queue, uint32_t&amp; idx);<\/div>$/;"	a
l00230	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;            }<\/div>$/;"	a
l00230	html/mtrand_8h_source.html	/^<div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;    <span class="comment">\/\/ There are 2^19937-1 possible initial states.  This function allows<\/span><\/div>$/;"	a
l00230	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;                        schedCycle = curCycle + (nextWinPos + H - curPos);<\/div>$/;"	a
l00230	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;<span class="preprocessor"><\/span>            <span class="keywordflow">for<\/span> (uint32_t w = 0; w &lt; ways; w++) info(<span class="stringliteral">&quot;wayPartIndex[%d] = %d&quot;<\/span>, w, wayPartIndex[w]);<\/div>$/;"	a
l00230	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;        <span class="keywordtype">void<\/span> recordCandidate(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00230	html/scheduler_8h_source.html	/^<div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;        <span class="keywordtype">void<\/span> finish(uint32_t pid, uint32_t tid) {<\/div>$/;"	a
l00230	html/stats_8h_source.html	/^<div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;<\/div>$/;"	a
l00230	html/timing__event_8h_source.html	/^<div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> visitChildren(F f) {<\/div>$/;"	a
l00231	html/barrier_8h_source.html	/^<div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;                    }<\/div>$/;"	a
l00231	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;            futex_lock(&amp;ccLock);<\/div>$/;"	a
l00231	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;        uint64_t nextSchedCycle;<\/div>$/;"	a
l00231	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;<\/div>$/;"	a
l00231	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;<\/div>$/;"	a
l00231	html/mtrand_8h_source.html	/^<div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;    <span class="comment">\/\/ all of those to be accessed by providing at least 19937 bits (with a<\/span><\/div>$/;"	a
l00231	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;                        <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00231	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00231	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;            uint32_t iVal = array[id];<\/div>$/;"	a
l00231	html/scheduler_8h_source.html	/^<div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;            futex_lock(&amp;schedLock);<\/div>$/;"	a
l00231	html/stats_8h_source.html	/^<div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> inc() {<\/div>$/;"	a
l00231	html/timing__event_8h_source.html	/^<div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;            <span class="keywordflow">if<\/span> (numChildren == 0) <span class="keywordflow">return<\/span>;<\/div>$/;"	a
l00232	html/barrier_8h_source.html	/^<div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;                    assert(runListSize - newSize == leftThreads);<\/div>$/;"	a
l00232	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;        }<\/div>$/;"	a
l00232	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;        <a class="code" href="classSchedEvent.html">SchedEvent<\/a>* eventFreelist;<\/div>$/;"	a
l00232	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00232	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;            <span class="comment">\/\/info(&quot;rp: %d \/ %d %d \/ %d %d&quot;, victimPart, partInfo[0].size, partInfo[0].targetSize, partInfo[1].size, partInfo[1].targetSize);<\/span><\/div>$/;"	a
l00232	html/mtrand_8h_source.html	/^<div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;    <span class="comment">\/\/ default seed length of N = 624 uint64_t&#39;s).  Any bits above the lower 32<\/span><\/div>$/;"	a
l00232	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;                    } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00232	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;<span class="preprocessor"><\/span>            assert(curWay == ways);<\/div>$/;"	a
l00232	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;            <span class="keywordflow">if<\/span> (iVal &lt; candVal) {<\/div>$/;"	a
l00232	html/scheduler_8h_source.html	/^<div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;            uint32_t gid = getGid(pid, tid);<\/div>$/;"	a
l00232	html/stats_8h_source.html	/^<div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;            _count++;<\/div>$/;"	a
l00232	html/timing__event_8h_source.html	/^<div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;            <span class="comment">\/\/info(&quot;visit %p nc %d&quot;, this, numChildren);<\/span><\/div>$/;"	a
l00233	html/barrier_8h_source.html	/^<div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;                    leftThreads = 0;<\/div>$/;"	a
l00233	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;<\/div>$/;"	a
l00233	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;<\/div>$/;"	a
l00233	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;        <a class="code" href="classMemSchedulerDefault.html">MemSchedulerDefault<\/a>(uint32_t <span class="keywordtype">id<\/span>, <a class="code" href="classMemParam.html">MemParam<\/a>* mParam, <a class="code" href="classMemChannelBase.html">MemChannelBase<\/a>* mChnl);<\/div>$/;"	a
l00233	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;            assert(partInfo[victimPart].size &gt; 0);<\/div>$/;"	a
l00233	html/mtrand_8h_source.html	/^<div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;    <span class="comment">\/\/ in each element are discarded.<\/span><\/div>$/;"	a
l00233	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;                        nextWinPos++;<\/div>$/;"	a
l00233	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;        }<\/div>$/;"	a
l00233	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;                candVal = iVal;<\/div>$/;"	a
l00233	html/scheduler_8h_source.html	/^<div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;            <span class="comment">\/\/info(&quot;[G %d] Finish&quot;, gid);<\/span><\/div>$/;"	a
l00233	html/stats_8h_source.html	/^<div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;        }<\/div>$/;"	a
l00233	html/timing__event_8h_source.html	/^<div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;            <span class="keywordflow">if<\/span> (numChildren == 1) {<\/div>$/;"	a
l00234	html/barrier_8h_source.html	/^<div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;                    DEBUG_BARRIER(<span class="stringliteral">&quot;[%d] Cleanup pass, initial runListSize %d, now %d&quot;<\/span>, tid, runListSize, newSize);<\/div>$/;"	a
l00234	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> unlock() {<\/div>$/;"	a
l00234	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;        <span class="keyword">const<\/span> g_string name;<\/div>$/;"	a
l00234	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;        ~<a class="code" href="classMemSchedulerDefault.html">MemSchedulerDefault<\/a>();<\/div>$/;"	a
l00234	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;            assert(partInfo[victimPart].size == partInfo[victimPart].lruList.size());<\/div>$/;"	a
l00234	html/mtrand_8h_source.html	/^<div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;    <span class="comment">\/\/ Just call seed() if you want to get array from \/dev\/urandom<\/span><\/div>$/;"	a
l00234	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;                    }<\/div>$/;"	a
l00234	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;};<\/div>$/;"	a
l00234	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;                candArray[0] = id;<\/div>$/;"	a
l00234	html/scheduler_8h_source.html	/^<div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;            assert((gidMap.find(gid) != gidMap.end()));<\/div>$/;"	a
l00234	html/stats_8h_source.html	/^<div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;<\/div>$/;"	a
l00234	html/timing__event_8h_source.html	/^<div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;                f(&amp;child);<\/div>$/;"	a
l00235	html/barrier_8h_source.html	/^<div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;                    runListSize = newSize;<\/div>$/;"	a
l00235	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;            futex_unlock(&amp;ccLock);<\/div>$/;"	a
l00235	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;<\/div>$/;"	a
l00235	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;        <span class="keywordtype">bool<\/span> CheckSetEvent(<a class="code" href="classMemAccessEventBase.html">MemAccessEventBase<\/a>* ev);<\/div>$/;"	a
l00235	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;            <span class="keywordflow">return<\/span> partInfo[victimPart].lruList.back()-&gt;lineId;<\/div>$/;"	a
l00235	html/mtrand_8h_source.html	/^<div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;    initialize(19650218UL);<\/div>$/;"	a
l00235	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;                }<\/div>$/;"	a
l00235	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;<\/div>$/;"	a
l00235	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;                candIdx = 1;<\/div>$/;"	a
l00235	html/scheduler_8h_source.html	/^<div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;            ThreadInfo* th = gidMap[gid];<\/div>$/;"	a
l00235	html/stats_8h_source.html	/^<div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> atomicInc(uint64_t delta) {<\/div>$/;"	a
l00235	html/timing__event_8h_source.html	/^<div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00236	html/barrier_8h_source.html	/^<div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;                }<\/div>$/;"	a
l00236	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;        }<\/div>$/;"	a
l00236	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;        <span class="comment">\/\/ R\/W stats<\/span><\/div>$/;"	a
l00236	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;        <span class="keywordtype">bool<\/span> GetEvent(<a class="code" href="classMemAccessEventBase.html">MemAccessEventBase<\/a>*&amp; ev, Address&amp; addr, MemAccessType&amp; type);<\/div>$/;"	a
l00236	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;        }<\/div>$/;"	a
l00236	html/mtrand_8h_source.html	/^<div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;    <span class="keyword">register<\/span> <span class="keywordtype">int<\/span> i = 1;<\/div>$/;"	a
l00236	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;                <span class="keywordflow">if<\/span> (nextWinPos &gt;= H) {<\/div>$/;"	a
l00236	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;<span class="preprocessor">#define VANTAGE_8BIT_BTS 1 \/\/1 for 8-bit coarse-grain timestamps, 0 for 64-bit coarse-grain (no wrap-arounds)<\/span><\/div>$/;"	a
l00236	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;            } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (iVal == candVal) {<\/div>$/;"	a
l00236	html/scheduler_8h_source.html	/^<div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;            gidMap.erase(gid);<\/div>$/;"	a
l00236	html/stats_8h_source.html	/^<div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;            __sync_fetch_and_add(&amp;_count, delta);<\/div>$/;"	a
l00236	html/timing__event_8h_source.html	/^<div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;                <a class="code" href="structTimingEventBlock.html">TimingEventBlock<\/a>* curBlock = children;<\/div>$/;"	a
l00237	html/barrier_8h_source.html	/^<div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;<\/div>$/;"	a
l00237	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;<\/div>$/;"	a
l00237	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;        PAD();<\/div>$/;"	a
l00237	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;};<\/div>$/;"	a
l00237	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;<\/div>$/;"	a
l00237	html/mtrand_8h_source.html	/^<div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;    <span class="keyword">register<\/span> uint64_t j = 0;<\/div>$/;"	a
l00237	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;                    schedCycle = curCycle + (nextWinPos + H - curPos);<\/div>$/;"	a
l00237	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00237	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;                candArray[candIdx++] = id;<\/div>$/;"	a
l00237	html/scheduler_8h_source.html	/^<div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;<\/div>$/;"	a
l00237	html/stats_8h_source.html	/^<div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;        }<\/div>$/;"	a
l00237	html/timing__event_8h_source.html	/^<div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;                uint32_t visitedChildren = 0;<\/div>$/;"	a
l00238	html/barrier_8h_source.html	/^<div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;                <span class="comment">\/\/NOTE: If this is a performance hog, the algorithm can be rewritten to be top-down and threads can be woken up as soon as they are reordered. So far, I&#39;ve seen this has negligible overheads though.<\/span><\/div>$/;"	a
l00238	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;        <span class="comment">\/* Replacement policy query interface *\/<\/span><\/div>$/;"	a
l00238	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profReads, profWrites;<\/div>$/;"	a
l00238	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;<\/div>$/;"	a
l00238	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;        <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> C&gt; uint32_t rank(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, C cands) {panic(<span class="stringliteral">&quot;!!&quot;<\/span>);}<\/div>$/;"	a
l00238	html/mtrand_8h_source.html	/^<div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;    <span class="keyword">register<\/span> <span class="keywordtype">int<\/span> k = (N &gt; seedLength ? N : seedLength);<\/div>$/;"	a
l00238	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;                    UBWinIterator it = ubWin.lower_bound(schedCycle);<\/div>$/;"	a
l00238	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;<span class="comment">\/* Vantage replacement policy. Please refer to our ISCA 2011 paper for implementation details.<\/span><\/div>$/;"	a
l00238	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;            }<\/div>$/;"	a
l00238	html/scheduler_8h_source.html	/^<div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;            <span class="comment">\/\/ Check for suppressed syscall leave(), execute it<\/span><\/div>$/;"	a
l00238	html/stats_8h_source.html	/^<div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;<\/div>$/;"	a
l00238	html/timing__event_8h_source.html	/^<div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;                <span class="keywordflow">while<\/span> (curBlock) {<\/div>$/;"	a
l00239	html/barrier_8h_source.html	/^<div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;                <span class="keywordflow">if<\/span> (parallelThreads &lt; runListSize) {<\/div>$/;"	a
l00239	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t numSharers(uint32_t lineId) {<\/div>$/;"	a
l00239	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> bytesReads, bytesWrites;<\/div>$/;"	a
l00239	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;<span class="comment">\/\/ DRAM controller base class<\/span><\/div>$/;"	a
l00239	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;        DECL_RANK_BINDINGS;<\/div>$/;"	a
l00239	html/mtrand_8h_source.html	/^<div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;    <span class="keywordflow">for<\/span> (; k; --k) {<\/div>$/;"	a
l00239	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;                    <span class="keywordflow">while<\/span> (<span class="keyword">true<\/span>) {<\/div>$/;"	a
l00239	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00239	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;        }<\/div>$/;"	a
l00239	html/scheduler_8h_source.html	/^<div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;            <span class="keywordflow">if<\/span> (th-&gt;fakeLeave) {<\/div>$/;"	a
l00239	html/stats_8h_source.html	/^<div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> atomicInc() {<\/div>$/;"	a
l00239	html/timing__event_8h_source.html	/^<div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;                    <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; TIMING_BLOCK_EVENTS; i++) {<\/div>$/;"	a
l00240	html/barrier_8h_source.html	/^<div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;                    <span class="comment">\/\/Randomly shuffle thread list to avoid systemic biases and reduce contention on cache hierarchy (Fisher-Yates shuffle)<\/span><\/div>$/;"	a
l00240	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;            <span class="keywordflow">return<\/span> array[lineId].numSharers;<\/div>$/;"	a
l00240	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profTotalRdLat, profTotalWrLat;<\/div>$/;"	a
l00240	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00240"><\/a><span class="lineno"><a class="line" href="classMemControllerBase.html">  240<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMemControllerBase.html">MemControllerBase<\/a> : <span class="keyword">public<\/span> <a class="code" href="classMemObject.html">MemObject<\/a> {<\/div>$/;"	a
l00240	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;};<\/div>$/;"	a
l00240	html/mtrand_8h_source.html	/^<div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;        state[i] =<\/div>$/;"	a
l00240	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;                        <span class="keywordflow">if<\/span> (it == ubWin.end()) {<\/div>$/;"	a
l00240	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00240"><\/a><span class="lineno"><a class="line" href="classVantageReplPolicy.html">  240<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classVantageReplPolicy.html">VantageReplPolicy<\/a> : <span class="keyword">public<\/span> <a class="code" href="classPartReplPolicy.html">PartReplPolicy<\/a>, <span class="keyword">public<\/span> <a class="code" href="classLegacyReplPolicy.html">LegacyReplPolicy<\/a> {<\/div>$/;"	a
l00240	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;<\/div>$/;"	a
l00240	html/scheduler_8h_source.html	/^<div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;                finishFakeLeave(th);<\/div>$/;"	a
l00240	html/stats_8h_source.html	/^<div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;            __sync_fetch_and_add(&amp;_count, 1);<\/div>$/;"	a
l00240	html/timing__event_8h_source.html	/^<div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;                        <span class="comment">\/\/info(&quot;visit %p i %d %p&quot;, this, i, curBlock-&gt;events[i]);<\/span><\/div>$/;"	a
l00241	html/barrier_8h_source.html	/^<div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;                    <span class="keywordflow">for<\/span> (uint32_t i = runListSize-1; i &gt; 0; i--) {<\/div>$/;"	a
l00241	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;        }<\/div>$/;"	a
l00241	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profReadHits, profWriteHits;  <span class="comment">\/\/ row buffer hits<\/span><\/div>$/;"	a
l00241	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00241	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;<\/div>$/;"	a
l00241	html/mtrand_8h_source.html	/^<div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;            state[i] ^ ((state[i-1] ^ (state[i-1] &gt;&gt; 30)) * 1664525UL);<\/div>$/;"	a
l00241	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;                            WinCycle wc = {0, 0};<\/div>$/;"	a
l00241	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00241	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;        uint32_t getBestCandidate() {<\/div>$/;"	a
l00241	html/scheduler_8h_source.html	/^<div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;                futex_unlock(&amp;schedLock);<\/div>$/;"	a
l00241	html/stats_8h_source.html	/^<div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;        }<\/div>$/;"	a
l00241	html/timing__event_8h_source.html	/^<div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;                        <span class="keywordflow">if<\/span> (!curBlock-&gt;events[i]) {<span class="keywordflow">break<\/span>;}<\/div>$/;"	a
l00242	html/barrier_8h_source.html	/^<div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;                        uint32_t j = rnd.randInt(i); <span class="comment">\/\/j is in {0,...,i}<\/span><\/div>$/;"	a
l00242	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;<\/div>$/;"	a
l00242	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;        <a class="code" href="classVectorCounter.html">VectorCounter<\/a> latencyHist;<\/div>$/;"	a
l00242	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;        g_string name;<\/div>$/;"	a
l00242	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00242"><\/a><span class="lineno"><a class="line" href="classIdealLRUPartArray.html">  242<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classIdealLRUPartArray.html">IdealLRUPartArray<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCacheArray.html">CacheArray<\/a> {<\/div>$/;"	a
l00242	html/mtrand_8h_source.html	/^<div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;        state[i] += (bigSeed[j] &amp; 0xffffffffUL) + j;<\/div>$/;"	a
l00242	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;                            <span class="keywordtype">bool<\/span> success = trySchedule&lt;touchOccupancy, recordPort&gt;(wc, portMask);<\/div>$/;"	a
l00242	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;        <span class="comment">\/* NOTE: This implementation uses 64-bit coarse-grain TSs for simplicity. You have a choice of constraining<\/span><\/div>$/;"	a
l00242	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;            assert(candIdx &gt; 0);<\/div>$/;"	a
l00242	html/scheduler_8h_source.html	/^<div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;                leave(pid, tid, th-&gt;cid);<\/div>$/;"	a
l00242	html/stats_8h_source.html	/^<div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;<\/div>$/;"	a
l00242	html/timing__event_8h_source.html	/^<div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;                        <span class="comment">\/\/info(&quot;visit %p i %d %p PASS&quot;, this, i, curBlock-&gt;events[i]);<\/span><\/div>$/;"	a
l00243	html/barrier_8h_source.html	/^<div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;                        uint32_t itid = runList[i];<\/div>$/;"	a
l00243	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00243	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;        <span class="keyword">static<\/span> <span class="keyword">const<\/span> uint32_t BINSIZE = 10, NUMBINS = 100;<\/div>$/;"	a
l00243	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;        uint32_t domain;<\/div>$/;"	a
l00243	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00243	html/mtrand_8h_source.html	/^<div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;        state[i] &amp;= 0xffffffffUL;<\/div>$/;"	a
l00243	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;                            assert(success);<\/div>$/;"	a
l00243	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;<span class="comment">         * these to work 8-bit timestamps by setting VANTAGE_8BIT_BTS to 1. Note that this code still has remnants of<\/span><\/div>$/;"	a
l00243	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;            <span class="keywordflow">return<\/span> candArray[youngLines % candIdx]; <span class="comment">\/\/ youngLines used to sort-of-randomize<\/span><\/div>$/;"	a
l00243	html/scheduler_8h_source.html	/^<div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;                futex_lock(&amp;schedLock);<\/div>$/;"	a
l00243	html/stats_8h_source.html	/^<div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;        uint64_t <span class="keyword">get<\/span>() <span class="keyword">const<\/span> {<\/div>$/;"	a
l00243	html/timing__event_8h_source.html	/^<div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;                        f(&amp;(curBlock-&gt;events[i]));<\/div>$/;"	a
l00244	html/barrier_8h_source.html	/^<div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;                        uint32_t jtid = runList[j];<\/div>$/;"	a
l00244	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;        uint64_t sendInvalidates(Address lineAddr, uint32_t lineId, InvType type, <span class="keywordtype">bool<\/span>* reqWriteback, uint64_t cycle, uint32_t srcId);<\/div>$/;"	a
l00244	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;        PAD();<\/div>$/;"	a
l00244	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;        uint32_t cacheLineSize;<\/div>$/;"	a
l00244	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;        g_unordered_map&lt;Address, uint32_t&gt; lineMap; <span class="comment">\/\/address-&gt;lineId; if too slow, try an AATree, which does not alloc dynamically<\/span><\/div>$/;"	a
l00244	html/mtrand_8h_source.html	/^<div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;        ++i;  ++j;<\/div>$/;"	a
l00244	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;                            ubWin.insert(std::pair&lt;uint64_t, WinCycle&gt;(schedCycle, wc));<\/div>$/;"	a
l00244	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;<span class="comment">         * the 64-bit global fine-grain timestamps used to simulate perfect LRU. They are not using for anything but profiling.<\/span><\/div>$/;"	a
l00244	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;        }<\/div>$/;"	a
l00244	html/scheduler_8h_source.html	/^<div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;            }<\/div>$/;"	a
l00244	html/stats_8h_source.html	/^<div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;            <span class="keywordflow">return<\/span> _count;<\/div>$/;"	a
l00244	html/timing__event_8h_source.html	/^<div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;                        visitedChildren++;<\/div>$/;"	a
l00245	html/barrier_8h_source.html	/^<div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;<\/div>$/;"	a
l00245	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;};<\/div>$/;"	a
l00245	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;<\/div>$/;"	a
l00245	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;<\/div>$/;"	a
l00245	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;        Address* lineAddrs; <span class="comment">\/\/lineId -&gt; address, for replacements<\/span><\/div>$/;"	a
l00245	html/mtrand_8h_source.html	/^<div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;        <span class="keywordflow">if<\/span> (i &gt;= N) { state[0] = state[N-1];  i = 1; }<\/div>$/;"	a
l00245	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;                        } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (it-&gt;first != schedCycle) {<\/div>$/;"	a
l00245	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;<span class="comment">         *\/<\/span><\/div>$/;"	a
l00245	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;<\/div>$/;"	a
l00245	html/scheduler_8h_source.html	/^<div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;<\/div>$/;"	a
l00245	html/stats_8h_source.html	/^<div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;        }<\/div>$/;"	a
l00245	html/timing__event_8h_source.html	/^<div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;                    }<\/div>$/;"	a
l00246	html/barrier_8h_source.html	/^<div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;                        runList[i] = jtid;<\/div>$/;"	a
l00246	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;<\/div>$/;"	a
l00246	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;        <span class="comment">\/\/In KHz, though it does not matter so long as they are consistent and fine-grain enough (not Hz because we multiply<\/span><\/div>$/;"	a
l00246	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;        <a class="code" href="classMemParam.html">MemParam<\/a>* mParam;<\/div>$/;"	a
l00246	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;        <a class="code" href="classIdealLRUPartReplPolicy.html">IdealLRUPartReplPolicy<\/a>* rp;<\/div>$/;"	a
l00246	html/mtrand_8h_source.html	/^<div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;        <span class="keywordflow">if<\/span> (j &gt;= seedLength) j = 0;<\/div>$/;"	a
l00246	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;                            WinCycle wc = {0, 0};<\/div>$/;"	a
l00246	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;        uint32_t partitions;<\/div>$/;"	a
l00246	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;        <span class="keywordtype">void<\/span> replaced(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00246	html/scheduler_8h_source.html	/^<div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;            <span class="comment">\/\/dsm: Added this check; the normal sequence is leave, finish, but with fastFwd you never know<\/span><\/div>$/;"	a
l00246	html/stats_8h_source.html	/^<div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;<\/div>$/;"	a
l00246	html/timing__event_8h_source.html	/^<div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;                    curBlock = curBlock-&gt;next;<\/div>$/;"	a
l00247	html/barrier_8h_source.html	/^<div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;                        runList[j] = itid;<\/div>$/;"	a
l00247	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;<span class="keyword">static<\/span> <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> CheckForMESIRace(AccessType&amp; type, MESIState* state, MESIState initialState) {<\/div>$/;"	a
l00247	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;        <span class="comment">\/\/uint64_t cycles by this; as it is, KHzs are 20 bits, so we can simulate ~40+ bits (a few trillion system cycles, around an hour))<\/span><\/div>$/;"	a
l00247	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector &lt;MemChannelBase*&gt;<\/a> chnls;<\/div>$/;"	a
l00247	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00247	html/mtrand_8h_source.html	/^<div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;    }<\/div>$/;"	a
l00247	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;                            <span class="keywordtype">bool<\/span> success = trySchedule&lt;touchOccupancy, recordPort&gt;(wc, portMask);<\/div>$/;"	a
l00247	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;        uint32_t totalSize;<\/div>$/;"	a
l00247	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;            <span class="comment">\/\/info(&quot;repl %d val %d cands %d&quot;, id, array[id], candIdx);<\/span><\/div>$/;"	a
l00247	html/scheduler_8h_source.html	/^<div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;            <span class="keywordflow">if<\/span> (th-&gt;state == RUNNING) {<\/div>$/;"	a
l00247	html/stats_8h_source.html	/^<div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> set(uint64_t data) {<\/div>$/;"	a
l00247	html/timing__event_8h_source.html	/^<div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;                }<\/div>$/;"	a
l00248	html/barrier_8h_source.html	/^<div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;<\/div>$/;"	a
l00248	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;    <span class="comment">\/\/NOTE: THIS IS THE ONLY CODE THAT SHOULD DEAL WITH RACES. tcc, bcc et al should be written as if they were race-free.<\/span><\/div>$/;"	a
l00248	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;        uint64_t sysFreqKHz, memFreqKHz;<\/div>$/;"	a
l00248	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector &lt;MemSchedulerBase*&gt;<\/a> sches;<\/div>$/;"	a
l00248	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;<\/div>$/;"	a
l00248	html/mtrand_8h_source.html	/^<div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;    <span class="keywordflow">for<\/span> (k = N - 1; k; --k) {<\/div>$/;"	a
l00248	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;                            assert(success);<\/div>$/;"	a
l00248	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;        uint32_t assoc;<\/div>$/;"	a
l00248	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;            candVal = (1&lt;&lt;20);<\/div>$/;"	a
l00248	html/scheduler_8h_source.html	/^<div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;                warn(<span class="stringliteral">&quot;RUNNING thread %d (cid %d) called finish(), trying leave() first&quot;<\/span>, tid, th-&gt;cid);<\/div>$/;"	a
l00248	html/stats_8h_source.html	/^<div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;            _count = data;<\/div>$/;"	a
l00248	html/timing__event_8h_source.html	/^<div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;                <span class="comment">\/\/info(&quot;visit %p multi done&quot;, this);<\/span><\/div>$/;"	a
l00249	html/barrier_8h_source.html	/^<div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;                        threadList[itid].lastIdx = j;<\/div>$/;"	a
l00249	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;    <span class="keywordtype">bool<\/span> skipAccess = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00249	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;<\/div>$/;"	a
l00249	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;        lock_t updateLock;<\/div>$/;"	a
l00249	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00249	html/mtrand_8h_source.html	/^<div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;        state[i] =<\/div>$/;"	a
l00249	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;                            ubWin.insert(it <span class="comment">\/*hint, makes insert faster*\/<\/span>, std::pair&lt;uint64_t, WinCycle&gt;(schedCycle, wc));<\/div>$/;"	a
l00249	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;<\/div>$/;"	a
l00249	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;            candIdx = 0;<\/div>$/;"	a
l00249	html/scheduler_8h_source.html	/^<div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;                futex_unlock(&amp;schedLock); <span class="comment">\/\/FIXME: May be racey...<\/span><\/div>$/;"	a
l00249	html/stats_8h_source.html	/^<div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;        }<\/div>$/;"	a
l00249	html/timing__event_8h_source.html	/^<div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;                assert(visitedChildren == numChildren);<\/div>$/;"	a
l00250	html/barrier_8h_source.html	/^<div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;                        threadList[jtid].lastIdx = i;<\/div>$/;"	a
l00250	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;    <span class="keywordflow">if<\/span> (*state != initialState) {<\/div>$/;"	a
l00250	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;        <span class="comment">\/\/ sys&lt;-&gt;mem cycle xlat functions. We get and must return system cycles, but all internal logic is in memory cycles<\/span><\/div>$/;"	a
l00250	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;<\/div>$/;"	a
l00250	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;        <a class="code" href="classIdealLRUPartArray.html">IdealLRUPartArray<\/a>(uint32_t _numLines, <a class="code" href="classIdealLRUPartReplPolicy.html">IdealLRUPartReplPolicy<\/a>* _rp) : rp(_rp), numLines(_numLines) {<\/div>$/;"	a
l00250	html/mtrand_8h_source.html	/^<div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;            state[i] ^ ((state[i-1] ^ (state[i-1] &gt;&gt; 30)) * 1566083941UL);<\/div>$/;"	a
l00250	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;                        } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00250	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;        <span class="keyword">struct <\/span>VantagePartInfo : <span class="keyword">public<\/span> <a class="code" href="structPartInfo.html">PartInfo<\/a> {<\/div>$/;"	a
l00250	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;            array[id] = 0;<\/div>$/;"	a
l00250	html/scheduler_8h_source.html	/^<div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;                leave(pid, tid, th-&gt;cid);<\/div>$/;"	a
l00250	html/stats_8h_source.html	/^<div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;};<\/div>$/;"	a
l00250	html/timing__event_8h_source.html	/^<div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;            }<\/div>$/;"	a
l00251	html/barrier_8h_source.html	/^<div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;                    }<\/div>$/;"	a
l00251	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;        <span class="comment">\/\/info(&quot;[%s] Race on line 0x%lx, %s by childId %d, was state %s, now %s&quot;, name.c_str(), lineAddr, accessTypeNames[type], childId, mesiStateNames[initialState], mesiStateNames[*state]);<\/span><\/div>$/;"	a
l00251	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;        <span class="comment">\/\/ will do the right thing so long as you multiply first<\/span><\/div>$/;"	a
l00251	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;        uint64_t sysFreqKHz;<\/div>$/;"	a
l00251	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;            lineAddrs = gm_calloc&lt;Address&gt;(numLines);<\/div>$/;"	a
l00251	html/mtrand_8h_source.html	/^<div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;        state[i] -= i;<\/div>$/;"	a
l00251	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;                            <span class="keywordflow">if<\/span> (!trySchedule&lt;touchOccupancy, recordPort&gt;(it-&gt;second, portMask)) {<\/div>$/;"	a
l00251	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;            uint64_t curBts; <span class="comment">\/\/per-partition coarse-grain timestamp (CurrentTS in paper)<\/span><\/div>$/;"	a
l00251	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;        }<\/div>$/;"	a
l00251	html/scheduler_8h_source.html	/^<div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;                futex_lock(&amp;schedLock);<\/div>$/;"	a
l00251	html/stats_8h_source.html	/^<div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;<\/div>$/;"	a
l00251	html/timing__event_8h_source.html	/^<div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;        }<\/div>$/;"	a
l00252	html/barrier_8h_source.html	/^<div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;                }<\/div>$/;"	a
l00252	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;        <span class="comment">\/\/An intervening invalidate happened! Two types of races:<\/span><\/div>$/;"	a
l00252	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t sysToMemCycle(uint64_t sysCycle) { <span class="keywordflow">return<\/span> sysCycle*memFreqKHz\/sysFreqKHz+1; }<\/div>$/;"	a
l00252	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;        uint64_t memFreqKHz;<\/div>$/;"	a
l00252	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;        }<\/div>$/;"	a
l00252	html/mtrand_8h_source.html	/^<div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;        state[i] &amp;= 0xffffffffUL;<\/div>$/;"	a
l00252	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;                                <span class="comment">\/\/ Try next cycle<\/span><\/div>$/;"	a
l00252	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;            uint32_t curBtsHits; <span class="comment">\/\/hits on current timestamp (AccessCounter in paper)<\/span><\/div>$/;"	a
l00252	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;};<\/div>$/;"	a
l00252	html/scheduler_8h_source.html	/^<div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;            }<\/div>$/;"	a
l00252	html/stats_8h_source.html	/^<div class="line"><a name="l00252"><\/a><span class="lineno"><a class="line" href="classVectorCounter.html">  252<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classVectorCounter.html">VectorCounter<\/a> : <span class="keyword">public<\/span> <a class="code" href="classVectorStat.html">VectorStat<\/a> {<\/div>$/;"	a
l00252	html/timing__event_8h_source.html	/^<div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;<\/div>$/;"	a
l00253	html/barrier_8h_source.html	/^<div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;            }<\/div>$/;"	a
l00253	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;        <span class="keywordflow">if<\/span> (type == PUTS || type == PUTX) { <span class="comment">\/\/either it is a PUT...<\/span><\/div>$/;"	a
l00253	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t memToSysCycle(uint64_t memCycle) { <span class="keywordflow">return<\/span> (memCycle+1)*sysFreqKHz\/memFreqKHz; }<\/div>$/;"	a
l00253	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<\/div>$/;"	a
l00253	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<\/div>$/;"	a
l00253	html/mtrand_8h_source.html	/^<div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;        ++i;<\/div>$/;"	a
l00253	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;                                it++;<\/div>$/;"	a
l00253	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<\/div>$/;"	a
l00253	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<\/div>$/;"	a
l00253	html/scheduler_8h_source.html	/^<div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<\/div>$/;"	a
l00253	html/stats_8h_source.html	/^<div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00253	html/timing__event_8h_source.html	/^<div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;        <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* handleCrossing(<a class="code" href="classTimingEvent.html">TimingEvent<\/a>* child, <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* evRec, <span class="keywordtype">bool<\/span> unlinkChild);<\/div>$/;"	a
l00254	html/barrier_8h_source.html	/^<div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;        }<\/div>$/;"	a
l00254	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;            <span class="comment">\/\/We want to get rid of this line<\/span><\/div>$/;"	a
l00254	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<\/div>$/;"	a
l00254	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;        uint64_t lastPhaseCycle;<\/div>$/;"	a
l00254	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;        int32_t lookup(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, <span class="keywordtype">bool<\/span> updateReplacement) {<\/div>$/;"	a
l00254	html/mtrand_8h_source.html	/^<div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;        <span class="keywordflow">if<\/span> (i &gt;= N) { state[0] = state[N-1];  i = 1; }<\/div>$/;"	a
l00254	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;                                schedCycle++;<\/div>$/;"	a
l00254	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;            uint64_t setpointBts; <span class="comment">\/\/ setpoint coarse-grain timestamp (SetpointTS in paper)<\/span><\/div>$/;"	a
l00254	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00254"><\/a><span class="lineno"><a class="line" href="classRandReplPolicy.html">  254<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classRandReplPolicy.html">RandReplPolicy<\/a> : <span class="keyword">public<\/span> <a class="code" href="classLegacyReplPolicy.html">LegacyReplPolicy<\/a> {<\/div>$/;"	a
l00254	html/scheduler_8h_source.html	/^<div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;            assert_msg(th-&gt;state == STARTED <span class="comment">\/*might be started but in fastFwd*\/<\/span> ||th-&gt;state == OUT || th-&gt;state == BLOCKED || th-&gt;state == QUEUED, <span class="stringliteral">&quot;gid %d finish with state %d&quot;<\/span>, gid, th-&gt;state);<\/div>$/;"	a
l00254	html/stats_8h_source.html	/^<div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt;uint64_t&gt;<\/a> _counters;<\/div>$/;"	a
l00254	html/timing__event_8h_source.html	/^<div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<\/div>$/;"	a
l00255	html/barrier_8h_source.html	/^<div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<\/div>$/;"	a
l00255	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;            <span class="keywordflow">if<\/span> (*state == I) {<\/div>$/;"	a
l00255	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;        <span class="comment">\/\/ Produces a sysCycle that, when translated back using sysToMemCycle, will produce the same memCycle<\/span><\/div>$/;"	a
l00255	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;        uint64_t lastAccessedCycle;<\/div>$/;"	a
l00255	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;            g_unordered_map&lt;Address, uint32_t&gt;::iterator it = lineMap.find(lineAddr);<\/div>$/;"	a
l00255	html/mtrand_8h_source.html	/^<div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;    }<\/div>$/;"	a
l00255	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;                                <span class="keywordflow">continue<\/span>;<\/div>$/;"	a
l00255	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;            uint64_t setpointAdjs; <span class="comment">\/\/ setpoint adjustments so far, just for profiling purposes<\/span><\/div>$/;"	a
l00255	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00255	html/scheduler_8h_source.html	/^<div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;            <span class="keywordflow">if<\/span> (th-&gt;state == QUEUED) {<\/div>$/;"	a
l00255	html/stats_8h_source.html	/^<div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<\/div>$/;"	a
l00255	html/timing__event_8h_source.html	/^<div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;        <span class="keywordtype">void<\/span> checkDomain(<a class="code" href="classTimingEvent.html">TimingEvent<\/a>* ch);<\/div>$/;"	a
l00256	html/barrier_8h_source.html	/^<div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> checkRunList(uint32_t tid) {<\/div>$/;"	a
l00256	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;                <span class="comment">\/\/If it was already invalidated (INV), just skip access altogether, we&#39;re already done<\/span><\/div>$/;"	a
l00256	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;        <span class="comment">\/\/ Requires memFreq &lt; sysFreq\/2<\/span><\/div>$/;"	a
l00256	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;        uint64_t nextSysTick;<\/div>$/;"	a
l00256	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;            <span class="keywordflow">if<\/span> (it == lineMap.end()) <span class="keywordflow">return<\/span> -1;<\/div>$/;"	a
l00256	html/mtrand_8h_source.html	/^<div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;    state[0] = 0x80000000UL;  <span class="comment">\/\/ MSB is 1, assuring non-zero initial array<\/span><\/div>$/;"	a
l00256	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;                            }  <span class="comment">\/\/ else scheduled correctly<\/span><\/div>$/;"	a
l00256	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;<\/div>$/;"	a
l00256	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;        <span class="comment">\/\/read-only<\/span><\/div>$/;"	a
l00256	html/scheduler_8h_source.html	/^<div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;                assert(th-&gt;owner == &amp;runQueue);<\/div>$/;"	a
l00256	html/stats_8h_source.html	/^<div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00256	html/timing__event_8h_source.html	/^<div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;<\/div>$/;"	a
l00257	html/barrier_8h_source.html	/^<div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;            <span class="keywordflow">while<\/span> (runningThreads &lt; parallelThreads &amp;&amp; curThreadIdx &lt; runListSize) {<\/div>$/;"	a
l00257	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;                skipAccess = <span class="keyword">true<\/span>;<\/div>$/;"	a
l00257	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t matchingMemToSysCycle(uint64_t memCycle) {<\/div>$/;"	a
l00257	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;        uint64_t reportPeriodCycle;<\/div>$/;"	a
l00257	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;<\/div>$/;"	a
l00257	html/mtrand_8h_source.html	/^<div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;    reload();<\/div>$/;"	a
l00257	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;                        }<\/div>$/;"	a
l00257	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;            uint32_t curIntervalIns; <span class="comment">\/\/ insertions in current interval. Not currently used.<\/span><\/div>$/;"	a
l00257	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;        uint32_t* candArray;<\/div>$/;"	a
l00257	html/scheduler_8h_source.html	/^<div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;                runQueue.remove(th);<\/div>$/;"	a
l00257	html/stats_8h_source.html	/^<div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;        <a class="code" href="classVectorCounter.html">VectorCounter<\/a>() : <a class="code" href="classVectorStat.html">VectorStat<\/a>() {}<\/div>$/;"	a
l00257	html/timing__event_8h_source.html	/^<div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;        <span class="keywordtype">void<\/span> freeEvent() {<\/div>$/;"	a
l00258	html/barrier_8h_source.html	/^<div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;                <span class="comment">\/\/Wake next thread<\/span><\/div>$/;"	a
l00258	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00258	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;            <span class="comment">\/\/ The -sysFreqKHz\/memFreqKHz\/2 cancels the +1 in sysToMemCycle in integer arithmetic --- you can prove this with inequalities<\/span><\/div>$/;"	a
l00258	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;<\/div>$/;"	a
l00258	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;            uint32_t lineId = it-&gt;second;<\/div>$/;"	a
l00258	html/mtrand_8h_source.html	/^<div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;}<\/div>$/;"	a
l00258	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;                        <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00258	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;            uint32_t curIntervalDems; <span class="comment">\/\/ CandsDemoted in paper<\/span><\/div>$/;"	a
l00258	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;        uint32_t numCands;<\/div>$/;"	a
l00258	html/scheduler_8h_source.html	/^<div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;            } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (th-&gt;owner) {<\/div>$/;"	a
l00258	html/stats_8h_source.html	/^<div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;<\/div>$/;"	a
l00258	html/timing__event_8h_source.html	/^<div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;            <span class="comment">\/\/ Free timing event blocks and ourselves<\/span><\/div>$/;"	a
l00259	html/barrier_8h_source.html	/^<div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;                uint32_t idx = curThreadIdx++;<\/div>$/;"	a
l00259	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;                <span class="comment">\/\/We were downgraded (INVX), still need to do the PUT<\/span><\/div>$/;"	a
l00259	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;            <span class="keywordflow">return<\/span> (2*memCycle-1)*sysFreqKHz\/memFreqKHz\/2;<\/div>$/;"	a
l00259	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;        <span class="comment">\/\/ latency<\/span><\/div>$/;"	a
l00259	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;            <span class="keywordflow">if<\/span> (updateReplacement) {<\/div>$/;"	a
l00259	html/mtrand_8h_source.html	/^<div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;<\/div>$/;"	a
l00259	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;                    }<\/div>$/;"	a
l00259	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;            uint32_t curIntervalCands; <span class="comment">\/\/ CandsSeen in paper<\/span><\/div>$/;"	a
l00259	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;<\/div>$/;"	a
l00259	html/scheduler_8h_source.html	/^<div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;                assert(th-&gt;owner == &amp;outQueue);<\/div>$/;"	a
l00259	html/stats_8h_source.html	/^<div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;        <span class="comment">\/* Without counter names *\/<\/span><\/div>$/;"	a
l00259	html/timing__event_8h_source.html	/^<div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;            <span class="keywordflow">if<\/span> (numChildren &gt; 1) {<\/div>$/;"	a
l00260	html/barrier_8h_source.html	/^<div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;                uint32_t wtid = runList[idx];<\/div>$/;"	a
l00260	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;                assert(*state == S);<\/div>$/;"	a
l00260	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;        }<\/div>$/;"	a
l00260	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;        uint32_t minLatency[NUM_ACCESS_TYPES];<\/div>$/;"	a
l00260	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;                rp-&gt;update(lineId, req);<\/div>$/;"	a
l00260	html/mtrand_8h_source.html	/^<div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> MTRand::seed() {<\/div>$/;"	a
l00260	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;                    <span class="comment">\/\/ info(&quot;Scheduled event in unbounded window, cycle %ld&quot;, schedCycle);<\/span><\/div>$/;"	a
l00260	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;<\/div>$/;"	a
l00260	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;        <span class="comment">\/\/read-write<\/span><\/div>$/;"	a
l00260	html/scheduler_8h_source.html	/^<div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;                outQueue.remove(th);<\/div>$/;"	a
l00260	html/stats_8h_source.html	/^<div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc, uint32_t size) {<\/div>$/;"	a
l00260	html/timing__event_8h_source.html	/^<div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;                <a class="code" href="structTimingEventBlock.html">TimingEventBlock<\/a>* teb = children;<\/div>$/;"	a
l00261	html/barrier_8h_source.html	/^<div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;                <span class="keywordflow">if<\/span> (threadList[wtid].state == WAITING) {<\/div>$/;"	a
l00261	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;                <span class="comment">\/\/If we wanted to do a PUTX, just change it to a PUTS b\/c now the line is not exclusive anymore<\/span><\/div>$/;"	a
l00261	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;<\/div>$/;"	a
l00261	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;        uint32_t preDelay[NUM_ACCESS_TYPES];<\/div>$/;"	a
l00261	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;            }<\/div>$/;"	a
l00261	html/mtrand_8h_source.html	/^<div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;    <span class="comment">\/\/ Seed the generator with an array from \/dev\/urandom if available<\/span><\/div>$/;"	a
l00261	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;                }<\/div>$/;"	a
l00261	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;            uint64_t extendedSize;<\/div>$/;"	a
l00261	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;        <a class="code" href="classMTRand.html">MTRand<\/a> rnd;<\/div>$/;"	a
l00261	html/scheduler_8h_source.html	/^<div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;                ContextInfo* ctx = &amp;contexts[th-&gt;cid];<\/div>$/;"	a
l00261	html/stats_8h_source.html	/^<div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;            initStat(name, desc);<\/div>$/;"	a
l00261	html/timing__event_8h_source.html	/^<div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;                <span class="keywordflow">while<\/span> (teb) {<\/div>$/;"	a
l00262	html/barrier_8h_source.html	/^<div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;                    DEBUG_BARRIER(<span class="stringliteral">&quot;[%d] Waking %d runningThreads %d&quot;<\/span>, tid, wtid, runningThreads);<\/div>$/;"	a
l00262	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;                <span class="keywordflow">if<\/span> (type == PUTX) type = PUTS;<\/div>$/;"	a
l00262	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00262	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;        uint32_t postDelay[NUM_ACCESS_TYPES];<\/div>$/;"	a
l00262	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;            <span class="keywordflow">return<\/span> lineId;<\/div>$/;"	a
l00262	html/mtrand_8h_source.html	/^<div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;    <span class="comment">\/\/ Otherwise use a hash of time() and clock() values<\/span><\/div>$/;"	a
l00262	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;            }<\/div>$/;"	a
l00262	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;<\/div>$/;"	a
l00262	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;        uint32_t candVal;<\/div>$/;"	a
l00262	html/scheduler_8h_source.html	/^<div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;                deschedule(th, ctx, BLOCKED);<\/div>$/;"	a
l00262	html/stats_8h_source.html	/^<div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;            assert(size &gt; 0);<\/div>$/;"	a
l00262	html/timing__event_8h_source.html	/^<div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;                    <a class="code" href="structTimingEventBlock.html">TimingEventBlock<\/a>* next = teb-&gt;next;<\/div>$/;"	a
l00263	html/barrier_8h_source.html	/^<div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;                    threadList[wtid].state = RUNNING; <span class="comment">\/\/must be set before writing to futexWord to avoid wakeup race<\/span><\/div>$/;"	a
l00263	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;            }<\/div>$/;"	a
l00263	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;        <a class="code" href="classDDRMemory.html">DDRMemory<\/a>(uint32_t _lineSize, uint32_t _colSize, uint32_t _ranksPerChannel, uint32_t _banksPerRank,<\/div>$/;"	a
l00263	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;        uint32_t memMinLatency[NUM_ACCESS_TYPES];<\/div>$/;"	a
l00263	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;        }<\/div>$/;"	a
l00263	html/mtrand_8h_source.html	/^<div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;<\/div>$/;"	a
l00263	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;            <span class="keywordflow">if<\/span> (touchOccupancy) occupancy++;<\/div>$/;"	a
l00263	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;            uint64_t longTermTargetSize; <span class="comment">\/\/in lines<\/span><\/div>$/;"	a
l00263	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;        uint32_t candIdx;<\/div>$/;"	a
l00263	html/scheduler_8h_source.html	/^<div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;                freeList.push_back(ctx);<\/div>$/;"	a
l00263	html/stats_8h_source.html	/^<div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;            _counters.resize(size);<\/div>$/;"	a
l00263	html/timing__event_8h_source.html	/^<div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;                    slab::freeElem((<span class="keywordtype">void<\/span>*)teb, <span class="keyword">sizeof<\/span>(teb));<\/div>$/;"	a
l00264	html/barrier_8h_source.html	/^<div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;                    threadList[wtid].lastIdx = idx;<\/div>$/;"	a
l00264	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;        } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (type == GETX) { <span class="comment">\/\/...or it is a GETX<\/span><\/div>$/;"	a
l00264	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;            uint32_t _sysFreqMHz, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* tech, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* addrMapping, uint32_t _controllerSysLatency,<\/div>$/;"	a
l00264	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<\/div>$/;"	a
l00264	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<\/div>$/;"	a
l00264	html/mtrand_8h_source.html	/^<div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;    <span class="comment">\/\/ First try getting an array from \/dev\/urandom<\/span><\/div>$/;"	a
l00264	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;        }<\/div>$/;"	a
l00264	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<\/div>$/;"	a
l00264	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<\/div>$/;"	a
l00264	html/scheduler_8h_source.html	/^<div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;                <span class="comment">\/\/no need to try to schedule anything; this context was already being considered while in outQueue<\/span><\/div>$/;"	a
l00264	html/stats_8h_source.html	/^<div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; size; i++) _counters[i] = 0;<\/div>$/;"	a
l00264	html/timing__event_8h_source.html	/^<div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;                    teb = next;<\/div>$/;"	a
l00265	html/barrier_8h_source.html	/^<div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;                    <span class="keywordtype">bool<\/span> succ = __sync_bool_compare_and_swap(&amp;threadList[wtid].futexWord, 1, 0);<\/div>$/;"	a
l00265	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;            <span class="comment">\/\/In this case, the line MUST have been in S and have been INValidated<\/span><\/div>$/;"	a
l00265	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;            uint32_t _queueDepth, uint32_t _rowHitLimit, <span class="keywordtype">bool<\/span> _deferredWrites, <span class="keywordtype">bool<\/span> _closedPage,<\/div>$/;"	a
l00265	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t ReturnChannel(Address addr);<\/div>$/;"	a
l00265	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;        uint32_t preinsert(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, Address* wbLineAddr) {<\/div>$/;"	a
l00265	html/mtrand_8h_source.html	/^<div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;    FILE* urandom = fopen(<span class="stringliteral">&quot;\/dev\/urandom&quot;<\/span>, <span class="stringliteral">&quot;rb&quot;<\/span>);<\/div>$/;"	a
l00265	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;<\/div>$/;"	a
l00265	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;            <a class="code" href="classCounter.html">Counter<\/a> profDemotions;<\/div>$/;"	a
l00265	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00265	html/scheduler_8h_source.html	/^<div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;                <span class="comment">\/\/assert(runQueue.empty()); need not be the case with masks<\/span><\/div>$/;"	a
l00265	html/stats_8h_source.html	/^<div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;            _counterNames = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00265	html/timing__event_8h_source.html	/^<div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;                }<\/div>$/;"	a
l00266	html/barrier_8h_source.html	/^<div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;                    <span class="keywordflow">if<\/span> (!succ) panic(<span class="stringliteral">&quot;Wakeup race in barrier?&quot;<\/span>);<\/div>$/;"	a
l00266	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;            assert(initialState == S);<\/div>$/;"	a
l00266	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;            uint32_t _domain, g_string&amp; _name, uint32_t _tBL = 4, <span class="keywordtype">double<\/span> time_scale = 1.0);<\/div>$/;"	a
l00266	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t LatencySimulate(Address lineAddr, uint64_t sysCycle, MemAccessType type);<\/div>$/;"	a
l00266	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;            uint32_t lineId = rp-&gt;rank(req);<\/div>$/;"	a
l00266	html/mtrand_8h_source.html	/^<div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;    <span class="keywordflow">if<\/span> (urandom) {<\/div>$/;"	a
l00266	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;        <span class="keyword">template<\/span> &lt;<span class="keywordtype">bool<\/span> touchOccupancy, <span class="keywordtype">bool<\/span> recordPort&gt;<\/div>$/;"	a
l00266	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;            <a class="code" href="classCounter.html">Counter<\/a> profEvictions;<\/div>$/;"	a
l00266	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classRandReplPolicy.html">RandReplPolicy<\/a>(uint32_t _numCands) : numCands(_numCands), rnd(0x23A5F + (uint64_t)<span class="keyword">this<\/span>), candIdx(0) {<\/div>$/;"	a
l00266	html/scheduler_8h_source.html	/^<div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;                <span class="comment">\/\/info(&quot;[G %d] Removed from outQueue and descheduled&quot;, gid);<\/span><\/div>$/;"	a
l00266	html/stats_8h_source.html	/^<div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;        }<\/div>$/;"	a
l00266	html/timing__event_8h_source.html	/^<div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;                children = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00267	html/barrier_8h_source.html	/^<div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;                    syscall(SYS_futex, &amp;threadList[wtid].futexWord, FUTEX_WAKE, 1, <span class="keyword">nullptr<\/span>, <span class="keyword">nullptr<\/span>, 0);<\/div>$/;"	a
l00267	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;            assert(*state == I);<\/div>$/;"	a
l00267	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;<\/div>$/;"	a
l00267	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> UpdateCmdCounters(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00267	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;            *wbLineAddr = lineAddrs[lineId];<\/div>$/;"	a
l00267	html/mtrand_8h_source.html	/^<div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;        uint64_t bigSeed[N];<\/div>$/;"	a
l00267	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;        <span class="keyword">inline<\/span> uint8_t trySchedule(WinCycle&amp; wc, uint8_t portMask) {<\/div>$/;"	a
l00267	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;            <a class="code" href="classCounter.html">Counter<\/a> profSizeCycles;<\/div>$/;"	a
l00267	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;            candArray = gm_calloc&lt;uint32_t&gt;(numCands);<\/div>$/;"	a
l00267	html/scheduler_8h_source.html	/^<div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;            }<\/div>$/;"	a
l00267	html/stats_8h_source.html	/^<div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;<\/div>$/;"	a
l00267	html/timing__event_8h_source.html	/^<div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;                numChildren = 0;<\/div>$/;"	a
l00268	html/barrier_8h_source.html	/^<div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;                    runningThreads++;<\/div>$/;"	a
l00268	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;            <span class="comment">\/\/Do nothing. This is still a valid GETX, only it is not an upgrade miss anymore<\/span><\/div>$/;"	a
l00268	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00268	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> EstimatePowers(uint64_t sysCycle, <span class="keywordtype">bool<\/span> finish = <span class="keyword">false<\/span>);<\/div>$/;"	a
l00268	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;            <span class="keywordflow">return<\/span> lineId;<\/div>$/;"	a
l00268	html/mtrand_8h_source.html	/^<div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;        <span class="keyword">register<\/span> uint64_t *s = bigSeed;<\/div>$/;"	a
l00268	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;            static_assert(!(recordPort &amp;&amp; !touchOccupancy), <span class="stringliteral">&quot;Can&#39;t have recordPort and !touchOccupancy&quot;<\/span>);<\/div>$/;"	a
l00268	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;            <a class="code" href="classCounter.html">Counter<\/a> profExtendedSizeCycles;<\/div>$/;"	a
l00268	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;        }<\/div>$/;"	a
l00268	html/scheduler_8h_source.html	/^<div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;            <span class="comment">\/\/At this point noone holds pointer to th, it&#39;s out from all queues, and either on OUT or BLOCKED means it&#39;s not pending a handoff<\/span><\/div>$/;"	a
l00268	html/stats_8h_source.html	/^<div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;        <span class="comment">\/* With counter names *\/<\/span><\/div>$/;"	a
l00268	html/timing__event_8h_source.html	/^<div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;            }<\/div>$/;"	a
l00269	html/barrier_8h_source.html	/^<div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00269	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;        } <span class="keywordflow">else<\/span> { <span class="comment">\/\/no GETSs can race with INVs, if we are doing a GETS it&#39;s because the line was invalid to begin with!<\/span><\/div>$/;"	a
l00269	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* getName() {<span class="keywordflow">return<\/span> name.c_str();}<\/div>$/;"	a
l00269	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> EstimateBandwidth(uint64_t realTime, uint64_t lastTime, <span class="keywordtype">bool<\/span> finish = <span class="keyword">false<\/span>);<\/div>$/;"	a
l00269	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;        }<\/div>$/;"	a
l00269	html/mtrand_8h_source.html	/^<div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;        <span class="keyword">register<\/span> <span class="keywordtype">int<\/span> i = N;<\/div>$/;"	a
l00269	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;            <span class="keywordflow">if<\/span> (touchOccupancy) {<\/div>$/;"	a
l00269	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;        };<\/div>$/;"	a
l00269	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;<\/div>$/;"	a
l00269	html/scheduler_8h_source.html	/^<div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;            <span class="keyword">delete<\/span> th;<\/div>$/;"	a
l00269	html/stats_8h_source.html	/^<div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc, uint32_t size, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>** counterNames) {<\/div>$/;"	a
l00269	html/timing__event_8h_source.html	/^<div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;            slab::freeElem((<span class="keywordtype">void<\/span>*)<span class="keyword">this<\/span>, <span class="keyword">sizeof<\/span>(<a class="code" href="classTimingEvent.html">TimingEvent<\/a>));<\/div>$/;"	a
l00270	html/barrier_8h_source.html	/^<div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;                    DEBUG_BARRIER(<span class="stringliteral">&quot;[%d] Skipping %d state %d&quot;<\/span>, tid, wtid, threadList[wtid].state);<\/div>$/;"	a
l00270	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;            panic(<span class="stringliteral">&quot;Invalid true race happened (?)&quot;<\/span>);<\/div>$/;"	a
l00270	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;<\/div>$/;"	a
l00270	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t CalcDQTermCur(uint64_t acc_dq, uint64_t last_dq, uint64_t instCycle, uint64_t memCycle, uint64_t lastMemCycle);<\/div>$/;"	a
l00270	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;<\/div>$/;"	a
l00270	html/mtrand_8h_source.html	/^<div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;        <span class="keyword">register<\/span> <span class="keywordtype">bool<\/span> success = <span class="keyword">true<\/span>;<\/div>$/;"	a
l00270	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;                uint8_t availMask = (~wc.occUnits) &amp; portMask;<\/div>$/;"	a
l00270	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;<\/div>$/;"	a
l00270	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;        ~<a class="code" href="classRandReplPolicy.html">RandReplPolicy<\/a>() {<\/div>$/;"	a
l00270	html/scheduler_8h_source.html	/^<div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;            threadsFinished.inc();<\/div>$/;"	a
l00270	html/stats_8h_source.html	/^<div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;            init(name, desc, size);<\/div>$/;"	a
l00270	html/timing__event_8h_source.html	/^<div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;        }<\/div>$/;"	a
l00271	html/barrier_8h_source.html	/^<div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;                }<\/div>$/;"	a
l00271	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;        }<\/div>$/;"	a
l00271	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;        <span class="comment">\/\/ Bound phase interface<\/span><\/div>$/;"	a
l00271	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;        <span class="keyword">virtual<\/span> uint64_t CalcDQTermAcc(uint64_t acc_dq, uint64_t memCycle, uint64_t lastMemCycle);<\/div>$/;"	a
l00271	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;        <span class="keywordtype">void<\/span> postinsert(<span class="keyword">const<\/span> Address lineAddr, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req, uint32_t lineId) {<\/div>$/;"	a
l00271	html/mtrand_8h_source.html	/^<div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;        <span class="keywordflow">while<\/span> (success &amp;&amp; i--)<\/div>$/;"	a
l00271	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;                <span class="keywordflow">if<\/span> (availMask) {<\/div>$/;"	a
l00271	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;        VantagePartInfo* partInfo;<\/div>$/;"	a
l00271	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;            gm_free(candArray);<\/div>$/;"	a
l00271	html/scheduler_8h_source.html	/^<div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;            futex_unlock(&amp;schedLock);<\/div>$/;"	a
l00271	html/stats_8h_source.html	/^<div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;            assert(counterNames);<\/div>$/;"	a
l00271	html/timing__event_8h_source.html	/^<div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;<\/div>$/;"	a
l00272	html/barrier_8h_source.html	/^<div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;            }<\/div>$/;"	a
l00272	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;    }<\/div>$/;"	a
l00272	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;        <span class="comment">\/\/ data_size is the number of bursts with burst length = 16 bytes.<\/span><\/div>$/;"	a
l00272	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> TickScheduler(uint64_t sysCycle);<\/div>$/;"	a
l00272	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;            <span class="comment">\/\/Update addr mapping for lineId<\/span><\/div>$/;"	a
l00272	html/mtrand_8h_source.html	/^<div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;            success = fread(s++, <span class="keyword">sizeof<\/span>(uint64_t), 1, urandom);<\/div>$/;"	a
l00272	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;                    <span class="comment">\/\/ info(&quot;PRE: occUnits=%x portMask=%x availMask=%x&quot;, wc.occUnits, portMask, availMask);<\/span><\/div>$/;"	a
l00272	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;<\/div>$/;"	a
l00272	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;        }<\/div>$/;"	a
l00272	html/scheduler_8h_source.html	/^<div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;        }<\/div>$/;"	a
l00272	html/stats_8h_source.html	/^<div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;            _counterNames = gm_dup&lt;const char*&gt;(counterNames, size);<\/div>$/;"	a
l00272	html/timing__event_8h_source.html	/^<div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;    <span class="keyword">protected<\/span>:<\/div>$/;"	a
l00273	html/barrier_8h_source.html	/^<div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;        }<\/div>$/;"	a
l00273	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;    <span class="keywordflow">return<\/span> skipAccess;<\/div>$/;"	a
l00273	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;        <span class="comment">\/\/ A cacheline takes 4 bursts<\/span><\/div>$/;"	a
l00273	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;<\/div>$/;"	a
l00273	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;            lineMap.erase(lineAddrs[lineId]);<\/div>$/;"	a
l00273	html/mtrand_8h_source.html	/^<div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;        fclose(urandom);<\/div>$/;"	a
l00273	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;                    uint8_t firstAvail = __builtin_ffs(availMask) - 1;<\/div>$/;"	a
l00273	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;        <span class="keyword">struct <\/span>LineInfo {<\/div>$/;"	a
l00273	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;<\/div>$/;"	a
l00273	html/scheduler_8h_source.html	/^<div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;<\/div>$/;"	a
l00273	html/stats_8h_source.html	/^<div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;        }<\/div>$/;"	a
l00273	html/timing__event_8h_source.html	/^<div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;<\/div>$/;"	a
l00274	html/barrier_8h_source.html	/^<div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;<\/div>$/;"	a
l00274	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;}<\/div>$/;"	a
l00274	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req, <span class="keywordtype">int<\/span> type, uint32_t data_size = 4);<\/div>$/;"	a
l00274	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t sysToMemCycle(uint64_t sysCycle) { <span class="keywordflow">return<\/span> sysCycle*memFreqKHz\/sysFreqKHz; }<\/div>$/;"	a
l00274	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;            assert((lineMap.find(lineAddr) == lineMap.end()));<\/div>$/;"	a
l00274	html/mtrand_8h_source.html	/^<div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;        <span class="keywordflow">if<\/span> (success) { seed(bigSeed, N); <span class="keywordflow">return<\/span>; }<\/div>$/;"	a
l00274	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;                    <span class="comment">\/\/ NOTE: This is not fair across ports. I tried round-robin scheduling, and there is no measurable difference<\/span><\/div>$/;"	a
l00274	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;            Address addr; <span class="comment">\/\/FIXME: This is redundant due to the replacement policy interface<\/span><\/div>$/;"	a
l00274	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;        <span class="keywordtype">void<\/span> update(uint32_t <span class="keywordtype">id<\/span>, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {}<\/div>$/;"	a
l00274	html/scheduler_8h_source.html	/^<div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;        uint32_t join(uint32_t pid, uint32_t tid) {<\/div>$/;"	a
l00274	html/stats_8h_source.html	/^<div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;<\/div>$/;"	a
l00274	html/timing__event_8h_source.html	/^<div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;        <span class="comment">\/\/ If an event is externally handled, and has no parents or children,<\/span><\/div>$/;"	a
l00275	html/barrier_8h_source.html	/^<div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;        <span class="keywordtype">void<\/span> tryWakeNext(uint32_t tid) {<\/div>$/;"	a
l00275	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;<\/div>$/;"	a
l00275	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) { <span class="keywordflow">return<\/span> access(req, 0, 4); };<\/div>$/;"	a
l00275	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t sysToMicroSec(uint64_t sysCycle) { <span class="keywordflow">return<\/span> sysCycle*1000\/sysFreqKHz; }<\/div>$/;"	a
l00275	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;            lineAddrs[lineId] = lineAddr;<\/div>$/;"	a
l00275	html/mtrand_8h_source.html	/^<div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;    }<\/div>$/;"	a
l00275	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;                    <span class="comment">\/\/ (in our case, fairness comes from following program order)<\/span><\/div>$/;"	a
l00275	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;            uint64_t ts; <span class="comment">\/\/timestamp, &gt;0 if in the cache, == 0 if line is empty (little significance otherwise)<\/span><\/div>$/;"	a
l00275	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;<\/div>$/;"	a
l00275	html/scheduler_8h_source.html	/^<div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;            futex_lock(&amp;schedLock);<\/div>$/;"	a
l00275	html/stats_8h_source.html	/^<div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> inc(uint32_t idx, uint64_t value) {<\/div>$/;"	a
l00275	html/timing__event_8h_source.html	/^<div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;        <span class="comment">\/\/ it can call this at initialization to always be between RUNNING and<\/span><\/div>$/;"	a
l00276	html/barrier_8h_source.html	/^<div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;            checkRunList(tid); <span class="comment">\/\/wake up threads on this phase, may reach EOP<\/span><\/div>$/;"	a
l00276	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;<span class="comment">\/\/ Non-terminal CC; accepts GETS\/X and PUTS\/X accesses<\/span><\/div>$/;"	a
l00276	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;<\/div>$/;"	a
l00276	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t usecToSysCycle(uint64_t usec)    { <span class="keywordflow">return<\/span> usec*sysFreqKHz\/1000; }<\/div>$/;"	a
l00276	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;            lineMap[lineAddr] = lineId;<\/div>$/;"	a
l00276	html/mtrand_8h_source.html	/^<div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;<\/div>$/;"	a
l00276	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;                    <span class="keywordflow">if<\/span> (recordPort) lastPort = firstAvail;<\/div>$/;"	a
l00276	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;            uint64_t bts; <span class="comment">\/\/coarse-grain per-partition timestamp<\/span><\/div>$/;"	a
l00276	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;        <span class="keywordtype">void<\/span> recordCandidate(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00276	html/scheduler_8h_source.html	/^<div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;            <span class="comment">\/\/If leave was in this phase, call bar.join()<\/span><\/div>$/;"	a
l00276	html/stats_8h_source.html	/^<div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;            <span class="comment">\/\/assert(_counters);<\/span><\/div>$/;"	a
l00276	html/timing__event_8h_source.html	/^<div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;        <span class="comment">\/\/ QUEUED (through requeue())<\/span><\/div>$/;"	a
l00277	html/barrier_8h_source.html	/^<div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;            checkEndPhase(tid); <span class="comment">\/\/see if we&#39;ve reached EOP, execute if if so<\/span><\/div>$/;"	a
l00277	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00277"><\/a><span class="lineno"><a class="line" href="classMESICC.html">  277<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMESICC.html">MESICC<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCC.html">CC<\/a> {<\/div>$/;"	a
l00277	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;        <span class="comment">\/\/ Weave phase interface<\/span><\/div>$/;"	a
l00277	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t memToSysCycle(uint64_t memCycle) { <span class="keywordflow">return<\/span> memCycle*sysFreqKHz\/memFreqKHz; }<\/div>$/;"	a
l00277	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;<\/div>$/;"	a
l00277	html/mtrand_8h_source.html	/^<div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;    <span class="comment">\/\/ Was not successful, so use time() and clock() instead<\/span><\/div>$/;"	a
l00277	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;                    wc.occUnits |= 1 &lt;&lt; firstAvail;<\/div>$/;"	a
l00277	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;            uint32_t p; <span class="comment">\/\/partition ID<\/span><\/div>$/;"	a
l00277	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;            candArray[candIdx++] = id;<\/div>$/;"	a
l00277	html/scheduler_8h_source.html	/^<div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;            <span class="comment">\/\/Otherwise, try to grab a free context; if all are taken, queue up<\/span><\/div>$/;"	a
l00277	html/stats_8h_source.html	/^<div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;            _counters[idx] += value;<\/div>$/;"	a
l00277	html/timing__event_8h_source.html	/^<div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;        <span class="keywordtype">void<\/span> setRunning() {<\/div>$/;"	a
l00278	html/barrier_8h_source.html	/^<div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;            checkRunList(tid); <span class="comment">\/\/if we started a new phase, wake up threads<\/span><\/div>$/;"	a
l00278	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00278	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;        <span class="keywordtype">void<\/span> enqueue(<a class="code" href="classDDRMemoryAccEvent.html">DDRMemoryAccEvent<\/a>* ev, uint64_t cycle);<\/div>$/;"	a
l00278	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t memToMicroSec(uint64_t memCycle) { <span class="keywordflow">return<\/span> memCycle*1000\/memFreqKHz; }<\/div>$/;"	a
l00278	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;            <span class="comment">\/\/Update repl<\/span><\/div>$/;"	a
l00278	html/mtrand_8h_source.html	/^<div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;    seed(hash(time(<span class="keyword">nullptr<\/span>), clock()));<\/div>$/;"	a
l00278	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;                    wc.count++;<\/div>$/;"	a
l00278	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;            uint32_t op; <span class="comment">\/\/original partition id: same as partition id when in partition, but does not change when moved to FFA (unmanaged region)<\/span><\/div>$/;"	a
l00278	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;        }<\/div>$/;"	a
l00278	html/scheduler_8h_source.html	/^<div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;            uint32_t gid = getGid(pid, tid);<\/div>$/;"	a
l00278	html/stats_8h_source.html	/^<div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;        }<\/div>$/;"	a
l00278	html/timing__event_8h_source.html	/^<div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;            assert(state == EV_NONE);<\/div>$/;"	a
l00279	html/barrier_8h_source.html	/^<div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;        }<\/div>$/;"	a
l00279	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;        <a class="code" href="classMESITopCC.html">MESITopCC<\/a>* tcc;<\/div>$/;"	a
l00279	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;        <span class="keywordtype">void<\/span> refresh(uint64_t sysCycle);<\/div>$/;"	a
l00279	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;<\/div>$/;"	a
l00279	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;            rp-&gt;replaced(lineId);<\/div>$/;"	a
l00279	html/mtrand_8h_source.html	/^<div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;}<\/div>$/;"	a
l00279	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;                    <span class="comment">\/\/ info(&quot;POST: occUnits=%x count=%x firstAvail=%d&quot;, wc.occUnits, wc.count, firstAvail);<\/span><\/div>$/;"	a
l00279	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;        };<\/div>$/;"	a
l00279	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;<\/div>$/;"	a
l00279	html/scheduler_8h_source.html	/^<div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;            ThreadInfo* th = gidMap[gid];<\/div>$/;"	a
l00279	html/stats_8h_source.html	/^<div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;<\/div>$/;"	a
l00279	html/timing__event_8h_source.html	/^<div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;            state = EV_RUNNING;<\/div>$/;"	a
l00280	html/barrier_8h_source.html	/^<div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;};<\/div>$/;"	a
l00280	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;        <a class="code" href="classMESIBottomCC.html">MESIBottomCC<\/a>* bcc;<\/div>$/;"	a
l00280	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<\/div>$/;"	a
l00280	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;        <span class="comment">\/\/ profiles<\/span><\/div>$/;"	a
l00280	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;            rp-&gt;update(lineId, req);<\/div>$/;"	a
l00280	html/mtrand_8h_source.html	/^<div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<\/div>$/;"	a
l00280	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;                }<\/div>$/;"	a
l00280	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<\/div>$/;"	a
l00280	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;        uint32_t getBestCandidate() {<\/div>$/;"	a
l00280	html/scheduler_8h_source.html	/^<div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<\/div>$/;"	a
l00280	html/stats_8h_source.html	/^<div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> inc(uint32_t idx) {<\/div>$/;"	a
l00280	html/timing__event_8h_source.html	/^<div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;        }<\/div>$/;"	a
l00281	html/barrier_8h_source.html	/^<div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;<\/div>$/;"	a
l00281	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00281	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;        <span class="comment">\/\/ Scheduling event interface<\/span><\/div>$/;"	a
l00281	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profReads;<\/div>$/;"	a
l00281	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;        }<\/div>$/;"	a
l00281	html/mtrand_8h_source.html	/^<div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;<span class="keyword">inline<\/span> MTRand::MTRand(<span class="keyword">const<\/span> uint64_t oneSeed) { seed(oneSeed); }<\/div>$/;"	a
l00281	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;                <span class="keywordflow">return<\/span> availMask;<\/div>$/;"	a
l00281	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;        LineInfo* array;<\/div>$/;"	a
l00281	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;            assert(candIdx == numCands);<\/div>$/;"	a
l00281	html/scheduler_8h_source.html	/^<div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;            <span class="comment">\/\/dsm 25 Oct 2012: Failed this assertion right after a fork when trying to simulate gedit. Very weird, cannot replicate.<\/span><\/div>$/;"	a
l00281	html/stats_8h_source.html	/^<div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;             _counters[idx]++;<\/div>$/;"	a
l00281	html/timing__event_8h_source.html	/^<div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;<\/div>$/;"	a
l00282	html/barrier_8h_source.html	/^<div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;<span class="preprocessor">#endif  \/\/ BARRIER_H_<\/span><\/div>$/;"	a
l00282	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;        <span class="keywordtype">bool<\/span> nonInclusiveHack;<\/div>$/;"	a
l00282	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;        uint64_t tick(uint64_t sysCycle);<\/div>$/;"	a
l00282	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profWrites;<\/div>$/;"	a
l00282	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;};<\/div>$/;"	a
l00282	html/mtrand_8h_source.html	/^<div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;<\/div>$/;"	a
l00282	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00282	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;<\/div>$/;"	a
l00282	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;            uint32_t idx = rnd.randInt(numCands-1);<\/div>$/;"	a
l00282	html/scheduler_8h_source.html	/^<div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;            <span class="comment">\/\/dsm 10 Apr 2013: I think I got it. We were calling sched-&gt;finish() too early when following exec.<\/span><\/div>$/;"	a
l00282	html/stats_8h_source.html	/^<div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;        }<\/div>$/;"	a
l00282	html/timing__event_8h_source.html	/^<div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;<\/div>$/;"	a
l00283	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;        g_string name;<\/div>$/;"	a
l00283	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;        <span class="keywordtype">void<\/span> recycleEvent(<a class="code" href="classSchedEvent.html">SchedEvent<\/a>* ev);<\/div>$/;"	a
l00283	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profTotalRdLat;<\/div>$/;"	a
l00283	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<\/div>$/;"	a
l00283	html/mtrand_8h_source.html	/^<div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<span class="keyword">inline<\/span> MTRand::MTRand(uint64_t *<span class="keyword">const<\/span> bigSeed, <span class="keyword">const<\/span> uint64_t seedLength) {<\/div>$/;"	a
l00283	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;                <span class="comment">\/\/ This is a shadow req, port has only 1 bit set<\/span><\/div>$/;"	a
l00283	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profPromotions;<\/div>$/;"	a
l00283	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;            <span class="keywordflow">return<\/span> candArray[idx];<\/div>$/;"	a
l00283	html/scheduler_8h_source.html	/^<div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;            assert_msg(th, <span class="stringliteral">&quot;gid not found %d pid %d tid %d&quot;<\/span>, gid, pid, tid);<\/div>$/;"	a
l00283	html/stats_8h_source.html	/^<div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<\/div>$/;"	a
l00283	html/timing__event_8h_source.html	/^<div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;    <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="classContentionSim.html">ContentionSim<\/a>;<\/div>$/;"	a
l00284	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;<\/div>$/;"	a
l00284	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;<\/div>$/;"	a
l00284	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profTotalWrLat;<\/div>$/;"	a
l00284	html/ideal__arrays_8h_source.html	/^<div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;<span class="preprocessor">#endif  \/\/ IDEAL_ARRAYS_H_<\/span><\/div>$/;"	a
l00284	html/mtrand_8h_source.html	/^<div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;    seed(bigSeed, seedLength);<\/div>$/;"	a
l00284	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;                uint8_t availMask = (~wc.occUnits) &amp; portMask;<\/div>$/;"	a
l00284	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profUpdateCycles;<\/div>$/;"	a
l00284	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;        }<\/div>$/;"	a
l00284	html/scheduler_8h_source.html	/^<div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;<\/div>$/;"	a
l00284	html/stats_8h_source.html	/^<div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> atomicInc(uint32_t idx, uint64_t delta) {<\/div>$/;"	a
l00284	html/timing__event_8h_source.html	/^<div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;    <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="classDelayEvent.html">DelayEvent<\/a>; <span class="comment">\/\/DelayEvent is, for now, the only child of TimingEvent that should do anything other than implement simulate<\/span><\/div>$/;"	a
l00285	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00285	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00285	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;        <a class="code" href="classVectorCounter.html">VectorCounter<\/a> latencyHist;<\/div>$/;"	a
l00285	html/mtrand_8h_source.html	/^<div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;}<\/div>$/;"	a
l00285	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;                wc.occUnits |= portMask;  <span class="comment">\/\/ or anyway, no conditionals<\/span><\/div>$/;"	a
l00285	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;<\/div>$/;"	a
l00285	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;<\/div>$/;"	a
l00285	html/scheduler_8h_source.html	/^<div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;            <span class="keywordflow">if<\/span> (unlikely(th-&gt;futexJoin.action != FJA_NONE)) {<\/div>$/;"	a
l00285	html/stats_8h_source.html	/^<div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;            __sync_fetch_and_add(&amp;_counters[idx], delta);<\/div>$/;"	a
l00285	html/timing__event_8h_source.html	/^<div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;    <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="classCrossingEvent.html">CrossingEvent<\/a>;<\/div>$/;"	a
l00286	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;        <span class="comment">\/\/Initialization<\/span><\/div>$/;"	a
l00286	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;        AddrLoc mapLineAddr(Address lineAddr);<\/div>$/;"	a
l00286	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;        uint32_t lhBinSize;<\/div>$/;"	a
l00286	html/mtrand_8h_source.html	/^<div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;<\/div>$/;"	a
l00286	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;                <span class="keywordflow">return<\/span> availMask;<\/div>$/;"	a
l00286	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;        <span class="comment">\/\/Repl process stuff<\/span><\/div>$/;"	a
l00286	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;        <span class="keywordtype">void<\/span> replaced(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00286	html/scheduler_8h_source.html	/^<div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;                <span class="keywordflow">if<\/span> (th-&gt;futexJoin.action == FJA_WAIT) futexWaitJoin(th);<\/div>$/;"	a
l00286	html/stats_8h_source.html	/^<div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;        }<\/div>$/;"	a
l00286	html/timing__event_8h_source.html	/^<div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;};<\/div>$/;"	a
l00287	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;        <a class="code" href="classMESICC.html">MESICC<\/a>(uint32_t _numLines, <span class="keywordtype">bool<\/span> _nonInclusiveHack, g_string&amp; _name) : tcc(<span class="keyword">nullptr<\/span>), bcc(<span class="keyword">nullptr<\/span>),<\/div>$/;"	a
l00287	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;<\/div>$/;"	a
l00287	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;        uint32_t lhNumBins;<\/div>$/;"	a
l00287	html/mtrand_8h_source.html	/^<div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;<span class="keyword">inline<\/span> MTRand::MTRand() { seed(); }<\/div>$/;"	a
l00287	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;            }<\/div>$/;"	a
l00287	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;        uint32_t* candList;<\/div>$/;"	a
l00287	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;            candIdx = 0;<\/div>$/;"	a
l00287	html/scheduler_8h_source.html	/^<div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;                <span class="keywordflow">else<\/span> futexWakeJoin(th);  <span class="comment">\/\/ may release and grab schedLock to delay our join, this is fine at this point<\/span><\/div>$/;"	a
l00287	html/stats_8h_source.html	/^<div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;<\/div>$/;"	a
l00287	html/timing__event_8h_source.html	/^<div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;<\/div>$/;"	a
l00288	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;            numLines(_numLines), nonInclusiveHack(_nonInclusiveHack), name(_name) {}<\/div>$/;"	a
l00288	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;        <span class="keywordtype">void<\/span> queue(Request* req, uint64_t memCycle);<\/div>$/;"	a
l00288	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;<\/div>$/;"	a
l00288	html/mtrand_8h_source.html	/^<div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;<\/div>$/;"	a
l00288	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;        }<\/div>$/;"	a
l00288	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;        uint32_t candIdx;<\/div>$/;"	a
l00288	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;        }<\/div>$/;"	a
l00288	html/scheduler_8h_source.html	/^<div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;                th-&gt;futexJoin.action = FJA_NONE;<\/div>$/;"	a
l00288	html/stats_8h_source.html	/^<div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> atomicInc(uint32_t idx) {<\/div>$/;"	a
l00288	html/timing__event_8h_source.html	/^<div class="line"><a name="l00288"><\/a><span class="lineno"><a class="line" href="classDelayEvent.html">  288<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDelayEvent.html">DelayEvent<\/a> : <span class="keyword">public<\/span> <a class="code" href="classTimingEvent.html">TimingEvent<\/a> {<\/div>$/;"	a
l00289	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;<\/div>$/;"	a
l00289	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;<\/div>$/;"	a
l00289	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profActivate;<\/div>$/;"	a
l00289	html/mtrand_8h_source.html	/^<div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;<span class="keyword">inline<\/span> MTRand::MTRand(<span class="keyword">const<\/span> <a class="code" href="classMTRand.html">MTRand<\/a>&amp; o) {<\/div>$/;"	a
l00289	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;};<\/div>$/;"	a
l00289	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;        Address incomingLineAddr;<\/div>$/;"	a
l00289	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;};<\/div>$/;"	a
l00289	html/scheduler_8h_source.html	/^<div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;            }<\/div>$/;"	a
l00289	html/stats_8h_source.html	/^<div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;            __sync_fetch_and_add(&amp;_counters[idx], 1);<\/div>$/;"	a
l00289	html/timing__event_8h_source.html	/^<div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00290	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;        <span class="keywordtype">void<\/span> setParents(uint32_t childId, <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;MemObject*&gt;<\/a>&amp; parents, <a class="code" href="classNetwork.html">Network<\/a>* network) {<\/div>$/;"	a
l00290	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t trySchedule(uint64_t curCycle, uint64_t sysCycle);<\/div>$/;"	a
l00290	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profPrecharge;<\/div>$/;"	a
l00290	html/mtrand_8h_source.html	/^<div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;    <span class="keyword">register<\/span> <span class="keyword">const<\/span> uint64_t *t = o.state;<\/div>$/;"	a
l00290	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;<\/div>$/;"	a
l00290	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;<\/div>$/;"	a
l00290	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;<\/div>$/;"	a
l00290	html/scheduler_8h_source.html	/^<div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;<\/div>$/;"	a
l00290	html/stats_8h_source.html	/^<div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;        }<\/div>$/;"	a
l00290	html/timing__event_8h_source.html	/^<div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classDelayEvent.html">DelayEvent<\/a>(uint32_t delay) : <a class="code" href="classTimingEvent.html">TimingEvent<\/a>(delay, 0) {}<\/div>$/;"	a
l00291	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;            bcc = <span class="keyword">new<\/span> <a class="code" href="classMESIBottomCC.html">MESIBottomCC<\/a>(numLines, childId, nonInclusiveHack);<\/div>$/;"	a
l00291	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;        uint64_t findMinCmdCycle(<span class="keyword">const<\/span> Request&amp; r) <span class="keyword">const<\/span>;<\/div>$/;"	a
l00291	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profRefresh;<\/div>$/;"	a
l00291	html/mtrand_8h_source.html	/^<div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;    <span class="keyword">register<\/span> uint64_t *s = state;<\/div>$/;"	a
l00291	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;<span class="keyword">template<\/span>&lt;u<span class="keywordtype">int<\/span>32_t SZ, u<span class="keywordtype">int<\/span>32_t W&gt;<\/div>$/;"	a
l00291	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;        <span class="comment">\/\/Globally incremented, but bears little significance per se<\/span><\/div>$/;"	a
l00291	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00291"><\/a><span class="lineno"><a class="line" href="classLFUReplPolicy.html">  291<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classLFUReplPolicy.html">LFUReplPolicy<\/a> : <span class="keyword">public<\/span> <a class="code" href="classLegacyReplPolicy.html">LegacyReplPolicy<\/a> {<\/div>$/;"	a
l00291	html/scheduler_8h_source.html	/^<div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;            <span class="comment">\/\/ If we&#39;re in a fake leave, no need to do anything<\/span><\/div>$/;"	a
l00291	html/stats_8h_source.html	/^<div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;<\/div>$/;"	a
l00291	html/timing__event_8h_source.html	/^<div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;<\/div>$/;"	a
l00292	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;            bcc-&gt;init(parents, network, name.c_str());<\/div>$/;"	a
l00292	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;<\/div>$/;"	a
l00292	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;<\/div>$/;"	a
l00292	html/mtrand_8h_source.html	/^<div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;    <span class="keyword">register<\/span> <span class="keywordtype">int<\/span> i = N;<\/div>$/;"	a
l00292	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00292"><\/a><span class="lineno"><a class="line" href="classReorderBuffer.html">  292<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classReorderBuffer.html">ReorderBuffer<\/a> {<\/div>$/;"	a
l00292	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;        uint64_t timestamp;<\/div>$/;"	a
l00292	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00292	html/scheduler_8h_source.html	/^<div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;            <span class="keywordflow">if<\/span> (th-&gt;fakeLeave) {<\/div>$/;"	a
l00292	html/stats_8h_source.html	/^<div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keyword">virtual<\/span> uint64_t count(uint32_t idx)<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00292	html/timing__event_8h_source.html	/^<div class="line"><a name="l00292"><\/a><span class="lineno"><a class="line" href="classDelayEvent.html#aa1a9ef6d5dc0d8c74f6e2c52d217ef73">  292<\/a><\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classDelayEvent.html#aa1a9ef6d5dc0d8c74f6e2c52d217ef73">parentDone<\/a>(uint64_t startCycle) {<\/div>$/;"	a
l00293	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;        }<\/div>$/;"	a
l00293	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;        <span class="keywordtype">void<\/span> initTech(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* tech, <span class="keywordtype">double<\/span> time_scale);<\/div>$/;"	a
l00293	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;        <span class="keyword">static<\/span> <span class="keyword">const<\/span> uint32_t pwCounterNum = 7;<\/div>$/;"	a
l00293	html/mtrand_8h_source.html	/^<div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;    <span class="keywordflow">for<\/span> (; i--; *s++ = *t++) {}<\/div>$/;"	a
l00293	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00293	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;<\/div>$/;"	a
l00293	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;        uint64_t timestamp; <span class="comment">\/\/ incremented on each access<\/span><\/div>$/;"	a
l00293	html/scheduler_8h_source.html	/^<div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;                finishFakeLeave(th);<\/div>$/;"	a
l00293	html/stats_8h_source.html	/^<div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;            <span class="keywordflow">return<\/span> _counters[idx];<\/div>$/;"	a
l00293	html/timing__event_8h_source.html	/^<div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;            cycle = MAX(cycle, startCycle);<\/div>$/;"	a
l00294	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;<\/div>$/;"	a
l00294	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;};<\/div>$/;"	a
l00294	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profAccAvgPower[pwCounterNum];<\/div>$/;"	a
l00294	html/mtrand_8h_source.html	/^<div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;    left = o.left;<\/div>$/;"	a
l00294	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;        uint64_t buf[SZ];<\/div>$/;"	a
l00294	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;        <span class="keywordtype">double<\/span> partPortion; <span class="comment">\/\/how much of the cache do we devote to the partition&#39;s target sizes?<\/span><\/div>$/;"	a
l00294	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;        int32_t bestCandidate; <span class="comment">\/\/ id<\/span><\/div>$/;"	a
l00294	html/scheduler_8h_source.html	/^<div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;                uint32_t cid = th-&gt;cid;<\/div>$/;"	a
l00294	html/stats_8h_source.html	/^<div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;        }<\/div>$/;"	a
l00294	html/timing__event_8h_source.html	/^<div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;            numParents--;<\/div>$/;"	a
l00295	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;        <span class="keywordtype">void<\/span> setChildren(<span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;BaseCache*&gt;<\/a>&amp; children, <a class="code" href="classNetwork.html">Network<\/a>* network) {<\/div>$/;"	a
l00295	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;<\/div>$/;"	a
l00295	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profCurAvgPower[pwCounterNum];<\/div>$/;"	a
l00295	html/mtrand_8h_source.html	/^<div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;    pNext = &amp;state[N-left];<\/div>$/;"	a
l00295	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;        uint64_t curRetireCycle;<\/div>$/;"	a
l00295	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;        <span class="keywordtype">double<\/span> partSlack; <span class="comment">\/\/how much the aperture curve reacts to &quot;cushion&quot; the load. partSlack+targetSize sets aperture to 1.0<\/span><\/div>$/;"	a
l00295	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;        <span class="keyword">struct <\/span>LFUInfo {<\/div>$/;"	a
l00295	html/scheduler_8h_source.html	/^<div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;                futex_unlock(&amp;schedLock);<\/div>$/;"	a
l00295	html/stats_8h_source.html	/^<div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;<\/div>$/;"	a
l00295	html/timing__event_8h_source.html	/^<div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;            <span class="keywordflow">if<\/span> (!numParents) {<\/div>$/;"	a
l00296	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;            tcc = <span class="keyword">new<\/span> <a class="code" href="classMESITopCC.html">MESITopCC<\/a>(numLines, nonInclusiveHack);<\/div>$/;"	a
l00296	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;<\/div>$/;"	a
l00296	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;        <span class="keyword">static<\/span> <span class="keyword">const<\/span> uint32_t bwCounterNum = 4;<\/div>$/;"	a
l00296	html/mtrand_8h_source.html	/^<div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;}<\/div>$/;"	a
l00296	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;        uint32_t curCycleRetires;<\/div>$/;"	a
l00296	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;        <span class="keywordtype">double<\/span> maxAperture; <span class="comment">\/\/Maximum aperture allowed in each partition, must be &lt; 1.0<\/span><\/div>$/;"	a
l00296	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;            uint64_t ts;<\/div>$/;"	a
l00296	html/scheduler_8h_source.html	/^<div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;                <span class="keywordflow">return<\/span> cid;<\/div>$/;"	a
l00296	html/stats_8h_source.html	/^<div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;        <span class="keyword">inline<\/span> uint32_t size()<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00296	html/timing__event_8h_source.html	/^<div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;                uint64_t doneCycle = cycle + preDelay;<\/div>$/;"	a
l00297	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;            tcc-&gt;init(children, network, name.c_str());<\/div>$/;"	a
l00297	html/ddr__mem_8h_source.html	/^<div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;<span class="preprocessor">#endif  \/\/ DDR_MEM_H_<\/span><\/div>$/;"	a
l00297	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profBandwidth[bwCounterNum];<\/div>$/;"	a
l00297	html/mtrand_8h_source.html	/^<div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;<\/div>$/;"	a
l00297	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;        uint32_t idx;<\/div>$/;"	a
l00297	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;        uint32_t partGranularity; <span class="comment">\/\/number of partitions that UMON\/LookaheadPartitioner expects<\/span><\/div>$/;"	a
l00297	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;            uint64_t acc;<\/div>$/;"	a
l00297	html/scheduler_8h_source.html	/^<div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;            }<\/div>$/;"	a
l00297	html/stats_8h_source.html	/^<div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;            <span class="keywordflow">return<\/span> _counters.size();<\/div>$/;"	a
l00297	html/timing__event_8h_source.html	/^<div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;                state = EV_RUNNING;<\/div>$/;"	a
l00298	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;        }<\/div>$/;"	a
l00298	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;<\/div>$/;"	a
l00298	html/mtrand_8h_source.html	/^<div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;<span class="keyword">inline<\/span> uint64_t MTRand::randInt() {<\/div>$/;"	a
l00298	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;<\/div>$/;"	a
l00298	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;<\/div>$/;"	a
l00298	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;        };<\/div>$/;"	a
l00298	html/scheduler_8h_source.html	/^<div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;<\/div>$/;"	a
l00298	html/stats_8h_source.html	/^<div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;        }<\/div>$/;"	a
l00298	html/timing__event_8h_source.html	/^<div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;                done(doneCycle);<\/div>$/;"	a
l00299	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;<\/div>$/;"	a
l00299	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;        uint64_t lastAccesses;<\/div>$/;"	a
l00299	html/mtrand_8h_source.html	/^<div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;    <span class="comment">\/\/ Pull a 32-bit integer from the generator state<\/span><\/div>$/;"	a
l00299	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00299	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;        uint64_t lastUpdateCycle; <span class="comment">\/\/for cumulative size counter updates; could be made event-driven<\/span><\/div>$/;"	a
l00299	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;        LFUInfo* array;<\/div>$/;"	a
l00299	html/scheduler_8h_source.html	/^<div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;            assert(!th-&gt;markedForSleep);<\/div>$/;"	a
l00299	html/stats_8h_source.html	/^<div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;};<\/div>$/;"	a
l00299	html/timing__event_8h_source.html	/^<div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;            }<\/div>$/;"	a
l00300	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* cacheStat) {<\/div>$/;"	a
l00300	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;        uint64_t maxBandwidth;<\/div>$/;"	a
l00300	html/mtrand_8h_source.html	/^<div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;    <span class="comment">\/\/ Every other access function simply transforms the numbers extracted here<\/span><\/div>$/;"	a
l00300	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;        <a class="code" href="classReorderBuffer.html">ReorderBuffer<\/a>() {<\/div>$/;"	a
l00300	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;<\/div>$/;"	a
l00300	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00300	html/scheduler_8h_source.html	/^<div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;<\/div>$/;"	a
l00300	html/stats_8h_source.html	/^<div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;<\/div>$/;"	a
l00300	html/timing__event_8h_source.html	/^<div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;        }<\/div>$/;"	a
l00301	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;            <span class="comment">\/\/no tcc stats<\/span><\/div>$/;"	a
l00301	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;        uint64_t minBandwidth;<\/div>$/;"	a
l00301	html/mtrand_8h_source.html	/^<div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<\/div>$/;"	a
l00301	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; SZ; i++) buf[i] = 0;<\/div>$/;"	a
l00301	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;        <a class="code" href="classMTRand.html">MTRand<\/a> rng;<\/div>$/;"	a
l00301	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<\/div>$/;"	a
l00301	html/scheduler_8h_source.html	/^<div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;            <span class="keywordflow">if<\/span> (th-&gt;state == SLEEPING) {<\/div>$/;"	a
l00301	html/stats_8h_source.html	/^<div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<span class="comment">\/*<\/span><\/div>$/;"	a
l00301	html/timing__event_8h_source.html	/^<div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<\/div>$/;"	a
l00302	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;            bcc-&gt;initStats(cacheStat);<\/div>$/;"	a
l00302	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;<\/div>$/;"	a
l00302	html/mtrand_8h_source.html	/^<div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;    <span class="keywordflow">if<\/span> (left == 0) reload();<\/div>$/;"	a
l00302	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;            idx = 0;<\/div>$/;"	a
l00302	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;        <span class="keywordtype">bool<\/span> smoothTransients; <span class="comment">\/\/if set, keeps all growing partitions at targetSz = actualSz + 1 until they reach their actual target; takes space away slowly from the shrinking partitions instead of aggressively demoting them to the unmanaged region, which turns the whole thing into a shared cache if transients are frequent<\/span><\/div>$/;"	a
l00302	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;        <span class="comment">\/\/NOTE: Rank code could be shared across Replacement policy implementations<\/span><\/div>$/;"	a
l00302	html/scheduler_8h_source.html	/^<div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;                <span class="comment">\/*panic(*\/<\/span> warn(<span class="stringliteral">&quot;[%d] called join() while SLEEPING, early sleep termination, moving to BLOCKED&quot;<\/span>, tid);<\/div>$/;"	a
l00302	html/stats_8h_source.html	/^<div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;<span class="comment">class Histogram : public Stat {<\/span><\/div>$/;"	a
l00302	html/timing__event_8h_source.html	/^<div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> simulate(uint64_t simCycle) {<\/div>$/;"	a
l00303	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;        }<\/div>$/;"	a
l00303	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;        gzFile addrTraceLog;<\/div>$/;"	a
l00303	html/mtrand_8h_source.html	/^<div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;    --left;<\/div>$/;"	a
l00303	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;            curRetireCycle = 0;<\/div>$/;"	a
l00303	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;<\/div>$/;"	a
l00303	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;        <span class="keyword">struct <\/span>Rank {<\/div>$/;"	a
l00303	html/scheduler_8h_source.html	/^<div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;                sleepQueue.remove(th);<\/div>$/;"	a
l00303	html/stats_8h_source.html	/^<div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;<span class="comment">    \/\/TBD<\/span><\/div>$/;"	a
l00303	html/timing__event_8h_source.html	/^<div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;            panic(<span class="stringliteral">&quot;DelayEvent::simulate() was called --- DelayEvent wakes its children directly&quot;<\/span>);<\/div>$/;"	a
l00304	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;<\/div>$/;"	a
l00304	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;<\/div>$/;"	a
l00304	html/mtrand_8h_source.html	/^<div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;<\/div>$/;"	a
l00304	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;            curCycleRetires = 1;<\/div>$/;"	a
l00304	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00304	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;            LFUInfo lfuInfo;<\/div>$/;"	a
l00304	html/scheduler_8h_source.html	/^<div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;                th-&gt;state = BLOCKED;<\/div>$/;"	a
l00304	html/stats_8h_source.html	/^<div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;<span class="comment">};<\/span><\/div>$/;"	a
l00304	html/timing__event_8h_source.html	/^<div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;        }<\/div>$/;"	a
l00305	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;        <span class="comment">\/\/Access methods<\/span><\/div>$/;"	a
l00305	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;        <span class="comment">\/\/ Power<\/span><\/div>$/;"	a
l00305	html/mtrand_8h_source.html	/^<div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;    <span class="keyword">register<\/span> uint64_t s1;<\/div>$/;"	a
l00305	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;        }<\/div>$/;"	a
l00305	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;        <a class="code" href="classVantageReplPolicy.html">VantageReplPolicy<\/a>(<a class="code" href="classPartitionMonitor.html">PartitionMonitor<\/a>* _monitor, <a class="code" href="classPartMapper.html">PartMapper<\/a>* _mapper, uint64_t _lines,  uint32_t _assoc, uint32_t partPortionPct,<\/div>$/;"	a
l00305	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;            uint32_t sharers;<\/div>$/;"	a
l00305	html/scheduler_8h_source.html	/^<div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;            }<\/div>$/;"	a
l00305	html/stats_8h_source.html	/^<div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;<span class="comment">*\/<\/span><\/div>$/;"	a
l00305	html/timing__event_8h_source.html	/^<div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;};<\/div>$/;"	a
l00306	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;        <span class="keywordtype">bool<\/span> startAccess(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) {<\/div>$/;"	a
l00306	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;        uint64_t lastMemCycle;<\/div>$/;"	a
l00306	html/mtrand_8h_source.html	/^<div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;    s1 = *pNext++;<\/div>$/;"	a
l00306	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;<\/div>$/;"	a
l00306	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;                          uint32_t partSlackPct, uint32_t maxAperturePct, uint32_t _partGranularity, <span class="keywordtype">bool<\/span> _smoothTransients)<\/div>$/;"	a
l00306	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;            <span class="keywordtype">bool<\/span> valid;<\/div>$/;"	a
l00306	html/scheduler_8h_source.html	/^<div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;<\/div>$/;"	a
l00306	html/stats_8h_source.html	/^<div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;<\/div>$/;"	a
l00306	html/timing__event_8h_source.html	/^<div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;<\/div>$/;"	a
l00307	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;            assert((req.type == GETS) || (req.type == GETX) || (req.type == PUTS) || (req.type == PUTX));<\/div>$/;"	a
l00307	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00307"><\/a><span class="lineno"><a class="line" href="structMemControllerBase_1_1powerValue.html">  307<\/a><\/span>&#160;        <span class="keyword">struct <\/span><a class="code" href="structMemControllerBase_1_1powerValue.html">powerValue<\/a> {<\/div>$/;"	a
l00307	html/mtrand_8h_source.html	/^<div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;    s1 ^= (s1 &gt;&gt; 11);<\/div>$/;"	a
l00307	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t minAllocCycle() {<\/div>$/;"	a
l00307	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;                : <a class="code" href="classPartReplPolicy.html">PartReplPolicy<\/a>(_monitor, _mapper), totalSize(_lines), assoc(_assoc), rng(0xABCDE563F), smoothTransients(_smoothTransients)<\/div>$/;"	a
l00307	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;<\/div>$/;"	a
l00307	html/scheduler_8h_source.html	/^<div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;            <span class="keywordflow">if<\/span> (th-&gt;state == OUT) {<\/div>$/;"	a
l00307	html/stats_8h_source.html	/^<div class="line"><a name="l00307"><\/a><span class="lineno"><a class="line" href="classProxyStat.html">  307<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProxyStat.html">ProxyStat<\/a> : <span class="keyword">public<\/span> <a class="code" href="classScalarStat.html">ScalarStat<\/a> {<\/div>$/;"	a
l00307	html/timing__event_8h_source.html	/^<div class="line"><a name="l00307"><\/a><span class="lineno"><a class="line" href="classCrossingEvent.html">  307<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCrossingEvent.html">CrossingEvent<\/a> : <span class="keyword">public<\/span> <a class="code" href="classTimingEvent.html">TimingEvent<\/a> {<\/div>$/;"	a
l00308	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;<\/div>$/;"	a
l00308	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;            uint64_t total;<\/div>$/;"	a
l00308	html/mtrand_8h_source.html	/^<div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;    s1 ^= (s1 &lt;&lt;  7) &amp; 0x9d2c5680UL;<\/div>$/;"	a
l00308	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;            <span class="keywordflow">return<\/span> buf[idx];<\/div>$/;"	a
l00308	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;        {<\/div>$/;"	a
l00308	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;            <span class="keywordtype">void<\/span> reset() {<\/div>$/;"	a
l00308	html/scheduler_8h_source.html	/^<div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;                th-&gt;state = RUNNING;<\/div>$/;"	a
l00308	html/stats_8h_source.html	/^<div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00308	html/timing__event_8h_source.html	/^<div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00309	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;            <span class="comment">\/* Child should be locked when called. We do hand-over-hand locking when going<\/span><\/div>$/;"	a
l00309	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;            uint64_t actPre;<\/div>$/;"	a
l00309	html/mtrand_8h_source.html	/^<div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;    s1 ^= (s1 &lt;&lt; 15) &amp; 0xefc60000UL;<\/div>$/;"	a
l00309	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;        }<\/div>$/;"	a
l00309	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;            partitions = mapper-&gt;getNumPartitions();<\/div>$/;"	a
l00309	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;                valid = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00309	html/scheduler_8h_source.html	/^<div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;                outQueue.remove(th);<\/div>$/;"	a
l00309	html/stats_8h_source.html	/^<div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;        uint64_t* _statPtr;<\/div>$/;"	a
l00309	html/timing__event_8h_source.html	/^<div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;        uint32_t srcDomain;<\/div>$/;"	a
l00310	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;<span class="comment">             * down (which is why we require the lock), but not when going up, opening the<\/span><\/div>$/;"	a
l00310	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;            uint64_t burst;<\/div>$/;"	a
l00310	html/mtrand_8h_source.html	/^<div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;    <span class="keywordflow">return<\/span> (s1 ^ (s1 &gt;&gt; 18));<\/div>$/;"	a
l00310	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;<\/div>$/;"	a
l00310	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;<\/div>$/;"	a
l00310	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;                sharers = 0;<\/div>$/;"	a
l00310	html/scheduler_8h_source.html	/^<div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;                zinfo-&gt;cores[th-&gt;cid]-&gt;join();<\/div>$/;"	a
l00310	html/stats_8h_source.html	/^<div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;<\/div>$/;"	a
l00310	html/timing__event_8h_source.html	/^<div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;        <span class="keyword">volatile<\/span> <span class="keywordtype">bool<\/span> called;<\/div>$/;"	a
l00311	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;<span class="comment">             * child to invalidation races here to avoid deadlocks.<\/span><\/div>$/;"	a
l00311	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;            uint64_t refresh;<\/div>$/;"	a
l00311	html/mtrand_8h_source.html	/^<div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;}<\/div>$/;"	a
l00311	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> markRetire(uint64_t minRetireCycle) {<\/div>$/;"	a
l00311	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;            assert(partPortionPct &lt;= 100);<\/div>$/;"	a
l00311	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;                lfuInfo.ts = 0;<\/div>$/;"	a
l00311	html/scheduler_8h_source.html	/^<div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;                bar.join(th-&gt;cid, &amp;schedLock); <span class="comment">\/\/releases lock<\/span><\/div>$/;"	a
l00311	html/stats_8h_source.html	/^<div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00311	html/timing__event_8h_source.html	/^<div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;        <span class="keyword">volatile<\/span> uint64_t doneCycle;<\/div>$/;"	a
l00312	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;<span class="comment">             *\/<\/span><\/div>$/;"	a
l00312	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;            uint64_t background;<\/div>$/;"	a
l00312	html/mtrand_8h_source.html	/^<div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;<\/div>$/;"	a
l00312	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;            <span class="keywordflow">if<\/span> (minRetireCycle &lt;= curRetireCycle) {  <span class="comment">\/\/ retire with bundle<\/span><\/div>$/;"	a
l00312	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;            assert(partSlackPct &lt;= 100);<\/div>$/;"	a
l00312	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;                lfuInfo.acc = 0;<\/div>$/;"	a
l00312	html/scheduler_8h_source.html	/^<div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00312	html/stats_8h_source.html	/^<div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;        <a class="code" href="classProxyStat.html">ProxyStat<\/a>() : <a class="code" href="classScalarStat.html">ScalarStat<\/a>(), _statPtr(<span class="keyword">nullptr<\/span>) {}<\/div>$/;"	a
l00312	html/timing__event_8h_source.html	/^<div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;        <span class="keyword">volatile<\/span> uint64_t srcDomainCycleAtDone;<\/div>$/;"	a
l00313	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;            <span class="keywordflow">if<\/span> (req.childLock) {<\/div>$/;"	a
l00313	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;            uint64_t dq;<\/div>$/;"	a
l00313	html/mtrand_8h_source.html	/^<div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;<span class="keyword">inline<\/span> uint64_t MTRand::randInt(<span class="keyword">const<\/span> uint64_t n) {<\/div>$/;"	a
l00313	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;                <span class="keywordflow">if<\/span> (curCycleRetires == W) {<\/div>$/;"	a
l00313	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;            assert(maxAperturePct &lt;= 100);<\/div>$/;"	a
l00313	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;            }<\/div>$/;"	a
l00313	html/scheduler_8h_source.html	/^<div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;                assert(th-&gt;state == BLOCKED || th-&gt;state == STARTED);<\/div>$/;"	a
l00313	html/stats_8h_source.html	/^<div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;<\/div>$/;"	a
l00313	html/timing__event_8h_source.html	/^<div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;        <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* evRec;<\/div>$/;"	a
l00314	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;                futex_unlock(req.childLock);<\/div>$/;"	a
l00314	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;            uint64_t terminate;<\/div>$/;"	a
l00314	html/mtrand_8h_source.html	/^<div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;    <span class="comment">\/\/ Find which bits are used in n<\/span><\/div>$/;"	a
l00314	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;                    curRetireCycle++;<\/div>$/;"	a
l00314	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;<\/div>$/;"	a
l00314	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;<\/div>$/;"	a
l00314	html/scheduler_8h_source.html	/^<div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;<\/div>$/;"	a
l00314	html/stats_8h_source.html	/^<div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;        <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc, uint64_t* ptr) {<\/div>$/;"	a
l00314	html/timing__event_8h_source.html	/^<div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;        uint64_t origStartCycle;<\/div>$/;"	a
l00315	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;            }<\/div>$/;"	a
l00315	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;        };<\/div>$/;"	a
l00315	html/mtrand_8h_source.html	/^<div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;    <span class="comment">\/\/ Optimized by Magnus Jonsson (magnus@smartelectronix.com)<\/span><\/div>$/;"	a
l00315	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;                    curCycleRetires = 0;<\/div>$/;"	a
l00315	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;            partPortion = ((double)partPortionPct)\/100.0;<\/div>$/;"	a
l00315	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;            <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> lessThan(<span class="keyword">const<\/span> Rank&amp; other, <span class="keyword">const<\/span> uint64_t curTs)<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00315	html/scheduler_8h_source.html	/^<div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;                ContextInfo* ctx = schedThread(th);<\/div>$/;"	a
l00315	html/stats_8h_source.html	/^<div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;            initStat(name, desc);<\/div>$/;"	a
l00315	html/timing__event_8h_source.html	/^<div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;        uint64_t simCount;<\/div>$/;"	a
l00316	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;<\/div>$/;"	a
l00316	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;        <a class="code" href="structMemControllerBase_1_1powerValue.html">powerValue<\/a> lastPower;<\/div>$/;"	a
l00316	html/mtrand_8h_source.html	/^<div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;    uint64_t used = n;<\/div>$/;"	a
l00316	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00316	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;            partSlack = ((double)partSlackPct)\/100.0;<\/div>$/;"	a
l00316	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;                <span class="keywordflow">if<\/span> (!valid &amp;&amp; other.valid) {<\/div>$/;"	a
l00316	html/scheduler_8h_source.html	/^<div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;                <span class="keywordflow">if<\/span> (ctx) {<\/div>$/;"	a
l00316	html/stats_8h_source.html	/^<div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;            _statPtr = ptr;<\/div>$/;"	a
l00316	html/timing__event_8h_source.html	/^<div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;        <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* parentEv; <span class="comment">\/\/stored exclusively for resp-req xing chaining<\/span><\/div>$/;"	a
l00317	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;            tcc-&gt;lock(); <span class="comment">\/\/must lock tcc FIRST<\/span><\/div>$/;"	a
l00317	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;<\/div>$/;"	a
l00317	html/mtrand_8h_source.html	/^<div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;    used |= used &gt;&gt; 1;<\/div>$/;"	a
l00317	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;                    curCycleRetires++;<\/div>$/;"	a
l00317	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;            maxAperture = ((double)maxAperturePct)\/100.0;<\/div>$/;"	a
l00317	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;                    <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div>$/;"	a
l00317	html/scheduler_8h_source.html	/^<div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;                    schedule(th, ctx);<\/div>$/;"	a
l00317	html/stats_8h_source.html	/^<div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;        }<\/div>$/;"	a
l00317	html/timing__event_8h_source.html	/^<div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;<\/div>$/;"	a
l00318	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;            bcc-&gt;lock();<\/div>$/;"	a
l00318	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;<\/div>$/;"	a
l00318	html/mtrand_8h_source.html	/^<div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;    used |= used &gt;&gt; 2;<\/div>$/;"	a
l00318	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;                }<\/div>$/;"	a
l00318	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;            partGranularity = _partGranularity;  <span class="comment">\/\/ NOTE: partitioning at too fine granularity (+1K buckets) overwhelms the lookahead partitioner<\/span><\/div>$/;"	a
l00318	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;                } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (valid == other.valid) {<\/div>$/;"	a
l00318	html/scheduler_8h_source.html	/^<div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;                    zinfo-&gt;cores[th-&gt;cid]-&gt;join();<\/div>$/;"	a
l00318	html/stats_8h_source.html	/^<div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;<\/div>$/;"	a
l00318	html/timing__event_8h_source.html	/^<div class="line"><a name="l00318"><\/a><span class="lineno">  318<\/span>&#160;        uint32_t preSlack, postSlack;<\/div>$/;"	a
l00319	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;<\/div>$/;"	a
l00319	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00319	html/mtrand_8h_source.html	/^<div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;    used |= used &gt;&gt; 4;<\/div>$/;"	a
l00319	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;<\/div>$/;"	a
l00319	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;<\/div>$/;"	a
l00319	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;                    <span class="keywordflow">if<\/span> (sharers == 0 &amp;&amp; other.sharers &gt; 0) {<\/div>$/;"	a
l00319	html/scheduler_8h_source.html	/^<div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;                    bar.join(th-&gt;cid, &amp;schedLock); <span class="comment">\/\/releases lock<\/span><\/div>$/;"	a
l00319	html/stats_8h_source.html	/^<div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;        uint64_t <span class="keyword">get<\/span>() <span class="keyword">const<\/span> {<\/div>$/;"	a
l00319	html/timing__event_8h_source.html	/^<div class="line"><a name="l00319"><\/a><span class="lineno">  319<\/span>&#160;<\/div>$/;"	a
l00320	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;            <span class="comment">\/* The situation is now stable, true race-wise. No one can touch the child state, because we hold<\/span><\/div>$/;"	a
l00320	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;        <a class="code" href="classMemControllerBase.html">MemControllerBase<\/a>(g_string _memCfg, uint32_t _cacheLineSize, uint32_t _sysFreqMHz, uint32_t _domain, g_string&amp; _name);<\/div>$/;"	a
l00320	html/mtrand_8h_source.html	/^<div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;    used |= used &gt;&gt; 8;<\/div>$/;"	a
l00320	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;                <span class="comment">\/* No branches version (careful, width should be power of 2...)<\/span><\/div>$/;"	a
l00320	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;            uint32_t targetManagedSize = (uint32_t)(((<span class="keywordtype">double<\/span>)totalSize)*partPortion);<\/div>$/;"	a
l00320	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;                        <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div>$/;"	a
l00320	html/scheduler_8h_source.html	/^<div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00320	html/stats_8h_source.html	/^<div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;            assert(_statPtr);  <span class="comment">\/\/ TODO: we may want to make this work only with volatiles...<\/span><\/div>$/;"	a
l00320	html/timing__event_8h_source.html	/^<div class="line"><a name="l00320"><\/a><span class="lineno">  320<\/span>&#160;        <span class="keyword">class <\/span>CrossingSrcEvent : <span class="keyword">public<\/span> <a class="code" href="classTimingEvent.html">TimingEvent<\/a> {<\/div>$/;"	a
l00321	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;<span class="comment">             * both parent&#39;s locks. So, we first handle races, which may cause us to skip the access.<\/span><\/div>$/;"	a
l00321	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;        <span class="keyword">virtual<\/span> ~<a class="code" href="classMemControllerBase.html">MemControllerBase<\/a>();<\/div>$/;"	a
l00321	html/mtrand_8h_source.html	/^<div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;    used |= used &gt;&gt; 16;<\/div>$/;"	a
l00321	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;<span class="comment">                 * curRetireCycle += curCycleRetires\/W;<\/span><\/div>$/;"	a
l00321	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;<\/div>$/;"	a
l00321	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;                    } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (sharers &gt; 0 &amp;&amp; other.sharers == 0) {<\/div>$/;"	a
l00321	html/scheduler_8h_source.html	/^<div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;                    th-&gt;state = QUEUED;<\/div>$/;"	a
l00321	html/stats_8h_source.html	/^<div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;            <span class="keywordflow">return<\/span> *_statPtr;<\/div>$/;"	a
l00321	html/timing__event_8h_source.html	/^<div class="line"><a name="l00321"><\/a><span class="lineno">  321<\/span>&#160;            <span class="keyword">private<\/span>:<\/div>$/;"	a
l00322	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;<span class="comment">             *\/<\/span><\/div>$/;"	a
l00322	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;<\/div>$/;"	a
l00322	html/mtrand_8h_source.html	/^<div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;<\/div>$/;"	a
l00322	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;<span class="comment">                 * curCycleRetires = (curCycleRetires + 1) % W;<\/span><\/div>$/;"	a
l00322	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;            partInfo = gm_calloc&lt;VantagePartInfo&gt;(partitions+1);  <span class="comment">\/\/ last one is unmanaged region<\/span><\/div>$/;"	a
l00322	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;                        <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div>$/;"	a
l00322	html/scheduler_8h_source.html	/^<div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;                    runQueue.push_back(th);<\/div>$/;"	a
l00322	html/stats_8h_source.html	/^<div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;        }<\/div>$/;"	a
l00322	html/timing__event_8h_source.html	/^<div class="line"><a name="l00322"><\/a><span class="lineno">  322<\/span>&#160;                <a class="code" href="classCrossingEvent.html">CrossingEvent<\/a>* ce;<\/div>$/;"	a
l00323	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;            <span class="keywordtype">bool<\/span> skipAccess = CheckForMESIRace(req.type <span class="comment">\/*may change*\/<\/span>, req.state, req.initialState);<\/div>$/;"	a
l00323	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;        <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* getName() { <span class="keywordflow">return<\/span> name.c_str(); }<\/div>$/;"	a
l00323	html/mtrand_8h_source.html	/^<div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;    <span class="comment">\/\/ Draw numbers until one is found in [0,n]<\/span><\/div>$/;"	a
l00323	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;<span class="comment">                 *  NOTE: After profiling, version with branch seems faster<\/span><\/div>$/;"	a
l00323	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;<\/div>$/;"	a
l00323	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;                    } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00323	html/scheduler_8h_source.html	/^<div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;                    waitForContext(th); <span class="comment">\/\/releases lock, might join<\/span><\/div>$/;"	a
l00323	html/stats_8h_source.html	/^<div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;};<\/div>$/;"	a
l00323	html/timing__event_8h_source.html	/^<div class="line"><a name="l00323"><\/a><span class="lineno">  323<\/span>&#160;            <span class="keyword">public<\/span>:<\/div>$/;"	a
l00324	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;            <span class="keywordflow">return<\/span> skipAccess;<\/div>$/;"	a
l00324	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;        <span class="keywordtype">void<\/span> enqueue(<a class="code" href="classMemAccessEventBase.html">MemAccessEventBase<\/a>* ev, uint64_t cycle);<\/div>$/;"	a
l00324	html/mtrand_8h_source.html	/^<div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;    uint64_t i;<\/div>$/;"	a
l00324	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;<span class="comment">                 *\/<\/span><\/div>$/;"	a
l00324	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt;= partitions; i++) {<\/div>$/;"	a
l00324	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;                        <span class="keywordflow">if<\/span> (lfuInfo.acc == 0) <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div>$/;"	a
l00324	html/scheduler_8h_source.html	/^<div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;                }<\/div>$/;"	a
l00324	html/stats_8h_source.html	/^<div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;<\/div>$/;"	a
l00324	html/timing__event_8h_source.html	/^<div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;                CrossingSrcEvent(<a class="code" href="classCrossingEvent.html">CrossingEvent<\/a>* _ce, uint32_t dom) : <a class="code" href="classTimingEvent.html">TimingEvent<\/a>(0, 0, dom), ce(_ce) {<\/div>$/;"	a
l00325	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;        }<\/div>$/;"	a
l00325	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;        uint64_t access(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req);<\/div>$/;"	a
l00325	html/mtrand_8h_source.html	/^<div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;    <span class="keywordflow">do<\/span> {<\/div>$/;"	a
l00325	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;            } <span class="keywordflow">else<\/span> {  <span class="comment">\/\/ advance<\/span><\/div>$/;"	a
l00325	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;                partInfo[i].targetSize = targetManagedSize\/partitions;<\/div>$/;"	a
l00325	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;                        <span class="keywordflow">if<\/span> (other.lfuInfo.acc == 0) <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div>$/;"	a
l00325	html/scheduler_8h_source.html	/^<div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;            }<\/div>$/;"	a
l00325	html/stats_8h_source.html	/^<div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;<\/div>$/;"	a
l00325	html/timing__event_8h_source.html	/^<div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;                    <span class="comment">\/\/These are never connected to anything, but substitute an existing event; so, this never gets<\/span><\/div>$/;"	a
l00326	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;<\/div>$/;"	a
l00326	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;        uint32_t tick(uint64_t sysCycle);<\/div>$/;"	a
l00326	html/mtrand_8h_source.html	/^<div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;        i = randInt() &amp; used;  <span class="comment">\/\/ toss unused bits to shorten search<\/span><\/div>$/;"	a
l00326	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;                curRetireCycle = minRetireCycle;<\/div>$/;"	a
l00326	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;                partInfo[i].longTermTargetSize = partInfo[i].targetSize;<\/div>$/;"	a
l00326	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;                        uint64_t ownInvFreq = (curTs - lfuInfo.ts)\/lfuInfo.acc; <span class="comment">\/\/inverse frequency, lower is better<\/span><\/div>$/;"	a
l00326	html/scheduler_8h_source.html	/^<div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;<\/div>$/;"	a
l00326	html/stats_8h_source.html	/^<div class="line"><a name="l00326"><\/a><span class="lineno"><a class="line" href="classProxyFuncStat.html">  326<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProxyFuncStat.html">ProxyFuncStat<\/a> : <span class="keyword">public<\/span> <a class="code" href="classScalarStat.html">ScalarStat<\/a> {<\/div>$/;"	a
l00326	html/timing__event_8h_source.html	/^<div class="line"><a name="l00326"><\/a><span class="lineno">  326<\/span>&#160;                    <span class="comment">\/\/numParents incremented, but we set it to 1 to maintain semantics in case we have a walk<\/span><\/div>$/;"	a
l00327	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;        <span class="keywordtype">bool<\/span> shouldAllocate(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) {<\/div>$/;"	a
l00327	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00327	html/mtrand_8h_source.html	/^<div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;    } <span class="keywordflow">while<\/span> (i &gt; n);<\/div>$/;"	a
l00327	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;                curCycleRetires = 1;<\/div>$/;"	a
l00327	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;                partInfo[i].extendedSize = 0;<\/div>$/;"	a
l00327	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;                        uint64_t otherInvFreq = (curTs - other.lfuInfo.ts)\/other.lfuInfo.acc;<\/div>$/;"	a
l00327	html/scheduler_8h_source.html	/^<div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;            <span class="keywordflow">return<\/span> th-&gt;cid;<\/div>$/;"	a
l00327	html/stats_8h_source.html	/^<div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00327	html/timing__event_8h_source.html	/^<div class="line"><a name="l00327"><\/a><span class="lineno">  327<\/span>&#160;                    assert(numParents == 0);<\/div>$/;"	a
l00328	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;            <span class="keywordflow">if<\/span> ((req.type == GETS) || (req.type == GETX)) {<\/div>$/;"	a
l00328	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;        <span class="keywordtype">void<\/span> updateStats(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00328	html/mtrand_8h_source.html	/^<div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;    <span class="keywordflow">return<\/span> i;<\/div>$/;"	a
l00328	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;            }<\/div>$/;"	a
l00328	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;<\/div>$/;"	a
l00328	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;                        <span class="keywordflow">return<\/span> ownInvFreq &gt; otherInvFreq;<\/div>$/;"	a
l00328	html/scheduler_8h_source.html	/^<div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;        }<\/div>$/;"	a
l00328	html/stats_8h_source.html	/^<div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;        uint64_t (*_func)();<\/div>$/;"	a
l00328	html/timing__event_8h_source.html	/^<div class="line"><a name="l00328"><\/a><span class="lineno">  328<\/span>&#160;                    numParents = 1;<\/div>$/;"	a
l00329	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;                <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div>$/;"	a
l00329	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;        <span class="keywordtype">void<\/span> finish(<span class="keywordtype">void<\/span>);<\/div>$/;"	a
l00329	html/mtrand_8h_source.html	/^<div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;}<\/div>$/;"	a
l00329	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;<\/div>$/;"	a
l00329	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;                <span class="comment">\/\/Need placement new, these objects have vptr<\/span><\/div>$/;"	a
l00329	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;                    }<\/div>$/;"	a
l00329	html/scheduler_8h_source.html	/^<div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;<\/div>$/;"	a
l00329	html/stats_8h_source.html	/^<div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;<\/div>$/;"	a
l00329	html/timing__event_8h_source.html	/^<div class="line"><a name="l00329"><\/a><span class="lineno">  329<\/span>&#160;                }<\/div>$/;"	a
l00330	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00330	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;};<\/div>$/;"	a
l00330	html/mtrand_8h_source.html	/^<div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;<\/div>$/;"	a
l00330	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;            buf[idx++] = curRetireCycle;<\/div>$/;"	a
l00330	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[i].profHits) <a class="code" href="classCounter.html">Counter<\/a>;<\/div>$/;"	a
l00330	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;                }<\/div>$/;"	a
l00330	html/scheduler_8h_source.html	/^<div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;        <span class="keywordtype">void<\/span> leave(uint32_t pid, uint32_t tid, uint32_t cid) {<\/div>$/;"	a
l00330	html/stats_8h_source.html	/^<div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00330	html/timing__event_8h_source.html	/^<div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;<\/div>$/;"	a
l00331	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;                assert((req.type == PUTS) || (req.type == PUTX));<\/div>$/;"	a
l00331	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;<\/div>$/;"	a
l00331	html/mtrand_8h_source.html	/^<div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> MTRand::rand() { <span class="keywordflow">return<\/span> double(randInt()) * (1.0\/4294967295.0); }<\/div>$/;"	a
l00331	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;            <span class="keywordflow">if<\/span> (idx == SZ) idx = 0;<\/div>$/;"	a
l00331	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[i].profMisses) <a class="code" href="classCounter.html">Counter<\/a>;<\/div>$/;"	a
l00331	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;                <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div>$/;"	a
l00331	html/scheduler_8h_source.html	/^<div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;            futex_lock(&amp;schedLock);<\/div>$/;"	a
l00331	html/stats_8h_source.html	/^<div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;        <a class="code" href="classProxyFuncStat.html">ProxyFuncStat<\/a>() : <a class="code" href="classScalarStat.html">ScalarStat<\/a>(), _func(<span class="keyword">nullptr<\/span>) {}<\/div>$/;"	a
l00331	html/timing__event_8h_source.html	/^<div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;                <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classCrossingEvent.html#a96199fafd70da779df838f73f24cb6b5">parentDone<\/a>(uint64_t startCycle) {<\/div>$/;"	a
l00332	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;                <span class="keywordflow">if<\/span> (!nonInclusiveHack) {<\/div>$/;"	a
l00332	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;<span class="comment">\/\/ DRAM access event base class<\/span><\/div>$/;"	a
l00332	html/mtrand_8h_source.html	/^<div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;<\/div>$/;"	a
l00332	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;        }<\/div>$/;"	a
l00332	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[i].profSelfEvictions) <a class="code" href="classCounter.html">Counter<\/a>;<\/div>$/;"	a
l00332	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;            }<\/div>$/;"	a
l00332	html/scheduler_8h_source.html	/^<div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;            <span class="comment">\/\/Just call bar.leave<\/span><\/div>$/;"	a
l00332	html/stats_8h_source.html	/^<div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;<\/div>$/;"	a
l00332	html/timing__event_8h_source.html	/^<div class="line"><a name="l00332"><\/a><span class="lineno">  332<\/span>&#160;                    assert_msg(numParents == 1, <span class="stringliteral">&quot;CSE: numParents %d&quot;<\/span>, numParents);<\/div>$/;"	a
l00333	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;                    panic(<span class="stringliteral">&quot;[%s] We lost inclusion on this line! 0x%lx, type %s, childId %d, childState %s&quot;<\/span>, name.c_str(),<\/div>$/;"	a
l00333	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00333"><\/a><span class="lineno"><a class="line" href="classMemAccessEventBase.html">  333<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMemAccessEventBase.html">MemAccessEventBase<\/a> : <span class="keyword">public<\/span> <a class="code" href="classTimingEvent.html">TimingEvent<\/a> {<\/div>$/;"	a
l00333	html/mtrand_8h_source.html	/^<div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> MTRand::rand(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> n) { <span class="keywordflow">return<\/span> rand() * n; }<\/div>$/;"	a
l00333	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;};<\/div>$/;"	a
l00333	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[i].profExtEvictions) <a class="code" href="classCounter.html">Counter<\/a>;<\/div>$/;"	a
l00333	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;        };<\/div>$/;"	a
l00333	html/scheduler_8h_source.html	/^<div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;            uint32_t gid = getGid(pid, tid);<\/div>$/;"	a
l00333	html/stats_8h_source.html	/^<div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;        <span class="keywordtype">void<\/span> init(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* name, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* desc, uint64_t (*func)()) {<\/div>$/;"	a
l00333	html/timing__event_8h_source.html	/^<div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;                    numParents = 0;<\/div>$/;"	a
l00334	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;                            req.lineAddr, AccessTypeName(req.type), req.childId, MESIStateName(*req.state));<\/div>$/;"	a
l00334	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00334	html/mtrand_8h_source.html	/^<div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;<\/div>$/;"	a
l00334	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;<\/div>$/;"	a
l00334	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[i].profDemotions) <a class="code" href="classCounter.html">Counter<\/a>;<\/div>$/;"	a
l00334	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;<\/div>$/;"	a
l00334	html/scheduler_8h_source.html	/^<div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;            ThreadInfo* th = contexts[cid].curThread;<\/div>$/;"	a
l00334	html/stats_8h_source.html	/^<div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;            initStat(name, desc);<\/div>$/;"	a
l00334	html/timing__event_8h_source.html	/^<div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;                    assert(numChildren == 0);<\/div>$/;"	a
l00335	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;                }<\/div>$/;"	a
l00335	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;        <a class="code" href="classMemControllerBase.html">MemControllerBase<\/a>* dram;<\/div>$/;"	a
l00335	html/mtrand_8h_source.html	/^<div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> MTRand::randExc() { <span class="keywordflow">return<\/span> double(randInt()) * (1.0\/4294967296.0); }<\/div>$/;"	a
l00335	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;<span class="comment">\/\/ Similar to ReorderBuffer, but must have in-order allocations and retires (--&gt; faster)<\/span><\/div>$/;"	a
l00335	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[i].profEvictions) <a class="code" href="classCounter.html">Counter<\/a>;<\/div>$/;"	a
l00335	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;        Rank bestRank;<\/div>$/;"	a
l00335	html/scheduler_8h_source.html	/^<div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;            assert(th-&gt;gid == gid);<\/div>$/;"	a
l00335	html/stats_8h_source.html	/^<div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;            _func = func;<\/div>$/;"	a
l00335	html/timing__event_8h_source.html	/^<div class="line"><a name="l00335"><\/a><span class="lineno">  335<\/span>&#160;                    ce-&gt;markSrcEventDone(startCycle);<\/div>$/;"	a
l00336	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;                <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;<\/div>$/;"	a
l00336	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;        MemAccessType type;<\/div>$/;"	a
l00336	html/mtrand_8h_source.html	/^<div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;<\/div>$/;"	a
l00336	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;<span class="keyword">template<\/span>&lt;u<span class="keywordtype">int<\/span>32_t SZ&gt;<\/div>$/;"	a
l00336	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[i].profSizeCycles) <a class="code" href="classCounter.html">Counter<\/a>;<\/div>$/;"	a
l00336	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;<\/div>$/;"	a
l00336	html/scheduler_8h_source.html	/^<div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;            assert(th-&gt;state == RUNNING);<\/div>$/;"	a
l00336	html/stats_8h_source.html	/^<div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;        }<\/div>$/;"	a
l00336	html/timing__event_8h_source.html	/^<div class="line"><a name="l00336"><\/a><span class="lineno">  336<\/span>&#160;                    assert(state == EV_NONE);<\/div>$/;"	a
l00337	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;            }<\/div>$/;"	a
l00337	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;        Address addr;<\/div>$/;"	a
l00337	html/mtrand_8h_source.html	/^<div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> MTRand::randExc(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> n) { <span class="keywordflow">return<\/span> randExc() * n; }<\/div>$/;"	a
l00337	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00337"><\/a><span class="lineno"><a class="line" href="classCycleQueue.html">  337<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classCycleQueue.html">CycleQueue<\/a> {<\/div>$/;"	a
l00337	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;                <span class="keyword">new<\/span> (&amp;partInfo[i].profExtendedSizeCycles) <a class="code" href="classCounter.html">Counter<\/a>;<\/div>$/;"	a
l00337	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00337	html/scheduler_8h_source.html	/^<div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;            zinfo-&gt;cores[cid]-&gt;leave();<\/div>$/;"	a
l00337	html/stats_8h_source.html	/^<div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;<\/div>$/;"	a
l00337	html/timing__event_8h_source.html	/^<div class="line"><a name="l00337"><\/a><span class="lineno">  337<\/span>&#160;                    state = EV_RUNNING;<\/div>$/;"	a
l00338	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;        }<\/div>$/;"	a
l00338	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;<\/div>$/;"	a
l00338	html/mtrand_8h_source.html	/^<div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;<\/div>$/;"	a
l00338	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00338	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;            }<\/div>$/;"	a
l00338	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classLFUReplPolicy.html">LFUReplPolicy<\/a>(uint32_t _numLines) : timestamp(1), bestCandidate(-1), numLines(_numLines) {<\/div>$/;"	a
l00338	html/scheduler_8h_source.html	/^<div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;<\/div>$/;"	a
l00338	html/stats_8h_source.html	/^<div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;        uint64_t <span class="keyword">get<\/span>() <span class="keyword">const<\/span> {<\/div>$/;"	a
l00338	html/timing__event_8h_source.html	/^<div class="line"><a name="l00338"><\/a><span class="lineno">  338<\/span>&#160;                    done(startCycle);  <span class="comment">\/\/ does RUNNING -&gt; DONE and frees event<\/span><\/div>$/;"	a
l00339	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;<\/div>$/;"	a
l00339	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00339	html/mtrand_8h_source.html	/^<div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> MTRand::randDblExc() { <span class="keywordflow">return<\/span> (<span class="keywordtype">double<\/span>(randInt()) + 0.5) * (1.0\/4294967296.0); }<\/div>$/;"	a
l00339	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;        uint64_t buf[SZ];<\/div>$/;"	a
l00339	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;<\/div>$/;"	a
l00339	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;            array = gm_calloc&lt;LFUInfo&gt;(numLines);<\/div>$/;"	a
l00339	html/scheduler_8h_source.html	/^<div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;            <span class="keywordflow">if<\/span> (th-&gt;markedForSleep) { <span class="comment">\/\/transition to SLEEPING, eagerly deschedule<\/span><\/div>$/;"	a
l00339	html/stats_8h_source.html	/^<div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;            assert(_func);<\/div>$/;"	a
l00339	html/timing__event_8h_source.html	/^<div class="line"><a name="l00339"><\/a><span class="lineno">  339<\/span>&#160;                }<\/div>$/;"	a
l00340	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;        uint64_t processEviction(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; triggerReq, Address wbLineAddr, int32_t lineId, uint64_t startCycle) {<\/div>$/;"	a
l00340	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;        <a class="code" href="classMemAccessEventBase.html">MemAccessEventBase<\/a>(<a class="code" href="classMemControllerBase.html">MemControllerBase<\/a>* _dram, MemAccessType _type, Address _addr, int32_t domain, uint32_t preDelay, uint32_t postDelay)<\/div>$/;"	a
l00340	html/mtrand_8h_source.html	/^<div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;<\/div>$/;"	a
l00340	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;        uint32_t idx;<\/div>$/;"	a
l00340	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;            <span class="comment">\/\/unmanaged region should not use these<\/span><\/div>$/;"	a
l00340	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;            bestRank.reset();<\/div>$/;"	a
l00340	html/scheduler_8h_source.html	/^<div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;                trace(Sched, <span class="stringliteral">&quot;Sched: %d going to SLEEP, wakeup on phase %ld&quot;<\/span>, gid, th-&gt;wakeupPhase);<\/div>$/;"	a
l00340	html/stats_8h_source.html	/^<div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;            <span class="keywordflow">return<\/span> _func();<\/div>$/;"	a
l00340	html/timing__event_8h_source.html	/^<div class="line"><a name="l00340"><\/a><span class="lineno">  340<\/span>&#160;<\/div>$/;"	a
l00341	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;            <span class="keywordtype">bool<\/span> lowerLevelWriteback = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00341	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;            : <a class="code" href="classTimingEvent.html">TimingEvent<\/a>(preDelay, postDelay, domain), dram(_dram), type(_type), addr(_addr) {}<\/div>$/;"	a
l00341	html/mtrand_8h_source.html	/^<div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> MTRand::randDblExc(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> n) { <span class="keywordflow">return<\/span> randDblExc() * n; }<\/div>$/;"	a
l00341	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;<\/div>$/;"	a
l00341	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;            partInfo[partitions].targetSize = 0;<\/div>$/;"	a
l00341	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;        }<\/div>$/;"	a
l00341	html/scheduler_8h_source.html	/^<div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;                th-&gt;markedForSleep = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00341	html/stats_8h_source.html	/^<div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;        }<\/div>$/;"	a
l00341	html/timing__event_8h_source.html	/^<div class="line"><a name="l00341"><\/a><span class="lineno">  341<\/span>&#160;                <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> simulate(uint64_t simCycle) {<\/div>$/;"	a
l00342	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;            uint64_t evCycle = tcc-&gt;processEviction(wbLineAddr, lineId, &amp;lowerLevelWriteback, startCycle, triggerReq.srcId); <span class="comment">\/\/1. if needed, send invalidates\/downgrades to lower level<\/span><\/div>$/;"	a
l00342	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<\/div>$/;"	a
l00342	html/mtrand_8h_source.html	/^<div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<\/div>$/;"	a
l00342	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00342	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;            partInfo[partitions].longTermTargetSize = 0;<\/div>$/;"	a
l00342	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<\/div>$/;"	a
l00342	html/scheduler_8h_source.html	/^<div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;                ContextInfo* ctx = &amp;contexts[cid];<\/div>$/;"	a
l00342	html/stats_8h_source.html	/^<div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;};<\/div>$/;"	a
l00342	html/timing__event_8h_source.html	/^<div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;                    panic(<span class="stringliteral">&quot;CrossingSrcEvent::simulate() called&quot;<\/span>);<\/div>$/;"	a
l00343	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;            evCycle = bcc-&gt;processEviction(wbLineAddr, lineId, lowerLevelWriteback, evCycle, triggerReq.srcId); <span class="comment">\/\/2. if needed, write back line to upper level<\/span><\/div>$/;"	a
l00343	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;        <span class="keywordtype">void<\/span> simulate(uint64_t startCycle) { dram-&gt;enqueue(<span class="keyword">this<\/span>, startCycle); }<\/div>$/;"	a
l00343	html/mtrand_8h_source.html	/^<div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> MTRand::rand53() {<\/div>$/;"	a
l00343	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;        <a class="code" href="classCycleQueue.html">CycleQueue<\/a>() {<\/div>$/;"	a
l00343	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;<\/div>$/;"	a
l00343	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;        ~<a class="code" href="classLFUReplPolicy.html">LFUReplPolicy<\/a>() {<\/div>$/;"	a
l00343	html/scheduler_8h_source.html	/^<div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;                deschedule(th, ctx, SLEEPING);<\/div>$/;"	a
l00343	html/stats_8h_source.html	/^<div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;<\/div>$/;"	a
l00343	html/timing__event_8h_source.html	/^<div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;                }<\/div>$/;"	a
l00344	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;            <span class="keywordflow">return<\/span> evCycle;<\/div>$/;"	a
l00344	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;        MemAccessType getType()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> type; }<\/div>$/;"	a
l00344	html/mtrand_8h_source.html	/^<div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;    uint64_t a = randInt() &gt;&gt; 5, b = randInt() &gt;&gt; 6;<\/div>$/;"	a
l00344	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; SZ; i++) buf[i] = 0;<\/div>$/;"	a
l00344	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;            array = gm_calloc&lt;LineInfo&gt;(totalSize);<\/div>$/;"	a
l00344	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;            gm_free(array);<\/div>$/;"	a
l00344	html/scheduler_8h_source.html	/^<div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;<\/div>$/;"	a
l00344	html/stats_8h_source.html	/^<div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;<span class="comment">\/*<\/span><\/div>$/;"	a
l00344	html/timing__event_8h_source.html	/^<div class="line"><a name="l00344"><\/a><span class="lineno">  344<\/span>&#160;        };<\/div>$/;"	a
l00345	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;        }<\/div>$/;"	a
l00345	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;        Address getAddr()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> addr; }<\/div>$/;"	a
l00345	html/mtrand_8h_source.html	/^<div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;    <span class="keywordflow">return<\/span> (a * 67108864.0 + b) * (1.0\/9007199254740992.0);  <span class="comment">\/\/ by Isaku Wada<\/span><\/div>$/;"	a
l00345	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;            idx = 0;<\/div>$/;"	a
l00345	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;<\/div>$/;"	a
l00345	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;        }<\/div>$/;"	a
l00345	html/scheduler_8h_source.html	/^<div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;                <span class="comment">\/\/Ordered insert into sleepQueue<\/span><\/div>$/;"	a
l00345	html/stats_8h_source.html	/^<div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;<span class="comment"> * Generic lambda stats<\/span><\/div>$/;"	a
l00345	html/timing__event_8h_source.html	/^<div class="line"><a name="l00345"><\/a><span class="lineno">  345<\/span>&#160;<\/div>$/;"	a
l00346	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;<\/div>$/;"	a
l00346	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;};<\/div>$/;"	a
l00346	html/mtrand_8h_source.html	/^<div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;}<\/div>$/;"	a
l00346	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;        }<\/div>$/;"	a
l00346	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;            <span class="comment">\/\/Initially, assign all the lines to the unmanaged region<\/span><\/div>$/;"	a
l00346	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;<\/div>$/;"	a
l00346	html/scheduler_8h_source.html	/^<div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;                <span class="keywordflow">if<\/span> (sleepQueue.empty() || sleepQueue.front()-&gt;wakeupPhase &gt; th-&gt;wakeupPhase) {<\/div>$/;"	a
l00346	html/stats_8h_source.html	/^<div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;<span class="comment"> * If your stat depends on a formula, this lets you encode it compactly using C++11 lambdas<\/span><\/div>$/;"	a
l00346	html/timing__event_8h_source.html	/^<div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;        CrossingSrcEvent cpe;<\/div>$/;"	a
l00347	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;        uint64_t processAccess(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req, int32_t lineId, uint64_t startCycle, uint64_t* getDoneCycle = <span class="keyword">nullptr<\/span>) {<\/div>$/;"	a
l00347	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<\/div>$/;"	a
l00347	html/mtrand_8h_source.html	/^<div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<\/div>$/;"	a
l00347	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<\/div>$/;"	a
l00347	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;            partInfo[partitions].size = totalSize;<\/div>$/;"	a
l00347	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;        <span class="keywordtype">void<\/span> update(uint32_t <span class="keywordtype">id<\/span>, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {<\/div>$/;"	a
l00347	html/scheduler_8h_source.html	/^<div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;                    sleepQueue.push_front(th);<\/div>$/;"	a
l00347	html/stats_8h_source.html	/^<div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<span class="comment"> *<\/span><\/div>$/;"	a
l00347	html/timing__event_8h_source.html	/^<div class="line"><a name="l00347"><\/a><span class="lineno">  347<\/span>&#160;<\/div>$/;"	a
l00348	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;            uint64_t respCycle = startCycle;<\/div>$/;"	a
l00348	html/detailed__mem_8h_source.html	/^<div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;<span class="preprocessor">#endif  \/\/ DETAILED_MEM_H_<\/span><\/div>$/;"	a
l00348	html/mtrand_8h_source.html	/^<div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> MTRand::randNorm(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span> mean, <span class="keyword">const<\/span> <span class="keywordtype">double<\/span> stddev) {<\/div>$/;"	a
l00348	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;        <span class="keyword">inline<\/span> uint64_t minAllocCycle() {<\/div>$/;"	a
l00348	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;            partInfo[partitions].extendedSize = totalSize;<\/div>$/;"	a
l00348	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;            <span class="comment">\/\/ts is the &quot;center of mass&quot; of all the accesses, i.e. the average timestamp<\/span><\/div>$/;"	a
l00348	html/scheduler_8h_source.html	/^<div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00348	html/stats_8h_source.html	/^<div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;<span class="comment"> * Usage example:<\/span><\/div>$/;"	a
l00348	html/timing__event_8h_source.html	/^<div class="line"><a name="l00348"><\/a><span class="lineno">  348<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00349	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;            <span class="comment">\/\/Handle non-inclusive writebacks by bypassing<\/span><\/div>$/;"	a
l00349	html/mtrand_8h_source.html	/^<div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;    <span class="comment">\/\/ Return a real number from a normal (Gaussian) distribution with given<\/span><\/div>$/;"	a
l00349	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;            <span class="keywordflow">return<\/span> buf[idx];<\/div>$/;"	a
l00349	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; totalSize; i++) {<\/div>$/;"	a
l00349	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;            array[id].ts = (array[id].acc*array[id].ts + timestamp)\/(array[<span class="keywordtype">id<\/span>].acc + 1);<\/div>$/;"	a
l00349	html/scheduler_8h_source.html	/^<div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;                    ThreadInfo* cur = sleepQueue.front();<\/div>$/;"	a
l00349	html/stats_8h_source.html	/^<div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;<span class="comment"> *  auto x = [this]() { return curCycle - haltedCycles; }; \/\/declare the lambda function that computes the stat; note this is captured because these values are class members<\/span><\/div>$/;"	a
l00349	html/timing__event_8h_source.html	/^<div class="line"><a name="l00349"><\/a><span class="lineno">  349<\/span>&#160;        <a class="code" href="classCrossingEvent.html">CrossingEvent<\/a>(<a class="code" href="classTimingEvent.html">TimingEvent<\/a>* parent, <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* child, uint64_t _minStartCycle, <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* _evRec);<\/div>$/;"	a
l00350	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;            <span class="comment">\/\/NOTE: Most of the time, these are due to evictions, so the line is not there. But the second condition can trigger in NUCA-initiated<\/span><\/div>$/;"	a
l00350	html/mtrand_8h_source.html	/^<div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;    <span class="comment">\/\/ mean and standard deviation by polar form of Box-Muller transformation<\/span><\/div>$/;"	a
l00350	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;        }<\/div>$/;"	a
l00350	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;                array[i].p = partitions;<\/div>$/;"	a
l00350	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;            array[id].acc++;<\/div>$/;"	a
l00350	html/scheduler_8h_source.html	/^<div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;                    <span class="keywordflow">while<\/span> (cur-&gt;next &amp;&amp; cur-&gt;next-&gt;wakeupPhase &lt;= th-&gt;wakeupPhase) {<\/div>$/;"	a
l00350	html/stats_8h_source.html	/^<div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;<span class="comment"> *  LambdaStat&lt;decltype(x)&gt;* cyclesStat = new LambdaStat&lt;decltype(x)&gt;(x); \/\/instantiate the templated stat. Each lambda has a unique type, which you get with decltype<\/span><\/div>$/;"	a
l00350	html/timing__event_8h_source.html	/^<div class="line"><a name="l00350"><\/a><span class="lineno">  350<\/span>&#160;<\/div>$/;"	a
l00351	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;            <span class="comment">\/\/invalidations. The alternative with this would be to capture these blocks, since we have space anyway. This is so rare is doesn&#39;t matter,<\/span><\/div>$/;"	a
l00351	html/mtrand_8h_source.html	/^<div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;    <span class="keywordtype">double<\/span> x, y, r;<\/div>$/;"	a
l00351	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;<\/div>$/;"	a
l00351	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;                array[i].op = partitions;<\/div>$/;"	a
l00351	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;            timestamp += 1000; <span class="comment">\/\/have larger steps to avoid losing too much resolution over successive divisions<\/span><\/div>$/;"	a
l00351	html/scheduler_8h_source.html	/^<div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;                        cur = cur-&gt;next;<\/div>$/;"	a
l00351	html/stats_8h_source.html	/^<div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;<span class="comment"> *  cyclesStat-&gt;init(&quot;cycles&quot;, &quot;Simulated cycles&quot;); \/\/etc. Use as an usual stat!<\/span><\/div>$/;"	a
l00351	html/timing__event_8h_source.html	/^<div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;        <a class="code" href="classTimingEvent.html">TimingEvent<\/a>* getSrcDomainEvent() {<span class="keywordflow">return<\/span> &amp;cpe;}<\/div>$/;"	a
l00352	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;            <span class="comment">\/\/but if we do proper NI\/EX mid-level caches backed by directories, this may start becoming more common (and it is perfectly acceptable to<\/span><\/div>$/;"	a
l00352	html/mtrand_8h_source.html	/^<div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;    <span class="keywordflow">do<\/span> {<\/div>$/;"	a
l00352	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> markLeave(uint64_t leaveCycle) {<\/div>$/;"	a
l00352	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;            }<\/div>$/;"	a
l00352	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;        }<\/div>$/;"	a
l00352	html/scheduler_8h_source.html	/^<div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;                    }<\/div>$/;"	a
l00352	html/stats_8h_source.html	/^<div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;<span class="comment"> *\/<\/span><\/div>$/;"	a
l00352	html/timing__event_8h_source.html	/^<div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;<\/div>$/;"	a
l00353	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;            <span class="comment">\/\/upgrade without any interaction with the parent... the child had the permissions!)<\/span><\/div>$/;"	a
l00353	html/mtrand_8h_source.html	/^<div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;        x = 2.0 * rand() - 1.0;<\/div>$/;"	a
l00353	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;            <span class="comment">\/\/assert(buf[idx] &lt;= leaveCycle);<\/span><\/div>$/;"	a
l00353	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;<\/div>$/;"	a
l00353	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;<\/div>$/;"	a
l00353	html/scheduler_8h_source.html	/^<div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;                    trace(Sched, <span class="stringliteral">&quot;Put %d in sleepQueue (deadline %ld), after %d (deadline %ld)&quot;<\/span>, gid, th-&gt;wakeupPhase, cur-&gt;gid, cur-&gt;wakeupPhase);<\/div>$/;"	a
l00353	html/stats_8h_source.html	/^<div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> F&gt;<\/div>$/;"	a
l00353	html/timing__event_8h_source.html	/^<div class="line"><a name="l00353"><\/a><span class="lineno">  353<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classCrossingEvent.html#a96199fafd70da779df838f73f24cb6b5">parentDone<\/a>(uint64_t startCycle);<\/div>$/;"	a
l00354	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;            <span class="keywordflow">if<\/span> (lineId == -1 || (((req.type == PUTS) || (req.type == PUTX)) &amp;&amp; !bcc-&gt;isValid(lineId))) { <span class="comment">\/\/can only be a non-inclusive wback<\/span><\/div>$/;"	a
l00354	html/mtrand_8h_source.html	/^<div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;        y = 2.0 * rand() - 1.0;<\/div>$/;"	a
l00354	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;            buf[idx++] = leaveCycle;<\/div>$/;"	a
l00354	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;            candList = gm_calloc&lt;uint32_t&gt;(assoc);<\/div>$/;"	a
l00354	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;        <span class="keywordtype">void<\/span> recordCandidate(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00354	html/scheduler_8h_source.html	/^<div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;                    sleepQueue.insertAfter(cur, th);<\/div>$/;"	a
l00354	html/stats_8h_source.html	/^<div class="line"><a name="l00354"><\/a><span class="lineno"><a class="line" href="classLambdaStat.html">  354<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classLambdaStat.html">LambdaStat<\/a> : <span class="keyword">public<\/span> <a class="code" href="classScalarStat.html">ScalarStat<\/a> {<\/div>$/;"	a
l00354	html/timing__event_8h_source.html	/^<div class="line"><a name="l00354"><\/a><span class="lineno">  354<\/span>&#160;<\/div>$/;"	a
l00355	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;                assert(nonInclusiveHack);<\/div>$/;"	a
l00355	html/mtrand_8h_source.html	/^<div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;        r = x * x + y * y;<\/div>$/;"	a
l00355	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;            <span class="keywordflow">if<\/span> (idx == SZ) idx = 0;<\/div>$/;"	a
l00355	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;            candIdx = 0;<\/div>$/;"	a
l00355	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;            Rank candRank = {array[id], cc? cc-&gt;numSharers(<span class="keywordtype">id<\/span>) : 0, cc-&gt;isValid(<span class="keywordtype">id<\/span>)};<\/div>$/;"	a
l00355	html/scheduler_8h_source.html	/^<div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;                }<\/div>$/;"	a
l00355	html/stats_8h_source.html	/^<div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00355	html/timing__event_8h_source.html	/^<div class="line"><a name="l00355"><\/a><span class="lineno">  355<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> simulate(uint64_t simCycle);<\/div>$/;"	a
l00356	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;                assert((req.type == PUTS) || (req.type == PUTX));<\/div>$/;"	a
l00356	html/mtrand_8h_source.html	/^<div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;    } <span class="keywordflow">while<\/span> (r &gt;= 1.0 || r == 0.0);<\/div>$/;"	a
l00356	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;        }<\/div>$/;"	a
l00356	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;            timestamp = 1;<\/div>$/;"	a
l00356	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;<\/div>$/;"	a
l00356	html/scheduler_8h_source.html	/^<div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;                sleepEvents.inc();<\/div>$/;"	a
l00356	html/stats_8h_source.html	/^<div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;        F f;<\/div>$/;"	a
l00356	html/timing__event_8h_source.html	/^<div class="line"><a name="l00356"><\/a><span class="lineno">  356<\/span>&#160;<\/div>$/;"	a
l00357	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;                respCycle = bcc-&gt;processNonInclusiveWriteback(req.lineAddr, req.type, startCycle, req.state, req.srcId, req.flags);<\/div>$/;"	a
l00357	html/mtrand_8h_source.html	/^<div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;    <span class="keywordtype">double<\/span> s = sqrt(-2.0 * log(r) \/ r);<\/div>$/;"	a
l00357	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;};<\/div>$/;"	a
l00357	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;<\/div>$/;"	a
l00357	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;            <span class="keywordflow">if<\/span> (bestCandidate == -1 || candRank.lessThan(bestRank, timestamp)) {<\/div>$/;"	a
l00357	html/scheduler_8h_source.html	/^<div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;<\/div>$/;"	a
l00357	html/stats_8h_source.html	/^<div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;<\/div>$/;"	a
l00357	html/timing__event_8h_source.html	/^<div class="line"><a name="l00357"><\/a><span class="lineno">  357<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00358	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00358	html/mtrand_8h_source.html	/^<div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;    <span class="keywordflow">return<\/span> mean + x * s * stddev;<\/div>$/;"	a
l00358	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;<\/div>$/;"	a
l00358	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;            lastUpdateCycle = 0;<\/div>$/;"	a
l00358	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;                bestRank = candRank;<\/div>$/;"	a
l00358	html/scheduler_8h_source.html	/^<div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;                ThreadInfo* inTh = schedContext(ctx);<\/div>$/;"	a
l00358	html/stats_8h_source.html	/^<div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00358	html/timing__event_8h_source.html	/^<div class="line"><a name="l00358"><\/a><span class="lineno">  358<\/span>&#160;        <span class="keywordtype">void<\/span> markSrcEventDone(uint64_t cycle);<\/div>$/;"	a
l00359	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;                <span class="comment">\/\/Prefetches are side requests and get handled a bit differently<\/span><\/div>$/;"	a
l00359	html/mtrand_8h_source.html	/^<div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;}<\/div>$/;"	a
l00359	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;<span class="keyword">struct <\/span><a class="code" href="structBblInfo.html">BblInfo<\/a>;<\/div>$/;"	a
l00359	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;<\/div>$/;"	a
l00359	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;                bestCandidate = id;<\/div>$/;"	a
l00359	html/scheduler_8h_source.html	/^<div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;                <span class="keywordflow">if<\/span> (inTh) {<\/div>$/;"	a
l00359	html/stats_8h_source.html	/^<div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classLambdaStat.html">LambdaStat<\/a>(F _f) : f(_f) {} <span class="comment">\/\/copy the lambda<\/span><\/div>$/;"	a
l00359	html/timing__event_8h_source.html	/^<div class="line"><a name="l00359"><\/a><span class="lineno">  359<\/span>&#160;<\/div>$/;"	a
l00360	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;                <span class="keywordtype">bool<\/span> isPrefetch = req.flags &amp; MemReq::PREFETCH;<\/div>$/;"	a
l00360	html/mtrand_8h_source.html	/^<div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;<\/div>$/;"	a
l00360	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;<\/div>$/;"	a
l00360	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;            info(<span class="stringliteral">&quot;Vantage RP: %d partitions, managed portion %f Amax %f slack %f&quot;<\/span>, partitions, partPortion, maxAperture, partSlack);<\/div>$/;"	a
l00360	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;            }<\/div>$/;"	a
l00360	html/scheduler_8h_source.html	/^<div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;                    schedule(inTh, ctx);<\/div>$/;"	a
l00360	html/stats_8h_source.html	/^<div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;        uint64_t <span class="keyword">get<\/span>() <span class="keyword">const<\/span> {<span class="keywordflow">return<\/span> f();}<\/div>$/;"	a
l00360	html/timing__event_8h_source.html	/^<div class="line"><a name="l00360"><\/a><span class="lineno">  360<\/span>&#160;        <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="classContentionSim.html">ContentionSim<\/a>;<\/div>$/;"	a
l00361	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;                assert(!isPrefetch || req.type == GETS);<\/div>$/;"	a
l00361	html/mtrand_8h_source.html	/^<div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> MTRand::operator()() {<\/div>$/;"	a
l00361	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00361"><\/a><span class="lineno"><a class="line" href="classOOOCore.html">  361<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classOOOCore.html">OOOCore<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCore.html">Core<\/a> {<\/div>$/;"	a
l00361	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;        }<\/div>$/;"	a
l00361	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;        }<\/div>$/;"	a
l00361	html/scheduler_8h_source.html	/^<div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;                    zinfo-&gt;cores[ctx-&gt;cid]-&gt;join(); <span class="comment">\/\/inTh does not do a sched-&gt;join, so we need to notify the core since we just called leave() on it<\/span><\/div>$/;"	a
l00361	html/stats_8h_source.html	/^<div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;};<\/div>$/;"	a
l00361	html/timing__event_8h_source.html	/^<div class="line"><a name="l00361"><\/a><span class="lineno">  361<\/span>&#160;};<\/div>$/;"	a
l00362	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;                uint32_t flags = req.flags &amp; ~<a class="code" href="structMemReq.html">MemReq<\/a>::PREFETCH; <span class="comment">\/\/always clear PREFETCH, this flag cannot propagate up<\/span><\/div>$/;"	a
l00362	html/mtrand_8h_source.html	/^<div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;    <span class="keywordflow">return<\/span> rand();<\/div>$/;"	a
l00362	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00362	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;<\/div>$/;"	a
l00362	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;<\/div>$/;"	a
l00362	html/scheduler_8h_source.html	/^<div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;                    wakeup(inTh, <span class="keyword">false<\/span> <span class="comment">\/*no join, we did not leave*\/<\/span>);<\/div>$/;"	a
l00362	html/stats_8h_source.html	/^<div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;<\/div>$/;"	a
l00362	html/timing__event_8h_source.html	/^<div class="line"><a name="l00362"><\/a><span class="lineno">  362<\/span>&#160;<\/div>$/;"	a
l00363	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;<\/div>$/;"	a
l00363	html/mtrand_8h_source.html	/^<div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;}<\/div>$/;"	a
l00363	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;        <a class="code" href="classFilterCache.html">FilterCache<\/a>* l1i;<\/div>$/;"	a
l00363	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat) {<\/div>$/;"	a
l00363	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;        uint32_t getBestCandidate() {<\/div>$/;"	a
l00363	html/scheduler_8h_source.html	/^<div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00363	html/stats_8h_source.html	/^<div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> F&gt;<\/div>$/;"	a
l00363	html/timing__event_8h_source.html	/^<div class="line"><a name="l00363"><\/a><span class="lineno">  363<\/span>&#160;<\/div>$/;"	a
l00364	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;                <span class="comment">\/\/if needed, fetch line or upgrade miss from upper level<\/span><\/div>$/;"	a
l00364	html/mtrand_8h_source.html	/^<div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;<\/div>$/;"	a
l00364	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;        <a class="code" href="classFilterCache.html">FilterCache<\/a>* l1d;<\/div>$/;"	a
l00364	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;            <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* rpStat = <span class="keyword">new<\/span> <a class="code" href="classAggregateStat.html">AggregateStat<\/a>();<\/div>$/;"	a
l00364	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;            assert(bestCandidate != -1);<\/div>$/;"	a
l00364	html/scheduler_8h_source.html	/^<div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;                    freeList.push_back(ctx);<\/div>$/;"	a
l00364	html/stats_8h_source.html	/^<div class="line"><a name="l00364"><\/a><span class="lineno"><a class="line" href="classLambdaVectorStat.html">  364<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classLambdaVectorStat.html">LambdaVectorStat<\/a> : <span class="keyword">public<\/span> <a class="code" href="classVectorStat.html">VectorStat<\/a> {<\/div>$/;"	a
l00364	html/timing__event_8h_source.html	/^<div class="line"><a name="l00364"><\/a><span class="lineno">  364<\/span>&#160;<span class="preprocessor">#endif  \/\/ TIMING_EVENT_H_<\/span><\/div>$/;"	a
l00365	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;                respCycle = bcc-&gt;processAccess(req.lineAddr, lineId, req.type, startCycle, req.srcId, flags);<\/div>$/;"	a
l00365	html/mtrand_8h_source.html	/^<div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> MTRand::save(uint64_t* saveArray)<span class="keyword"> const <\/span>{<\/div>$/;"	a
l00365	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;<\/div>$/;"	a
l00365	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;            rpStat-&gt;init(<span class="stringliteral">&quot;part&quot;<\/span>, <span class="stringliteral">&quot;Vantage replacement policy stats&quot;<\/span>);<\/div>$/;"	a
l00365	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;            <span class="keywordflow">return<\/span> (uint32_t)bestCandidate;<\/div>$/;"	a
l00365	html/scheduler_8h_source.html	/^<div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;                    bar.leave(cid); <span class="comment">\/\/may trigger end of phase<\/span><\/div>$/;"	a
l00365	html/stats_8h_source.html	/^<div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00366	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;                <span class="keywordflow">if<\/span> (getDoneCycle) *getDoneCycle = respCycle;<\/div>$/;"	a
l00366	html/mtrand_8h_source.html	/^<div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;    <span class="keyword">register<\/span> <span class="keyword">const<\/span> uint64_t *s = state;<\/div>$/;"	a
l00366	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;        uint64_t phaseEndCycle; <span class="comment">\/\/next stopping point<\/span><\/div>$/;"	a
l00366	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;            <a class="code" href="classProxyStat.html">ProxyStat<\/a>* pStat;<\/div>$/;"	a
l00366	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;        }<\/div>$/;"	a
l00366	html/scheduler_8h_source.html	/^<div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;                }<\/div>$/;"	a
l00366	html/stats_8h_source.html	/^<div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;        F f;<\/div>$/;"	a
l00367	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;                <span class="keywordflow">if<\/span> (!isPrefetch) { <span class="comment">\/\/prefetches only touch bcc; the demand request from the core will pull the line to lower level<\/span><\/div>$/;"	a
l00367	html/mtrand_8h_source.html	/^<div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;    <span class="keyword">register<\/span> uint64_t *sa = saveArray;<\/div>$/;"	a
l00367	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;<\/div>$/;"	a
l00367	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;            profPromotions.init(<span class="stringliteral">&quot;ffaProms&quot;<\/span>, <span class="stringliteral">&quot;Promotions from unmanaged region&quot;<\/span>); rpStat-&gt;append(&amp;profPromotions);<\/div>$/;"	a
l00367	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;<\/div>$/;"	a
l00367	html/scheduler_8h_source.html	/^<div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;            } <span class="keywordflow">else<\/span> { <span class="comment">\/\/lazily transition to OUT, where we retain our context<\/span><\/div>$/;"	a
l00367	html/stats_8h_source.html	/^<div class="line"><a name="l00367"><\/a><span class="lineno">  367<\/span>&#160;        uint32_t s;<\/div>$/;"	a
l00368	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;                    <span class="comment">\/\/At this point, the line is in a good state w.r.t. upper levels<\/span><\/div>$/;"	a
l00368	html/mtrand_8h_source.html	/^<div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;    <span class="keyword">register<\/span> <span class="keywordtype">int<\/span> i = N;<\/div>$/;"	a
l00368	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;        uint64_t curCycle; <span class="comment">\/\/this model is issue-centric; curCycle refers to the current issue cycle<\/span><\/div>$/;"	a
l00368	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;            profUpdateCycles.init(<span class="stringliteral">&quot;updCycles&quot;<\/span>, <span class="stringliteral">&quot;Cycles of updates experienced on size-cycle counters&quot;<\/span>); rpStat-&gt;append(&amp;profUpdateCycles);<\/div>$/;"	a
l00368	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;        <span class="keywordtype">void<\/span> replaced(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00368	html/scheduler_8h_source.html	/^<div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;                ContextInfo* ctx = &amp;contexts[cid];<\/div>$/;"	a
l00368	html/stats_8h_source.html	/^<div class="line"><a name="l00368"><\/a><span class="lineno">  368<\/span>&#160;<\/div>$/;"	a
l00369	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;                    <span class="keywordtype">bool<\/span> lowerLevelWriteback = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00369	html/mtrand_8h_source.html	/^<div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;    <span class="keywordflow">for<\/span> (; i--; *sa++ = *s++) {}<\/div>$/;"	a
l00369	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;        uint64_t regScoreboard[MAX_REGISTERS]; <span class="comment">\/\/contains timestamp of next issue cycles where each reg can be sourced<\/span><\/div>$/;"	a
l00369	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t p = 0; p &lt;= partitions; p++) {<\/div>$/;"	a
l00369	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;            bestCandidate = -1;<\/div>$/;"	a
l00369	html/scheduler_8h_source.html	/^<div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;                ThreadInfo* inTh = schedContext(ctx);<\/div>$/;"	a
l00369	html/stats_8h_source.html	/^<div class="line"><a name="l00369"><\/a><span class="lineno">  369<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00370	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;                    <span class="comment">\/\/change directory info, invalidate other children if needed, tell requester about its state<\/span><\/div>$/;"	a
l00370	html/mtrand_8h_source.html	/^<div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;    *sa = left;<\/div>$/;"	a
l00370	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;<\/div>$/;"	a
l00370	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;                std::stringstream pss;<\/div>$/;"	a
l00370	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;            bestRank.reset();<\/div>$/;"	a
l00370	html/scheduler_8h_source.html	/^<div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;                <span class="keywordflow">if<\/span> (inTh) { <span class="comment">\/\/transition to BLOCKED, sched inTh<\/span><\/div>$/;"	a
l00370	html/stats_8h_source.html	/^<div class="line"><a name="l00370"><\/a><span class="lineno">  370<\/span>&#160;        <a class="code" href="classLambdaVectorStat.html">LambdaVectorStat<\/a>(F _f, uint32_t _s) : <a class="code" href="classVectorStat.html">VectorStat<\/a>(), f(_f), s(_s) {}<\/div>$/;"	a
l00371	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;                    respCycle = tcc-&gt;processAccess(req.lineAddr, lineId, req.type, req.childId, bcc-&gt;isExclusive(lineId), req.state,<\/div>$/;"	a
l00371	html/mtrand_8h_source.html	/^<div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;}<\/div>$/;"	a
l00371	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;        <a class="code" href="structBblInfo.html">BblInfo<\/a>* prevBbl;<\/div>$/;"	a
l00371	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;                pss &lt;&lt; <span class="stringliteral">&quot;part-&quot;<\/span> &lt;&lt; p;<\/div>$/;"	a
l00371	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;            array[id].acc = 0;<\/div>$/;"	a
l00371	html/scheduler_8h_source.html	/^<div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;                    deschedule(th, ctx, BLOCKED);<\/div>$/;"	a
l00371	html/stats_8h_source.html	/^<div class="line"><a name="l00371"><\/a><span class="lineno">  371<\/span>&#160;        uint32_t size()<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> s; }<\/div>$/;"	a
l00372	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;                            &amp;lowerLevelWriteback, respCycle, req.srcId, flags);<\/div>$/;"	a
l00372	html/mtrand_8h_source.html	/^<div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;<\/div>$/;"	a
l00372	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;<\/div>$/;"	a
l00372	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;                <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* partStat = <span class="keyword">new<\/span> <a class="code" href="classAggregateStat.html">AggregateStat<\/a>();<\/div>$/;"	a
l00372	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;        }<\/div>$/;"	a
l00372	html/scheduler_8h_source.html	/^<div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;                    schedule(inTh, ctx);<\/div>$/;"	a
l00372	html/stats_8h_source.html	/^<div class="line"><a name="l00372"><\/a><span class="lineno">  372<\/span>&#160;        uint64_t count(uint32_t idx)<span class="keyword"> const <\/span>{ <span class="comment">\/\/dsm: Interestingly, this compiles even if f() is not const. gcc may catch this eventually...<\/span><\/div>$/;"	a
l00373	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;                    <span class="keywordflow">if<\/span> (lowerLevelWriteback) {<\/div>$/;"	a
l00373	html/mtrand_8h_source.html	/^<div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;<span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> MTRand::load(uint64_t *<span class="keyword">const<\/span> loadArray) {<\/div>$/;"	a
l00373	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;        <span class="comment">\/\/Record load and store addresses<\/span><\/div>$/;"	a
l00373	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;                partStat-&gt;init(gm_strdup(pss.str().c_str()), <span class="stringliteral">&quot;Partition stats&quot;<\/span>);<\/div>$/;"	a
l00373	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;};<\/div>$/;"	a
l00373	html/scheduler_8h_source.html	/^<div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;                    zinfo-&gt;cores[ctx-&gt;cid]-&gt;join(); <span class="comment">\/\/inTh does not do a sched-&gt;join, so we need to notify the core since we just called leave() on it<\/span><\/div>$/;"	a
l00373	html/stats_8h_source.html	/^<div class="line"><a name="l00373"><\/a><span class="lineno">  373<\/span>&#160;            assert(idx &lt; s);<\/div>$/;"	a
l00374	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;                        <span class="comment">\/\/Essentially, if tcc induced a writeback, bcc may need to do an E-&gt;M transition to reflect that the cache now has dirty data<\/span><\/div>$/;"	a
l00374	html/mtrand_8h_source.html	/^<div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;    <span class="keyword">register<\/span> uint64_t *s = state;<\/div>$/;"	a
l00374	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;        Address loadAddrs[256];<\/div>$/;"	a
l00374	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;<\/div>$/;"	a
l00374	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;<\/div>$/;"	a
l00374	html/scheduler_8h_source.html	/^<div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;                    wakeup(inTh, <span class="keyword">false<\/span> <span class="comment">\/*no join, we did not leave*\/<\/span>);<\/div>$/;"	a
l00374	html/stats_8h_source.html	/^<div class="line"><a name="l00374"><\/a><span class="lineno">  374<\/span>&#160;            <span class="keywordflow">return<\/span> f(idx);<\/div>$/;"	a
l00375	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;                        bcc-&gt;processWritebackOnAccess(req.lineAddr, lineId, req.type);<\/div>$/;"	a
l00375	html/mtrand_8h_source.html	/^<div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;    <span class="keyword">register<\/span> uint64_t *la = loadArray;<\/div>$/;"	a
l00375	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;        Address storeAddrs[256];<\/div>$/;"	a
l00375	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;                pStat = <span class="keyword">new<\/span> <a class="code" href="classProxyStat.html">ProxyStat<\/a>(); pStat-&gt;init(<span class="stringliteral">&quot;sz&quot;<\/span>, <span class="stringliteral">&quot;Actual size&quot;<\/span>, &amp;partInfo[p].size); partStat-&gt;append(pStat);<\/div>$/;"	a
l00375	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;<span class="comment">\/\/Extends a given replacement policy to profile access ordering violations<\/span><\/div>$/;"	a
l00375	html/scheduler_8h_source.html	/^<div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;                } <span class="keywordflow">else<\/span> { <span class="comment">\/\/lazily transition to OUT, where we retain our context<\/span><\/div>$/;"	a
l00375	html/stats_8h_source.html	/^<div class="line"><a name="l00375"><\/a><span class="lineno">  375<\/span>&#160;        }<\/div>$/;"	a
l00376	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;                    }<\/div>$/;"	a
l00376	html/mtrand_8h_source.html	/^<div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;    <span class="keyword">register<\/span> <span class="keywordtype">int<\/span> i = N;<\/div>$/;"	a
l00376	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;        uint32_t loads;<\/div>$/;"	a
l00376	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;                pStat = <span class="keyword">new<\/span> <a class="code" href="classProxyStat.html">ProxyStat<\/a>(); pStat-&gt;init(<span class="stringliteral">&quot;xSz&quot;<\/span>, <span class="stringliteral">&quot;Extended actual size, including lines currently demoted to FFA&quot;<\/span>, &amp;partInfo[p].extendedSize); partStat-&gt;append(pStat);<\/div>$/;"	a
l00376	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div>$/;"	a
l00376	html/scheduler_8h_source.html	/^<div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;                    th-&gt;state = OUT;<\/div>$/;"	a
l00376	html/stats_8h_source.html	/^<div class="line"><a name="l00376"><\/a><span class="lineno">  376<\/span>&#160;};<\/div>$/;"	a
l00377	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;                }<\/div>$/;"	a
l00377	html/mtrand_8h_source.html	/^<div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;    <span class="keywordflow">for<\/span> (; i--; *s++ = *la++) {}<\/div>$/;"	a
l00377	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;        uint32_t stores;<\/div>$/;"	a
l00377	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;                <span class="comment">\/\/NOTE: To avoid breaking scripts, I&#39;ve changed tgtSz to track longTermTargetSize<\/span><\/div>$/;"	a
l00377	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00377"><\/a><span class="lineno"><a class="line" href="classProfViolReplPolicy.html">  377<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classProfViolReplPolicy.html">ProfViolReplPolicy<\/a> : <span class="keyword">public<\/span> T {<\/div>$/;"	a
l00377	html/scheduler_8h_source.html	/^<div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;                    outQueue.push_back(th);<\/div>$/;"	a
l00377	html/stats_8h_source.html	/^<div class="line"><a name="l00377"><\/a><span class="lineno">  377<\/span>&#160;<\/div>$/;"	a
l00378	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;            }<\/div>$/;"	a
l00378	html/mtrand_8h_source.html	/^<div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;    left = *la;<\/div>$/;"	a
l00378	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;<\/div>$/;"	a
l00378	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;                <span class="comment">\/\/FIXME: Code and stats should be named similarly<\/span><\/div>$/;"	a
l00378	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00378	html/scheduler_8h_source.html	/^<div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;                    bar.leave(cid); <span class="comment">\/\/may trigger end of phase<\/span><\/div>$/;"	a
l00378	html/stats_8h_source.html	/^<div class="line"><a name="l00378"><\/a><span class="lineno">  378<\/span>&#160;<span class="comment">\/\/ Convenience creation functions<\/span><\/div>$/;"	a
l00379	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;            <span class="keywordflow">return<\/span> respCycle;<\/div>$/;"	a
l00379	html/mtrand_8h_source.html	/^<div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;    pNext = &amp;state[N-left];<\/div>$/;"	a
l00379	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;        uint64_t lastStoreCommitCycle;<\/div>$/;"	a
l00379	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;                pStat = <span class="keyword">new<\/span> <a class="code" href="classProxyStat.html">ProxyStat<\/a>(); pStat-&gt;init(<span class="stringliteral">&quot;tgtSz&quot;<\/span>, <span class="stringliteral">&quot;Target size&quot;<\/span>, &amp;partInfo[p].longTermTargetSize); partStat-&gt;append(pStat);<\/div>$/;"	a
l00379	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;        <span class="keyword">struct <\/span>AccTimes {<\/div>$/;"	a
l00379	html/scheduler_8h_source.html	/^<div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;                }<\/div>$/;"	a
l00379	html/stats_8h_source.html	/^<div class="line"><a name="l00379"><\/a><span class="lineno">  379<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> F&gt;<\/div>$/;"	a
l00380	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;        }<\/div>$/;"	a
l00380	html/mtrand_8h_source.html	/^<div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;}<\/div>$/;"	a
l00380	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;        uint64_t lastStoreAddrCommitCycle; <span class="comment">\/\/tracks last store addr uop, all loads queue behind it<\/span><\/div>$/;"	a
l00380	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;                pStat = <span class="keyword">new<\/span> <a class="code" href="classProxyStat.html">ProxyStat<\/a>(); pStat-&gt;init(<span class="stringliteral">&quot;stTgtSz&quot;<\/span>, <span class="stringliteral">&quot;Short-term target size (used with smoothedTransients)&quot;<\/span>, &amp;partInfo[p].targetSize); partStat-&gt;append(pStat);<\/div>$/;"	a
l00380	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;            uint64_t read;<\/div>$/;"	a
l00380	html/scheduler_8h_source.html	/^<div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;            }<\/div>$/;"	a
l00380	html/stats_8h_source.html	/^<div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;<a class="code" href="classLambdaStat.html">LambdaStat&lt;F&gt;<\/a>* makeLambdaStat(F f) { <span class="keywordflow">return<\/span> <span class="keyword">new<\/span> <a class="code" href="classLambdaStat.html">LambdaStat&lt;F&gt;<\/a>(f); }<\/div>$/;"	a
l00381	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;<\/div>$/;"	a
l00381	html/mtrand_8h_source.html	/^<div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;<\/div>$/;"	a
l00381	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;<\/div>$/;"	a
l00381	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;                partInfo[p].profHits.init(<span class="stringliteral">&quot;hits&quot;<\/span>, <span class="stringliteral">&quot;Hits&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profHits);<\/div>$/;"	a
l00381	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;            uint64_t write;<\/div>$/;"	a
l00381	html/scheduler_8h_source.html	/^<div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;<\/div>$/;"	a
l00381	html/stats_8h_source.html	/^<div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;<\/div>$/;"	a
l00382	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;        <span class="keywordtype">void<\/span> endAccess(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) {<\/div>$/;"	a
l00382	html/mtrand_8h_source.html	/^<div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;<span class="keyword">inline<\/span> std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, <span class="keyword">const<\/span> <a class="code" href="classMTRand.html">MTRand<\/a>&amp; mtrand) {<\/div>$/;"	a
l00382	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;        <span class="comment">\/\/LSU queues are modeled like the ROB. Surprising? Entries are grabbed in dataflow order,<\/span><\/div>$/;"	a
l00382	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;                partInfo[p].profMisses.init(<span class="stringliteral">&quot;misses&quot;<\/span>, <span class="stringliteral">&quot;Misses&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profMisses);<\/div>$/;"	a
l00382	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;        };<\/div>$/;"	a
l00382	html/scheduler_8h_source.html	/^<div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;            futex_unlock(&amp;schedLock);<\/div>$/;"	a
l00382	html/stats_8h_source.html	/^<div class="line"><a name="l00382"><\/a><span class="lineno">  382<\/span>&#160;<span class="keyword">template<\/span>&lt;<span class="keyword">typename<\/span> F&gt;<\/div>$/;"	a
l00383	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;            <span class="comment">\/\/Relock child before we unlock ourselves (hand-over-hand)<\/span><\/div>$/;"	a
l00383	html/mtrand_8h_source.html	/^<div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;    <span class="keyword">register<\/span> <span class="keyword">const<\/span> uint64_t *s = mtrand.state;<\/div>$/;"	a
l00383	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;        <span class="comment">\/\/and for ordering purposes should leave in program order. In reality they are associative<\/span><\/div>$/;"	a
l00383	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;                <span class="comment">\/\/Vantage does not do evictions directly, these do not make sense and are not used<\/span><\/div>$/;"	a
l00383	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;<\/div>$/;"	a
l00383	html/scheduler_8h_source.html	/^<div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;        }<\/div>$/;"	a
l00383	html/stats_8h_source.html	/^<div class="line"><a name="l00383"><\/a><span class="lineno">  383<\/span>&#160;<a class="code" href="classLambdaVectorStat.html">LambdaVectorStat&lt;F&gt;<\/a>* makeLambdaVectorStat(F f, uint32_t size) { <span class="keywordflow">return<\/span> <span class="keyword">new<\/span> <a class="code" href="classLambdaVectorStat.html">LambdaVectorStat&lt;F&gt;<\/a>(f, size); }<\/div>$/;"	a
l00384	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;            <span class="keywordflow">if<\/span> (req.childLock) {<\/div>$/;"	a
l00384	html/mtrand_8h_source.html	/^<div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;    <span class="keyword">register<\/span> <span class="keywordtype">int<\/span> i = mtrand.N;<\/div>$/;"	a
l00384	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;        <span class="comment">\/\/buffers, but we split the associative component from the limited-size modeling.<\/span><\/div>$/;"	a
l00384	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;                <span class="comment">\/\/partInfo[p].profSelfEvictions.init(&quot;selfEvs&quot;, &quot;Evictions caused by us&quot;); partStat-&gt;append(&amp;partInfo[p].profSelfEvictions);<\/span><\/div>$/;"	a
l00384	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;        AccTimes* accTimes;<\/div>$/;"	a
l00384	html/scheduler_8h_source.html	/^<div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;<\/div>$/;"	a
l00384	html/stats_8h_source.html	/^<div class="line"><a name="l00384"><\/a><span class="lineno">  384<\/span>&#160;<\/div>$/;"	a
l00385	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;                futex_lock(req.childLock);<\/div>$/;"	a
l00385	html/mtrand_8h_source.html	/^<div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;    <span class="keywordflow">for<\/span> (; i--; os &lt;&lt; *s++ &lt;&lt; <span class="stringliteral">&quot;\\t&quot;<\/span>) {}<\/div>$/;"	a
l00385	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;        <span class="comment">\/\/NOTE: We do not model the 10-entry fill buffer here; the weave model should take care<\/span><\/div>$/;"	a
l00385	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;                <span class="comment">\/\/partInfo[p].profExtEvictions.init(&quot;extEvs&quot;, &quot;Evictions caused by others&quot;); partStat-&gt;append(&amp;partInfo[p].profExtEvictions);<\/span><\/div>$/;"	a
l00385	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;<\/div>$/;"	a
l00385	html/scheduler_8h_source.html	/^<div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;        uint32_t sync(uint32_t pid, uint32_t tid, uint32_t cid) {<\/div>$/;"	a
l00385	html/stats_8h_source.html	/^<div class="line"><a name="l00385"><\/a><span class="lineno">  385<\/span>&#160;<span class="comment">\/\/Stat Backends declarations.<\/span><\/div>$/;"	a
l00386	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;            }<\/div>$/;"	a
l00386	html/mtrand_8h_source.html	/^<div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;    <span class="keywordflow">return<\/span> os &lt;&lt; mtrand.left;<\/div>$/;"	a
l00386	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;        <span class="comment">\/\/to not overlap more than 10 misses.<\/span><\/div>$/;"	a
l00386	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;                partInfo[p].profDemotions.init(<span class="stringliteral">&quot;dems&quot;<\/span>, <span class="stringliteral">&quot;Demotions&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profDemotions);<\/div>$/;"	a
l00386	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profRAW, profWAR, profRAR, profWAW, profNoViolAcc;<\/div>$/;"	a
l00386	html/scheduler_8h_source.html	/^<div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;            futex_lock(&amp;schedLock);<\/div>$/;"	a
l00386	html/stats_8h_source.html	/^<div class="line"><a name="l00386"><\/a><span class="lineno">  386<\/span>&#160;<\/div>$/;"	a
l00387	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;<\/div>$/;"	a
l00387	html/mtrand_8h_source.html	/^<div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;}<\/div>$/;"	a
l00387	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;        <a class="code" href="classReorderBuffer.html">ReorderBuffer&lt;32, 4&gt;<\/a> loadQueue;<\/div>$/;"	a
l00387	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;                partInfo[p].profEvictions.init(<span class="stringliteral">&quot;evs&quot;<\/span>, <span class="stringliteral">&quot;Evictions&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profEvictions);<\/div>$/;"	a
l00387	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;        <a class="code" href="classCounter.html">Counter<\/a> profAAE, profNoViolEv; <span class="comment">\/\/access after eviction violation<\/span><\/div>$/;"	a
l00387	html/scheduler_8h_source.html	/^<div class="line"><a name="l00387"><\/a><span class="lineno">  387<\/span>&#160;            ThreadInfo* th = contexts[cid].curThread;<\/div>$/;"	a
l00387	html/stats_8h_source.html	/^<div class="line"><a name="l00387"><\/a><span class="lineno"><a class="line" href="classStatsBackend.html">  387<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classStatsBackend.html">StatsBackend<\/a> : <span class="keyword">public<\/span> <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a> {<\/div>$/;"	a
l00388	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;            bcc-&gt;unlock();<\/div>$/;"	a
l00388	html/mtrand_8h_source.html	/^<div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;<\/div>$/;"	a
l00388	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;        <a class="code" href="classReorderBuffer.html">ReorderBuffer&lt;32, 4&gt;<\/a> storeQueue;<\/div>$/;"	a
l00388	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;                partInfo[p].profSizeCycles.init(<span class="stringliteral">&quot;szCycles&quot;<\/span>, <span class="stringliteral">&quot;Cumulative per-cycle sum of sz&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profSizeCycles);<\/div>$/;"	a
l00388	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;<\/div>$/;"	a
l00388	html/scheduler_8h_source.html	/^<div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;            assert(!th-&gt;markedForSleep);<\/div>$/;"	a
l00388	html/stats_8h_source.html	/^<div class="line"><a name="l00388"><\/a><span class="lineno">  388<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00389	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;            tcc-&gt;unlock();<\/div>$/;"	a
l00389	html/mtrand_8h_source.html	/^<div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;<span class="keyword">inline<\/span> std::istream&amp; operator&gt;&gt;(std::istream&amp; is, <a class="code" href="classMTRand.html">MTRand<\/a>&amp; mtrand) {<\/div>$/;"	a
l00389	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;<\/div>$/;"	a
l00389	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;                partInfo[p].profExtendedSizeCycles.init(<span class="stringliteral">&quot;xSzCycles&quot;<\/span>, <span class="stringliteral">&quot;Cumulative per-cycle sum of xSz&quot;<\/span>); partStat-&gt;append(&amp;partInfo[p].profExtendedSizeCycles);<\/div>$/;"	a
l00389	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;        uint64_t replCycle;<\/div>$/;"	a
l00389	html/scheduler_8h_source.html	/^<div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;            bar.sync(cid, &amp;schedLock); <span class="comment">\/\/releases lock, may trigger end of phase, may block us<\/span><\/div>$/;"	a
l00389	html/stats_8h_source.html	/^<div class="line"><a name="l00389"><\/a><span class="lineno">  389<\/span>&#160;        <a class="code" href="classStatsBackend.html">StatsBackend<\/a>() {}<\/div>$/;"	a
l00390	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;        }<\/div>$/;"	a
l00390	html/mtrand_8h_source.html	/^<div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;    <span class="keyword">register<\/span> uint64_t *s = mtrand.state;<\/div>$/;"	a
l00390	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;        uint32_t curCycleRFReads; <span class="comment">\/\/for RF read stalls<\/span><\/div>$/;"	a
l00390	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;<\/div>$/;"	a
l00390	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;<\/div>$/;"	a
l00390	html/scheduler_8h_source.html	/^<div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;<\/div>$/;"	a
l00390	html/stats_8h_source.html	/^<div class="line"><a name="l00390"><\/a><span class="lineno">  390<\/span>&#160;        <span class="keyword">virtual<\/span> ~<a class="code" href="classStatsBackend.html">StatsBackend<\/a>() {}<\/div>$/;"	a
l00391	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;<\/div>$/;"	a
l00391	html/mtrand_8h_source.html	/^<div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;    <span class="keyword">register<\/span> <span class="keywordtype">int<\/span> i = mtrand.N;<\/div>$/;"	a
l00391	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;        uint32_t curCycleIssuedUops; <span class="comment">\/\/for uop issue limits<\/span><\/div>$/;"	a
l00391	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;                rpStat-&gt;append(partStat);<\/div>$/;"	a
l00391	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00391	html/scheduler_8h_source.html	/^<div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;            <span class="comment">\/\/No locks at this point; we need to check whether we need to hand off our context<\/span><\/div>$/;"	a
l00391	html/stats_8h_source.html	/^<div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> dump(<span class="keywordtype">bool<\/span> buffered)=0;<\/div>$/;"	a
l00392	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;        <span class="comment">\/\/Inv methods<\/span><\/div>$/;"	a
l00392	html/mtrand_8h_source.html	/^<div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;    <span class="keywordflow">for<\/span> (; i--; is &gt;&gt; *s++) {}<\/div>$/;"	a
l00392	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;<\/div>$/;"	a
l00392	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;            }<\/div>$/;"	a
l00392	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;        <span class="comment">\/\/using T::T; \/\/C++11, but can&#39;t do in gcc yet<\/span><\/div>$/;"	a
l00392	html/scheduler_8h_source.html	/^<div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;            <span class="keywordflow">if<\/span> (th-&gt;handoffThread) {<\/div>$/;"	a
l00392	html/stats_8h_source.html	/^<div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;};<\/div>$/;"	a
l00393	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;        <span class="keywordtype">void<\/span> startInv() {<\/div>$/;"	a
l00393	html/mtrand_8h_source.html	/^<div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;    is &gt;&gt; mtrand.left;<\/div>$/;"	a
l00393	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;        <span class="comment">\/\/This would be something like the Atom... (but careful, the iw probably does not allow 2-wide when configured with 1 slot)<\/span><\/div>$/;"	a
l00393	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;            parentStat-&gt;append(rpStat);<\/div>$/;"	a
l00393	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;<\/div>$/;"	a
l00393	html/scheduler_8h_source.html	/^<div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;                futex_lock(&amp;schedLock);  <span class="comment">\/\/ this can be made lock-free, but it&#39;s not worth the effort<\/span><\/div>$/;"	a
l00393	html/stats_8h_source.html	/^<div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;<\/div>$/;"	a
l00394	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;            bcc-&gt;lock(); <span class="comment">\/\/note we don&#39;t grab tcc; tcc serializes multiple up accesses, down accesses don&#39;t see it<\/span><\/div>$/;"	a
l00394	html/mtrand_8h_source.html	/^<div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;    mtrand.pNext = &amp;mtrand.state[mtrand.N-mtrand.left];<\/div>$/;"	a
l00394	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;        <span class="comment">\/\/WindowStructure&lt;1024, 1 \/*size*\/, 2 \/*width*\/&gt; insWindow; \/\/this would be something like an Atom, except all the instruction pairing business...<\/span><\/div>$/;"	a
l00394	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;        }<\/div>$/;"	a
l00394	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;        <span class="comment">\/\/Since this is only used with LRU, let&#39;s do that...<\/span><\/div>$/;"	a
l00394	html/scheduler_8h_source.html	/^<div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;                ThreadInfo* dst = <span class="keyword">const_cast&lt;<\/span>ThreadInfo*<span class="keyword">&gt;<\/span>(th-&gt;handoffThread);  <span class="comment">\/\/ de-volatilize<\/span><\/div>$/;"	a
l00394	html/stats_8h_source.html	/^<div class="line"><a name="l00394"><\/a><span class="lineno">  394<\/span>&#160;<\/div>$/;"	a
l00395	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;        }<\/div>$/;"	a
l00395	html/mtrand_8h_source.html	/^<div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;    <span class="keywordflow">return<\/span> is;<\/div>$/;"	a
l00395	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;<\/div>$/;"	a
l00395	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;<\/div>$/;"	a
l00395	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;        <span class="keyword">explicit<\/span> <a class="code" href="classProfViolReplPolicy.html">ProfViolReplPolicy<\/a>(uint32_t nl) : T(nl) {}<\/div>$/;"	a
l00395	html/scheduler_8h_source.html	/^<div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;                th-&gt;handoffThread = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00395	html/stats_8h_source.html	/^<div class="line"><a name="l00395"><\/a><span class="lineno">  395<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTextBackendImpl.html">TextBackendImpl<\/a>;<\/div>$/;"	a
l00396	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;<\/div>$/;"	a
l00396	html/mtrand_8h_source.html	/^<div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;}<\/div>$/;"	a
l00396	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;        <span class="comment">\/\/Nehalem<\/span><\/div>$/;"	a
l00396	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;        <span class="keywordtype">void<\/span> update(uint32_t <span class="keywordtype">id<\/span>, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {<\/div>$/;"	a
l00396	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;<\/div>$/;"	a
l00396	html/scheduler_8h_source.html	/^<div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;                ContextInfo* ctx = &amp;contexts[th-&gt;cid];<\/div>$/;"	a
l00396	html/stats_8h_source.html	/^<div class="line"><a name="l00396"><\/a><span class="lineno">  396<\/span>&#160;<\/div>$/;"	a
l00397	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;        uint64_t processInv(<span class="keyword">const<\/span> <a class="code" href="structInvReq.html">InvReq<\/a>&amp; req, int32_t lineId, uint64_t startCycle) {<\/div>$/;"	a
l00397	html/mtrand_8h_source.html	/^<div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;<\/div>$/;"	a
l00397	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;        <a class="code" href="classWindowStructure.html">WindowStructure<\/a>&lt;1024, 36 <span class="comment">\/*size*\/<\/span>&gt; insWindow; <span class="comment">\/\/NOTE: IW width is implicitly determined by the decoder, which sets the port masks according to uop type<\/span><\/div>$/;"	a
l00397	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;            <span class="keywordflow">if<\/span> (unlikely(zinfo-&gt;globPhaseCycles &gt; lastUpdateCycle)) {<\/div>$/;"	a
l00397	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;        <span class="keywordtype">void<\/span> init(uint32_t numLines) {<\/div>$/;"	a
l00397	html/scheduler_8h_source.html	/^<div class="line"><a name="l00397"><\/a><span class="lineno">  397<\/span>&#160;                deschedule(th, ctx, QUEUED);<\/div>$/;"	a
l00397	html/stats_8h_source.html	/^<div class="line"><a name="l00397"><\/a><span class="lineno"><a class="line" href="classTextBackend.html">  397<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classTextBackend.html">TextBackend<\/a> : <span class="keyword">public<\/span> <a class="code" href="classStatsBackend.html">StatsBackend<\/a> {<\/div>$/;"	a
l00398	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;            uint64_t respCycle = tcc-&gt;processInval(req.lineAddr, lineId, req.type, req.writeback, startCycle, req.srcId); <span class="comment">\/\/send invalidates or downgrades to children<\/span><\/div>$/;"	a
l00398	html/mtrand_8h_source.html	/^<div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;<span class="keyword">inline<\/span> <a class="code" href="classMTRand.html">MTRand<\/a>&amp; MTRand::operator=(<span class="keyword">const<\/span> <a class="code" href="classMTRand.html">MTRand<\/a>&amp; o) {<\/div>$/;"	a
l00398	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;        <a class="code" href="classReorderBuffer.html">ReorderBuffer&lt;128, 4&gt;<\/a> rob;<\/div>$/;"	a
l00398	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;                <span class="comment">\/\/Update size-cycle counter stats<\/span><\/div>$/;"	a
l00398	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;            accTimes = gm_calloc&lt;AccTimes&gt;(numLines);<\/div>$/;"	a
l00398	html/scheduler_8h_source.html	/^<div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;                schedule(dst, ctx);<\/div>$/;"	a
l00398	html/stats_8h_source.html	/^<div class="line"><a name="l00398"><\/a><span class="lineno">  398<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00399	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;            bcc-&gt;processInval(req.lineAddr, lineId, req.type, req.writeback); <span class="comment">\/\/adjust our own state<\/span><\/div>$/;"	a
l00399	html/mtrand_8h_source.html	/^<div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;    <span class="keywordflow">if<\/span> (<span class="keyword">this<\/span> == &amp;o) <span class="keywordflow">return<\/span> (*<span class="keyword">this<\/span>);<\/div>$/;"	a
l00399	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;<\/div>$/;"	a
l00399	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;                uint64_t diff = zinfo-&gt;globPhaseCycles - lastUpdateCycle;<\/div>$/;"	a
l00399	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;            replCycle = 0;<\/div>$/;"	a
l00399	html/scheduler_8h_source.html	/^<div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;                wakeup(dst, <span class="keyword">false<\/span> <span class="comment">\/*no join needed*\/<\/span>);<\/div>$/;"	a
l00399	html/stats_8h_source.html	/^<div class="line"><a name="l00399"><\/a><span class="lineno">  399<\/span>&#160;        <a class="code" href="classTextBackendImpl.html">TextBackendImpl<\/a>* backend;<\/div>$/;"	a
l00400	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;<\/div>$/;"	a
l00400	html/mtrand_8h_source.html	/^<div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;    <span class="keyword">register<\/span> <span class="keyword">const<\/span> uint64_t *t = o.state;<\/div>$/;"	a
l00400	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;        <span class="comment">\/\/ Agner&#39;s guide says it&#39;s a 2-level pred and BHSR is 18 bits, so this is the config that makes sense;<\/span><\/div>$/;"	a
l00400	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;                <span class="keywordflow">for<\/span> (uint32_t p = 0; p &lt;= partitions; p++) {<\/div>$/;"	a
l00400	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;        }<\/div>$/;"	a
l00400	html/scheduler_8h_source.html	/^<div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;                handoffEvents.inc();<\/div>$/;"	a
l00400	html/stats_8h_source.html	/^<div class="line"><a name="l00400"><\/a><span class="lineno">  400<\/span>&#160;<\/div>$/;"	a
l00401	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;            bcc-&gt;unlock();<\/div>$/;"	a
l00401	html/mtrand_8h_source.html	/^<div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;    <span class="keyword">register<\/span> uint64_t *s = state;<\/div>$/;"	a
l00401	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;        <span class="comment">\/\/ in practice, this is probably closer to the Pentium M&#39;s branch predictor, (see Uzelac and Milenkovic,<\/span><\/div>$/;"	a
l00401	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;                    partInfo[p].profSizeCycles.inc(diff*partInfo[p].size);<\/div>$/;"	a
l00401	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;<\/div>$/;"	a
l00401	html/scheduler_8h_source.html	/^<div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;                <span class="comment">\/\/info(&quot;%d starting handoff cid %d to gid %d&quot;, th-&gt;gid, ctx-&gt;cid, dst-&gt;gid);<\/span><\/div>$/;"	a
l00401	html/stats_8h_source.html	/^<div class="line"><a name="l00401"><\/a><span class="lineno">  401<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00402	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;            <span class="keywordflow">return<\/span> respCycle;<\/div>$/;"	a
l00402	html/mtrand_8h_source.html	/^<div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;    <span class="keyword">register<\/span> <span class="keywordtype">int<\/span> i = N;<\/div>$/;"	a
l00402	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;        <span class="comment">\/\/ ISPASS 2009), which get the 18 bits of history through a hybrid predictor (2-level + bimodal + loop)<\/span><\/div>$/;"	a
l00402	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;                    partInfo[p].profExtendedSizeCycles.inc(diff*partInfo[p].extendedSize);<\/div>$/;"	a
l00402	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat) {<\/div>$/;"	a
l00402	html/scheduler_8h_source.html	/^<div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;<\/div>$/;"	a
l00402	html/stats_8h_source.html	/^<div class="line"><a name="l00402"><\/a><span class="lineno">  402<\/span>&#160;        <a class="code" href="classTextBackend.html">TextBackend<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* filename, <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* rootStat);<\/div>$/;"	a
l00403	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;        }<\/div>$/;"	a
l00403	html/mtrand_8h_source.html	/^<div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;    <span class="keywordflow">for<\/span> (; i--; *s++ = *t++) {}<\/div>$/;"	a
l00403	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;        <span class="comment">\/\/ where a few of the 2-level history bits are in the tag.<\/span><\/div>$/;"	a
l00403	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;                }<\/div>$/;"	a
l00403	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;            T::initStats(parentStat);<\/div>$/;"	a
l00403	html/scheduler_8h_source.html	/^<div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;                <span class="comment">\/\/We&#39;re descheduled and have completed the handoff. Now we need to see if we can be scheduled somewhere else.<\/span><\/div>$/;"	a
l00403	html/stats_8h_source.html	/^<div class="line"><a name="l00403"><\/a><span class="lineno">  403<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> dump(<span class="keywordtype">bool<\/span> buffered);<\/div>$/;"	a
l00404	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;<\/div>$/;"	a
l00404	html/mtrand_8h_source.html	/^<div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;    left = o.left;<\/div>$/;"	a
l00404	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;        <span class="comment">\/\/ Since this is close enough, we&#39;ll leave it as is for now. Feel free to reverse-engineer the real thing...<\/span><\/div>$/;"	a
l00404	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;                profUpdateCycles.inc(diff);<\/div>$/;"	a
l00404	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;            profRAW.init(<span class="stringliteral">&quot;vRAW&quot;<\/span>, <span class="stringliteral">&quot;RAW violations (R simulated before preceding W)&quot;<\/span>);<\/div>$/;"	a
l00404	html/scheduler_8h_source.html	/^<div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;                ctx = schedThread(th);<\/div>$/;"	a
l00404	html/stats_8h_source.html	/^<div class="line"><a name="l00404"><\/a><span class="lineno">  404<\/span>&#160;};<\/div>$/;"	a
l00405	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;        <span class="comment">\/\/Repl policy interface<\/span><\/div>$/;"	a
l00405	html/mtrand_8h_source.html	/^<div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;    pNext = &amp;state[N-left];<\/div>$/;"	a
l00405	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;        <span class="comment">\/\/ UPDATE: Now pht index is XOR-folded BSHR. This has 6656 bytes total -- not negligible, but not ridiculous.<\/span><\/div>$/;"	a
l00405	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;                lastUpdateCycle = zinfo-&gt;globPhaseCycles;<\/div>$/;"	a
l00405	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;            profWAR.init(<span class="stringliteral">&quot;vWAR&quot;<\/span>, <span class="stringliteral">&quot;WAR violations (W simulated before preceding R)&quot;<\/span>);<\/div>$/;"	a
l00405	html/scheduler_8h_source.html	/^<div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;                <span class="keywordflow">if<\/span> (ctx) {<\/div>$/;"	a
l00405	html/stats_8h_source.html	/^<div class="line"><a name="l00405"><\/a><span class="lineno">  405<\/span>&#160;<\/div>$/;"	a
l00406	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;        uint32_t numSharers(uint32_t lineId) {<span class="keywordflow">return<\/span> tcc-&gt;numSharers(lineId);}<\/div>$/;"	a
l00406	html/mtrand_8h_source.html	/^<div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;    <span class="keywordflow">return<\/span> (*<span class="keyword">this<\/span>);<\/div>$/;"	a
l00406	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;        <a class="code" href="classBranchPredictorPAg.html">BranchPredictorPAg&lt;11, 18, 14&gt;<\/a> branchPred;<\/div>$/;"	a
l00406	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;            }<\/div>$/;"	a
l00406	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;            profRAR.init(<span class="stringliteral">&quot;vRAR&quot;<\/span>, <span class="stringliteral">&quot;RAR violations (R simulated before preceding R)&quot;<\/span>);<\/div>$/;"	a
l00406	html/scheduler_8h_source.html	/^<div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;                    <span class="comment">\/\/TODO: This should only arise in very weird cases (e.g., partially overlapping process masks), and has not been tested<\/span><\/div>$/;"	a
l00406	html/stats_8h_source.html	/^<div class="line"><a name="l00406"><\/a><span class="lineno">  406<\/span>&#160;<\/div>$/;"	a
l00407	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;        <span class="keywordtype">bool<\/span> isValid(uint32_t lineId) {<span class="keywordflow">return<\/span> bcc-&gt;isValid(lineId);}<\/div>$/;"	a
l00407	html/mtrand_8h_source.html	/^<div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;}<\/div>$/;"	a
l00407	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;<\/div>$/;"	a
l00407	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;<\/div>$/;"	a
l00407	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;            profWAW.init(<span class="stringliteral">&quot;vWAW&quot;<\/span>, <span class="stringliteral">&quot;WAW violations (W simulated before preceding W)&quot;<\/span>);<\/div>$/;"	a
l00407	html/scheduler_8h_source.html	/^<div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;                    warn(<span class="stringliteral">&quot;Sched: untested code path, check with Daniel if you see this&quot;<\/span>);<\/div>$/;"	a
l00407	html/stats_8h_source.html	/^<div class="line"><a name="l00407"><\/a><span class="lineno">  407<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classHDF5BackendImpl.html">HDF5BackendImpl<\/a>;<\/div>$/;"	a
l00408	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;};<\/div>$/;"	a
l00408	html/mtrand_8h_source.html	/^<div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;<\/div>$/;"	a
l00408	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;        Address branchPc;  <span class="comment">\/\/0 if last bbl was not a conditional branch<\/span><\/div>$/;"	a
l00408	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;            LineInfo* e = &amp;array[id];<\/div>$/;"	a
l00408	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;            profAAE.init(<span class="stringliteral">&quot;vAAE&quot;<\/span>, <span class="stringliteral">&quot;Access simulated before preceding eviction&quot;<\/span>);<\/div>$/;"	a
l00408	html/scheduler_8h_source.html	/^<div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;                    schedule(th, ctx);<\/div>$/;"	a
l00408	html/stats_8h_source.html	/^<div class="line"><a name="l00408"><\/a><span class="lineno">  408<\/span>&#160;<\/div>$/;"	a
l00409	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;<\/div>$/;"	a
l00409	html/mtrand_8h_source.html	/^<div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;<span class="preprocessor">#endif  \/\/ MTRAND_H_<\/span><\/div>$/;"	a
l00409	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;        <span class="keywordtype">bool<\/span> branchTaken;<\/div>$/;"	a
l00409	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;            <span class="keywordflow">if<\/span> (e-&gt;ts &gt; 0) {<\/div>$/;"	a
l00409	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;            profNoViolAcc.init(<span class="stringliteral">&quot;noViolAcc&quot;<\/span>, <span class="stringliteral">&quot;Accesses without R\/WAR\/W violations&quot;<\/span>);<\/div>$/;"	a
l00409	html/scheduler_8h_source.html	/^<div class="line"><a name="l00409"><\/a><span class="lineno">  409<\/span>&#160;                    <span class="comment">\/\/We need to do a join, because dst will not join<\/span><\/div>$/;"	a
l00409	html/stats_8h_source.html	/^<div class="line"><a name="l00409"><\/a><span class="lineno"><a class="line" href="classHDF5Backend.html">  409<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classHDF5Backend.html">HDF5Backend<\/a> : <span class="keyword">public<\/span> <a class="code" href="classStatsBackend.html">StatsBackend<\/a> {<\/div>$/;"	a
l00410	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;<span class="comment">\/\/ Terminal CC, i.e., without children --- accepts GETS\/X, but not PUTS\/X<\/span><\/div>$/;"	a
l00410	html/mtrand_8h_source.html	/^<div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00410	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;        Address branchTakenNpc;<\/div>$/;"	a
l00410	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;                <span class="keywordflow">if<\/span> (e-&gt;p == partitions) { <span class="comment">\/\/this is an unmanaged region promotion<\/span><\/div>$/;"	a
l00410	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;            profNoViolEv.init(<span class="stringliteral">&quot;noViolEv&quot;<\/span>,  <span class="stringliteral">&quot;Evictions without AAE violations&quot;<\/span>);<\/div>$/;"	a
l00410	html/scheduler_8h_source.html	/^<div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;                    zinfo-&gt;cores[ctx-&gt;cid]-&gt;join();<\/div>$/;"	a
l00410	html/stats_8h_source.html	/^<div class="line"><a name="l00410"><\/a><span class="lineno">  410<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00411	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00411"><\/a><span class="lineno"><a class="line" href="classMESITerminalCC.html">  411<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classMESITerminalCC.html">MESITerminalCC<\/a> : <span class="keyword">public<\/span> <a class="code" href="classCC.html">CC<\/a> {<\/div>$/;"	a
l00411	html/mtrand_8h_source.html	/^<div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;<span class="comment">\/\/ Change log:<\/span><\/div>$/;"	a
l00411	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;        Address branchNotTakenNpc;<\/div>$/;"	a
l00411	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;                    e-&gt;p = mapper-&gt;getPartition(*req);<\/div>$/;"	a
l00411	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;<\/div>$/;"	a
l00411	html/scheduler_8h_source.html	/^<div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;                    bar.join(ctx-&gt;cid, &amp;schedLock); <span class="comment">\/\/releases lock<\/span><\/div>$/;"	a
l00411	html/stats_8h_source.html	/^<div class="line"><a name="l00411"><\/a><span class="lineno">  411<\/span>&#160;        <a class="code" href="classHDF5BackendImpl.html">HDF5BackendImpl<\/a>* backend;<\/div>$/;"	a
l00412	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00412	html/mtrand_8h_source.html	/^<div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00412	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;<\/div>$/;"	a
l00412	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;                    profPromotions.inc();<\/div>$/;"	a
l00412	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;            parentStat-&gt;append(&amp;profRAW);<\/div>$/;"	a
l00412	html/scheduler_8h_source.html	/^<div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00412	html/stats_8h_source.html	/^<div class="line"><a name="l00412"><\/a><span class="lineno">  412<\/span>&#160;<\/div>$/;"	a
l00413	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;        <a class="code" href="classMESIBottomCC.html">MESIBottomCC<\/a>* bcc;<\/div>$/;"	a
l00413	html/mtrand_8h_source.html	/^<div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;<span class="comment">\/\/ v0.1 - First release on 15 May 2000<\/span><\/div>$/;"	a
l00413	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;        uint64_t decodeCycle;<\/div>$/;"	a
l00413	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;                    partInfo[e-&gt;p].curIntervalIns++;<\/div>$/;"	a
l00413	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;            parentStat-&gt;append(&amp;profWAR);<\/div>$/;"	a
l00413	html/scheduler_8h_source.html	/^<div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;                    runQueue.push_back(th);<\/div>$/;"	a
l00413	html/stats_8h_source.html	/^<div class="line"><a name="l00413"><\/a><span class="lineno">  413<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00414	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;        uint32_t numLines;<\/div>$/;"	a
l00414	html/mtrand_8h_source.html	/^<div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;<span class="comment">\/\/      - Based on code by Makoto Matsumoto, Takuji Nishimura, and Shawn Cokus<\/span><\/div>$/;"	a
l00414	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;        <a class="code" href="classCycleQueue.html">CycleQueue&lt;28&gt;<\/a> uopQueue;  <span class="comment">\/\/ models issue queue<\/span><\/div>$/;"	a
l00414	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;                    partInfo[e-&gt;p].size++;<\/div>$/;"	a
l00414	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;            parentStat-&gt;append(&amp;profRAR);<\/div>$/;"	a
l00414	html/scheduler_8h_source.html	/^<div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;                    waitForContext(th); <span class="comment">\/\/releases lock, might join<\/span><\/div>$/;"	a
l00414	html/stats_8h_source.html	/^<div class="line"><a name="l00414"><\/a><span class="lineno">  414<\/span>&#160;        <a class="code" href="classHDF5Backend.html">HDF5Backend<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* filename, <a class="code" href="classAggregateStat.html">AggregateStat<\/a>* rootStat, <span class="keywordtype">size_t<\/span> bytesPerWrite, <span class="keywordtype">bool<\/span> skipVectors, <span class="keywordtype">bool<\/span> sumRegularAggregates);<\/div>$/;"	a
l00415	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;        g_string name;<\/div>$/;"	a
l00415	html/mtrand_8h_source.html	/^<div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;<span class="comment">\/\/      - Translated from C to C++<\/span><\/div>$/;"	a
l00415	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;<\/div>$/;"	a
l00415	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;                    partInfo[partitions].size--;<\/div>$/;"	a
l00415	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;            parentStat-&gt;append(&amp;profWAW);<\/div>$/;"	a
l00415	html/scheduler_8h_source.html	/^<div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;                }<\/div>$/;"	a
l00415	html/stats_8h_source.html	/^<div class="line"><a name="l00415"><\/a><span class="lineno">  415<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> dump(<span class="keywordtype">bool<\/span> buffered);<\/div>$/;"	a
l00416	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;<\/div>$/;"	a
l00416	html/mtrand_8h_source.html	/^<div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;<span class="comment">\/\/      - Made completely ANSI compliant<\/span><\/div>$/;"	a
l00416	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;        uint64_t instrs, uops, bbls, approxInstrs, mispredBranches;<\/div>$/;"	a
l00416	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;                }<\/div>$/;"	a
l00416	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;            parentStat-&gt;append(&amp;profAAE);<\/div>$/;"	a
l00416	html/scheduler_8h_source.html	/^<div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;            }<\/div>$/;"	a
l00416	html/stats_8h_source.html	/^<div class="line"><a name="l00416"><\/a><span class="lineno">  416<\/span>&#160;};<\/div>$/;"	a
l00417	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00417	html/mtrand_8h_source.html	/^<div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;<span class="comment">\/\/      - Designed convenient interface for initialization, seeding, and<\/span><\/div>$/;"	a
l00417	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;<\/div>$/;"	a
l00417	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;                e-&gt;ts = timestamp++;<\/div>$/;"	a
l00417	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;            parentStat-&gt;append(&amp;profNoViolAcc);<\/div>$/;"	a
l00417	html/scheduler_8h_source.html	/^<div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;<\/div>$/;"	a
l00417	html/stats_8h_source.html	/^<div class="line"><a name="l00417"><\/a><span class="lineno">  417<\/span>&#160;<\/div>$/;"	a
l00418	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;        <span class="comment">\/\/Initialization<\/span><\/div>$/;"	a
l00418	html/mtrand_8h_source.html	/^<div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;<span class="comment">\/\/        obtaining numbers in default or user-defined ranges<\/span><\/div>$/;"	a
l00418	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;<span class="preprocessor">#ifdef OOO_STALL_STATS<\/span><\/div>$/;"	a
l00418	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;                partInfo[e-&gt;p].profHits.inc();<\/div>$/;"	a
l00418	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;            parentStat-&gt;append(&amp;profNoViolEv);<\/div>$/;"	a
l00418	html/scheduler_8h_source.html	/^<div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;            assert(th-&gt;state == RUNNING);<\/div>$/;"	a
l00418	html/stats_8h_source.html	/^<div class="line"><a name="l00418"><\/a><span class="lineno">  418<\/span>&#160;<span class="preprocessor">#endif  \/\/ STATS_H_<\/span><\/div>$/;"	a
l00419	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;        <a class="code" href="classMESITerminalCC.html">MESITerminalCC<\/a>(uint32_t _numLines, <span class="keyword">const<\/span> g_string&amp; _name) : bcc(<span class="keyword">nullptr<\/span>), numLines(_numLines), name(_name) {}<\/div>$/;"	a
l00419	html/mtrand_8h_source.html	/^<div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;<span class="comment">\/\/      - Added automatic seeding from \/dev\/urandom or time() and clock()<\/span><\/div>$/;"	a
l00419	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;<span class="preprocessor"><\/span>        <a class="code" href="classCounter.html">Counter<\/a> profFetchStalls, profDecodeStalls, profIssueStalls;<\/div>$/;"	a
l00419	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;            } <span class="keywordflow">else<\/span> { <span class="comment">\/\/post-miss update, old one has been removed, this is empty<\/span><\/div>$/;"	a
l00419	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;        }<\/div>$/;"	a
l00419	html/scheduler_8h_source.html	/^<div class="line"><a name="l00419"><\/a><span class="lineno">  419<\/span>&#160;            <span class="keywordflow">return<\/span> th-&gt;cid;<\/div>$/;"	a
l00420	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;<\/div>$/;"	a
l00420	html/mtrand_8h_source.html	/^<div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;<span class="comment">\/\/      - Provided functions for saving and loading generator state<\/span><\/div>$/;"	a
l00420	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00420	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;                e-&gt;ts = timestamp++;<\/div>$/;"	a
l00420	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;<\/div>$/;"	a
l00420	html/scheduler_8h_source.html	/^<div class="line"><a name="l00420"><\/a><span class="lineno">  420<\/span>&#160;        }<\/div>$/;"	a
l00421	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;        <span class="keywordtype">void<\/span> setParents(uint32_t childId, <span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;MemObject*&gt;<\/a>&amp; parents, <a class="code" href="classNetwork.html">Network<\/a>* network) {<\/div>$/;"	a
l00421	html/mtrand_8h_source.html	/^<div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00421	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;<span class="preprocessor"><\/span><\/div>$/;"	a
l00421	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;                partInfo[e-&gt;p].size--;<\/div>$/;"	a
l00421	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;        <span class="keywordtype">void<\/span> update(uint32_t <span class="keywordtype">id<\/span>, <span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {<\/div>$/;"	a
l00421	html/scheduler_8h_source.html	/^<div class="line"><a name="l00421"><\/a><span class="lineno">  421<\/span>&#160;<\/div>$/;"	a
l00422	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00422"><\/a><span class="lineno">  422<\/span>&#160;            bcc = <span class="keyword">new<\/span> <a class="code" href="classMESIBottomCC.html">MESIBottomCC<\/a>(numLines, childId, <span class="keyword">false<\/span> <span class="comment">\/*inclusive*\/<\/span>);<\/div>$/;"	a
l00422	html/mtrand_8h_source.html	/^<div class="line"><a name="l00422"><\/a><span class="lineno">  422<\/span>&#160;<span class="comment">\/\/ v0.2 - Fixed bug which reloaded generator one step too late<\/span><\/div>$/;"	a
l00422	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00422"><\/a><span class="lineno">  422<\/span>&#160;        <span class="comment">\/\/ Load-store forwarding<\/span><\/div>$/;"	a
l00422	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00422"><\/a><span class="lineno">  422<\/span>&#160;                partInfo[e-&gt;p].profEvictions.inc();<\/div>$/;"	a
l00422	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00422"><\/a><span class="lineno">  422<\/span>&#160;            T::update(<span class="keywordtype">id<\/span>, req);<\/div>$/;"	a
l00422	html/scheduler_8h_source.html	/^<div class="line"><a name="l00422"><\/a><span class="lineno">  422<\/span>&#160;        <span class="comment">\/\/ This is called with schedLock held, and must not release it!<\/span><\/div>$/;"	a
l00423	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;            bcc-&gt;init(parents, network, name.c_str());<\/div>$/;"	a
l00423	html/mtrand_8h_source.html	/^<div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00423	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;        <span class="comment">\/\/ Just a direct-mapped array of last store cycles to 4B-wide blocks<\/span><\/div>$/;"	a
l00423	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;                partInfo[e-&gt;op].extendedSize--;<\/div>$/;"	a
l00423	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;<\/div>$/;"	a
l00423	html/scheduler_8h_source.html	/^<div class="line"><a name="l00423"><\/a><span class="lineno">  423<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> callback() {<\/div>$/;"	a
l00424	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;        }<\/div>$/;"	a
l00424	html/mtrand_8h_source.html	/^<div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;<span class="comment">\/\/ v0.3 - Switched to clearer, faster reload() code from Matthew Bellew<\/span><\/div>$/;"	a
l00424	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;        <span class="comment">\/\/ (i.e., indexed by (addr &gt;&gt; 2) &amp; (FWD_ENTRIES-1))<\/span><\/div>$/;"	a
l00424	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;                e-&gt;p = mapper-&gt;getPartition(*req);<\/div>$/;"	a
l00424	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;            <span class="keywordtype">bool<\/span> read = (req-&gt;type == GETS);<\/div>$/;"	a
l00424	html/scheduler_8h_source.html	/^<div class="line"><a name="l00424"><\/a><span class="lineno">  424<\/span>&#160;            <span class="comment">\/\/End of phase stats<\/span><\/div>$/;"	a
l00425	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;<\/div>$/;"	a
l00425	html/mtrand_8h_source.html	/^<div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00425	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;        <span class="keyword">struct <\/span>FwdEntry {<\/div>$/;"	a
l00425	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;                e-&gt;op = e-&gt;p;<\/div>$/;"	a
l00425	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;            assert(read || req-&gt;type == GETX);<\/div>$/;"	a
l00425	html/scheduler_8h_source.html	/^<div class="line"><a name="l00425"><\/a><span class="lineno">  425<\/span>&#160;            assert(scheduledThreads &lt;= numCores);<\/div>$/;"	a
l00426	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;        <span class="keywordtype">void<\/span> setChildren(<span class="keyword">const<\/span> <a class="code" href="classg__vector.html">g_vector&lt;BaseCache*&gt;<\/a>&amp; children, <a class="code" href="classNetwork.html">Network<\/a>* network) {<\/div>$/;"	a
l00426	html/mtrand_8h_source.html	/^<div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;<span class="comment">\/\/ v0.4 - Removed trailing newline in saved generator format to be consistent<\/span><\/div>$/;"	a
l00426	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;            Address addr;<\/div>$/;"	a
l00426	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;                partInfo[e-&gt;p].curIntervalIns++;<\/div>$/;"	a
l00426	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;            uint64_t cycle = req-&gt;cycle;<\/div>$/;"	a
l00426	html/scheduler_8h_source.html	/^<div class="line"><a name="l00426"><\/a><span class="lineno">  426<\/span>&#160;            occHist.inc(scheduledThreads);<\/div>$/;"	a
l00427	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00427"><\/a><span class="lineno">  427<\/span>&#160;            panic(<span class="stringliteral">&quot;[%s] MESITerminalCC::setChildren cannot be called -- terminal caches cannot have children!&quot;<\/span>, name.c_str());<\/div>$/;"	a
l00427	html/mtrand_8h_source.html	/^<div class="line"><a name="l00427"><\/a><span class="lineno">  427<\/span>&#160;<span class="comment">\/\/        with output format of built-in types<\/span><\/div>$/;"	a
l00427	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00427"><\/a><span class="lineno">  427<\/span>&#160;            uint64_t storeCycle;<\/div>$/;"	a
l00427	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00427"><\/a><span class="lineno">  427<\/span>&#160;                partInfo[e-&gt;p].size++;<\/div>$/;"	a
l00427	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00427"><\/a><span class="lineno">  427<\/span>&#160;<\/div>$/;"	a
l00427	html/scheduler_8h_source.html	/^<div class="line"><a name="l00427"><\/a><span class="lineno">  427<\/span>&#160;            uint32_t rqPos = (runQueue.size() &lt; (runQueueHist.size()-1))? runQueue.size() : (runQueueHist.size()-1);<\/div>$/;"	a
l00428	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;        }<\/div>$/;"	a
l00428	html/mtrand_8h_source.html	/^<div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00428	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;            <span class="keywordtype">void<\/span> set(Address a, uint64_t c) {addr = a; storeCycle = c;}<\/div>$/;"	a
l00428	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;                partInfo[e-&gt;op].extendedSize++;<\/div>$/;"	a
l00428	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;            <span class="keywordflow">if<\/span> (cycle &lt; MAX(accTimes[<span class="keywordtype">id<\/span>].read, accTimes[<span class="keywordtype">id<\/span>].write)) { <span class="comment">\/\/violation<\/span><\/div>$/;"	a
l00428	html/scheduler_8h_source.html	/^<div class="line"><a name="l00428"><\/a><span class="lineno">  428<\/span>&#160;            runQueueHist.inc(rqPos);<\/div>$/;"	a
l00429	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;<\/div>$/;"	a
l00429	html/mtrand_8h_source.html	/^<div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;<span class="comment">\/\/ v0.5 - Improved portability by replacing static const int&#39;s with enum&#39;s and<\/span><\/div>$/;"	a
l00429	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;        };<\/div>$/;"	a
l00429	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;                partInfo[e-&gt;p].profMisses.inc();<\/div>$/;"	a
l00429	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;                <span class="comment">\/\/Now have to determine order<\/span><\/div>$/;"	a
l00429	html/scheduler_8h_source.html	/^<div class="line"><a name="l00429"><\/a><span class="lineno">  429<\/span>&#160;<\/div>$/;"	a
l00430	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* cacheStat) {<\/div>$/;"	a
l00430	html/mtrand_8h_source.html	/^<div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;<span class="comment">\/\/        clarifying return values in seed(); suggested by Eric Heimburg<\/span><\/div>$/;"	a
l00430	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;<\/div>$/;"	a
l00430	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;<\/div>$/;"	a
l00430	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;                <span class="keywordtype">bool<\/span> readViol;<\/div>$/;"	a
l00430	html/scheduler_8h_source.html	/^<div class="line"><a name="l00430"><\/a><span class="lineno">  430<\/span>&#160;            <span class="keywordflow">if<\/span> (atSyncFunc) atSyncFunc(); <span class="comment">\/\/call the simulator-defined actions external to the scheduler<\/span><\/div>$/;"	a
l00431	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00431"><\/a><span class="lineno">  431<\/span>&#160;            bcc-&gt;initStats(cacheStat);<\/div>$/;"	a
l00431	html/mtrand_8h_source.html	/^<div class="line"><a name="l00431"><\/a><span class="lineno">  431<\/span>&#160;<span class="comment">\/\/      - Removed MAXINT constant; use 0xffffffffUL instead<\/span><\/div>$/;"	a
l00431	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00431"><\/a><span class="lineno">  431<\/span>&#160;<span class="preprocessor">        #define FWD_ENTRIES 32  \/\/ 2 lines, 16 4B entries\/line<\/span><\/div>$/;"	a
l00431	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00431"><\/a><span class="lineno">  431<\/span>&#160;                <span class="keywordflow">if<\/span> (partInfo[e-&gt;p].targetSize &lt; partInfo[e-&gt;p].longTermTargetSize) {<\/div>$/;"	a
l00431	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00431"><\/a><span class="lineno">  431<\/span>&#160;                <span class="keywordflow">if<\/span> (cycle &lt; MIN(accTimes[<span class="keywordtype">id<\/span>].read, accTimes[<span class="keywordtype">id<\/span>].write)) { <span class="comment">\/\/before both<\/span><\/div>$/;"	a
l00431	html/scheduler_8h_source.html	/^<div class="line"><a name="l00431"><\/a><span class="lineno">  431<\/span>&#160;<\/div>$/;"	a
l00432	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00432"><\/a><span class="lineno">  432<\/span>&#160;        }<\/div>$/;"	a
l00432	html/mtrand_8h_source.html	/^<div class="line"><a name="l00432"><\/a><span class="lineno">  432<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00432	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00432"><\/a><span class="lineno">  432<\/span>&#160;<span class="preprocessor"><\/span>        FwdEntry fwdArray[FWD_ENTRIES];<\/div>$/;"	a
l00432	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00432"><\/a><span class="lineno">  432<\/span>&#160;                    assert(smoothTransients);<\/div>$/;"	a
l00432	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00432"><\/a><span class="lineno">  432<\/span>&#160;                    readViol = (accTimes[id].read &lt; accTimes[id].write); <span class="comment">\/\/read is closer<\/span><\/div>$/;"	a
l00432	html/scheduler_8h_source.html	/^<div class="line"><a name="l00432"><\/a><span class="lineno">  432<\/span>&#160;            <span class="comment">\/* End of phase accounting *\/<\/span><\/div>$/;"	a
l00433	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00433"><\/a><span class="lineno">  433<\/span>&#160;<\/div>$/;"	a
l00433	html/mtrand_8h_source.html	/^<div class="line"><a name="l00433"><\/a><span class="lineno">  433<\/span>&#160;<span class="comment">\/\/ v0.6 - Eliminated seed overflow when uint32 is larger than 32 bits<\/span><\/div>$/;"	a
l00433	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00433"><\/a><span class="lineno">  433<\/span>&#160;<\/div>$/;"	a
l00433	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00433"><\/a><span class="lineno">  433<\/span>&#160;                    partInfo[e-&gt;p].targetSize++;<\/div>$/;"	a
l00433	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00433"><\/a><span class="lineno">  433<\/span>&#160;                } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (cycle &lt; accTimes[<span class="keywordtype">id<\/span>].read) { <span class="comment">\/\/write, current access, read -&gt; XAR viol<\/span><\/div>$/;"	a
l00433	html/scheduler_8h_source.html	/^<div class="line"><a name="l00433"><\/a><span class="lineno">  433<\/span>&#160;            zinfo-&gt;numPhases++;<\/div>$/;"	a
l00434	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00434"><\/a><span class="lineno">  434<\/span>&#160;        <span class="comment">\/\/Access methods<\/span><\/div>$/;"	a
l00434	html/mtrand_8h_source.html	/^<div class="line"><a name="l00434"><\/a><span class="lineno">  434<\/span>&#160;<span class="comment">\/\/      - Changed integer [0,n] generator to give better uniformity<\/span><\/div>$/;"	a
l00434	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00434"><\/a><span class="lineno">  434<\/span>&#160;        <a class="code" href="classOOOCoreRecorder.html">OOOCoreRecorder<\/a> cRec;<\/div>$/;"	a
l00434	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00434"><\/a><span class="lineno">  434<\/span>&#160;                    takeOneLine();<\/div>$/;"	a
l00434	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00434"><\/a><span class="lineno">  434<\/span>&#160;                    readViol = <span class="keyword">true<\/span>;<\/div>$/;"	a
l00434	html/scheduler_8h_source.html	/^<div class="line"><a name="l00434"><\/a><span class="lineno">  434<\/span>&#160;            zinfo-&gt;globPhaseCycles += zinfo-&gt;phaseLength;<\/div>$/;"	a
l00435	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00435"><\/a><span class="lineno">  435<\/span>&#160;        <span class="keywordtype">bool<\/span> startAccess(<a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) {<\/div>$/;"	a
l00435	html/mtrand_8h_source.html	/^<div class="line"><a name="l00435"><\/a><span class="lineno">  435<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00435	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00435"><\/a><span class="lineno">  435<\/span>&#160;<\/div>$/;"	a
l00435	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00435"><\/a><span class="lineno">  435<\/span>&#160;                }<\/div>$/;"	a
l00435	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00435"><\/a><span class="lineno">  435<\/span>&#160;                } <span class="keywordflow">else<\/span> { <span class="comment">\/\/read, current access, write -&gt; XAW viol<\/span><\/div>$/;"	a
l00435	html/scheduler_8h_source.html	/^<div class="line"><a name="l00435"><\/a><span class="lineno">  435<\/span>&#160;            curPhase++;<\/div>$/;"	a
l00436	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00436"><\/a><span class="lineno">  436<\/span>&#160;            assert((req.type == GETS) || (req.type == GETX)); <span class="comment">\/\/no puts!<\/span><\/div>$/;"	a
l00436	html/mtrand_8h_source.html	/^<div class="line"><a name="l00436"><\/a><span class="lineno">  436<\/span>&#160;<span class="comment">\/\/ v0.7 - Fixed operator precedence ambiguity in reload()<\/span><\/div>$/;"	a
l00436	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00436"><\/a><span class="lineno">  436<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00436	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00436"><\/a><span class="lineno">  436<\/span>&#160;            }<\/div>$/;"	a
l00436	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00436"><\/a><span class="lineno">  436<\/span>&#160;                    assert(cycle &lt; accTimes[<span class="keywordtype">id<\/span>].write);<\/div>$/;"	a
l00436	html/scheduler_8h_source.html	/^<div class="line"><a name="l00436"><\/a><span class="lineno">  436<\/span>&#160;<\/div>$/;"	a
l00437	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;<\/div>$/;"	a
l00437	html/mtrand_8h_source.html	/^<div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;<span class="comment">\/\/      - Added access for real numbers in (0,1) and (0,n)<\/span><\/div>$/;"	a
l00437	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;        <a class="code" href="classOOOCore.html">OOOCore<\/a>(<a class="code" href="classFilterCache.html">FilterCache<\/a>* _l1i, <a class="code" href="classFilterCache.html">FilterCache<\/a>* _l1d, g_string&amp; _name);<\/div>$/;"	a
l00437	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;<\/div>$/;"	a
l00437	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;                    readViol = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00437	html/scheduler_8h_source.html	/^<div class="line"><a name="l00437"><\/a><span class="lineno">  437<\/span>&#160;            assert(curPhase == zinfo-&gt;numPhases); <span class="comment">\/\/check they don&#39;t skew<\/span><\/div>$/;"	a
l00438	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;            <span class="comment">\/* Child should be locked when called. We do hand-over-hand locking when going<\/span><\/div>$/;"	a
l00438	html/mtrand_8h_source.html	/^<div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00438	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;<\/div>$/;"	a
l00438	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;            <span class="comment">\/\/Profile the access<\/span><\/div>$/;"	a
l00438	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;                }<\/div>$/;"	a
l00438	html/scheduler_8h_source.html	/^<div class="line"><a name="l00438"><\/a><span class="lineno">  438<\/span>&#160;<\/div>$/;"	a
l00439	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00439"><\/a><span class="lineno">  439<\/span>&#160;<span class="comment">             * down (which is why we require the lock), but not when going up, opening the<\/span><\/div>$/;"	a
l00439	html/mtrand_8h_source.html	/^<div class="line"><a name="l00439"><\/a><span class="lineno">  439<\/span>&#160;<span class="comment">\/\/ v0.8 - Included time.h header to properly support time_t and clock_t<\/span><\/div>$/;"	a
l00439	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00439"><\/a><span class="lineno">  439<\/span>&#160;        <span class="keywordtype">void<\/span> initStats(<a class="code" href="classAggregateStat.html">AggregateStat<\/a>* parentStat);<\/div>$/;"	a
l00439	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00439"><\/a><span class="lineno">  439<\/span>&#160;            monitor-&gt;access(e-&gt;p, e-&gt;addr);<\/div>$/;"	a
l00439	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00439"><\/a><span class="lineno">  439<\/span>&#160;<\/div>$/;"	a
l00439	html/scheduler_8h_source.html	/^<div class="line"><a name="l00439"><\/a><span class="lineno">  439<\/span>&#160;            <span class="comment">\/\/Wake up all sleeping threads where deadline is met<\/span><\/div>$/;"	a
l00440	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00440"><\/a><span class="lineno">  440<\/span>&#160;<span class="comment">             * child to invalidation races here to avoid deadlocks.<\/span><\/div>$/;"	a
l00440	html/mtrand_8h_source.html	/^<div class="line"><a name="l00440"><\/a><span class="lineno">  440<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00440	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00440"><\/a><span class="lineno">  440<\/span>&#160;<\/div>$/;"	a
l00440	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00440"><\/a><span class="lineno">  440<\/span>&#160;<\/div>$/;"	a
l00440	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00440"><\/a><span class="lineno">  440<\/span>&#160;                <span class="comment">\/\/Record<\/span><\/div>$/;"	a
l00440	html/scheduler_8h_source.html	/^<div class="line"><a name="l00440"><\/a><span class="lineno">  440<\/span>&#160;            <span class="keywordflow">if<\/span> (!sleepQueue.empty()) {<\/div>$/;"	a
l00441	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00441"><\/a><span class="lineno">  441<\/span>&#160;<span class="comment">             *\/<\/span><\/div>$/;"	a
l00441	html/mtrand_8h_source.html	/^<div class="line"><a name="l00441"><\/a><span class="lineno">  441<\/span>&#160;<span class="comment">\/\/ v1.0 - Revised seeding to match 26 Jan 2002 update of Nishimura and Matsumoto<\/span><\/div>$/;"	a
l00441	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00441"><\/a><span class="lineno">  441<\/span>&#160;        uint64_t getInstrs() <span class="keyword">const<\/span>;<\/div>$/;"	a
l00441	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00441"><\/a><span class="lineno">  441<\/span>&#160;            <span class="comment">\/\/Adjust coarse-grain timestamp<\/span><\/div>$/;"	a
l00441	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00441"><\/a><span class="lineno">  441<\/span>&#160;                read? (readViol? profRAR.inc() : profRAW.inc()) : (readViol? profWAR.inc() : profWAW.inc());<\/div>$/;"	a
l00441	html/scheduler_8h_source.html	/^<div class="line"><a name="l00441"><\/a><span class="lineno">  441<\/span>&#160;                ThreadInfo* th = sleepQueue.front();<\/div>$/;"	a
l00442	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00442"><\/a><span class="lineno">  442<\/span>&#160;            <span class="keywordflow">if<\/span> (req.childLock) {<\/div>$/;"	a
l00442	html/mtrand_8h_source.html	/^<div class="line"><a name="l00442"><\/a><span class="lineno">  442<\/span>&#160;<span class="comment">\/\/      - Allowed for seeding with arrays of any length<\/span><\/div>$/;"	a
l00442	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00442"><\/a><span class="lineno">  442<\/span>&#160;        uint64_t getPhaseCycles() <span class="keyword">const<\/span>;<\/div>$/;"	a
l00442	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00442"><\/a><span class="lineno">  442<\/span>&#160;            e-&gt;bts = partInfo[e-&gt;p].curBts;<\/div>$/;"	a
l00442	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00442"><\/a><span class="lineno">  442<\/span>&#160;<\/div>$/;"	a
l00442	html/scheduler_8h_source.html	/^<div class="line"><a name="l00442"><\/a><span class="lineno">  442<\/span>&#160;                <span class="keywordflow">while<\/span> (th &amp;&amp; th-&gt;wakeupPhase &lt;= curPhase) {<\/div>$/;"	a
l00443	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00443"><\/a><span class="lineno">  443<\/span>&#160;                futex_unlock(req.childLock);<\/div>$/;"	a
l00443	html/mtrand_8h_source.html	/^<div class="line"><a name="l00443"><\/a><span class="lineno">  443<\/span>&#160;<span class="comment">\/\/      - Added access for real numbers in [0,1) with 53-bit resolution<\/span><\/div>$/;"	a
l00443	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00443"><\/a><span class="lineno">  443<\/span>&#160;        uint64_t getCycles()<span class="keyword"> const <\/span>{<span class="keywordflow">return<\/span> cRec.getUnhaltedCycles(curCycle);}<\/div>$/;"	a
l00443	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00443"><\/a><span class="lineno">  443<\/span>&#160;            <span class="keywordflow">if<\/span> (++partInfo[e-&gt;p].curBtsHits &gt;= (uint32_t) partInfo[e-&gt;p].size\/16) {<\/div>$/;"	a
l00443	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00443"><\/a><span class="lineno">  443<\/span>&#160;                <span class="comment">\/\/info(&quot;0x%lx viol read %d readViol %d cycles: %ld | r %ld w %ld&quot;, req-&gt;lineAddr, read, readViol, cycle, accTimes[id].read, accTimes[id].write);<\/span><\/div>$/;"	a
l00443	html/scheduler_8h_source.html	/^<div class="line"><a name="l00443"><\/a><span class="lineno">  443<\/span>&#160;                    assert(th-&gt;wakeupPhase == curPhase);<\/div>$/;"	a
l00444	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;            }<\/div>$/;"	a
l00444	html/mtrand_8h_source.html	/^<div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;<span class="comment">\/\/      - Added access for real numbers from normal (Gaussian) distributions<\/span><\/div>$/;"	a
l00444	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;<\/div>$/;"	a
l00444	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;                partInfo[e-&gt;p].curBts++;<\/div>$/;"	a
l00444	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00444	html/scheduler_8h_source.html	/^<div class="line"><a name="l00444"><\/a><span class="lineno">  444<\/span>&#160;                    trace(Sched, <span class="stringliteral">&quot;%d SLEEPING -&gt; BLOCKED, waking up from timeout syscall (curPhase %ld, wakeupPhase %ld)&quot;<\/span>, th-&gt;gid, curPhase, th-&gt;wakeupPhase);<\/div>$/;"	a
l00445	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;<\/div>$/;"	a
l00445	html/mtrand_8h_source.html	/^<div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;<span class="comment">\/\/      - Increased overall speed by optimizing twist()<\/span><\/div>$/;"	a
l00445	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;        <span class="keywordtype">void<\/span> contextSwitch(int32_t gid);<\/div>$/;"	a
l00445	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;                partInfo[e-&gt;p].setpointBts++;<\/div>$/;"	a
l00445	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;                profNoViolAcc.inc();<\/div>$/;"	a
l00445	html/scheduler_8h_source.html	/^<div class="line"><a name="l00445"><\/a><span class="lineno">  445<\/span>&#160;<\/div>$/;"	a
l00446	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;            bcc-&gt;lock();<\/div>$/;"	a
l00446	html/mtrand_8h_source.html	/^<div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;<span class="comment">\/\/      - Doubled speed of integer [0,n] generation<\/span><\/div>$/;"	a
l00446	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;<\/div>$/;"	a
l00446	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;                partInfo[e-&gt;p].curBtsHits = 0;<\/div>$/;"	a
l00446	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;            }<\/div>$/;"	a
l00446	html/scheduler_8h_source.html	/^<div class="line"><a name="l00446"><\/a><span class="lineno">  446<\/span>&#160;                    <span class="comment">\/\/ Try to deschedule ourselves<\/span><\/div>$/;"	a
l00447	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00447"><\/a><span class="lineno">  447<\/span>&#160;<\/div>$/;"	a
l00447	html/mtrand_8h_source.html	/^<div class="line"><a name="l00447"><\/a><span class="lineno">  447<\/span>&#160;<span class="comment">\/\/      - Fixed out-of-range number generation on 64-bit machines<\/span><\/div>$/;"	a
l00447	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00447"><\/a><span class="lineno">  447<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> join();<\/div>$/;"	a
l00447	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00447"><\/a><span class="lineno">  447<\/span>&#160;            }<\/div>$/;"	a
l00447	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00447"><\/a><span class="lineno">  447<\/span>&#160;<\/div>$/;"	a
l00447	html/scheduler_8h_source.html	/^<div class="line"><a name="l00447"><\/a><span class="lineno">  447<\/span>&#160;                    th-&gt;state = BLOCKED;<\/div>$/;"	a
l00448	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00448"><\/a><span class="lineno">  448<\/span>&#160;            <span class="comment">\/* The situation is now stable, true race-wise. No one can touch the child state, because we hold<\/span><\/div>$/;"	a
l00448	html/mtrand_8h_source.html	/^<div class="line"><a name="l00448"><\/a><span class="lineno">  448<\/span>&#160;<span class="comment">\/\/      - Improved portability by substituting literal constants for long enum&#39;s<\/span><\/div>$/;"	a
l00448	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00448"><\/a><span class="lineno">  448<\/span>&#160;        <span class="keyword">virtual<\/span> <span class="keywordtype">void<\/span> leave();<\/div>$/;"	a
l00448	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00448"><\/a><span class="lineno">  448<\/span>&#160;        }<\/div>$/;"	a
l00448	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00448"><\/a><span class="lineno">  448<\/span>&#160;            <span class="comment">\/\/Record<\/span><\/div>$/;"	a
l00448	html/scheduler_8h_source.html	/^<div class="line"><a name="l00448"><\/a><span class="lineno">  448<\/span>&#160;                    wakeup(th, <span class="keyword">false<\/span> <span class="comment">\/*no join, this is sleeping out of the scheduler*\/<\/span>);<\/div>$/;"	a
l00449	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00449"><\/a><span class="lineno">  449<\/span>&#160;<span class="comment">             * both parent&#39;s locks. So, we first handle races, which may cause us to skip the access.<\/span><\/div>$/;"	a
l00449	html/mtrand_8h_source.html	/^<div class="line"><a name="l00449"><\/a><span class="lineno">  449<\/span>&#160;<span class="comment">\/\/      - Changed license from GNU LGPL to BSD<\/span><\/div>$/;"	a
l00449	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00449"><\/a><span class="lineno">  449<\/span>&#160;<\/div>$/;"	a
l00449	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00449"><\/a><span class="lineno">  449<\/span>&#160;<\/div>$/;"	a
l00449	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00449"><\/a><span class="lineno">  449<\/span>&#160;            <span class="keywordflow">if<\/span> (read) accTimes[id].read  = MAX(accTimes[<span class="keywordtype">id<\/span>].read,  req-&gt;cycle);<\/div>$/;"	a
l00449	html/scheduler_8h_source.html	/^<div class="line"><a name="l00449"><\/a><span class="lineno">  449<\/span>&#160;<\/div>$/;"	a
l00450	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00450"><\/a><span class="lineno">  450<\/span>&#160;<span class="comment">             *\/<\/span><\/div>$/;"	a
l00450	html/mtrand_8h_source.html	/^<div class="line"><a name="l00450"><\/a><span class="lineno">  450<\/span>&#160;<span class="comment">\/\/<\/span><\/div>$/;"	a
l00450	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00450"><\/a><span class="lineno">  450<\/span>&#160;        <a class="code" href="structInstrFuncPtrs.html">InstrFuncPtrs<\/a> GetFuncPtrs();<\/div>$/;"	a
l00450	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00450"><\/a><span class="lineno">  450<\/span>&#160;        <span class="keywordtype">void<\/span> startReplacement(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {<\/div>$/;"	a
l00450	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00450"><\/a><span class="lineno">  450<\/span>&#160;            <span class="keywordflow">else<\/span>      accTimes[id].write = MAX(accTimes[<span class="keywordtype">id<\/span>].write, req-&gt;cycle);<\/div>$/;"	a
l00450	html/scheduler_8h_source.html	/^<div class="line"><a name="l00450"><\/a><span class="lineno">  450<\/span>&#160;                    sleepQueue.pop_front();<\/div>$/;"	a
l00451	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00451"><\/a><span class="lineno">  451<\/span>&#160;            <span class="keywordtype">bool<\/span> skipAccess = CheckForMESIRace(req.type <span class="comment">\/*may change*\/<\/span>, req.state, req.initialState);<\/div>$/;"	a
l00451	html/mtrand_8h_source.html	/^<div class="line"><a name="l00451"><\/a><span class="lineno">  451<\/span>&#160;<span class="comment">\/\/ v1.1 - Corrected parameter label in randNorm from &quot;variance&quot; to &quot;stddev&quot;<\/span><\/div>$/;"	a
l00451	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00451"><\/a><span class="lineno">  451<\/span>&#160;<\/div>$/;"	a
l00451	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00451"><\/a><span class="lineno">  451<\/span>&#160;            incomingLineAddr = req-&gt;lineAddr;<\/div>$/;"	a
l00451	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00451"><\/a><span class="lineno">  451<\/span>&#160;<\/div>$/;"	a
l00451	html/scheduler_8h_source.html	/^<div class="line"><a name="l00451"><\/a><span class="lineno">  451<\/span>&#160;                    th = sleepQueue.front();<\/div>$/;"	a
l00452	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00452"><\/a><span class="lineno">  452<\/span>&#160;            <span class="keywordflow">return<\/span> skipAccess;<\/div>$/;"	a
l00452	html/mtrand_8h_source.html	/^<div class="line"><a name="l00452"><\/a><span class="lineno">  452<\/span>&#160;<span class="comment">\/\/      - Changed randNorm algorithm from basic to polar form for efficiency<\/span><\/div>$/;"	a
l00452	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00452"><\/a><span class="lineno">  452<\/span>&#160;        <span class="comment">\/\/ Contention simulation interface<\/span><\/div>$/;"	a
l00452	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00452"><\/a><span class="lineno">  452<\/span>&#160;        }<\/div>$/;"	a
l00452	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00452"><\/a><span class="lineno">  452<\/span>&#160;            T::update(<span class="keywordtype">id<\/span>, req);<\/div>$/;"	a
l00452	html/scheduler_8h_source.html	/^<div class="line"><a name="l00452"><\/a><span class="lineno">  452<\/span>&#160;                }<\/div>$/;"	a
l00453	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00453"><\/a><span class="lineno">  453<\/span>&#160;        }<\/div>$/;"	a
l00453	html/mtrand_8h_source.html	/^<div class="line"><a name="l00453"><\/a><span class="lineno">  453<\/span>&#160;<span class="comment">\/\/      - Updated includes from deprecated &lt;xxxx.h&gt; to standard &lt;cxxxx&gt; forms<\/span><\/div>$/;"	a
l00453	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00453"><\/a><span class="lineno">  453<\/span>&#160;        <span class="keyword">inline<\/span> <a class="code" href="classEventRecorder.html">EventRecorder<\/a>* getEventRecorder() {<span class="keywordflow">return<\/span> cRec.getEventRecorder();}<\/div>$/;"	a
l00453	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00453"><\/a><span class="lineno">  453<\/span>&#160;<\/div>$/;"	a
l00453	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00453"><\/a><span class="lineno">  453<\/span>&#160;        }<\/div>$/;"	a
l00453	html/scheduler_8h_source.html	/^<div class="line"><a name="l00453"><\/a><span class="lineno">  453<\/span>&#160;            }<\/div>$/;"	a
l00454	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00454"><\/a><span class="lineno">  454<\/span>&#160;<\/div>$/;"	a
l00454	html/mtrand_8h_source.html	/^<div class="line"><a name="l00454"><\/a><span class="lineno">  454<\/span>&#160;<span class="comment">\/\/      - Cleaned declarations and definitions to please Intel compiler<\/span><\/div>$/;"	a
l00454	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00454"><\/a><span class="lineno">  454<\/span>&#160;        <span class="keywordtype">void<\/span> cSimStart();<\/div>$/;"	a
l00454	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00454"><\/a><span class="lineno">  454<\/span>&#160;        <span class="keywordtype">void<\/span> recordCandidate(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00454	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00454"><\/a><span class="lineno">  454<\/span>&#160;<\/div>$/;"	a
l00454	html/scheduler_8h_source.html	/^<div class="line"><a name="l00454"><\/a><span class="lineno">  454<\/span>&#160;<\/div>$/;"	a
l00455	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00455"><\/a><span class="lineno">  455<\/span>&#160;        <span class="keywordtype">bool<\/span> shouldAllocate(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) {<\/div>$/;"	a
l00455	html/mtrand_8h_source.html	/^<div class="line"><a name="l00455"><\/a><span class="lineno">  455<\/span>&#160;<span class="comment">\/\/      - Revised twist() operator to work on ones&#39;-complement machines<\/span><\/div>$/;"	a
l00455	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00455"><\/a><span class="lineno">  455<\/span>&#160;        <span class="keywordtype">void<\/span> cSimEnd();<\/div>$/;"	a
l00455	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00455"><\/a><span class="lineno">  455<\/span>&#160;            assert(candIdx &lt; assoc);<\/div>$/;"	a
l00455	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00455"><\/a><span class="lineno">  455<\/span>&#160;        <span class="keywordtype">void<\/span> startReplacement(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>* req) {<\/div>$/;"	a
l00455	html/scheduler_8h_source.html	/^<div class="line"><a name="l00455"><\/a><span class="lineno">  455<\/span>&#160;            <span class="comment">\/\/Handle rescheduling<\/span><\/div>$/;"	a
l00456	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00456"><\/a><span class="lineno">  456<\/span>&#160;            <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;<\/div>$/;"	a
l00456	html/mtrand_8h_source.html	/^<div class="line"><a name="l00456"><\/a><span class="lineno">  456<\/span>&#160;<span class="comment">\/\/      - Fixed reload() function to work when N and M are unsigned<\/span><\/div>$/;"	a
l00456	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00456"><\/a><span class="lineno">  456<\/span>&#160;<\/div>$/;"	a
l00456	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00456"><\/a><span class="lineno">  456<\/span>&#160;            candList[candIdx++] = id;<\/div>$/;"	a
l00456	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00456"><\/a><span class="lineno">  456<\/span>&#160;            T::startReplacement(req);<\/div>$/;"	a
l00456	html/scheduler_8h_source.html	/^<div class="line"><a name="l00456"><\/a><span class="lineno">  456<\/span>&#160;            <span class="keywordflow">if<\/span> (runQueue.empty()) <span class="keywordflow">return<\/span>;<\/div>$/;"	a
l00457	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00457"><\/a><span class="lineno">  457<\/span>&#160;        }<\/div>$/;"	a
l00457	html/mtrand_8h_source.html	/^<div class="line"><a name="l00457"><\/a><span class="lineno">  457<\/span>&#160;<span class="comment">\/\/      - Added copy constructor and copy operator from Salvador Espana<\/span><\/div>$/;"	a
l00457	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00457"><\/a><span class="lineno">  457<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00457	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00457"><\/a><span class="lineno">  457<\/span>&#160;        }<\/div>$/;"	a
l00457	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00457"><\/a><span class="lineno">  457<\/span>&#160;<\/div>$/;"	a
l00457	html/scheduler_8h_source.html	/^<div class="line"><a name="l00457"><\/a><span class="lineno">  457<\/span>&#160;<\/div>$/;"	a
l00458	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00458"><\/a><span class="lineno">  458<\/span>&#160;<\/div>$/;"	a
l00458	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00458"><\/a><span class="lineno">  458<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> load(Address addr);<\/div>$/;"	a
l00458	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00458"><\/a><span class="lineno">  458<\/span>&#160;<\/div>$/;"	a
l00458	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00458"><\/a><span class="lineno">  458<\/span>&#160;            replCycle = req-&gt;cycle;<\/div>$/;"	a
l00458	html/scheduler_8h_source.html	/^<div class="line"><a name="l00458"><\/a><span class="lineno">  458<\/span>&#160;            <span class="keywordflow">if<\/span> ((curPhase % schedQuantum) == 0) {<\/div>$/;"	a
l00459	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00459"><\/a><span class="lineno">  459<\/span>&#160;        uint64_t processEviction(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; triggerReq, Address wbLineAddr, int32_t lineId, uint64_t startCycle) {<\/div>$/;"	a
l00459	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00459"><\/a><span class="lineno">  459<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> store(Address addr);<\/div>$/;"	a
l00459	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00459"><\/a><span class="lineno">  459<\/span>&#160;        uint32_t getBestCandidate() {<\/div>$/;"	a
l00459	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00459"><\/a><span class="lineno">  459<\/span>&#160;        }<\/div>$/;"	a
l00459	html/scheduler_8h_source.html	/^<div class="line"><a name="l00459"><\/a><span class="lineno">  459<\/span>&#160;                schedTick();<\/div>$/;"	a
l00460	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00460"><\/a><span class="lineno">  460<\/span>&#160;            <span class="keywordtype">bool<\/span> lowerLevelWriteback = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00460	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00460"><\/a><span class="lineno">  460<\/span>&#160;<\/div>$/;"	a
l00460	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00460"><\/a><span class="lineno">  460<\/span>&#160;            assert(candIdx &gt; 0);<\/div>$/;"	a
l00460	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00460"><\/a><span class="lineno">  460<\/span>&#160;<\/div>$/;"	a
l00460	html/scheduler_8h_source.html	/^<div class="line"><a name="l00460"><\/a><span class="lineno">  460<\/span>&#160;            }<\/div>$/;"	a
l00461	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00461"><\/a><span class="lineno">  461<\/span>&#160;            uint64_t endCycle = bcc-&gt;processEviction(wbLineAddr, lineId, lowerLevelWriteback, startCycle, triggerReq.srcId); <span class="comment">\/\/2. if needed, write back line to upper level<\/span><\/div>$/;"	a
l00461	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00461"><\/a><span class="lineno">  461<\/span>&#160;        <span class="comment">\/* NOTE: Analysis routines cannot touch curCycle directly, must use<\/span><\/div>$/;"	a
l00461	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00461"><\/a><span class="lineno">  461<\/span>&#160;            assert(candIdx &lt;= assoc);<\/div>$/;"	a
l00461	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00461"><\/a><span class="lineno">  461<\/span>&#160;        <span class="keywordtype">void<\/span> replaced(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00461	html/scheduler_8h_source.html	/^<div class="line"><a name="l00461"><\/a><span class="lineno">  461<\/span>&#160;        }<\/div>$/;"	a
l00462	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00462"><\/a><span class="lineno">  462<\/span>&#160;            <span class="keywordflow">return<\/span> endCycle;  <span class="comment">\/\/ critical path unaffected, but TimingCache needs it<\/span><\/div>$/;"	a
l00462	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00462"><\/a><span class="lineno">  462<\/span>&#160;<span class="comment">         * advance() for long jumps or insWindow.advancePos() for 1-cycle<\/span><\/div>$/;"	a
l00462	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00462"><\/a><span class="lineno">  462<\/span>&#160;<\/div>$/;"	a
l00462	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00462"><\/a><span class="lineno">  462<\/span>&#160;            T::replaced(<span class="keywordtype">id<\/span>);<\/div>$/;"	a
l00462	html/scheduler_8h_source.html	/^<div class="line"><a name="l00462"><\/a><span class="lineno">  462<\/span>&#160;<\/div>$/;"	a
l00463	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00463"><\/a><span class="lineno">  463<\/span>&#160;        }<\/div>$/;"	a
l00463	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00463"><\/a><span class="lineno">  463<\/span>&#160;<span class="comment">         * jumps.<\/span><\/div>$/;"	a
l00463	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00463"><\/a><span class="lineno">  463<\/span>&#160;            <span class="comment">\/\/Demote all lines below their setpoints<\/span><\/div>$/;"	a
l00463	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00463"><\/a><span class="lineno">  463<\/span>&#160;<\/div>$/;"	a
l00463	html/scheduler_8h_source.html	/^<div class="line"><a name="l00463"><\/a><span class="lineno">  463<\/span>&#160;        <span class="keyword">volatile<\/span> uint32_t* markForSleep(uint32_t pid, uint32_t tid, uint64_t wakeupPhase) {<\/div>$/;"	a
l00464	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00464"><\/a><span class="lineno">  464<\/span>&#160;<\/div>$/;"	a
l00464	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00464"><\/a><span class="lineno">  464<\/span>&#160;<span class="comment">         *<\/span><\/div>$/;"	a
l00464	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00464"><\/a><span class="lineno">  464<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; candIdx; i++) {<\/div>$/;"	a
l00464	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00464"><\/a><span class="lineno">  464<\/span>&#160;            <span class="keywordflow">if<\/span> (replCycle &lt; MAX(accTimes[<span class="keywordtype">id<\/span>].read, accTimes[<span class="keywordtype">id<\/span>].write)) {<\/div>$/;"	a
l00464	html/scheduler_8h_source.html	/^<div class="line"><a name="l00464"><\/a><span class="lineno">  464<\/span>&#160;            futex_lock(&amp;schedLock);<\/div>$/;"	a
l00465	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00465"><\/a><span class="lineno">  465<\/span>&#160;        uint64_t processAccess(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req, int32_t lineId, uint64_t startCycle,  uint64_t* getDoneCycle = <span class="keyword">nullptr<\/span>) {<\/div>$/;"	a
l00465	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00465"><\/a><span class="lineno">  465<\/span>&#160;<span class="comment">         * UPDATE: With decodeCycle, this difference is more serious. ONLY<\/span><\/div>$/;"	a
l00465	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00465"><\/a><span class="lineno">  465<\/span>&#160;                LineInfo* e = &amp;array[candList[i]];<\/div>$/;"	a
l00465	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00465"><\/a><span class="lineno">  465<\/span>&#160;                profAAE.inc();<\/div>$/;"	a
l00465	html/scheduler_8h_source.html	/^<div class="line"><a name="l00465"><\/a><span class="lineno">  465<\/span>&#160;            uint32_t gid = getGid(pid, tid);<\/div>$/;"	a
l00466	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00466"><\/a><span class="lineno">  466<\/span>&#160;            assert(lineId != -1);<\/div>$/;"	a
l00466	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00466"><\/a><span class="lineno">  466<\/span>&#160;<span class="comment">         * cSimStart and cSimEnd should call advance(). advance() is now meant<\/span><\/div>$/;"	a
l00466	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00466"><\/a><span class="lineno">  466<\/span>&#160;                <span class="keywordflow">if<\/span> (e-&gt;ts == 0) <span class="keywordflow">continue<\/span>; <span class="comment">\/\/empty, bypass<\/span><\/div>$/;"	a
l00466	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00466"><\/a><span class="lineno">  466<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00466	html/scheduler_8h_source.html	/^<div class="line"><a name="l00466"><\/a><span class="lineno">  466<\/span>&#160;            trace(Sched, <span class="stringliteral">&quot;%d marking for sleep&quot;<\/span>, gid);<\/div>$/;"	a
l00467	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00467"><\/a><span class="lineno">  467<\/span>&#160;            assert(!getDoneCycle);<\/div>$/;"	a
l00467	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00467"><\/a><span class="lineno">  467<\/span>&#160;<span class="comment">         * to advance the cycle counters in the whole core in lockstep.<\/span><\/div>$/;"	a
l00467	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00467"><\/a><span class="lineno">  467<\/span>&#160;<\/div>$/;"	a
l00467	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00467"><\/a><span class="lineno">  467<\/span>&#160;                profNoViolEv.inc();<\/div>$/;"	a
l00467	html/scheduler_8h_source.html	/^<div class="line"><a name="l00467"><\/a><span class="lineno">  467<\/span>&#160;            ThreadInfo* th = gidMap[gid];<\/div>$/;"	a
l00468	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00468"><\/a><span class="lineno">  468<\/span>&#160;            <span class="comment">\/\/if needed, fetch line or upgrade miss from upper level<\/span><\/div>$/;"	a
l00468	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00468"><\/a><span class="lineno">  468<\/span>&#160;<span class="comment">         *\/<\/span><\/div>$/;"	a
l00468	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00468"><\/a><span class="lineno">  468<\/span>&#160;                uint32_t p = e-&gt;p;<\/div>$/;"	a
l00468	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00468"><\/a><span class="lineno">  468<\/span>&#160;            }<\/div>$/;"	a
l00468	html/scheduler_8h_source.html	/^<div class="line"><a name="l00468"><\/a><span class="lineno">  468<\/span>&#160;            assert(!th-&gt;markedForSleep);<\/div>$/;"	a
l00469	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00469"><\/a><span class="lineno">  469<\/span>&#160;            uint64_t respCycle = bcc-&gt;processAccess(req.lineAddr, lineId, req.type, startCycle, req.srcId, req.flags);<\/div>$/;"	a
l00469	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00469"><\/a><span class="lineno">  469<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> advance(uint64_t targetCycle);<\/div>$/;"	a
l00469	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00469"><\/a><span class="lineno">  469<\/span>&#160;                <span class="keywordflow">if<\/span> (p == partitions) <span class="keywordflow">continue<\/span>; <span class="comment">\/\/bypass unmanaged region entries<\/span><\/div>$/;"	a
l00469	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00469"><\/a><span class="lineno">  469<\/span>&#160;<\/div>$/;"	a
l00469	html/scheduler_8h_source.html	/^<div class="line"><a name="l00469"><\/a><span class="lineno">  469<\/span>&#160;            th-&gt;markedForSleep = <span class="keyword">true<\/span>;<\/div>$/;"	a
l00470	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00470"><\/a><span class="lineno">  470<\/span>&#160;            <span class="comment">\/\/at this point, the line is in a good state w.r.t. upper levels<\/span><\/div>$/;"	a
l00470	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00470"><\/a><span class="lineno">  470<\/span>&#160;<\/div>$/;"	a
l00470	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00470"><\/a><span class="lineno">  470<\/span>&#160;<\/div>$/;"	a
l00470	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00470"><\/a><span class="lineno">  470<\/span>&#160;            <span class="comment">\/\/Reset --- update() will set correctly<\/span><\/div>$/;"	a
l00470	html/scheduler_8h_source.html	/^<div class="line"><a name="l00470"><\/a><span class="lineno">  470<\/span>&#160;            th-&gt;wakeupPhase = wakeupPhase;<\/div>$/;"	a
l00471	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00471"><\/a><span class="lineno">  471<\/span>&#160;            <span class="keywordflow">return<\/span> respCycle;<\/div>$/;"	a
l00471	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00471"><\/a><span class="lineno">  471<\/span>&#160;        <span class="comment">\/\/ Predicated loads and stores call this function, gets recorded as a 0-cycle op.<\/span><\/div>$/;"	a
l00471	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00471"><\/a><span class="lineno">  471<\/span>&#160;                uint32_t size = partInfo[p].size;<\/div>$/;"	a
l00471	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00471"><\/a><span class="lineno">  471<\/span>&#160;            accTimes[id].read = 0;<\/div>$/;"	a
l00471	html/scheduler_8h_source.html	/^<div class="line"><a name="l00471"><\/a><span class="lineno">  471<\/span>&#160;            th-&gt;futexWord = 1; <span class="comment">\/\/to avoid races, this must be set here.<\/span><\/div>$/;"	a
l00472	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00472"><\/a><span class="lineno">  472<\/span>&#160;        }<\/div>$/;"	a
l00472	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00472"><\/a><span class="lineno">  472<\/span>&#160;        <span class="comment">\/\/ Predication is rare enough that we don&#39;t need to model it perfectly to be accurate (i.e. the uops still execute, retire, etc), but this is needed for correctness.<\/span><\/div>$/;"	a
l00472	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00472"><\/a><span class="lineno">  472<\/span>&#160;<\/div>$/;"	a
l00472	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00472"><\/a><span class="lineno">  472<\/span>&#160;            accTimes[id].write = 0;<\/div>$/;"	a
l00472	html/scheduler_8h_source.html	/^<div class="line"><a name="l00472"><\/a><span class="lineno">  472<\/span>&#160;            futex_unlock(&amp;schedLock);<\/div>$/;"	a
l00473	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00473"><\/a><span class="lineno">  473<\/span>&#160;<\/div>$/;"	a
l00473	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00473"><\/a><span class="lineno">  473<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> predFalseMemOp();<\/div>$/;"	a
l00473	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00473"><\/a><span class="lineno">  473<\/span>&#160;                <span class="keywordflow">if<\/span> (size &lt;= partInfo[p].targetSize) <span class="keywordflow">continue<\/span>; <span class="comment">\/\/bypass partitions below target<\/span><\/div>$/;"	a
l00473	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00473"><\/a><span class="lineno">  473<\/span>&#160;        }<\/div>$/;"	a
l00473	html/scheduler_8h_source.html	/^<div class="line"><a name="l00473"><\/a><span class="lineno">  473<\/span>&#160;            <span class="keywordflow">return<\/span> &amp;(th-&gt;futexWord);<\/div>$/;"	a
l00474	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00474"><\/a><span class="lineno">  474<\/span>&#160;        <span class="keywordtype">void<\/span> endAccess(<span class="keyword">const<\/span> <a class="code" href="structMemReq.html">MemReq<\/a>&amp; req) {<\/div>$/;"	a
l00474	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00474"><\/a><span class="lineno">  474<\/span>&#160;<\/div>$/;"	a
l00474	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00474"><\/a><span class="lineno">  474<\/span>&#160;<\/div>$/;"	a
l00474	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00474"><\/a><span class="lineno">  474<\/span>&#160;};<\/div>$/;"	a
l00474	html/scheduler_8h_source.html	/^<div class="line"><a name="l00474"><\/a><span class="lineno">  474<\/span>&#160;        }<\/div>$/;"	a
l00475	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00475"><\/a><span class="lineno">  475<\/span>&#160;            <span class="comment">\/\/Relock child before we unlock ourselves (hand-over-hand)<\/span><\/div>$/;"	a
l00475	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00475"><\/a><span class="lineno">  475<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> branch(Address pc, <span class="keywordtype">bool<\/span> taken, Address takenNpc, Address notTakenNpc);<\/div>$/;"	a
l00475	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00475"><\/a><span class="lineno">  475<\/span>&#160;<span class="preprocessor">#if VANTAGE_8BIT_BTS<\/span><\/div>$/;"	a
l00475	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00475"><\/a><span class="lineno">  475<\/span>&#160;<\/div>$/;"	a
l00475	html/scheduler_8h_source.html	/^<div class="line"><a name="l00475"><\/a><span class="lineno">  475<\/span>&#160;<\/div>$/;"	a
l00476	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00476"><\/a><span class="lineno">  476<\/span>&#160;            <span class="keywordflow">if<\/span> (req.childLock) {<\/div>$/;"	a
l00476	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00476"><\/a><span class="lineno">  476<\/span>&#160;<\/div>$/;"	a
l00476	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00476"><\/a><span class="lineno">  476<\/span>&#160;<span class="preprocessor"><\/span>                <span class="comment">\/\/Must do mod 256 arithmetic. This will do generally worse because of wrap-arounds, but wrapping around is pretty rare<\/span><\/div>$/;"	a
l00476	html/repl__policies_8h_source.html	/^<div class="line"><a name="l00476"><\/a><span class="lineno">  476<\/span>&#160;<span class="preprocessor">#endif  \/\/ REPL_POLICIES_H_<\/span><\/div>$/;"	a
l00476	html/scheduler_8h_source.html	/^<div class="line"><a name="l00476"><\/a><span class="lineno">  476<\/span>&#160;        <span class="keywordtype">bool<\/span> isSleeping(uint32_t pid, uint32_t tid) {<\/div>$/;"	a
l00477	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00477"><\/a><span class="lineno">  477<\/span>&#160;                futex_lock(req.childLock);<\/div>$/;"	a
l00477	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00477"><\/a><span class="lineno">  477<\/span>&#160;        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> bbl(Address bblAddr, <a class="code" href="structBblInfo.html">BblInfo<\/a>* bblInfo);<\/div>$/;"	a
l00477	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00477"><\/a><span class="lineno">  477<\/span>&#160;                <span class="comment">\/\/TODO: Doing things this way, we can profile the difference between this and using larger coarse-grain timestamps<\/span><\/div>$/;"	a
l00477	html/scheduler_8h_source.html	/^<div class="line"><a name="l00477"><\/a><span class="lineno">  477<\/span>&#160;            futex_lock(&amp;schedLock);<\/div>$/;"	a
l00478	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00478"><\/a><span class="lineno">  478<\/span>&#160;            }<\/div>$/;"	a
l00478	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00478"><\/a><span class="lineno">  478<\/span>&#160;<\/div>$/;"	a
l00478	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00478"><\/a><span class="lineno">  478<\/span>&#160;                <span class="keywordflow">if<\/span> (((partInfo[p].curBts - e-&gt;bts) % 256) <span class="comment">\/*8-bit distance to current TS*\/<\/span> &gt;= ((partInfo[p].curBts - partInfo[p].setpointBts) % 256)) {<\/div>$/;"	a
l00478	html/scheduler_8h_source.html	/^<div class="line"><a name="l00478"><\/a><span class="lineno">  478<\/span>&#160;            uint32_t gid = getGid(pid, tid);<\/div>$/;"	a
l00479	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00479"><\/a><span class="lineno">  479<\/span>&#160;            bcc-&gt;unlock();<\/div>$/;"	a
l00479	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00479"><\/a><span class="lineno">  479<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> LoadFunc(THREADID tid, ADDRINT addr);<\/div>$/;"	a
l00479	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00479"><\/a><span class="lineno">  479<\/span>&#160;<span class="preprocessor">#else<\/span><\/div>$/;"	a
l00479	html/scheduler_8h_source.html	/^<div class="line"><a name="l00479"><\/a><span class="lineno">  479<\/span>&#160;            ThreadInfo* th = gidMap[gid];<\/div>$/;"	a
l00480	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00480"><\/a><span class="lineno">  480<\/span>&#160;        }<\/div>$/;"	a
l00480	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00480"><\/a><span class="lineno">  480<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> StoreFunc(THREADID tid, ADDRINT addr);<\/div>$/;"	a
l00480	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00480"><\/a><span class="lineno">  480<\/span>&#160;<span class="preprocessor"><\/span>                <span class="keywordflow">if<\/span> (e-&gt;bts &lt;= partInfo[p].setpointBts) {<\/div>$/;"	a
l00480	html/scheduler_8h_source.html	/^<div class="line"><a name="l00480"><\/a><span class="lineno">  480<\/span>&#160;            <span class="keywordtype">bool<\/span> res = th-&gt;state == SLEEPING;<\/div>$/;"	a
l00481	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00481"><\/a><span class="lineno">  481<\/span>&#160;<\/div>$/;"	a
l00481	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00481"><\/a><span class="lineno">  481<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> PredLoadFunc(THREADID tid, ADDRINT addr, BOOL pred);<\/div>$/;"	a
l00481	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00481"><\/a><span class="lineno">  481<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00481	html/scheduler_8h_source.html	/^<div class="line"><a name="l00481"><\/a><span class="lineno">  481<\/span>&#160;            futex_unlock(&amp;schedLock);<\/div>$/;"	a
l00482	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00482"><\/a><span class="lineno">  482<\/span>&#160;        <span class="comment">\/\/Inv methods<\/span><\/div>$/;"	a
l00482	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00482"><\/a><span class="lineno">  482<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> PredStoreFunc(THREADID tid, ADDRINT addr, BOOL pred);<\/div>$/;"	a
l00482	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00482"><\/a><span class="lineno">  482<\/span>&#160;<span class="preprocessor"><\/span>                    <span class="comment">\/\/ Demote!<\/span><\/div>$/;"	a
l00482	html/scheduler_8h_source.html	/^<div class="line"><a name="l00482"><\/a><span class="lineno">  482<\/span>&#160;            <span class="keywordflow">return<\/span> res;<\/div>$/;"	a
l00483	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00483"><\/a><span class="lineno">  483<\/span>&#160;        <span class="keywordtype">void<\/span> startInv() {<\/div>$/;"	a
l00483	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00483"><\/a><span class="lineno">  483<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> BblFunc(THREADID tid, ADDRINT bblAddr, <a class="code" href="structBblInfo.html">BblInfo<\/a>* bblInfo);<\/div>$/;"	a
l00483	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00483"><\/a><span class="lineno">  483<\/span>&#160;                    <span class="comment">\/\/ Out of p<\/span><\/div>$/;"	a
l00483	html/scheduler_8h_source.html	/^<div class="line"><a name="l00483"><\/a><span class="lineno">  483<\/span>&#160;        }<\/div>$/;"	a
l00484	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00484"><\/a><span class="lineno">  484<\/span>&#160;            bcc-&gt;lock();<\/div>$/;"	a
l00484	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00484"><\/a><span class="lineno">  484<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> BranchFunc(THREADID tid, ADDRINT pc, BOOL taken, ADDRINT takenNpc, ADDRINT notTakenNpc);<\/div>$/;"	a
l00484	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00484"><\/a><span class="lineno">  484<\/span>&#160;                    partInfo[p].profDemotions.inc();<\/div>$/;"	a
l00484	html/scheduler_8h_source.html	/^<div class="line"><a name="l00484"><\/a><span class="lineno">  484<\/span>&#160;<\/div>$/;"	a
l00485	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00485"><\/a><span class="lineno">  485<\/span>&#160;        }<\/div>$/;"	a
l00485	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00485"><\/a><span class="lineno">  485<\/span>&#160;} ATTR_LINE_ALIGNED;  <span class="comment">\/\/ Take up an int number of cache lines<\/span><\/div>$/;"	a
l00485	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00485"><\/a><span class="lineno">  485<\/span>&#160;                    partInfo[p].size--;<\/div>$/;"	a
l00485	html/scheduler_8h_source.html	/^<div class="line"><a name="l00485"><\/a><span class="lineno">  485<\/span>&#160;        <span class="keywordtype">void<\/span> notifySleepEnd(uint32_t pid, uint32_t tid) {<\/div>$/;"	a
l00486	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00486"><\/a><span class="lineno">  486<\/span>&#160;<\/div>$/;"	a
l00486	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00486"><\/a><span class="lineno">  486<\/span>&#160;<\/div>$/;"	a
l00486	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00486"><\/a><span class="lineno">  486<\/span>&#160;<\/div>$/;"	a
l00486	html/scheduler_8h_source.html	/^<div class="line"><a name="l00486"><\/a><span class="lineno">  486<\/span>&#160;            futex_lock(&amp;schedLock);<\/div>$/;"	a
l00487	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00487"><\/a><span class="lineno">  487<\/span>&#160;        uint64_t processInv(<span class="keyword">const<\/span> <a class="code" href="structInvReq.html">InvReq<\/a>&amp; req, int32_t lineId, uint64_t startCycle) {<\/div>$/;"	a
l00487	html/ooo__core_8h_source.html	/^<div class="line"><a name="l00487"><\/a><span class="lineno">  487<\/span>&#160;<span class="preprocessor">#endif  \/\/ OOO_CORE_H_<\/span><\/div>$/;"	a
l00487	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00487"><\/a><span class="lineno">  487<\/span>&#160;                    <span class="comment">\/\/ Into unmanaged<\/span><\/div>$/;"	a
l00487	html/scheduler_8h_source.html	/^<div class="line"><a name="l00487"><\/a><span class="lineno">  487<\/span>&#160;            uint32_t gid = getGid(pid, tid);<\/div>$/;"	a
l00488	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00488"><\/a><span class="lineno">  488<\/span>&#160;            bcc-&gt;processInval(req.lineAddr, lineId, req.type, req.writeback); <span class="comment">\/\/adjust our own state<\/span><\/div>$/;"	a
l00488	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00488"><\/a><span class="lineno">  488<\/span>&#160;                    e-&gt;p = partitions;<\/div>$/;"	a
l00488	html/scheduler_8h_source.html	/^<div class="line"><a name="l00488"><\/a><span class="lineno">  488<\/span>&#160;            ThreadInfo* th = gidMap[gid];<\/div>$/;"	a
l00489	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00489"><\/a><span class="lineno">  489<\/span>&#160;            bcc-&gt;unlock();<\/div>$/;"	a
l00489	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00489"><\/a><span class="lineno">  489<\/span>&#160;                    partInfo[partitions].size++;<\/div>$/;"	a
l00489	html/scheduler_8h_source.html	/^<div class="line"><a name="l00489"><\/a><span class="lineno">  489<\/span>&#160;            assert(th-&gt;markedForSleep == <span class="keyword">false<\/span>);<\/div>$/;"	a
l00490	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00490"><\/a><span class="lineno">  490<\/span>&#160;            <span class="keywordflow">return<\/span> startCycle; <span class="comment">\/\/no extra delay in terminal caches<\/span><\/div>$/;"	a
l00490	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00490"><\/a><span class="lineno">  490<\/span>&#160;<\/div>$/;"	a
l00490	html/scheduler_8h_source.html	/^<div class="line"><a name="l00490"><\/a><span class="lineno">  490<\/span>&#160;            <span class="comment">\/\/Move to BLOCKED; thread will join pretty much immediately<\/span><\/div>$/;"	a
l00491	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00491"><\/a><span class="lineno">  491<\/span>&#160;        }<\/div>$/;"	a
l00491	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00491"><\/a><span class="lineno">  491<\/span>&#160;                    partInfo[p].curIntervalDems++;<\/div>$/;"	a
l00491	html/scheduler_8h_source.html	/^<div class="line"><a name="l00491"><\/a><span class="lineno">  491<\/span>&#160;            assert(th-&gt;state == SLEEPING || th-&gt;state == BLOCKED);<\/div>$/;"	a
l00492	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00492"><\/a><span class="lineno">  492<\/span>&#160;<\/div>$/;"	a
l00492	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00492"><\/a><span class="lineno">  492<\/span>&#160;<\/div>$/;"	a
l00492	html/scheduler_8h_source.html	/^<div class="line"><a name="l00492"><\/a><span class="lineno">  492<\/span>&#160;            <span class="keywordflow">if<\/span> (th-&gt;state == BLOCKED) {<\/div>$/;"	a
l00493	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00493"><\/a><span class="lineno">  493<\/span>&#160;        <span class="comment">\/\/Repl policy interface<\/span><\/div>$/;"	a
l00493	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00493"><\/a><span class="lineno">  493<\/span>&#160;                    <span class="comment">\/\/Note extended size and op not affected<\/span><\/div>$/;"	a
l00493	html/scheduler_8h_source.html	/^<div class="line"><a name="l00493"><\/a><span class="lineno">  493<\/span>&#160;                warn(<span class="stringliteral">&quot;Scheduler:notifySleepEnd: Benign race on SLEEPING-&gt;BLOCKED transition, thread is already blocked&quot;<\/span>);<\/div>$/;"	a
l00494	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00494"><\/a><span class="lineno">  494<\/span>&#160;        uint32_t numSharers(uint32_t lineId) {<span class="keywordflow">return<\/span> 0;} <span class="comment">\/\/no sharers<\/span><\/div>$/;"	a
l00494	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00494"><\/a><span class="lineno">  494<\/span>&#160;                }<\/div>$/;"	a
l00494	html/scheduler_8h_source.html	/^<div class="line"><a name="l00494"><\/a><span class="lineno">  494<\/span>&#160;            } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00495	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00495"><\/a><span class="lineno">  495<\/span>&#160;        <span class="keywordtype">bool<\/span> isValid(uint32_t lineId) {<span class="keywordflow">return<\/span> bcc-&gt;isValid(lineId);}<\/div>$/;"	a
l00495	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00495"><\/a><span class="lineno">  495<\/span>&#160;<\/div>$/;"	a
l00495	html/scheduler_8h_source.html	/^<div class="line"><a name="l00495"><\/a><span class="lineno">  495<\/span>&#160;                sleepQueue.remove(th);<\/div>$/;"	a
l00496	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00496"><\/a><span class="lineno">  496<\/span>&#160;};<\/div>$/;"	a
l00496	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00496"><\/a><span class="lineno">  496<\/span>&#160;                partInfo[p].curIntervalCands++;<\/div>$/;"	a
l00496	html/scheduler_8h_source.html	/^<div class="line"><a name="l00496"><\/a><span class="lineno">  496<\/span>&#160;                th-&gt;state = BLOCKED;<\/div>$/;"	a
l00497	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00497"><\/a><span class="lineno">  497<\/span>&#160;<\/div>$/;"	a
l00497	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00497"><\/a><span class="lineno">  497<\/span>&#160;<\/div>$/;"	a
l00497	html/scheduler_8h_source.html	/^<div class="line"><a name="l00497"><\/a><span class="lineno">  497<\/span>&#160;            }<\/div>$/;"	a
l00498	html/coherence__ctrls_8h_source.html	/^<div class="line"><a name="l00498"><\/a><span class="lineno">  498<\/span>&#160;<span class="preprocessor">#endif  \/\/ COHERENCE_CTRLS_H_<\/span><\/div>$/;"	a
l00498	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00498"><\/a><span class="lineno">  498<\/span>&#160;                <span class="comment">\/\/ See if we need interval change<\/span><\/div>$/;"	a
l00498	html/scheduler_8h_source.html	/^<div class="line"><a name="l00498"><\/a><span class="lineno">  498<\/span>&#160;            futex_unlock(&amp;schedLock);<\/div>$/;"	a
l00499	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00499"><\/a><span class="lineno">  499<\/span>&#160;                <span class="keywordflow">if<\/span> (<span class="comment">\/*partInfo[p].curIntervalDems &gt;= 16 || partInfo[p].curIntervalIns &gt;= 16 ||*\/<\/span> partInfo[p].curIntervalCands &gt;= 256) {<\/div>$/;"	a
l00499	html/scheduler_8h_source.html	/^<div class="line"><a name="l00499"><\/a><span class="lineno">  499<\/span>&#160;        }<\/div>$/;"	a
l00500	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00500"><\/a><span class="lineno">  500<\/span>&#160;                    <span class="keywordtype">double<\/span> maxSz = partInfo[p].targetSize*(1.0 + partSlack);<\/div>$/;"	a
l00500	html/scheduler_8h_source.html	/^<div class="line"><a name="l00500"><\/a><span class="lineno">  500<\/span>&#160;<\/div>$/;"	a
l00501	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00501"><\/a><span class="lineno">  501<\/span>&#160;                    <span class="keywordtype">double<\/span> curSz = partInfo[p].size;<\/div>$/;"	a
l00501	html/scheduler_8h_source.html	/^<div class="line"><a name="l00501"><\/a><span class="lineno">  501<\/span>&#160;        <span class="keywordtype">void<\/span> printThreadState(uint32_t pid, uint32_t tid) {<\/div>$/;"	a
l00502	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00502"><\/a><span class="lineno">  502<\/span>&#160;                    <span class="keywordtype">double<\/span> aperture = 0.0;<\/div>$/;"	a
l00502	html/scheduler_8h_source.html	/^<div class="line"><a name="l00502"><\/a><span class="lineno">  502<\/span>&#160;            futex_lock(&amp;schedLock);<\/div>$/;"	a
l00503	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00503"><\/a><span class="lineno">  503<\/span>&#160;<\/div>$/;"	a
l00503	html/scheduler_8h_source.html	/^<div class="line"><a name="l00503"><\/a><span class="lineno">  503<\/span>&#160;            uint32_t gid = getGid(pid, tid);<\/div>$/;"	a
l00504	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00504"><\/a><span class="lineno">  504<\/span>&#160;                    <span class="comment">\/\/ Feedback-based aperture control<\/span><\/div>$/;"	a
l00504	html/scheduler_8h_source.html	/^<div class="line"><a name="l00504"><\/a><span class="lineno">  504<\/span>&#160;            ThreadInfo* th = gidMap[gid];<\/div>$/;"	a
l00505	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00505"><\/a><span class="lineno">  505<\/span>&#160;                    <span class="comment">\/\/ TODO: Copy over the demotion thresholds lookup table code from the ISCA paper code, or quantize this.<\/span><\/div>$/;"	a
l00505	html/scheduler_8h_source.html	/^<div class="line"><a name="l00505"><\/a><span class="lineno">  505<\/span>&#160;            info(<span class="stringliteral">&quot;[%d] is in scheduling state %d&quot;<\/span>, tid, th-&gt;state);<\/div>$/;"	a
l00506	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00506"><\/a><span class="lineno">  506<\/span>&#160;                    <span class="comment">\/\/ This is doing finer-grain demotions, but requires a bit more math.<\/span><\/div>$/;"	a
l00506	html/scheduler_8h_source.html	/^<div class="line"><a name="l00506"><\/a><span class="lineno">  506<\/span>&#160;            futex_unlock(&amp;schedLock);<\/div>$/;"	a
l00507	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00507"><\/a><span class="lineno">  507<\/span>&#160;                    <span class="keywordflow">if<\/span> (curSz &gt;= maxSz) {<\/div>$/;"	a
l00507	html/scheduler_8h_source.html	/^<div class="line"><a name="l00507"><\/a><span class="lineno">  507<\/span>&#160;        }<\/div>$/;"	a
l00508	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00508"><\/a><span class="lineno">  508<\/span>&#160;                        aperture = maxAperture;<\/div>$/;"	a
l00508	html/scheduler_8h_source.html	/^<div class="line"><a name="l00508"><\/a><span class="lineno">  508<\/span>&#160;<\/div>$/;"	a
l00509	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00509"><\/a><span class="lineno">  509<\/span>&#160;                    } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00509	html/scheduler_8h_source.html	/^<div class="line"><a name="l00509"><\/a><span class="lineno">  509<\/span>&#160;        <span class="keywordtype">void<\/span> notifyTermination() {<\/div>$/;"	a
l00510	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00510"><\/a><span class="lineno">  510<\/span>&#160;                        <span class="keywordtype">double<\/span> slope = (maxAperture)\/(maxSz - partInfo[p].targetSize);<\/div>$/;"	a
l00510	html/scheduler_8h_source.html	/^<div class="line"><a name="l00510"><\/a><span class="lineno">  510<\/span>&#160;            <span class="comment">\/* dsm 2013-06-15: Traced a deadlock at termination down here... looks like with MT apps this lock is held at SimEnd.<\/span><\/div>$/;"	a
l00511	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00511"><\/a><span class="lineno">  511<\/span>&#160;                        assert(slope &gt; 0.0);<\/div>$/;"	a
l00511	html/scheduler_8h_source.html	/^<div class="line"><a name="l00511"><\/a><span class="lineno">  511<\/span>&#160;<span class="comment">             * Leaving the lock off is safe now, but if this function gets more complex, we may have to rethink this.<\/span><\/div>$/;"	a
l00512	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00512"><\/a><span class="lineno">  512<\/span>&#160;                        aperture = slope*(curSz - partInfo[p].targetSize);<\/div>$/;"	a
l00512	html/scheduler_8h_source.html	/^<div class="line"><a name="l00512"><\/a><span class="lineno">  512<\/span>&#160;<span class="comment">             *\/<\/span><\/div>$/;"	a
l00513	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00513"><\/a><span class="lineno">  513<\/span>&#160;                    }<\/div>$/;"	a
l00513	html/scheduler_8h_source.html	/^<div class="line"><a name="l00513"><\/a><span class="lineno">  513<\/span>&#160;            <span class="comment">\/\/futex_lock(&amp;schedLock);<\/span><\/div>$/;"	a
l00514	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00514"><\/a><span class="lineno">  514<\/span>&#160;<\/div>$/;"	a
l00514	html/scheduler_8h_source.html	/^<div class="line"><a name="l00514"><\/a><span class="lineno">  514<\/span>&#160;            terminateWatchdogThread = <span class="keyword">true<\/span>;<\/div>$/;"	a
l00515	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00515"><\/a><span class="lineno">  515<\/span>&#160;                    <span class="keywordflow">if<\/span> (aperture &gt; 0.0) {<\/div>$/;"	a
l00515	html/scheduler_8h_source.html	/^<div class="line"><a name="l00515"><\/a><span class="lineno">  515<\/span>&#160;            <span class="comment">\/\/futex_unlock(&amp;schedLock);<\/span><\/div>$/;"	a
l00516	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00516"><\/a><span class="lineno">  516<\/span>&#160;<span class="comment">\/*<\/span><\/div>$/;"	a
l00516	html/scheduler_8h_source.html	/^<div class="line"><a name="l00516"><\/a><span class="lineno">  516<\/span>&#160;        }<\/div>$/;"	a
l00517	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00517"><\/a><span class="lineno">  517<\/span>&#160;<span class="comment">                        info (&quot;part %d setpoint adjust, curSz %f tgtSz %ld maxSz %f aperture %f curBts %ld setpointBts %ld interval cands %d ins %d dems %d cpt %f&quot;,<\/span><\/div>$/;"	a
l00517	html/scheduler_8h_source.html	/^<div class="line"><a name="l00517"><\/a><span class="lineno">  517<\/span>&#160;<\/div>$/;"	a
l00518	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00518"><\/a><span class="lineno">  518<\/span>&#160;<span class="comment">                            p, curSz, partInfo[p].targetSize, maxSz, aperture, partInfo[p].curBts, partInfo[p].setpointBts, partInfo[p].curIntervalCands,\\<\/span><\/div>$/;"	a
l00518	html/scheduler_8h_source.html	/^<div class="line"><a name="l00518"><\/a><span class="lineno">  518<\/span>&#160;        <span class="comment">\/\/Should be called when a process is terminated abruptly (e.g., through a signal).<\/span><\/div>$/;"	a
l00519	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00519"><\/a><span class="lineno">  519<\/span>&#160;<span class="comment">                            partInfo[p].curIntervalIns, partInfo[p].curIntervalDems, partInfo[p].curIntervalCands*aperture);<\/span><\/div>$/;"	a
l00519	html/scheduler_8h_source.html	/^<div class="line"><a name="l00519"><\/a><span class="lineno">  519<\/span>&#160;        <span class="comment">\/\/Walks the gidMap and calls leave\/finish on all threads of the process. Not quite race-free,<\/span><\/div>$/;"	a
l00520	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00520"><\/a><span class="lineno">  520<\/span>&#160;<span class="comment">*\/<\/span><\/div>$/;"	a
l00520	html/scheduler_8h_source.html	/^<div class="line"><a name="l00520"><\/a><span class="lineno">  520<\/span>&#160;        <span class="comment">\/\/we could have private unlocked versions of leave, finifh, etc, but the key problem is that<\/span><\/div>$/;"	a
l00521	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00521"><\/a><span class="lineno">  521<\/span>&#160;<\/div>$/;"	a
l00521	html/scheduler_8h_source.html	/^<div class="line"><a name="l00521"><\/a><span class="lineno">  521<\/span>&#160;        <span class="comment">\/\/if you call this and any other thread in the process is still alive, then there is a<\/span><\/div>$/;"	a
l00522	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00522"><\/a><span class="lineno">  522<\/span>&#160;                        int32_t shrink = partInfo[p].curIntervalDems;<\/div>$/;"	a
l00522	html/scheduler_8h_source.html	/^<div class="line"><a name="l00522"><\/a><span class="lineno">  522<\/span>&#160;        <span class="comment">\/\/much bigger problem.<\/span><\/div>$/;"	a
l00523	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00523"><\/a><span class="lineno">  523<\/span>&#160;                        <span class="keywordflow">if<\/span> (shrink &lt; aperture*partInfo[p].curIntervalCands) {<\/div>$/;"	a
l00523	html/scheduler_8h_source.html	/^<div class="line"><a name="l00523"><\/a><span class="lineno">  523<\/span>&#160;        <span class="keywordtype">void<\/span> processCleanup(uint32_t pid) {<\/div>$/;"	a
l00524	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00524"><\/a><span class="lineno">  524<\/span>&#160;                            <span class="comment">\/\/info (&quot;increasing setpoint&quot;);<\/span><\/div>$/;"	a
l00524	html/scheduler_8h_source.html	/^<div class="line"><a name="l00524"><\/a><span class="lineno">  524<\/span>&#160;            futex_lock(&amp;schedLock);<\/div>$/;"	a
l00525	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00525"><\/a><span class="lineno">  525<\/span>&#160;                            <span class="keywordflow">if<\/span> (partInfo[p].setpointBts &lt; partInfo[p].curBts) partInfo[p].setpointBts++;<\/div>$/;"	a
l00525	html/scheduler_8h_source.html	/^<div class="line"><a name="l00525"><\/a><span class="lineno">  525<\/span>&#160;            std::vector&lt;uint32_t&gt; doomedTids;<\/div>$/;"	a
l00526	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00526"><\/a><span class="lineno">  526<\/span>&#160;                        } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (shrink &gt; aperture*partInfo[p].curIntervalCands) {<\/div>$/;"	a
l00526	html/scheduler_8h_source.html	/^<div class="line"><a name="l00526"><\/a><span class="lineno">  526<\/span>&#160;            g_unordered_map&lt;uint32_t, ThreadInfo*&gt;::iterator it;<\/div>$/;"	a
l00527	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00527"><\/a><span class="lineno">  527<\/span>&#160;                            <span class="comment">\/\/info (&quot;decreasing setpoint&quot;);<\/span><\/div>$/;"	a
l00527	html/scheduler_8h_source.html	/^<div class="line"><a name="l00527"><\/a><span class="lineno">  527<\/span>&#160;            <span class="keywordflow">for<\/span> (it = gidMap.begin(); it != gidMap.end(); it++) {<\/div>$/;"	a
l00528	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00528"><\/a><span class="lineno">  528<\/span>&#160;<span class="preprocessor">#if VANTAGE_8BIT_BTS<\/span><\/div>$/;"	a
l00528	html/scheduler_8h_source.html	/^<div class="line"><a name="l00528"><\/a><span class="lineno">  528<\/span>&#160;                uint32_t gid = it-&gt;first;<\/div>$/;"	a
l00529	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00529"><\/a><span class="lineno">  529<\/span>&#160;<span class="preprocessor"><\/span>                            <span class="comment">\/\/Never get the setpoint to go 256 positions behind the current timestamp<\/span><\/div>$/;"	a
l00529	html/scheduler_8h_source.html	/^<div class="line"><a name="l00529"><\/a><span class="lineno">  529<\/span>&#160;                <span class="keywordflow">if<\/span> (getPid(gid) == pid) doomedTids.push_back(getTid(gid));<\/div>$/;"	a
l00530	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00530"><\/a><span class="lineno">  530<\/span>&#160;                            <span class="keywordflow">if<\/span> ((partInfo[p].curBts - partInfo[p].setpointBts) &lt; 255) partInfo[p].setpointBts--;<\/div>$/;"	a
l00530	html/scheduler_8h_source.html	/^<div class="line"><a name="l00530"><\/a><span class="lineno">  530<\/span>&#160;            }<\/div>$/;"	a
l00531	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00531"><\/a><span class="lineno">  531<\/span>&#160;<span class="preprocessor">#else<\/span><\/div>$/;"	a
l00531	html/scheduler_8h_source.html	/^<div class="line"><a name="l00531"><\/a><span class="lineno">  531<\/span>&#160;            futex_unlock(&amp;schedLock);<\/div>$/;"	a
l00532	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00532"><\/a><span class="lineno">  532<\/span>&#160;<span class="preprocessor"><\/span>                            <span class="keywordflow">if<\/span> (partInfo[p].setpointBts &gt; 0) partInfo[p].setpointBts--;<\/div>$/;"	a
l00532	html/scheduler_8h_source.html	/^<div class="line"><a name="l00532"><\/a><span class="lineno">  532<\/span>&#160;<\/div>$/;"	a
l00533	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00533"><\/a><span class="lineno">  533<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00533	html/scheduler_8h_source.html	/^<div class="line"><a name="l00533"><\/a><span class="lineno">  533<\/span>&#160;            <span class="keywordflow">if<\/span> (doomedTids.size()) {<\/div>$/;"	a
l00534	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00534"><\/a><span class="lineno">  534<\/span>&#160;<span class="preprocessor"><\/span>                        } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00534	html/scheduler_8h_source.html	/^<div class="line"><a name="l00534"><\/a><span class="lineno">  534<\/span>&#160;                <span class="keywordflow">for<\/span> (uint32_t tid : doomedTids) {<\/div>$/;"	a
l00535	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00535"><\/a><span class="lineno">  535<\/span>&#160;                            <span class="comment">\/\/info (&quot;keeping setpoint&quot;);<\/span><\/div>$/;"	a
l00535	html/scheduler_8h_source.html	/^<div class="line"><a name="l00535"><\/a><span class="lineno">  535<\/span>&#160;                    <span class="keywordflow">if<\/span> (isSleeping(pid, tid)) {<\/div>$/;"	a
l00536	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00536"><\/a><span class="lineno">  536<\/span>&#160;                        }<\/div>$/;"	a
l00536	html/scheduler_8h_source.html	/^<div class="line"><a name="l00536"><\/a><span class="lineno">  536<\/span>&#160;                        notifySleepEnd(pid, tid);<\/div>$/;"	a
l00537	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00537"><\/a><span class="lineno">  537<\/span>&#160;                    }<\/div>$/;"	a
l00537	html/scheduler_8h_source.html	/^<div class="line"><a name="l00537"><\/a><span class="lineno">  537<\/span>&#160;                    }<\/div>$/;"	a
l00538	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00538"><\/a><span class="lineno">  538<\/span>&#160;<\/div>$/;"	a
l00538	html/scheduler_8h_source.html	/^<div class="line"><a name="l00538"><\/a><span class="lineno">  538<\/span>&#160;                    finish(pid, tid);<\/div>$/;"	a
l00539	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00539"><\/a><span class="lineno">  539<\/span>&#160;                    <span class="comment">\/\/info(&quot;part %d post setpointBts %ld&quot;, p, partInfo[p].setpointBts);<\/span><\/div>$/;"	a
l00539	html/scheduler_8h_source.html	/^<div class="line"><a name="l00539"><\/a><span class="lineno">  539<\/span>&#160;                }<\/div>$/;"	a
l00540	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00540"><\/a><span class="lineno">  540<\/span>&#160;<\/div>$/;"	a
l00540	html/scheduler_8h_source.html	/^<div class="line"><a name="l00540"><\/a><span class="lineno">  540<\/span>&#160;                info(<span class="stringliteral">&quot;[sched] Cleaned up pid %d, %ld tids&quot;<\/span>, pid, doomedTids.size());<\/div>$/;"	a
l00541	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00541"><\/a><span class="lineno">  541<\/span>&#160;                    partInfo[p].curIntervalCands = 0;<\/div>$/;"	a
l00541	html/scheduler_8h_source.html	/^<div class="line"><a name="l00541"><\/a><span class="lineno">  541<\/span>&#160;            }<\/div>$/;"	a
l00542	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00542"><\/a><span class="lineno">  542<\/span>&#160;                    partInfo[p].curIntervalIns = 0;<\/div>$/;"	a
l00542	html/scheduler_8h_source.html	/^<div class="line"><a name="l00542"><\/a><span class="lineno">  542<\/span>&#160;        }<\/div>$/;"	a
l00543	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00543"><\/a><span class="lineno">  543<\/span>&#160;                    partInfo[p].curIntervalDems = 0;<\/div>$/;"	a
l00543	html/scheduler_8h_source.html	/^<div class="line"><a name="l00543"><\/a><span class="lineno">  543<\/span>&#160;<\/div>$/;"	a
l00544	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00544"><\/a><span class="lineno">  544<\/span>&#160;                    partInfo[p].setpointAdjs++;<\/div>$/;"	a
l00544	html/scheduler_8h_source.html	/^<div class="line"><a name="l00544"><\/a><span class="lineno">  544<\/span>&#160;        <span class="comment">\/\/Calling doProcessCleanup on multithreaded processes leads to races,<\/span><\/div>$/;"	a
l00545	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00545"><\/a><span class="lineno">  545<\/span>&#160;                }<\/div>$/;"	a
l00545	html/scheduler_8h_source.html	/^<div class="line"><a name="l00545"><\/a><span class="lineno">  545<\/span>&#160;        <span class="comment">\/\/so we&#39;ll just have the watchdog thread to it once we&#39;re gone<\/span><\/div>$/;"	a
l00546	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00546"><\/a><span class="lineno">  546<\/span>&#160;            } <span class="comment">\/\/for<\/span><\/div>$/;"	a
l00546	html/scheduler_8h_source.html	/^<div class="line"><a name="l00546"><\/a><span class="lineno">  546<\/span>&#160;        <span class="keywordtype">void<\/span> queueProcessCleanup(uint32_t pid, uint32_t osPid) {<\/div>$/;"	a
l00547	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00547"><\/a><span class="lineno">  547<\/span>&#160;<\/div>$/;"	a
l00547	html/scheduler_8h_source.html	/^<div class="line"><a name="l00547"><\/a><span class="lineno">  547<\/span>&#160;            futex_lock(&amp;schedLock);<\/div>$/;"	a
l00548	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00548"><\/a><span class="lineno">  548<\/span>&#160;            <span class="comment">\/\/Get best candidate for eviction<\/span><\/div>$/;"	a
l00548	html/scheduler_8h_source.html	/^<div class="line"><a name="l00548"><\/a><span class="lineno">  548<\/span>&#160;            pendingPidCleanups.push_back(std::make_pair(pid, osPid));<\/div>$/;"	a
l00549	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00549"><\/a><span class="lineno">  549<\/span>&#160;            int32_t bestId = candList[0];<\/div>$/;"	a
l00549	html/scheduler_8h_source.html	/^<div class="line"><a name="l00549"><\/a><span class="lineno">  549<\/span>&#160;            futex_unlock(&amp;schedLock);<\/div>$/;"	a
l00550	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00550"><\/a><span class="lineno">  550<\/span>&#160;<\/div>$/;"	a
l00550	html/scheduler_8h_source.html	/^<div class="line"><a name="l00550"><\/a><span class="lineno">  550<\/span>&#160;        }<\/div>$/;"	a
l00551	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00551"><\/a><span class="lineno">  551<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; candIdx; i++) { <span class="comment">\/\/note we include 0; 0 compares with itself, see shortcut to understand why<\/span><\/div>$/;"	a
l00551	html/scheduler_8h_source.html	/^<div class="line"><a name="l00551"><\/a><span class="lineno">  551<\/span>&#160;<\/div>$/;"	a
l00552	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00552"><\/a><span class="lineno">  552<\/span>&#160;                uint32_t <span class="keywordtype">id<\/span> = candList[i];<\/div>$/;"	a
l00552	html/scheduler_8h_source.html	/^<div class="line"><a name="l00552"><\/a><span class="lineno">  552<\/span>&#160;        uint32_t getScheduledPid(uint32_t cid)<span class="keyword"> const <\/span>{ <span class="keywordflow">return<\/span> (contexts[cid].state == USED)? getPid(contexts[cid].curThread-&gt;gid) : (uint32_t)-1; }<\/div>$/;"	a
l00553	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00553"><\/a><span class="lineno">  553<\/span>&#160;                LineInfo* e = &amp;array[id];<\/div>$/;"	a
l00553	html/scheduler_8h_source.html	/^<div class="line"><a name="l00553"><\/a><span class="lineno">  553<\/span>&#160;<\/div>$/;"	a
l00554	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00554"><\/a><span class="lineno">  554<\/span>&#160;                LineInfo* best = &amp;array[bestId];<\/div>$/;"	a
l00554	html/scheduler_8h_source.html	/^<div class="line"><a name="l00554"><\/a><span class="lineno">  554<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00555	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00555"><\/a><span class="lineno">  555<\/span>&#160;<\/div>$/;"	a
l00555	html/scheduler_8h_source.html	/^<div class="line"><a name="l00555"><\/a><span class="lineno">  555<\/span>&#160;        <span class="keywordtype">void<\/span> schedule(ThreadInfo* th, ContextInfo* ctx) {<\/div>$/;"	a
l00556	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00556"><\/a><span class="lineno">  556<\/span>&#160;                <span class="keywordflow">if<\/span> (e-&gt;ts == 0) {<\/div>$/;"	a
l00556	html/scheduler_8h_source.html	/^<div class="line"><a name="l00556"><\/a><span class="lineno">  556<\/span>&#160;            assert(th-&gt;state == STARTED || th-&gt;state == BLOCKED || th-&gt;state == QUEUED);<\/div>$/;"	a
l00557	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00557"><\/a><span class="lineno">  557<\/span>&#160;                    <span class="comment">\/\/shortcut for empty positions<\/span><\/div>$/;"	a
l00557	html/scheduler_8h_source.html	/^<div class="line"><a name="l00557"><\/a><span class="lineno">  557<\/span>&#160;            assert(ctx-&gt;state == IDLE);<\/div>$/;"	a
l00558	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00558"><\/a><span class="lineno">  558<\/span>&#160;                    bestId = id;<\/div>$/;"	a
l00558	html/scheduler_8h_source.html	/^<div class="line"><a name="l00558"><\/a><span class="lineno">  558<\/span>&#160;            assert(ctx-&gt;curThread == <span class="keyword">nullptr<\/span>);<\/div>$/;"	a
l00559	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00559"><\/a><span class="lineno">  559<\/span>&#160;                    <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00559	html/scheduler_8h_source.html	/^<div class="line"><a name="l00559"><\/a><span class="lineno">  559<\/span>&#160;            th-&gt;state = RUNNING;<\/div>$/;"	a
l00560	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00560"><\/a><span class="lineno">  560<\/span>&#160;                }<\/div>$/;"	a
l00560	html/scheduler_8h_source.html	/^<div class="line"><a name="l00560"><\/a><span class="lineno">  560<\/span>&#160;            th-&gt;cid = ctx-&gt;cid;<\/div>$/;"	a
l00561	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00561"><\/a><span class="lineno">  561<\/span>&#160;<\/div>$/;"	a
l00561	html/scheduler_8h_source.html	/^<div class="line"><a name="l00561"><\/a><span class="lineno">  561<\/span>&#160;            ctx-&gt;state = USED;<\/div>$/;"	a
l00562	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00562"><\/a><span class="lineno">  562<\/span>&#160;                uint32_t p = e-&gt;p;<\/div>$/;"	a
l00562	html/scheduler_8h_source.html	/^<div class="line"><a name="l00562"><\/a><span class="lineno">  562<\/span>&#160;            ctx-&gt;curThread = th;<\/div>$/;"	a
l00563	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00563"><\/a><span class="lineno">  563<\/span>&#160;<\/div>$/;"	a
l00563	html/scheduler_8h_source.html	/^<div class="line"><a name="l00563"><\/a><span class="lineno">  563<\/span>&#160;            scheduleEvents.inc();<\/div>$/;"	a
l00564	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00564"><\/a><span class="lineno">  564<\/span>&#160;                <span class="keywordflow">if<\/span> (p == partitions &amp;&amp; best-&gt;p != partitions) { <span class="comment">\/\/prioritize umgd<\/span><\/div>$/;"	a
l00564	html/scheduler_8h_source.html	/^<div class="line"><a name="l00564"><\/a><span class="lineno">  564<\/span>&#160;            scheduledThreads++;<\/div>$/;"	a
l00565	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00565"><\/a><span class="lineno">  565<\/span>&#160;                    bestId = id;<\/div>$/;"	a
l00565	html/scheduler_8h_source.html	/^<div class="line"><a name="l00565"><\/a><span class="lineno">  565<\/span>&#160;            <span class="comment">\/\/info(&quot;Scheduled %d &lt;-&gt; %d&quot;, th-&gt;gid, ctx-&gt;cid);<\/span><\/div>$/;"	a
l00566	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00566"><\/a><span class="lineno">  566<\/span>&#160;                } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (p == partitions &amp;&amp; best-&gt;p == partitions) {<\/div>$/;"	a
l00566	html/scheduler_8h_source.html	/^<div class="line"><a name="l00566"><\/a><span class="lineno">  566<\/span>&#160;            zinfo-&gt;cores[ctx-&gt;cid]-&gt;contextSwitch(th-&gt;gid);<\/div>$/;"	a
l00567	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00567"><\/a><span class="lineno">  567<\/span>&#160;                    <span class="keywordflow">if<\/span> (e-&gt;ts &lt; best-&gt;ts) bestId = id;<\/div>$/;"	a
l00567	html/scheduler_8h_source.html	/^<div class="line"><a name="l00567"><\/a><span class="lineno">  567<\/span>&#160;        }<\/div>$/;"	a
l00568	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00568"><\/a><span class="lineno">  568<\/span>&#160;                } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (p != partitions &amp;&amp; best-&gt;p == partitions) {<\/div>$/;"	a
l00568	html/scheduler_8h_source.html	/^<div class="line"><a name="l00568"><\/a><span class="lineno">  568<\/span>&#160;<\/div>$/;"	a
l00569	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00569"><\/a><span class="lineno">  569<\/span>&#160;                    <span class="comment">\/\/best wins, prioritize unmanaged<\/span><\/div>$/;"	a
l00569	html/scheduler_8h_source.html	/^<div class="line"><a name="l00569"><\/a><span class="lineno">  569<\/span>&#160;        <span class="keywordtype">void<\/span> deschedule(ThreadInfo* th, ContextInfo* ctx, ThreadState targetState) {<\/div>$/;"	a
l00570	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00570"><\/a><span class="lineno">  570<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00570	html/scheduler_8h_source.html	/^<div class="line"><a name="l00570"><\/a><span class="lineno">  570<\/span>&#160;            assert(th-&gt;state == RUNNING || th-&gt;state == OUT);<\/div>$/;"	a
l00571	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00571"><\/a><span class="lineno">  571<\/span>&#160;                    assert(p != partitions &amp;&amp; best-&gt;p != partitions);<\/div>$/;"	a
l00571	html/scheduler_8h_source.html	/^<div class="line"><a name="l00571"><\/a><span class="lineno">  571<\/span>&#160;            assert(ctx-&gt;state == USED);<\/div>$/;"	a
l00572	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00572"><\/a><span class="lineno">  572<\/span>&#160;                    <span class="comment">\/\/Just do LRU; with correctly-sized partitions, this is VERY rare<\/span><\/div>$/;"	a
l00572	html/scheduler_8h_source.html	/^<div class="line"><a name="l00572"><\/a><span class="lineno">  572<\/span>&#160;            assert(ctx-&gt;cid == th-&gt;cid);<\/div>$/;"	a
l00573	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00573"><\/a><span class="lineno">  573<\/span>&#160;                    <span class="comment">\/\/NOTE: If we were to study really small unmanaged regions, we can always get fancier and prioritize by aperture, bts, etc.<\/span><\/div>$/;"	a
l00573	html/scheduler_8h_source.html	/^<div class="line"><a name="l00573"><\/a><span class="lineno">  573<\/span>&#160;            assert(ctx-&gt;curThread == th);<\/div>$/;"	a
l00574	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00574"><\/a><span class="lineno">  574<\/span>&#160;                    <span class="keywordflow">if<\/span> (e-&gt;ts &lt; best-&gt;ts) bestId = id;<\/div>$/;"	a
l00574	html/scheduler_8h_source.html	/^<div class="line"><a name="l00574"><\/a><span class="lineno">  574<\/span>&#160;            assert(targetState == BLOCKED || targetState == QUEUED || targetState == SLEEPING);<\/div>$/;"	a
l00575	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00575"><\/a><span class="lineno">  575<\/span>&#160;                }<\/div>$/;"	a
l00575	html/scheduler_8h_source.html	/^<div class="line"><a name="l00575"><\/a><span class="lineno">  575<\/span>&#160;            <span class="keywordflow">if<\/span> (zinfo-&gt;procStats) zinfo-&gt;procStats-&gt;notifyDeschedule();  <span class="comment">\/\/ FIXME: Interface<\/span><\/div>$/;"	a
l00576	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00576"><\/a><span class="lineno">  576<\/span>&#160;            }<\/div>$/;"	a
l00576	html/scheduler_8h_source.html	/^<div class="line"><a name="l00576"><\/a><span class="lineno">  576<\/span>&#160;            th-&gt;state = targetState;<\/div>$/;"	a
l00577	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00577"><\/a><span class="lineno">  577<\/span>&#160;            assert(bestId &gt;= 0 &amp;&amp; (uint32_t)bestId &lt; totalSize);<\/div>$/;"	a
l00577	html/scheduler_8h_source.html	/^<div class="line"><a name="l00577"><\/a><span class="lineno">  577<\/span>&#160;            ctx-&gt;state = IDLE;<\/div>$/;"	a
l00578	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00578"><\/a><span class="lineno">  578<\/span>&#160;            <span class="keywordflow">return<\/span> bestId;<\/div>$/;"	a
l00578	html/scheduler_8h_source.html	/^<div class="line"><a name="l00578"><\/a><span class="lineno">  578<\/span>&#160;            ctx-&gt;curThread = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00579	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00579"><\/a><span class="lineno">  579<\/span>&#160;        }<\/div>$/;"	a
l00579	html/scheduler_8h_source.html	/^<div class="line"><a name="l00579"><\/a><span class="lineno">  579<\/span>&#160;            scheduledThreads--;<\/div>$/;"	a
l00580	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00580"><\/a><span class="lineno">  580<\/span>&#160;<\/div>$/;"	a
l00580	html/scheduler_8h_source.html	/^<div class="line"><a name="l00580"><\/a><span class="lineno">  580<\/span>&#160;            <span class="comment">\/\/Notify core of context-switch eagerly.<\/span><\/div>$/;"	a
l00581	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00581"><\/a><span class="lineno">  581<\/span>&#160;        <span class="keywordtype">void<\/span> replaced(uint32_t <span class="keywordtype">id<\/span>) {<\/div>$/;"	a
l00581	html/scheduler_8h_source.html	/^<div class="line"><a name="l00581"><\/a><span class="lineno">  581<\/span>&#160;            <span class="comment">\/\/TODO: we may need more callbacks in the cores, e.g. in schedule(). Revise interface as needed...<\/span><\/div>$/;"	a
l00582	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00582"><\/a><span class="lineno">  582<\/span>&#160;            candIdx = 0; <span class="comment">\/\/reset<\/span><\/div>$/;"	a
l00582	html/scheduler_8h_source.html	/^<div class="line"><a name="l00582"><\/a><span class="lineno">  582<\/span>&#160;            zinfo-&gt;cores[ctx-&gt;cid]-&gt;contextSwitch(-1);<\/div>$/;"	a
l00583	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00583"><\/a><span class="lineno">  583<\/span>&#160;<\/div>$/;"	a
l00583	html/scheduler_8h_source.html	/^<div class="line"><a name="l00583"><\/a><span class="lineno">  583<\/span>&#160;            zinfo-&gt;processStats-&gt;notifyDeschedule(ctx-&gt;cid, getPid(th-&gt;gid));<\/div>$/;"	a
l00584	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00584"><\/a><span class="lineno">  584<\/span>&#160;            LineInfo* e = &amp;array[id];<\/div>$/;"	a
l00584	html/scheduler_8h_source.html	/^<div class="line"><a name="l00584"><\/a><span class="lineno">  584<\/span>&#160;            <span class="comment">\/\/info(&quot;Descheduled %d &lt;-&gt; %d&quot;, th-&gt;gid, ctx-&gt;cid);<\/span><\/div>$/;"	a
l00585	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00585"><\/a><span class="lineno">  585<\/span>&#160;            e-&gt;ts = 0;<\/div>$/;"	a
l00585	html/scheduler_8h_source.html	/^<div class="line"><a name="l00585"><\/a><span class="lineno">  585<\/span>&#160;        }<\/div>$/;"	a
l00586	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00586"><\/a><span class="lineno">  586<\/span>&#160;            e-&gt;bts = 0;<\/div>$/;"	a
l00586	html/scheduler_8h_source.html	/^<div class="line"><a name="l00586"><\/a><span class="lineno">  586<\/span>&#160;<\/div>$/;"	a
l00587	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00587"><\/a><span class="lineno">  587<\/span>&#160;            e-&gt;addr = incomingLineAddr;<\/div>$/;"	a
l00587	html/scheduler_8h_source.html	/^<div class="line"><a name="l00587"><\/a><span class="lineno">  587<\/span>&#160;        <span class="keywordtype">void<\/span> waitForContext(ThreadInfo* th) {<\/div>$/;"	a
l00588	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00588"><\/a><span class="lineno">  588<\/span>&#160;        }<\/div>$/;"	a
l00588	html/scheduler_8h_source.html	/^<div class="line"><a name="l00588"><\/a><span class="lineno">  588<\/span>&#160;            th-&gt;futexWord = 1;<\/div>$/;"	a
l00589	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00589"><\/a><span class="lineno">  589<\/span>&#160;<\/div>$/;"	a
l00589	html/scheduler_8h_source.html	/^<div class="line"><a name="l00589"><\/a><span class="lineno">  589<\/span>&#160;            waitEvents.inc();<\/div>$/;"	a
l00590	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00590"><\/a><span class="lineno">  590<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00590	html/scheduler_8h_source.html	/^<div class="line"><a name="l00590"><\/a><span class="lineno">  590<\/span>&#160;            <span class="comment">\/\/info(&quot;%d waiting to be scheduled&quot;, th-&gt;gid);<\/span><\/div>$/;"	a
l00591	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00591"><\/a><span class="lineno">  591<\/span>&#160;        <span class="keywordtype">void<\/span> setPartitionSizes(<span class="keyword">const<\/span> uint32_t* sizes) {<\/div>$/;"	a
l00591	html/scheduler_8h_source.html	/^<div class="line"><a name="l00591"><\/a><span class="lineno">  591<\/span>&#160;            <span class="comment">\/\/printState();<\/span><\/div>$/;"	a
l00592	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00592"><\/a><span class="lineno">  592<\/span>&#160;            uint32_t s[partitions];<\/div>$/;"	a
l00592	html/scheduler_8h_source.html	/^<div class="line"><a name="l00592"><\/a><span class="lineno">  592<\/span>&#160;            futex_unlock(&amp;schedLock);<\/div>$/;"	a
l00593	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00593"><\/a><span class="lineno">  593<\/span>&#160;            uint32_t usedSize = 0;<\/div>$/;"	a
l00593	html/scheduler_8h_source.html	/^<div class="line"><a name="l00593"><\/a><span class="lineno">  593<\/span>&#160;            <span class="keywordflow">while<\/span> (<span class="keyword">true<\/span>) {<\/div>$/;"	a
l00594	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00594"><\/a><span class="lineno">  594<\/span>&#160;            uint32_t linesToTakeAway = 0;<\/div>$/;"	a
l00594	html/scheduler_8h_source.html	/^<div class="line"><a name="l00594"><\/a><span class="lineno">  594<\/span>&#160;                <span class="keywordtype">int<\/span> futex_res = syscall(SYS_futex, &amp;th-&gt;futexWord, FUTEX_WAIT, 1 <span class="comment">\/*a racing thread waking us up will change value to 0, and we won&#39;t block*\/<\/span>, <span class="keyword">nullptr<\/span>, <span class="keyword">nullptr<\/span>, 0);<\/div>$/;"	a
l00595	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00595"><\/a><span class="lineno">  595<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t p = 0; p &lt; partitions; p++) {<\/div>$/;"	a
l00595	html/scheduler_8h_source.html	/^<div class="line"><a name="l00595"><\/a><span class="lineno">  595<\/span>&#160;                <span class="keywordflow">if<\/span> (futex_res == 0 || th-&gt;futexWord != 1) <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00596	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00596"><\/a><span class="lineno">  596<\/span>&#160;                s[p] = totalSize*sizes[p]\/partGranularity;<\/div>$/;"	a
l00596	html/scheduler_8h_source.html	/^<div class="line"><a name="l00596"><\/a><span class="lineno">  596<\/span>&#160;            }<\/div>$/;"	a
l00597	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00597"><\/a><span class="lineno">  597<\/span>&#160;<span class="preprocessor">#if UMON_INFO<\/span><\/div>$/;"	a
l00597	html/scheduler_8h_source.html	/^<div class="line"><a name="l00597"><\/a><span class="lineno">  597<\/span>&#160;            <span class="comment">\/\/info(&quot;%d out of sched wait, got cid = %d, needsJoin = %d&quot;, th-&gt;gid, th-&gt;cid, th-&gt;needsJoin);<\/span><\/div>$/;"	a
l00598	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00598"><\/a><span class="lineno">  598<\/span>&#160;<span class="preprocessor"><\/span>                info(<span class="stringliteral">&quot;part %d, %ld -&gt; %d lines (now it&#39;s %ld lines) [cur %ld\/%ld set %ld\/%ld setAdjs %ld]&quot;<\/span>, p, partInfo[p].targetSize, s[p],<\/div>$/;"	a
l00598	html/scheduler_8h_source.html	/^<div class="line"><a name="l00598"><\/a><span class="lineno">  598<\/span>&#160;            <span class="keywordflow">if<\/span> (th-&gt;needsJoin) {<\/div>$/;"	a
l00599	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00599"><\/a><span class="lineno">  599<\/span>&#160;                        partInfo[p].size, partInfo[p].curBts, partInfo[p].curBts % 256, partInfo[p].setpointBts, partInfo[p].setpointBts % 256, partInfo[p].setpointAdjs);<\/div>$/;"	a
l00599	html/scheduler_8h_source.html	/^<div class="line"><a name="l00599"><\/a><span class="lineno">  599<\/span>&#160;                futex_lock(&amp;schedLock);<\/div>$/;"	a
l00600	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00600"><\/a><span class="lineno">  600<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00600	html/scheduler_8h_source.html	/^<div class="line"><a name="l00600"><\/a><span class="lineno">  600<\/span>&#160;                assert(th-&gt;needsJoin); <span class="comment">\/\/re-check after the lock<\/span><\/div>$/;"	a
l00601	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00601"><\/a><span class="lineno">  601<\/span>&#160;<span class="preprocessor"><\/span>                <span class="keywordflow">if<\/span> (smoothTransients) {<\/div>$/;"	a
l00601	html/scheduler_8h_source.html	/^<div class="line"><a name="l00601"><\/a><span class="lineno">  601<\/span>&#160;                zinfo-&gt;cores[th-&gt;cid]-&gt;join();<\/div>$/;"	a
l00602	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00602"><\/a><span class="lineno">  602<\/span>&#160;                    partInfo[p].longTermTargetSize = s[p];<\/div>$/;"	a
l00602	html/scheduler_8h_source.html	/^<div class="line"><a name="l00602"><\/a><span class="lineno">  602<\/span>&#160;                bar.join(th-&gt;cid, &amp;schedLock);<\/div>$/;"	a
l00603	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00603"><\/a><span class="lineno">  603<\/span>&#160;                    <span class="keywordflow">if<\/span> (s[p] &gt; partInfo[p].targetSize) { <span class="comment">\/\/growing<\/span><\/div>$/;"	a
l00603	html/scheduler_8h_source.html	/^<div class="line"><a name="l00603"><\/a><span class="lineno">  603<\/span>&#160;                <span class="comment">\/\/info(&quot;%d join done&quot;, th-&gt;gid);<\/span><\/div>$/;"	a
l00604	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00604"><\/a><span class="lineno">  604<\/span>&#160;                        uint32_t newTarget = MAX(partInfo[p].targetSize, MIN(partInfo[p].longTermTargetSize, partInfo[p].size+1)); <span class="comment">\/\/always in [target,longTermTarget]<\/span><\/div>$/;"	a
l00604	html/scheduler_8h_source.html	/^<div class="line"><a name="l00604"><\/a><span class="lineno">  604<\/span>&#160;            }<\/div>$/;"	a
l00605	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00605"><\/a><span class="lineno">  605<\/span>&#160;                        linesToTakeAway += newTarget - partInfo[p].targetSize;<\/div>$/;"	a
l00605	html/scheduler_8h_source.html	/^<div class="line"><a name="l00605"><\/a><span class="lineno">  605<\/span>&#160;        }<\/div>$/;"	a
l00606	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00606"><\/a><span class="lineno">  606<\/span>&#160;                        partInfo[p].targetSize = newTarget;<\/div>$/;"	a
l00606	html/scheduler_8h_source.html	/^<div class="line"><a name="l00606"><\/a><span class="lineno">  606<\/span>&#160;<\/div>$/;"	a
l00607	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00607"><\/a><span class="lineno">  607<\/span>&#160;                    }<\/div>$/;"	a
l00607	html/scheduler_8h_source.html	/^<div class="line"><a name="l00607"><\/a><span class="lineno">  607<\/span>&#160;        <span class="keywordtype">void<\/span> wakeup(ThreadInfo* th, <span class="keywordtype">bool<\/span> needsJoin) {<\/div>$/;"	a
l00608	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00608"><\/a><span class="lineno">  608<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00608	html/scheduler_8h_source.html	/^<div class="line"><a name="l00608"><\/a><span class="lineno">  608<\/span>&#160;            th-&gt;needsJoin = needsJoin;<\/div>$/;"	a
l00609	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00609"><\/a><span class="lineno">  609<\/span>&#160;                    partInfo[p].targetSize = s[p];<\/div>$/;"	a
l00609	html/scheduler_8h_source.html	/^<div class="line"><a name="l00609"><\/a><span class="lineno">  609<\/span>&#160;            <span class="keywordtype">bool<\/span> succ = __sync_bool_compare_and_swap(&amp;th-&gt;futexWord, 1, 0);<\/div>$/;"	a
l00610	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00610"><\/a><span class="lineno">  610<\/span>&#160;                    partInfo[p].longTermTargetSize = s[p];<\/div>$/;"	a
l00610	html/scheduler_8h_source.html	/^<div class="line"><a name="l00610"><\/a><span class="lineno">  610<\/span>&#160;            <span class="keywordflow">if<\/span> (!succ) panic(<span class="stringliteral">&quot;Wakeup race in barrier?&quot;<\/span>);<\/div>$/;"	a
l00611	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00611"><\/a><span class="lineno">  611<\/span>&#160;                }<\/div>$/;"	a
l00611	html/scheduler_8h_source.html	/^<div class="line"><a name="l00611"><\/a><span class="lineno">  611<\/span>&#160;            syscall(SYS_futex, &amp;th-&gt;futexWord, FUTEX_WAKE, 1, <span class="keyword">nullptr<\/span>, <span class="keyword">nullptr<\/span>, 0);<\/div>$/;"	a
l00612	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00612"><\/a><span class="lineno">  612<\/span>&#160;                usedSize += s[p];<\/div>$/;"	a
l00612	html/scheduler_8h_source.html	/^<div class="line"><a name="l00612"><\/a><span class="lineno">  612<\/span>&#160;            waitUntilQueued(th);<\/div>$/;"	a
l00613	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00613"><\/a><span class="lineno">  613<\/span>&#160;            }<\/div>$/;"	a
l00613	html/scheduler_8h_source.html	/^<div class="line"><a name="l00613"><\/a><span class="lineno">  613<\/span>&#160;        }<\/div>$/;"	a
l00614	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00614"><\/a><span class="lineno">  614<\/span>&#160;<\/div>$/;"	a
l00614	html/scheduler_8h_source.html	/^<div class="line"><a name="l00614"><\/a><span class="lineno">  614<\/span>&#160;<\/div>$/;"	a
l00615	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00615"><\/a><span class="lineno">  615<\/span>&#160;            <span class="keywordflow">while<\/span> (linesToTakeAway--) takeOneLine();<\/div>$/;"	a
l00615	html/scheduler_8h_source.html	/^<div class="line"><a name="l00615"><\/a><span class="lineno">  615<\/span>&#160;        <span class="keywordtype">void<\/span> printState() {<\/div>$/;"	a
l00616	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00616"><\/a><span class="lineno">  616<\/span>&#160;<span class="preprocessor">#if UMON_INFO<\/span><\/div>$/;"	a
l00616	html/scheduler_8h_source.html	/^<div class="line"><a name="l00616"><\/a><span class="lineno">  616<\/span>&#160;            std::stringstream ss;<\/div>$/;"	a
l00617	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00617"><\/a><span class="lineno">  617<\/span>&#160;<span class="preprocessor"><\/span>            info(<span class="stringliteral">&quot;%d lines assigned, %d unmanaged&quot;<\/span>, usedSize, totalSize - usedSize);<\/div>$/;"	a
l00617	html/scheduler_8h_source.html	/^<div class="line"><a name="l00617"><\/a><span class="lineno">  617<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t c = 0; c &lt; numCores; c++) {<\/div>$/;"	a
l00618	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00618"><\/a><span class="lineno">  618<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div>$/;"	a
l00618	html/scheduler_8h_source.html	/^<div class="line"><a name="l00618"><\/a><span class="lineno">  618<\/span>&#160;                <span class="keywordflow">if<\/span> (contexts[c].state == IDLE) {<\/div>$/;"	a
l00619	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00619"><\/a><span class="lineno">  619<\/span>&#160;<span class="preprocessor"><\/span>        }<\/div>$/;"	a
l00619	html/scheduler_8h_source.html	/^<div class="line"><a name="l00619"><\/a><span class="lineno">  619<\/span>&#160;                    ss &lt;&lt; <span class="stringliteral">&quot; &quot;<\/span> &lt;&lt; <span class="stringliteral">&quot;___&quot;<\/span>;<\/div>$/;"	a
l00620	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00620"><\/a><span class="lineno">  620<\/span>&#160;<\/div>$/;"	a
l00620	html/scheduler_8h_source.html	/^<div class="line"><a name="l00620"><\/a><span class="lineno">  620<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00621	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00621"><\/a><span class="lineno">  621<\/span>&#160;        <span class="keywordtype">void<\/span> takeOneLine() {<\/div>$/;"	a
l00621	html/scheduler_8h_source.html	/^<div class="line"><a name="l00621"><\/a><span class="lineno">  621<\/span>&#160;                    ss &lt;&lt; <span class="stringliteral">&quot; &quot;<\/span> &lt;&lt; std::setw(2) &lt;&lt; contexts[c].curThread-&gt;gid;<\/div>$/;"	a
l00622	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00622"><\/a><span class="lineno">  622<\/span>&#160;            assert(smoothTransients);<\/div>$/;"	a
l00622	html/scheduler_8h_source.html	/^<div class="line"><a name="l00622"><\/a><span class="lineno">  622<\/span>&#160;                    <span class="keywordflow">if<\/span> (contexts[c].curThread-&gt;state == RUNNING) ss &lt;&lt; <span class="stringliteral">&quot;r&quot;<\/span>;<\/div>$/;"	a
l00623	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00623"><\/a><span class="lineno">  623<\/span>&#160;            uint32_t linesLeft = 0;<\/div>$/;"	a
l00623	html/scheduler_8h_source.html	/^<div class="line"><a name="l00623"><\/a><span class="lineno">  623<\/span>&#160;                    <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (contexts[c].curThread-&gt;state == OUT) ss &lt;&lt; <span class="stringliteral">&quot;o&quot;<\/span>;<\/div>$/;"	a
l00624	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00624"><\/a><span class="lineno">  624<\/span>&#160;            <span class="comment">\/\/NOTE: This is a fairly inefficient implementation, but we can do it cheaply in hardware<\/span><\/div>$/;"	a
l00624	html/scheduler_8h_source.html	/^<div class="line"><a name="l00624"><\/a><span class="lineno">  624<\/span>&#160;                    <span class="keywordflow">else<\/span> panic(<span class="stringliteral">&quot;Invalid state cid=%d, threadState=%d&quot;<\/span>, c, contexts[c].curThread-&gt;state);<\/div>$/;"	a
l00625	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00625"><\/a><span class="lineno">  625<\/span>&#160;            <span class="comment">\/\/Take away proportionally to difference between actual and long-term target<\/span><\/div>$/;"	a
l00625	html/scheduler_8h_source.html	/^<div class="line"><a name="l00625"><\/a><span class="lineno">  625<\/span>&#160;                }<\/div>$/;"	a
l00626	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00626"><\/a><span class="lineno">  626<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t p = 0; p &lt; partitions; p++) {<\/div>$/;"	a
l00626	html/scheduler_8h_source.html	/^<div class="line"><a name="l00626"><\/a><span class="lineno">  626<\/span>&#160;            }<\/div>$/;"	a
l00627	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00627"><\/a><span class="lineno">  627<\/span>&#160;                int32_t left = partInfo[p].targetSize - partInfo[p].longTermTargetSize;<\/div>$/;"	a
l00627	html/scheduler_8h_source.html	/^<div class="line"><a name="l00627"><\/a><span class="lineno">  627<\/span>&#160;            info(<span class="stringliteral">&quot; State: %s&quot;<\/span>, ss.str().c_str());<\/div>$/;"	a
l00628	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00628"><\/a><span class="lineno">  628<\/span>&#160;                linesLeft += MAX(left, 0);<\/div>$/;"	a
l00628	html/scheduler_8h_source.html	/^<div class="line"><a name="l00628"><\/a><span class="lineno">  628<\/span>&#160;        }<\/div>$/;"	a
l00629	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00629"><\/a><span class="lineno">  629<\/span>&#160;            }<\/div>$/;"	a
l00629	html/scheduler_8h_source.html	/^<div class="line"><a name="l00629"><\/a><span class="lineno">  629<\/span>&#160;<\/div>$/;"	a
l00630	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00630"><\/a><span class="lineno">  630<\/span>&#160;            assert(linesLeft &gt; 0);<\/div>$/;"	a
l00630	html/scheduler_8h_source.html	/^<div class="line"><a name="l00630"><\/a><span class="lineno">  630<\/span>&#160;<\/div>$/;"	a
l00631	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00631"><\/a><span class="lineno">  631<\/span>&#160;            uint32_t l = rng.randInt(linesLeft-1); <span class="comment">\/\/[0, linesLeft-1]<\/span><\/div>$/;"	a
l00631	html/scheduler_8h_source.html	/^<div class="line"><a name="l00631"><\/a><span class="lineno">  631<\/span>&#160;        <span class="comment">\/\/Core scheduling functions<\/span><\/div>$/;"	a
l00632	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00632"><\/a><span class="lineno">  632<\/span>&#160;            uint32_t curLines = 0;<\/div>$/;"	a
l00632	html/scheduler_8h_source.html	/^<div class="line"><a name="l00632"><\/a><span class="lineno">  632<\/span>&#160;        <span class="comment">\/* This is actually the interface that an abstract OS scheduler would have, and implements the scheduling policy:<\/span><\/div>$/;"	a
l00633	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00633"><\/a><span class="lineno">  633<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t p = 0; p &lt; partitions; p++) {<\/div>$/;"	a
l00633	html/scheduler_8h_source.html	/^<div class="line"><a name="l00633"><\/a><span class="lineno">  633<\/span>&#160;<span class="comment">         * - schedThread(): Here&#39;s a thread that just became available; return either a ContextInfo* where to schedule it, or nullptr if none are available<\/span><\/div>$/;"	a
l00634	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00634"><\/a><span class="lineno">  634<\/span>&#160;                int32_t left = partInfo[p].targetSize - partInfo[p].longTermTargetSize;<\/div>$/;"	a
l00634	html/scheduler_8h_source.html	/^<div class="line"><a name="l00634"><\/a><span class="lineno">  634<\/span>&#160;<span class="comment">         * - schedContext(): Here&#39;s a context that just became available; return either a ThreadInfo* to schedule on it, or nullptr if none are available<\/span><\/div>$/;"	a
l00635	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00635"><\/a><span class="lineno">  635<\/span>&#160;                curLines += MAX(left, 0);<\/div>$/;"	a
l00635	html/scheduler_8h_source.html	/^<div class="line"><a name="l00635"><\/a><span class="lineno">  635<\/span>&#160;<span class="comment">         * - schedTick(): Current quantum is over, hand off contexts to other threads as you see fit<\/span><\/div>$/;"	a
l00636	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00636"><\/a><span class="lineno">  636<\/span>&#160;                <span class="keywordflow">if<\/span> (left &gt; 0 &amp;&amp; l &lt; curLines) {<\/div>$/;"	a
l00636	html/scheduler_8h_source.html	/^<div class="line"><a name="l00636"><\/a><span class="lineno">  636<\/span>&#160;<span class="comment">         * These functions can REMOVE from runQueue, outQueue, and freeList, but do not INSERT. These are filled in elsewhere. They also have minimal concerns<\/span><\/div>$/;"	a
l00637	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00637"><\/a><span class="lineno">  637<\/span>&#160;                    partInfo[p].targetSize--;<\/div>$/;"	a
l00637	html/scheduler_8h_source.html	/^<div class="line"><a name="l00637"><\/a><span class="lineno">  637<\/span>&#160;<span class="comment">         * for thread and context states. Those state machines are implemented and handled elsewhere, except where strictly necessary.<\/span><\/div>$/;"	a
l00638	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00638"><\/a><span class="lineno">  638<\/span>&#160;                    <span class="keywordflow">return<\/span>;<\/div>$/;"	a
l00638	html/scheduler_8h_source.html	/^<div class="line"><a name="l00638"><\/a><span class="lineno">  638<\/span>&#160;<span class="comment">         *\/<\/span><\/div>$/;"	a
l00639	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00639"><\/a><span class="lineno">  639<\/span>&#160;                }<\/div>$/;"	a
l00639	html/scheduler_8h_source.html	/^<div class="line"><a name="l00639"><\/a><span class="lineno">  639<\/span>&#160;        ContextInfo* schedThread(ThreadInfo* th) {<\/div>$/;"	a
l00640	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00640"><\/a><span class="lineno">  640<\/span>&#160;            }<\/div>$/;"	a
l00640	html/scheduler_8h_source.html	/^<div class="line"><a name="l00640"><\/a><span class="lineno">  640<\/span>&#160;            ContextInfo* ctx = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00641	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00641"><\/a><span class="lineno">  641<\/span>&#160;            panic(<span class="stringliteral">&quot;Could not find any partition to take away space from???&quot;<\/span>);<\/div>$/;"	a
l00641	html/scheduler_8h_source.html	/^<div class="line"><a name="l00641"><\/a><span class="lineno">  641<\/span>&#160;<\/div>$/;"	a
l00642	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00642"><\/a><span class="lineno">  642<\/span>&#160;        }<\/div>$/;"	a
l00642	html/scheduler_8h_source.html	/^<div class="line"><a name="l00642"><\/a><span class="lineno">  642<\/span>&#160;            <span class="comment">\/\/First, try to get scheduled in the last context we were running at<\/span><\/div>$/;"	a
l00643	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00643"><\/a><span class="lineno">  643<\/span>&#160;};<\/div>$/;"	a
l00643	html/scheduler_8h_source.html	/^<div class="line"><a name="l00643"><\/a><span class="lineno">  643<\/span>&#160;            assert(th-&gt;cid &lt; numCores); <span class="comment">\/\/though old, it should be in a valid range<\/span><\/div>$/;"	a
l00644	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00644"><\/a><span class="lineno">  644<\/span>&#160;<\/div>$/;"	a
l00644	html/scheduler_8h_source.html	/^<div class="line"><a name="l00644"><\/a><span class="lineno">  644<\/span>&#160;            <span class="keywordflow">if<\/span> (contexts[th-&gt;cid].state == IDLE &amp;&amp; th-&gt;mask[th-&gt;cid]) {<\/div>$/;"	a
l00645	html/part__repl__policies_8h_source.html	/^<div class="line"><a name="l00645"><\/a><span class="lineno">  645<\/span>&#160;<span class="preprocessor">#endif  \/\/ PART_REPL_POLICIES_H_<\/span><\/div>$/;"	a
l00645	html/scheduler_8h_source.html	/^<div class="line"><a name="l00645"><\/a><span class="lineno">  645<\/span>&#160;                ctx = &amp;contexts[th-&gt;cid];<\/div>$/;"	a
l00646	html/scheduler_8h_source.html	/^<div class="line"><a name="l00646"><\/a><span class="lineno">  646<\/span>&#160;                freeList.remove(ctx);<\/div>$/;"	a
l00647	html/scheduler_8h_source.html	/^<div class="line"><a name="l00647"><\/a><span class="lineno">  647<\/span>&#160;            }<\/div>$/;"	a
l00648	html/scheduler_8h_source.html	/^<div class="line"><a name="l00648"><\/a><span class="lineno">  648<\/span>&#160;<\/div>$/;"	a
l00649	html/scheduler_8h_source.html	/^<div class="line"><a name="l00649"><\/a><span class="lineno">  649<\/span>&#160;            <span class="comment">\/\/Second, check the freeList<\/span><\/div>$/;"	a
l00650	html/scheduler_8h_source.html	/^<div class="line"><a name="l00650"><\/a><span class="lineno">  650<\/span>&#160;            <span class="keywordflow">if<\/span> (!ctx &amp;&amp; !freeList.empty()) {<\/div>$/;"	a
l00651	html/scheduler_8h_source.html	/^<div class="line"><a name="l00651"><\/a><span class="lineno">  651<\/span>&#160;                ContextInfo* c = freeList.front();<\/div>$/;"	a
l00652	html/scheduler_8h_source.html	/^<div class="line"><a name="l00652"><\/a><span class="lineno">  652<\/span>&#160;                <span class="keywordflow">while<\/span> (c) {<\/div>$/;"	a
l00653	html/scheduler_8h_source.html	/^<div class="line"><a name="l00653"><\/a><span class="lineno">  653<\/span>&#160;                    <span class="keywordflow">if<\/span> (th-&gt;mask[c-&gt;cid]) {<\/div>$/;"	a
l00654	html/scheduler_8h_source.html	/^<div class="line"><a name="l00654"><\/a><span class="lineno">  654<\/span>&#160;                        ctx = c;<\/div>$/;"	a
l00655	html/scheduler_8h_source.html	/^<div class="line"><a name="l00655"><\/a><span class="lineno">  655<\/span>&#160;                        freeList.remove(ctx);<\/div>$/;"	a
l00656	html/scheduler_8h_source.html	/^<div class="line"><a name="l00656"><\/a><span class="lineno">  656<\/span>&#160;                        <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00657	html/scheduler_8h_source.html	/^<div class="line"><a name="l00657"><\/a><span class="lineno">  657<\/span>&#160;                    } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00658	html/scheduler_8h_source.html	/^<div class="line"><a name="l00658"><\/a><span class="lineno">  658<\/span>&#160;                        c = c-&gt;next;<\/div>$/;"	a
l00659	html/scheduler_8h_source.html	/^<div class="line"><a name="l00659"><\/a><span class="lineno">  659<\/span>&#160;                    }<\/div>$/;"	a
l00660	html/scheduler_8h_source.html	/^<div class="line"><a name="l00660"><\/a><span class="lineno">  660<\/span>&#160;                }<\/div>$/;"	a
l00661	html/scheduler_8h_source.html	/^<div class="line"><a name="l00661"><\/a><span class="lineno">  661<\/span>&#160;            }<\/div>$/;"	a
l00662	html/scheduler_8h_source.html	/^<div class="line"><a name="l00662"><\/a><span class="lineno">  662<\/span>&#160;<\/div>$/;"	a
l00663	html/scheduler_8h_source.html	/^<div class="line"><a name="l00663"><\/a><span class="lineno">  663<\/span>&#160;            <span class="comment">\/\/Third, try to steal from the outQueue (block a thread, take its cid)<\/span><\/div>$/;"	a
l00664	html/scheduler_8h_source.html	/^<div class="line"><a name="l00664"><\/a><span class="lineno">  664<\/span>&#160;            <span class="keywordflow">if<\/span> (!ctx &amp;&amp; !outQueue.empty()) {<\/div>$/;"	a
l00665	html/scheduler_8h_source.html	/^<div class="line"><a name="l00665"><\/a><span class="lineno">  665<\/span>&#160;                ThreadInfo* outTh = outQueue.front();<\/div>$/;"	a
l00666	html/scheduler_8h_source.html	/^<div class="line"><a name="l00666"><\/a><span class="lineno">  666<\/span>&#160;                <span class="keywordflow">while<\/span> (outTh) {<\/div>$/;"	a
l00667	html/scheduler_8h_source.html	/^<div class="line"><a name="l00667"><\/a><span class="lineno">  667<\/span>&#160;                    <span class="keywordflow">if<\/span> (th-&gt;mask[outTh-&gt;cid]) {<\/div>$/;"	a
l00668	html/scheduler_8h_source.html	/^<div class="line"><a name="l00668"><\/a><span class="lineno">  668<\/span>&#160;                        ctx = &amp;contexts[outTh-&gt;cid];<\/div>$/;"	a
l00669	html/scheduler_8h_source.html	/^<div class="line"><a name="l00669"><\/a><span class="lineno">  669<\/span>&#160;                        outQueue.remove(outTh);<\/div>$/;"	a
l00670	html/scheduler_8h_source.html	/^<div class="line"><a name="l00670"><\/a><span class="lineno">  670<\/span>&#160;                        deschedule(outTh, ctx, BLOCKED);<\/div>$/;"	a
l00671	html/scheduler_8h_source.html	/^<div class="line"><a name="l00671"><\/a><span class="lineno">  671<\/span>&#160;                        <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00672	html/scheduler_8h_source.html	/^<div class="line"><a name="l00672"><\/a><span class="lineno">  672<\/span>&#160;                    } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00673	html/scheduler_8h_source.html	/^<div class="line"><a name="l00673"><\/a><span class="lineno">  673<\/span>&#160;                        outTh = outTh-&gt;next;<\/div>$/;"	a
l00674	html/scheduler_8h_source.html	/^<div class="line"><a name="l00674"><\/a><span class="lineno">  674<\/span>&#160;                    }<\/div>$/;"	a
l00675	html/scheduler_8h_source.html	/^<div class="line"><a name="l00675"><\/a><span class="lineno">  675<\/span>&#160;                }<\/div>$/;"	a
l00676	html/scheduler_8h_source.html	/^<div class="line"><a name="l00676"><\/a><span class="lineno">  676<\/span>&#160;            }<\/div>$/;"	a
l00677	html/scheduler_8h_source.html	/^<div class="line"><a name="l00677"><\/a><span class="lineno">  677<\/span>&#160;<\/div>$/;"	a
l00678	html/scheduler_8h_source.html	/^<div class="line"><a name="l00678"><\/a><span class="lineno">  678<\/span>&#160;            <span class="keywordflow">if<\/span> (ctx) assert(th-&gt;mask[ctx-&gt;cid]);<\/div>$/;"	a
l00679	html/scheduler_8h_source.html	/^<div class="line"><a name="l00679"><\/a><span class="lineno">  679<\/span>&#160;<\/div>$/;"	a
l00680	html/scheduler_8h_source.html	/^<div class="line"><a name="l00680"><\/a><span class="lineno">  680<\/span>&#160;            <span class="comment">\/\/info(&quot;schedThread done, gid %d, success %d&quot;, th-&gt;gid, ctx != nullptr);<\/span><\/div>$/;"	a
l00681	html/scheduler_8h_source.html	/^<div class="line"><a name="l00681"><\/a><span class="lineno">  681<\/span>&#160;            <span class="comment">\/\/printState();<\/span><\/div>$/;"	a
l00682	html/scheduler_8h_source.html	/^<div class="line"><a name="l00682"><\/a><span class="lineno">  682<\/span>&#160;            <span class="keywordflow">return<\/span> ctx;<\/div>$/;"	a
l00683	html/scheduler_8h_source.html	/^<div class="line"><a name="l00683"><\/a><span class="lineno">  683<\/span>&#160;        }<\/div>$/;"	a
l00684	html/scheduler_8h_source.html	/^<div class="line"><a name="l00684"><\/a><span class="lineno">  684<\/span>&#160;<\/div>$/;"	a
l00685	html/scheduler_8h_source.html	/^<div class="line"><a name="l00685"><\/a><span class="lineno">  685<\/span>&#160;        ThreadInfo* schedContext(ContextInfo* ctx) {<\/div>$/;"	a
l00686	html/scheduler_8h_source.html	/^<div class="line"><a name="l00686"><\/a><span class="lineno">  686<\/span>&#160;            ThreadInfo* th = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00687	html/scheduler_8h_source.html	/^<div class="line"><a name="l00687"><\/a><span class="lineno">  687<\/span>&#160;            ThreadInfo* blockedTh = runQueue.front();  <span class="comment">\/\/ null if empty<\/span><\/div>$/;"	a
l00688	html/scheduler_8h_source.html	/^<div class="line"><a name="l00688"><\/a><span class="lineno">  688<\/span>&#160;            <span class="keywordflow">while<\/span> (blockedTh) {<\/div>$/;"	a
l00689	html/scheduler_8h_source.html	/^<div class="line"><a name="l00689"><\/a><span class="lineno">  689<\/span>&#160;                <span class="keywordflow">if<\/span> (blockedTh-&gt;mask[ctx-&gt;cid]) {<\/div>$/;"	a
l00690	html/scheduler_8h_source.html	/^<div class="line"><a name="l00690"><\/a><span class="lineno">  690<\/span>&#160;                    th = blockedTh;<\/div>$/;"	a
l00691	html/scheduler_8h_source.html	/^<div class="line"><a name="l00691"><\/a><span class="lineno">  691<\/span>&#160;                    runQueue.remove(blockedTh);<\/div>$/;"	a
l00692	html/scheduler_8h_source.html	/^<div class="line"><a name="l00692"><\/a><span class="lineno">  692<\/span>&#160;                    <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00693	html/scheduler_8h_source.html	/^<div class="line"><a name="l00693"><\/a><span class="lineno">  693<\/span>&#160;                } <span class="keywordflow">else<\/span> {<\/div>$/;"	a
l00694	html/scheduler_8h_source.html	/^<div class="line"><a name="l00694"><\/a><span class="lineno">  694<\/span>&#160;                    blockedTh = blockedTh-&gt;next;<\/div>$/;"	a
l00695	html/scheduler_8h_source.html	/^<div class="line"><a name="l00695"><\/a><span class="lineno">  695<\/span>&#160;                }<\/div>$/;"	a
l00696	html/scheduler_8h_source.html	/^<div class="line"><a name="l00696"><\/a><span class="lineno">  696<\/span>&#160;            }<\/div>$/;"	a
l00697	html/scheduler_8h_source.html	/^<div class="line"><a name="l00697"><\/a><span class="lineno">  697<\/span>&#160;<\/div>$/;"	a
l00698	html/scheduler_8h_source.html	/^<div class="line"><a name="l00698"><\/a><span class="lineno">  698<\/span>&#160;            <span class="comment">\/\/info(&quot;schedContext done, cid %d, success %d (gid %d)&quot;, ctx-&gt;cid, th != nullptr, th? th-&gt;gid : 0);<\/span><\/div>$/;"	a
l00699	html/scheduler_8h_source.html	/^<div class="line"><a name="l00699"><\/a><span class="lineno">  699<\/span>&#160;            <span class="comment">\/\/printState();<\/span><\/div>$/;"	a
l00700	html/scheduler_8h_source.html	/^<div class="line"><a name="l00700"><\/a><span class="lineno">  700<\/span>&#160;            <span class="keywordflow">return<\/span> th;<\/div>$/;"	a
l00701	html/scheduler_8h_source.html	/^<div class="line"><a name="l00701"><\/a><span class="lineno">  701<\/span>&#160;        }<\/div>$/;"	a
l00702	html/scheduler_8h_source.html	/^<div class="line"><a name="l00702"><\/a><span class="lineno">  702<\/span>&#160;<\/div>$/;"	a
l00703	html/scheduler_8h_source.html	/^<div class="line"><a name="l00703"><\/a><span class="lineno">  703<\/span>&#160;        <span class="keywordtype">void<\/span> schedTick() {<\/div>$/;"	a
l00704	html/scheduler_8h_source.html	/^<div class="line"><a name="l00704"><\/a><span class="lineno">  704<\/span>&#160;            std::vector&lt;uint32_t&gt; availVec;<\/div>$/;"	a
l00705	html/scheduler_8h_source.html	/^<div class="line"><a name="l00705"><\/a><span class="lineno">  705<\/span>&#160;            availVec.resize(zinfo-&gt;numCores);<\/div>$/;"	a
l00706	html/scheduler_8h_source.html	/^<div class="line"><a name="l00706"><\/a><span class="lineno">  706<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = 0; i &lt; zinfo-&gt;numCores; i++) availVec[i] = i;<\/div>$/;"	a
l00707	html/scheduler_8h_source.html	/^<div class="line"><a name="l00707"><\/a><span class="lineno">  707<\/span>&#160;<\/div>$/;"	a
l00708	html/scheduler_8h_source.html	/^<div class="line"><a name="l00708"><\/a><span class="lineno">  708<\/span>&#160;            <span class="comment">\/\/Random shuffle (Fisher-Yates)<\/span><\/div>$/;"	a
l00709	html/scheduler_8h_source.html	/^<div class="line"><a name="l00709"><\/a><span class="lineno">  709<\/span>&#160;            <span class="keywordflow">for<\/span> (uint32_t i = zinfo-&gt;numCores - 1; i &gt; 0; i--) {<\/div>$/;"	a
l00710	html/scheduler_8h_source.html	/^<div class="line"><a name="l00710"><\/a><span class="lineno">  710<\/span>&#160;                uint32_t j = rnd.randInt(i); <span class="comment">\/\/j is in 0,...,i<\/span><\/div>$/;"	a
l00711	html/scheduler_8h_source.html	/^<div class="line"><a name="l00711"><\/a><span class="lineno">  711<\/span>&#160;                std::swap(availVec[i], availVec[j]);<\/div>$/;"	a
l00712	html/scheduler_8h_source.html	/^<div class="line"><a name="l00712"><\/a><span class="lineno">  712<\/span>&#160;            }<\/div>$/;"	a
l00713	html/scheduler_8h_source.html	/^<div class="line"><a name="l00713"><\/a><span class="lineno">  713<\/span>&#160;<\/div>$/;"	a
l00714	html/scheduler_8h_source.html	/^<div class="line"><a name="l00714"><\/a><span class="lineno">  714<\/span>&#160;            std::list&lt;uint32_t&gt; avail(availVec.begin(), availVec.end());<\/div>$/;"	a
l00715	html/scheduler_8h_source.html	/^<div class="line"><a name="l00715"><\/a><span class="lineno">  715<\/span>&#160;<\/div>$/;"	a
l00716	html/scheduler_8h_source.html	/^<div class="line"><a name="l00716"><\/a><span class="lineno">  716<\/span>&#160;            <span class="comment">\/* NOTE: avail has all cores, including those in freeList, which may not be empty.<\/span><\/div>$/;"	a
l00717	html/scheduler_8h_source.html	/^<div class="line"><a name="l00717"><\/a><span class="lineno">  717<\/span>&#160;<span class="comment">             * But we will never match anything in the freeList, because schedContext and<\/span><\/div>$/;"	a
l00718	html/scheduler_8h_source.html	/^<div class="line"><a name="l00718"><\/a><span class="lineno">  718<\/span>&#160;<span class="comment">             * schedThread would have matched them out. So, no need to prioritize the freeList.<\/span><\/div>$/;"	a
l00719	html/scheduler_8h_source.html	/^<div class="line"><a name="l00719"><\/a><span class="lineno">  719<\/span>&#160;<span class="comment">             *\/<\/span><\/div>$/;"	a
l00720	html/scheduler_8h_source.html	/^<div class="line"><a name="l00720"><\/a><span class="lineno">  720<\/span>&#160;<\/div>$/;"	a
l00721	html/scheduler_8h_source.html	/^<div class="line"><a name="l00721"><\/a><span class="lineno">  721<\/span>&#160;            uint32_t contextSwitches = 0;<\/div>$/;"	a
l00722	html/scheduler_8h_source.html	/^<div class="line"><a name="l00722"><\/a><span class="lineno">  722<\/span>&#160;<\/div>$/;"	a
l00723	html/scheduler_8h_source.html	/^<div class="line"><a name="l00723"><\/a><span class="lineno">  723<\/span>&#160;            ThreadInfo* th = runQueue.front();<\/div>$/;"	a
l00724	html/scheduler_8h_source.html	/^<div class="line"><a name="l00724"><\/a><span class="lineno">  724<\/span>&#160;            <span class="keywordflow">while<\/span> (th &amp;&amp; !avail.empty()) {<\/div>$/;"	a
l00725	html/scheduler_8h_source.html	/^<div class="line"><a name="l00725"><\/a><span class="lineno">  725<\/span>&#160;                <span class="keywordtype">bool<\/span> scheduled = <span class="keyword">false<\/span>;<\/div>$/;"	a
l00726	html/scheduler_8h_source.html	/^<div class="line"><a name="l00726"><\/a><span class="lineno">  726<\/span>&#160;                <span class="keywordflow">for<\/span> (std::list&lt;uint32_t&gt;::iterator it = avail.begin(); it != avail.end(); it++) {<\/div>$/;"	a
l00727	html/scheduler_8h_source.html	/^<div class="line"><a name="l00727"><\/a><span class="lineno">  727<\/span>&#160;                    uint32_t cid = *it;<\/div>$/;"	a
l00728	html/scheduler_8h_source.html	/^<div class="line"><a name="l00728"><\/a><span class="lineno">  728<\/span>&#160;                    <span class="keywordflow">if<\/span> (th-&gt;mask[cid]) {<\/div>$/;"	a
l00729	html/scheduler_8h_source.html	/^<div class="line"><a name="l00729"><\/a><span class="lineno">  729<\/span>&#160;                        ContextInfo* ctx = &amp;contexts[cid];<\/div>$/;"	a
l00730	html/scheduler_8h_source.html	/^<div class="line"><a name="l00730"><\/a><span class="lineno">  730<\/span>&#160;                        ThreadInfo* victimTh = ctx-&gt;curThread;<\/div>$/;"	a
l00731	html/scheduler_8h_source.html	/^<div class="line"><a name="l00731"><\/a><span class="lineno">  731<\/span>&#160;                        assert(victimTh);<\/div>$/;"	a
l00732	html/scheduler_8h_source.html	/^<div class="line"><a name="l00732"><\/a><span class="lineno">  732<\/span>&#160;                        victimTh-&gt;handoffThread = th;<\/div>$/;"	a
l00733	html/scheduler_8h_source.html	/^<div class="line"><a name="l00733"><\/a><span class="lineno">  733<\/span>&#160;                        contextSwitches++;<\/div>$/;"	a
l00734	html/scheduler_8h_source.html	/^<div class="line"><a name="l00734"><\/a><span class="lineno">  734<\/span>&#160;<\/div>$/;"	a
l00735	html/scheduler_8h_source.html	/^<div class="line"><a name="l00735"><\/a><span class="lineno">  735<\/span>&#160;                        scheduled = <span class="keyword">true<\/span>;<\/div>$/;"	a
l00736	html/scheduler_8h_source.html	/^<div class="line"><a name="l00736"><\/a><span class="lineno">  736<\/span>&#160;                        avail.erase(it);<\/div>$/;"	a
l00737	html/scheduler_8h_source.html	/^<div class="line"><a name="l00737"><\/a><span class="lineno">  737<\/span>&#160;                        <span class="keywordflow">break<\/span>;<\/div>$/;"	a
l00738	html/scheduler_8h_source.html	/^<div class="line"><a name="l00738"><\/a><span class="lineno">  738<\/span>&#160;                    }<\/div>$/;"	a
l00739	html/scheduler_8h_source.html	/^<div class="line"><a name="l00739"><\/a><span class="lineno">  739<\/span>&#160;                }<\/div>$/;"	a
l00740	html/scheduler_8h_source.html	/^<div class="line"><a name="l00740"><\/a><span class="lineno">  740<\/span>&#160;<\/div>$/;"	a
l00741	html/scheduler_8h_source.html	/^<div class="line"><a name="l00741"><\/a><span class="lineno">  741<\/span>&#160;                ThreadInfo* pth = th;<\/div>$/;"	a
l00742	html/scheduler_8h_source.html	/^<div class="line"><a name="l00742"><\/a><span class="lineno">  742<\/span>&#160;                th = th-&gt;next;<\/div>$/;"	a
l00743	html/scheduler_8h_source.html	/^<div class="line"><a name="l00743"><\/a><span class="lineno">  743<\/span>&#160;                <span class="keywordflow">if<\/span> (scheduled) runQueue.remove(pth);<\/div>$/;"	a
l00744	html/scheduler_8h_source.html	/^<div class="line"><a name="l00744"><\/a><span class="lineno">  744<\/span>&#160;            }<\/div>$/;"	a
l00745	html/scheduler_8h_source.html	/^<div class="line"><a name="l00745"><\/a><span class="lineno">  745<\/span>&#160;<\/div>$/;"	a
l00746	html/scheduler_8h_source.html	/^<div class="line"><a name="l00746"><\/a><span class="lineno">  746<\/span>&#160;            info(<span class="stringliteral">&quot;Time slice ended, context-switched %d threads, runQueue size %ld, available %ld&quot;<\/span>, contextSwitches, runQueue.size(), avail.size());<\/div>$/;"	a
l00747	html/scheduler_8h_source.html	/^<div class="line"><a name="l00747"><\/a><span class="lineno">  747<\/span>&#160;            printState();<\/div>$/;"	a
l00748	html/scheduler_8h_source.html	/^<div class="line"><a name="l00748"><\/a><span class="lineno">  748<\/span>&#160;        }<\/div>$/;"	a
l00749	html/scheduler_8h_source.html	/^<div class="line"><a name="l00749"><\/a><span class="lineno">  749<\/span>&#160;<\/div>$/;"	a
l00750	html/scheduler_8h_source.html	/^<div class="line"><a name="l00750"><\/a><span class="lineno">  750<\/span>&#160;        <span class="comment">\/\/Watchdog thread functions<\/span><\/div>$/;"	a
l00751	html/scheduler_8h_source.html	/^<div class="line"><a name="l00751"><\/a><span class="lineno">  751<\/span>&#160;        <span class="comment">\/* With sleeping threads, we have to drive time forward if no thread is scheduled and some threads are sleeping; otherwise, we can deadlock.<\/span><\/div>$/;"	a
l00752	html/scheduler_8h_source.html	/^<div class="line"><a name="l00752"><\/a><span class="lineno">  752<\/span>&#160;<span class="comment">         * This initially was the responsibility of the last leaving thread, but led to horribly long syscalls being simulated. For example, if you<\/span><\/div>$/;"	a
l00753	html/scheduler_8h_source.html	/^<div class="line"><a name="l00753"><\/a><span class="lineno">  753<\/span>&#160;<span class="comment">         * have 2 threads, 1 is sleeping and the other one goes on a syscall, it had to drive time fwd to wake the first thread up, on the off-chance<\/span><\/div>$/;"	a
l00754	html/scheduler_8h_source.html	/^<div class="line"><a name="l00754"><\/a><span class="lineno">  754<\/span>&#160;<span class="comment">         * that the impending syscall was blocking, to avoid deadlock.<\/span><\/div>$/;"	a
l00755	html/scheduler_8h_source.html	/^<div class="line"><a name="l00755"><\/a><span class="lineno">  755<\/span>&#160;<span class="comment">         * Instead, we have an auxiliary thread check for this condition periodically, and if all threads are sleeping or blocked, we just drive time<\/span><\/div>$/;"	a
l00756	html/scheduler_8h_source.html	/^<div class="line"><a name="l00756"><\/a><span class="lineno">  756<\/span>&#160;<span class="comment">         * forward.<\/span><\/div>$/;"	a
l00757	html/scheduler_8h_source.html	/^<div class="line"><a name="l00757"><\/a><span class="lineno">  757<\/span>&#160;<span class="comment">         *\/<\/span><\/div>$/;"	a
l00758	html/scheduler_8h_source.html	/^<div class="line"><a name="l00758"><\/a><span class="lineno">  758<\/span>&#160;        <span class="keywordtype">void<\/span> startWatchdogThread();<\/div>$/;"	a
l00759	html/scheduler_8h_source.html	/^<div class="line"><a name="l00759"><\/a><span class="lineno">  759<\/span>&#160;        <span class="keywordtype">void<\/span> watchdogThreadFunc();<\/div>$/;"	a
l00760	html/scheduler_8h_source.html	/^<div class="line"><a name="l00760"><\/a><span class="lineno">  760<\/span>&#160;<\/div>$/;"	a
l00761	html/scheduler_8h_source.html	/^<div class="line"><a name="l00761"><\/a><span class="lineno">  761<\/span>&#160;        <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> threadTrampoline(<span class="keywordtype">void<\/span>* arg);<\/div>$/;"	a
l00762	html/scheduler_8h_source.html	/^<div class="line"><a name="l00762"><\/a><span class="lineno">  762<\/span>&#160;<\/div>$/;"	a
l00763	html/scheduler_8h_source.html	/^<div class="line"><a name="l00763"><\/a><span class="lineno">  763<\/span>&#160;    <span class="comment">\/* Accurate and adaptive join-leave<\/span><\/div>$/;"	a
l00764	html/scheduler_8h_source.html	/^<div class="line"><a name="l00764"><\/a><span class="lineno">  764<\/span>&#160;<span class="comment">     *<\/span><\/div>$/;"	a
l00765	html/scheduler_8h_source.html	/^<div class="line"><a name="l00765"><\/a><span class="lineno">  765<\/span>&#160;<span class="comment">     * Threads leave() on a syscall enter and join() when they return, which desyncs them from the simulation to prevent deadlock through syscalls.<\/span><\/div>$/;"	a
l00766	html/scheduler_8h_source.html	/^<div class="line"><a name="l00766"><\/a><span class="lineno">  766<\/span>&#160;<span class="comment">     * In practice this is often not an issue because most syscalls are short enough that they finish before the phase changes. However, with highly<\/span><\/div>$/;"	a
l00767	html/scheduler_8h_source.html	/^<div class="line"><a name="l00767"><\/a><span class="lineno">  767<\/span>&#160;<span class="comment">     * overcommitted systems and system-intensive apps, we&#39;ve started seeing some timeing leakage. The old syscall_funcs reduced this problem by avoiding<\/span><\/div>$/;"	a
l00768	html/scheduler_8h_source.html	/^<div class="line"><a name="l00768"><\/a><span class="lineno">  768<\/span>&#160;<span class="comment">     * a leave on safe syscalls, but that solution was quite restrictive: there are many syscalls that could theoretically block, but never do. Additionally,<\/span><\/div>$/;"	a
l00769	html/scheduler_8h_source.html	/^<div class="line"><a name="l00769"><\/a><span class="lineno">  769<\/span>&#160;<span class="comment">     * futexes and sleeps, which are blocking but for which we can accurately infer their join phase, may suffer from inaccurate joins.<\/span><\/div>$/;"	a
l00770	html/scheduler_8h_source.html	/^<div class="line"><a name="l00770"><\/a><span class="lineno">  770<\/span>&#160;<span class="comment">     *<\/span><\/div>$/;"	a
l00771	html/scheduler_8h_source.html	/^<div class="line"><a name="l00771"><\/a><span class="lineno">  771<\/span>&#160;<span class="comment">     * To this end, the following interface supports an adaptive join-leave implementation that avoids most desyncs:<\/span><\/div>$/;"	a
l00772	html/scheduler_8h_source.html	/^<div class="line"><a name="l00772"><\/a><span class="lineno">  772<\/span>&#160;<span class="comment">     * - Threads should call syscallLeave() and syscallJoin(), passing their PC and a small syscall descriptor for a few syscalls of interest.<\/span><\/div>$/;"	a
l00773	html/scheduler_8h_source.html	/^<div class="line"><a name="l00773"><\/a><span class="lineno">  773<\/span>&#160;<span class="comment">     * - The scheduler adaptively decides whether we should wait for a syscall to join or to start the next phase. It avoids deadlock by having<\/span><\/div>$/;"	a
l00774	html/scheduler_8h_source.html	/^<div class="line"><a name="l00774"><\/a><span class="lineno">  774<\/span>&#160;<span class="comment">     *   the watchdog detect potential deadlocks, and desyncing the threads. To avoid frequent desyncs, it blacklists syscalls<\/span><\/div>$/;"	a
l00775	html/scheduler_8h_source.html	/^<div class="line"><a name="l00775"><\/a><span class="lineno">  775<\/span>&#160;<span class="comment">     * - When the scheduler wakes up a sleeping thread (e.g., in a timeout syscall), it ensures the phase does not slip by.<\/span><\/div>$/;"	a
l00776	html/scheduler_8h_source.html	/^<div class="line"><a name="l00776"><\/a><span class="lineno">  776<\/span>&#160;<span class="comment">     * - When the scheduler sees a FUTEX_WAKE, it ensures we wait for the woken-up thread(s).<\/span><\/div>$/;"	a
l00777	html/scheduler_8h_source.html	/^<div class="line"><a name="l00777"><\/a><span class="lineno">  777<\/span>&#160;<span class="comment">     *<\/span><\/div>$/;"	a
l00778	html/scheduler_8h_source.html	/^<div class="line"><a name="l00778"><\/a><span class="lineno">  778<\/span>&#160;<span class="comment">     * TODO: This code is currently written to be as independent as possible from the other sched and barrier code.<\/span><\/div>$/;"	a
l00779	html/scheduler_8h_source.html	/^<div class="line"><a name="l00779"><\/a><span class="lineno">  779<\/span>&#160;<span class="comment">     * If it works well, the code should be reorganized and simplified.<\/span><\/div>$/;"	a
l00780	html/scheduler_8h_source.html	/^<div class="line"><a name="l00780"><\/a><span class="lineno">  780<\/span>&#160;<span class="comment">     *\/<\/span><\/div>$/;"	a
l00781	html/scheduler_8h_source.html	/^<div class="line"><a name="l00781"><\/a><span class="lineno">  781<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00782	html/scheduler_8h_source.html	/^<div class="line"><a name="l00782"><\/a><span class="lineno">  782<\/span>&#160;        <span class="comment">\/\/ All structures protected by schedLock<\/span><\/div>$/;"	a
l00783	html/scheduler_8h_source.html	/^<div class="line"><a name="l00783"><\/a><span class="lineno">  783<\/span>&#160;<\/div>$/;"	a
l00784	html/scheduler_8h_source.html	/^<div class="line"><a name="l00784"><\/a><span class="lineno">  784<\/span>&#160;        <span class="comment">\/\/ Per-process per-PC blacklist<\/span><\/div>$/;"	a
l00785	html/scheduler_8h_source.html	/^<div class="line"><a name="l00785"><\/a><span class="lineno">  785<\/span>&#160;        <a class="code" href="classg__vector.html">g_vector&lt; g_unordered_set&lt;uint64_t&gt;<\/a> &gt; blockingSyscalls;<\/div>$/;"	a
l00786	html/scheduler_8h_source.html	/^<div class="line"><a name="l00786"><\/a><span class="lineno">  786<\/span>&#160;<\/div>$/;"	a
l00787	html/scheduler_8h_source.html	/^<div class="line"><a name="l00787"><\/a><span class="lineno">  787<\/span>&#160;        <span class="keyword">struct <\/span>FakeLeaveInfo : <a class="code" href="classGlobAlloc.html">GlobAlloc<\/a>, <a class="code" href="structInListNode.html">InListNode<\/a>&lt;FakeLeaveInfo&gt; {<\/div>$/;"	a
l00788	html/scheduler_8h_source.html	/^<div class="line"><a name="l00788"><\/a><span class="lineno">  788<\/span>&#160;            <span class="keyword">const<\/span> uint64_t pc;<\/div>$/;"	a
l00789	html/scheduler_8h_source.html	/^<div class="line"><a name="l00789"><\/a><span class="lineno">  789<\/span>&#160;            ThreadInfo* <span class="keyword">const<\/span> th;<\/div>$/;"	a
l00790	html/scheduler_8h_source.html	/^<div class="line"><a name="l00790"><\/a><span class="lineno">  790<\/span>&#160;            <span class="keyword">const<\/span> <span class="keywordtype">int<\/span> syscallNumber;<\/div>$/;"	a
l00791	html/scheduler_8h_source.html	/^<div class="line"><a name="l00791"><\/a><span class="lineno">  791<\/span>&#160;            <span class="keyword">const<\/span> uint64_t arg0; <span class="comment">\/\/ kept for reference<\/span><\/div>$/;"	a
l00792	html/scheduler_8h_source.html	/^<div class="line"><a name="l00792"><\/a><span class="lineno">  792<\/span>&#160;            <span class="keyword">const<\/span> uint64_t arg1; <span class="comment">\/\/ kept for reference<\/span><\/div>$/;"	a
l00793	html/scheduler_8h_source.html	/^<div class="line"><a name="l00793"><\/a><span class="lineno">  793<\/span>&#160;<\/div>$/;"	a
l00794	html/scheduler_8h_source.html	/^<div class="line"><a name="l00794"><\/a><span class="lineno">  794<\/span>&#160;            FakeLeaveInfo(uint64_t _pc, ThreadInfo* _th, <span class="keywordtype">int<\/span> _syscallNumber, uint64_t _arg0, uint64_t _arg1) :<\/div>$/;"	a
l00795	html/scheduler_8h_source.html	/^<div class="line"><a name="l00795"><\/a><span class="lineno">  795<\/span>&#160;                pc(_pc), th(_th), syscallNumber(_syscallNumber), arg0(_arg0), arg1(_arg1)<\/div>$/;"	a
l00796	html/scheduler_8h_source.html	/^<div class="line"><a name="l00796"><\/a><span class="lineno">  796<\/span>&#160;            {<\/div>$/;"	a
l00797	html/scheduler_8h_source.html	/^<div class="line"><a name="l00797"><\/a><span class="lineno">  797<\/span>&#160;                assert(th-&gt;fakeLeave == <span class="keyword">nullptr<\/span>);<\/div>$/;"	a
l00798	html/scheduler_8h_source.html	/^<div class="line"><a name="l00798"><\/a><span class="lineno">  798<\/span>&#160;                th-&gt;fakeLeave = <span class="keyword">this<\/span>;<\/div>$/;"	a
l00799	html/scheduler_8h_source.html	/^<div class="line"><a name="l00799"><\/a><span class="lineno">  799<\/span>&#160;            }<\/div>$/;"	a
l00800	html/scheduler_8h_source.html	/^<div class="line"><a name="l00800"><\/a><span class="lineno">  800<\/span>&#160;<\/div>$/;"	a
l00801	html/scheduler_8h_source.html	/^<div class="line"><a name="l00801"><\/a><span class="lineno">  801<\/span>&#160;            ~FakeLeaveInfo() {<\/div>$/;"	a
l00802	html/scheduler_8h_source.html	/^<div class="line"><a name="l00802"><\/a><span class="lineno">  802<\/span>&#160;                assert(th-&gt;fakeLeave == <span class="keyword">this<\/span>);<\/div>$/;"	a
l00803	html/scheduler_8h_source.html	/^<div class="line"><a name="l00803"><\/a><span class="lineno">  803<\/span>&#160;                th-&gt;fakeLeave = <span class="keyword">nullptr<\/span>;<\/div>$/;"	a
l00804	html/scheduler_8h_source.html	/^<div class="line"><a name="l00804"><\/a><span class="lineno">  804<\/span>&#160;            }<\/div>$/;"	a
l00805	html/scheduler_8h_source.html	/^<div class="line"><a name="l00805"><\/a><span class="lineno">  805<\/span>&#160;        };<\/div>$/;"	a
l00806	html/scheduler_8h_source.html	/^<div class="line"><a name="l00806"><\/a><span class="lineno">  806<\/span>&#160;<\/div>$/;"	a
l00807	html/scheduler_8h_source.html	/^<div class="line"><a name="l00807"><\/a><span class="lineno">  807<\/span>&#160;        <span class="comment">\/\/ All active syscalls that are still in the simulator (no leave()) have an entry here<\/span><\/div>$/;"	a
l00808	html/scheduler_8h_source.html	/^<div class="line"><a name="l00808"><\/a><span class="lineno">  808<\/span>&#160;        <a class="code" href="classInList.html">InList&lt;FakeLeaveInfo&gt;<\/a> fakeLeaves;<\/div>$/;"	a
l00809	html/scheduler_8h_source.html	/^<div class="line"><a name="l00809"><\/a><span class="lineno">  809<\/span>&#160;<\/div>$/;"	a
l00810	html/scheduler_8h_source.html	/^<div class="line"><a name="l00810"><\/a><span class="lineno">  810<\/span>&#160;        <span class="comment">\/\/ TODO: Futex wait\/wake matching code<\/span><\/div>$/;"	a
l00811	html/scheduler_8h_source.html	/^<div class="line"><a name="l00811"><\/a><span class="lineno">  811<\/span>&#160;<\/div>$/;"	a
l00812	html/scheduler_8h_source.html	/^<div class="line"><a name="l00812"><\/a><span class="lineno">  812<\/span>&#160;    <span class="keyword">public<\/span>:<\/div>$/;"	a
l00813	html/scheduler_8h_source.html	/^<div class="line"><a name="l00813"><\/a><span class="lineno">  813<\/span>&#160;        <span class="comment">\/\/ Externally, has the exact same behavior as leave(); internally, may choose to not actually leave;<\/span><\/div>$/;"	a
l00814	html/scheduler_8h_source.html	/^<div class="line"><a name="l00814"><\/a><span class="lineno">  814<\/span>&#160;        <span class="comment">\/\/ join() and finish() handle this state<\/span><\/div>$/;"	a
l00815	html/scheduler_8h_source.html	/^<div class="line"><a name="l00815"><\/a><span class="lineno">  815<\/span>&#160;        <span class="keywordtype">void<\/span> syscallLeave(uint32_t pid, uint32_t tid, uint32_t cid, uint64_t pc, <span class="keywordtype">int<\/span> syscallNumber, uint64_t arg0, uint64_t arg1);<\/div>$/;"	a
l00816	html/scheduler_8h_source.html	/^<div class="line"><a name="l00816"><\/a><span class="lineno">  816<\/span>&#160;<\/div>$/;"	a
l00817	html/scheduler_8h_source.html	/^<div class="line"><a name="l00817"><\/a><span class="lineno">  817<\/span>&#160;        <span class="comment">\/\/ Futex wake\/wait matching interface<\/span><\/div>$/;"	a
l00818	html/scheduler_8h_source.html	/^<div class="line"><a name="l00818"><\/a><span class="lineno">  818<\/span>&#160;        <span class="keywordtype">void<\/span> notifyFutexWakeStart(uint32_t pid, uint32_t tid, uint32_t maxWakes);<\/div>$/;"	a
l00819	html/scheduler_8h_source.html	/^<div class="line"><a name="l00819"><\/a><span class="lineno">  819<\/span>&#160;        <span class="keywordtype">void<\/span> notifyFutexWakeEnd(uint32_t pid, uint32_t tid, uint32_t wokenUp);<\/div>$/;"	a
l00820	html/scheduler_8h_source.html	/^<div class="line"><a name="l00820"><\/a><span class="lineno">  820<\/span>&#160;        <span class="keywordtype">void<\/span> notifyFutexWaitWoken(uint32_t pid, uint32_t tid);<\/div>$/;"	a
l00821	html/scheduler_8h_source.html	/^<div class="line"><a name="l00821"><\/a><span class="lineno">  821<\/span>&#160;<\/div>$/;"	a
l00822	html/scheduler_8h_source.html	/^<div class="line"><a name="l00822"><\/a><span class="lineno">  822<\/span>&#160;    <span class="keyword">private<\/span>:<\/div>$/;"	a
l00823	html/scheduler_8h_source.html	/^<div class="line"><a name="l00823"><\/a><span class="lineno">  823<\/span>&#160;        <span class="keyword">volatile<\/span> uint32_t maxAllowedFutexWakeups;<\/div>$/;"	a
l00824	html/scheduler_8h_source.html	/^<div class="line"><a name="l00824"><\/a><span class="lineno">  824<\/span>&#160;        <span class="keyword">volatile<\/span> uint32_t unmatchedFutexWakeups;<\/div>$/;"	a
l00825	html/scheduler_8h_source.html	/^<div class="line"><a name="l00825"><\/a><span class="lineno">  825<\/span>&#160;<\/div>$/;"	a
l00826	html/scheduler_8h_source.html	/^<div class="line"><a name="l00826"><\/a><span class="lineno">  826<\/span>&#160;        <span class="comment">\/\/ Called with schedLock held, at the start of a join<\/span><\/div>$/;"	a
l00827	html/scheduler_8h_source.html	/^<div class="line"><a name="l00827"><\/a><span class="lineno">  827<\/span>&#160;        <span class="keywordtype">void<\/span> futexWakeJoin(ThreadInfo* th);  <span class="comment">\/\/ may release and re-acquire schedLock<\/span><\/div>$/;"	a
l00828	html/scheduler_8h_source.html	/^<div class="line"><a name="l00828"><\/a><span class="lineno">  828<\/span>&#160;        <span class="keywordtype">void<\/span> futexWaitJoin(ThreadInfo* th);<\/div>$/;"	a
l00829	html/scheduler_8h_source.html	/^<div class="line"><a name="l00829"><\/a><span class="lineno">  829<\/span>&#160;<\/div>$/;"	a
l00830	html/scheduler_8h_source.html	/^<div class="line"><a name="l00830"><\/a><span class="lineno">  830<\/span>&#160;<\/div>$/;"	a
l00831	html/scheduler_8h_source.html	/^<div class="line"><a name="l00831"><\/a><span class="lineno">  831<\/span>&#160;        <span class="keywordtype">void<\/span> finishFakeLeave(ThreadInfo* th);<\/div>$/;"	a
l00832	html/scheduler_8h_source.html	/^<div class="line"><a name="l00832"><\/a><span class="lineno">  832<\/span>&#160;<\/div>$/;"	a
l00833	html/scheduler_8h_source.html	/^<div class="line"><a name="l00833"><\/a><span class="lineno">  833<\/span>&#160;        <span class="comment">\/* Must be called with schedLock held. Waits until the given thread is<\/span><\/div>$/;"	a
l00834	html/scheduler_8h_source.html	/^<div class="line"><a name="l00834"><\/a><span class="lineno">  834<\/span>&#160;<span class="comment">         * queued in schedLock. Used for accurate wakeups, by calling here we<\/span><\/div>$/;"	a
l00835	html/scheduler_8h_source.html	/^<div class="line"><a name="l00835"><\/a><span class="lineno">  835<\/span>&#160;<span class="comment">         * ensure that the waking thread won&#39;t skip a phase. May cause deadlock<\/span><\/div>$/;"	a
l00836	html/scheduler_8h_source.html	/^<div class="line"><a name="l00836"><\/a><span class="lineno">  836<\/span>&#160;<span class="comment">         * if used incorrectly.<\/span><\/div>$/;"	a
l00837	html/scheduler_8h_source.html	/^<div class="line"><a name="l00837"><\/a><span class="lineno">  837<\/span>&#160;<span class="comment">         *\/<\/span><\/div>$/;"	a
l00838	html/scheduler_8h_source.html	/^<div class="line"><a name="l00838"><\/a><span class="lineno">  838<\/span>&#160;        <span class="keywordtype">void<\/span> waitUntilQueued(ThreadInfo* th);<\/div>$/;"	a
l00839	html/scheduler_8h_source.html	/^<div class="line"><a name="l00839"><\/a><span class="lineno">  839<\/span>&#160;};<\/div>$/;"	a
l00840	html/scheduler_8h_source.html	/^<div class="line"><a name="l00840"><\/a><span class="lineno">  840<\/span>&#160;<\/div>$/;"	a
l00841	html/scheduler_8h_source.html	/^<div class="line"><a name="l00841"><\/a><span class="lineno">  841<\/span>&#160;<\/div>$/;"	a
l00842	html/scheduler_8h_source.html	/^<div class="line"><a name="l00842"><\/a><span class="lineno">  842<\/span>&#160;<span class="preprocessor">#endif  \/\/ SCHEDULER_H_<\/span><\/div>$/;"	a
l1d	ooo_core.h	/^        FilterCache* l1d;$/;"	m	class:OOOCore
l1d	simple_core.h	/^        FilterCache* l1d;$/;"	m	class:SimpleCore
l1d	timing_core.h	/^        FilterCache* l1d;$/;"	m	class:TimingCore
l1i	ooo_core.h	/^        FilterCache* l1i;$/;"	m	class:OOOCore
l1i	simple_core.h	/^        FilterCache* l1i;$/;"	m	class:SimpleCore
l1i	timing_core.h	/^        FilterCache* l1i;$/;"	m	class:TimingCore
lastAcc	trace_driver.h	/^        AccessRecord lastAcc;$/;"	m	class:TraceDriver
lastAccCycle	timing_cache.h	/^        uint64_t lastAccCycle, lastFreeCycle;$/;"	m	class:TimingCache
lastAccessCycle	detailed_mem.h	/^        uint64_t lastAccessCycle;$/;"	m	class:MemRankBase
lastAccessedCycle	detailed_mem.h	/^        uint64_t lastAccessedCycle;$/;"	m	class:MemControllerBase
lastAccesses	detailed_mem.h	/^        uint64_t lastAccesses;$/;"	m	class:MemControllerBase
lastActCycle	ddr_mem.h	/^            uint64_t lastActCycle;  \/\/ cycle of last ACT command$/;"	m	struct:DDRMemory::Bank
lastActCycle	detailed_mem.h	/^        uint64_t *lastActCycle;$/;"	m	class:MemRankBase
lastBank	detailed_mem.h	/^        uint32_t lastBank;$/;"	m	class:MemRankBase
lastBuf	proc_stats.h	/^        uint64_t* lastBuf;$/;"	m	class:ProcStats
lastCandIdx	cache_arrays.h	/^        uint32_t lastCandIdx;$/;"	m	class:ZArray
lastCmdCycle	ddr_mem.h	/^            uint64_t lastCmdCycle;  \/\/ RD\/WR command, used for refreshes only$/;"	m	struct:DDRMemory::Bank
lastCmdWasWrite	ddr_mem.h	/^        bool lastCmdWasWrite;$/;"	m	class:DDRMemory
lastCoreCycles	process_stats.h	/^        g_vector<uint64_t> lastCoreCycles, lastCoreInstrs;$/;"	m	class:ProcessStats
lastCoreInstrs	process_stats.h	/^        g_vector<uint64_t> lastCoreCycles, lastCoreInstrs;$/;"	m	class:ProcessStats
lastCrossing	contention_sim.h	/^        CrossingEventInfo* lastCrossing; \/\/indexed by [srcId*doms*doms + srcDom*doms + dstDom]$/;"	m	class:ContentionSim
lastCycle	breakdown_stats.h	/^        uint64_t lastCycle;$/;"	m	class:CycleBreakdownStat
lastCycle	prefetcher.h	/^            uint64_t lastCycle;  \/\/ updated on alloc and hit$/;"	m	struct:StreamPrefetcher::Entry
lastCycles	zsim_harness.cpp	/^static uint64_t lastCycles = 0;$/;"	v	file:
lastEvProduced	ooo_core_recorder.h	/^        OOOIssueEvent* lastEvProduced;$/;"	m	class:OOOCoreRecorder
lastEvSimulatedStartCycle	ooo_core_recorder.h	/^        uint64_t lastEvSimulatedStartCycle;$/;"	m	class:OOOCoreRecorder
lastEvSimulatedZllStartCycle	ooo_core_recorder.h	/^        uint64_t lastEvSimulatedZllStartCycle;$/;"	m	class:OOOCoreRecorder
lastEventSimulatedOrigStartCycle	core_recorder.h	/^        uint64_t lastEventSimulatedOrigStartCycle;$/;"	m	class:CoreRecorder
lastEventSimulatedStartCycle	core_recorder.h	/^        uint64_t lastEventSimulatedStartCycle;$/;"	m	class:CoreRecorder
lastFreeCycle	timing_cache.h	/^        uint64_t lastAccCycle, lastFreeCycle;$/;"	m	class:TimingCache
lastGapCycles	event_recorder.h	/^        volatile uint64_t lastGapCycles;$/;"	m	class:EventRecorder
lastHeartbeatTime	zsim_harness.cpp	/^static time_t lastHeartbeatTime;$/;"	v	file:
lastIdx	barrier.h	/^            uint32_t lastIdx;$/;"	m	struct:Barrier::ThreadSyncInfo
lastLastPos	prefetcher.h	/^            uint32_t lastLastPos;$/;"	m	struct:StreamPrefetcher::Entry
lastLimit	contention_sim.h	/^        volatile uint64_t lastLimit;$/;"	m	class:ContentionSim
lastMemCycle	detailed_mem.h	/^        uint64_t lastMemCycle;$/;"	m	class:MemControllerBase
lastPhase	mem_ctrls.h	/^        uint64_t lastPhase;$/;"	m	class:MD1Memory
lastPhaseCycle	detailed_mem.h	/^        uint64_t lastPhaseCycle;$/;"	m	class:MemControllerBase
lastPort	ooo_core.h	/^        uint8_t lastPort;$/;"	m	class:WindowStructure
lastPos	prefetcher.h	/^            uint32_t lastPos;$/;"	m	struct:StreamPrefetcher::Entry
lastPower	detailed_mem.h	/^        powerValue lastPower;$/;"	m	class:MemControllerBase
lastPreCycle	detailed_mem.h	/^        uint64_t *lastPreCycle;$/;"	m	class:MemRankBase
lastPrefetchPos	prefetcher.h	/^            uint32_t lastPrefetchPos;$/;"	m	struct:StreamPrefetcher::Entry
lastRdWrCycle	detailed_mem.h	/^        uint64_t *lastRdWrCycle;$/;"	m	class:MemRankBase
lastRefreshCycle	detailed_mem.h	/^        uint64_t lastRefreshCycle;$/;"	m	class:MemRankBase
lastReqCycle	trace_driver.h	/^            uint64_t lastReqCycle;$/;"	m	struct:TraceDriver::ChildInfo
lastRow	detailed_mem.h	/^        uint32_t *lastRow;$/;"	m	class:MemRankBase
lastStartSlack	event_recorder.h	/^        volatile uint64_t lastStartSlack;$/;"	m	class:EventRecorder
lastStoreAddrCommitCycle	ooo_core.h	/^        uint64_t lastStoreAddrCommitCycle; \/\/tracks last store addr uop, all loads queue behind it$/;"	m	class:OOOCore
lastStoreCommitCycle	ooo_core.h	/^        uint64_t lastStoreCommitCycle;$/;"	m	class:OOOCore
lastType	detailed_mem.h	/^        MemAccessType* lastType;$/;"	m	class:MemRankBase
lastUnhaltedCycle	core_recorder.h	/^        uint64_t lastUnhaltedCycle; \/\/set on transition to HALTED$/;"	m	class:CoreRecorder
lastUnhaltedCycle	ooo_core_recorder.h	/^        uint64_t lastUnhaltedCycle; \/\/set on transition to HALTED$/;"	m	class:OOOCoreRecorder
lastUpdateCycle	part_repl_policies.h	/^        uint64_t lastUpdateCycle; \/\/for cumulative size counter updates; could be made event-driven$/;"	m	class:VantageReplPolicy
lastUpdateCycles	core.h	/^        uint64_t lastUpdateCycles;$/;"	m	class:Core
lastUpdateInstrs	core.h	/^        uint64_t lastUpdateInstrs;$/;"	m	class:Core
lastUpdatePhase	proc_stats.h	/^        uint64_t lastUpdatePhase;$/;"	m	class:ProcStats
lastUpdatePhase	process_stats.h	/^        uint64_t lastUpdatePhase;$/;"	m	class:ProcessStats
lat	decoder.h	/^    uint16_t lat;$/;"	m	struct:DynUop
lat	weave_md1_mem.h	/^        uint32_t lat;$/;"	m	class:WeaveMemAccEvent
latency	access_tracing.h	/^    uint32_t latency;$/;"	m	struct:AccessRecord
latency	access_tracing.h	/^    uint32_t latency;$/;"	m	struct:PackedAccessRecord
latency	mem_ctrls.h	/^        uint32_t latency;$/;"	m	class:SimpleMemory
latencyHist	ddr_mem.h	/^        VectorCounter latencyHist;$/;"	m	class:DDRMemory
latencyHist	detailed_mem.h	/^        VectorCounter latencyHist;$/;"	m	class:MemControllerBase
latex_count	latex/Makefile	/^	latex_count=8 ; \\$/;"	m
launchXtermDebugger	debug_harness.cpp	/^int launchXtermDebugger(int targetPid, LibInfo* libzsimAddrs) {$/;"	f
lc_int64	config.cpp	/^typedef long long lc_int64;  \/\/ NOLINT(runtime\/int)$/;"	t	file:
least_addr	g_heap/dlmalloc.h.c	/^  char*      least_addr;$/;"	m	struct:malloc_state	file:
least_bit	g_heap/dlmalloc.h.c	2877;"	d	file:
leave	barrier.h	/^        void leave(uint32_t tid) {$/;"	f	class:Barrier
leave	core.h	/^        virtual void leave() {}$/;"	f	class:Core
leave	ooo_core.cpp	/^void OOOCore::leave() {$/;"	f	class:OOOCore
leave	scheduler.h	/^        void leave(uint32_t pid, uint32_t tid, uint32_t cid) {$/;"	f	class:Scheduler
leave	timing_core.cpp	/^void TimingCore::leave() {$/;"	f	class:TimingCore
leaveLock	zsim.cpp	/^        lock_t leaveLock;$/;"	m	class:SyncEvent	file:
left	mtrand.h	/^        int left;          \/\/ number of values left before reload needed$/;"	m	class:MTRand
leftThreads	barrier.h	/^        uint32_t leftThreads; \/\/threads in LEFT state$/;"	m	class:Barrier
left_bits	g_heap/dlmalloc.h.c	2880;"	d	file:
leftmost_child	g_heap/dlmalloc.h.c	2370;"	d	file:
leftshift_for_tree_index	g_heap/dlmalloc.h.c	2852;"	d	file:
lessThan	repl_policies.h	/^            inline bool lessThan(const Rank& other, const uint64_t curTs) const {$/;"	f	struct:LFUReplPolicy::Rank
letter_A	html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_A"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;A&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_B	html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_B"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;B&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_C	html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_C"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;C&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_D	html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_D"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;D&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_E	html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_E"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;E&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_F	html/classes.html	/^<tr><td valign="top"><a class="el" href="structStreamPrefetcher_1_1Entry_1_1AccessTimes.html">StreamPrefetcher::Entry::AccessTimes<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_F"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;F&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_G	html/classes.html	/^<tr><td valign="top"><a class="el" href="classActWindow.html">ActWindow<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_G"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;G&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_H	html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_H"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;H&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_I	html/classes.html	/^<tr><td valign="top"><a class="el" href="classCache.html">Cache<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_I"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;I&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_L	html/classes.html	/^<tr><td valign="top"><a class="el" href="classCrossingEvent.html">CrossingEvent<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_L"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;L&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_M	html/classes.html	/^<tr><td valign="top"><a class="el" href="structDynBbl.html">DynBbl<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_M"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;M&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_N	html/classes.html	/^<tr><td valign="top"><a class="el" href="classCacheArray.html">CacheArray<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_N"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;N&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_O	html/classes.html	/^<tr><td valign="top"><a class="el" href="structClockDomainInfo.html">ClockDomainInfo<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classIdHashFamily.html">IdHashFamily<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_O"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;O&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_P	html/classes.html	/^<tr><td valign="top"><a class="el" href="structCpuIdRecord.html">CpuIdRecord<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="structInvReq.html">InvReq<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_P"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;P&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_R	html/classes.html	/^<\/td><td valign="top"><a class="el" href="classMESICC.html">MESICC<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_R"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;R&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_S	html/classes.html	/^<tr><td valign="top"><a class="el" href="classDRAMSim_1_1Callback.html">Callback<\/a> (<a class="el" href="namespaceDRAMSim.html">DRAMSim<\/a>)&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="structMemParam_1_1IDDs.html">MemParam::IDDs<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_S"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;S&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_T	html/classes.html	/^<tr><td valign="top"><a class="el" href="classDecoder.html">Decoder<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classLinePlacementPolicy.html">LinePlacementPolicy<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classPartMapper.html">PartMapper<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_T"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;T&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_U	html/classes.html	/^<tr><td valign="top"><a class="el" href="classBaseCache.html">BaseCache<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classH3HashFamily.html">H3HashFamily<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classMESITopCC.html">MESITopCC<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classRandReplPolicy.html">RandReplPolicy<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_U"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;U&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_V	html/classes.html	/^<tr><td valign="top"><a class="el" href="classHitEvent.html">HitEvent<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classMTRand.html">MTRand<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classReplAccessEvent.html">ReplAccessEvent<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_V"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;V&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_W	html/classes.html	/^<tr><td valign="top"><a class="el" href="classCC.html">CC<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classIdealLRUPartReplPolicy.html">IdealLRUPartReplPolicy<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classNullCore.html">NullCore<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classScalarStat.html">ScalarStat<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_W"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;W&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_Z	html/classes.html	/^<tr><td valign="top"><a class="el" href="classCounter.html">Counter<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="structInstrFuncPtrs.html">InstrFuncPtrs<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classOSPlacementPolicy.html">OSPlacementPolicy<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classSimpleCore.html">SimpleCore<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_Z"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;Z&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_a	html/classes.html	/^<\/td><td valign="top"><a class="el" href="classLambdaVectorStat.html">LambdaVectorStat<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="structPartInfo.html">PartInfo<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classStat.html">Stat<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_a"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;a&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_g	html/classes.html	/^<tr><td valign="top"><a class="el" href="classDDRMemoryAccEvent.html">DDRMemoryAccEvent<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="structLibInfo.html">LibInfo<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classPartitionMonitor.html">PartitionMonitor<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classSyncEvent.html">SyncEvent<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_g"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;g&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_i	html/classes.html	/^<\/td><td valign="top"><a class="el" href="classPrefetchResponseEvent.html">PrefetchResponseEvent<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classTagBufferEntry.html">TagBufferEntry<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_i"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;i&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
level	zsim.cpp	/^    uint32_t level;  \/\/ if 0, invalid. Used for VDSO-internal calls$/;"	m	struct:VdsoPatchData	file:
lfuInfo	repl_policies.h	/^            LFUInfo lfuInfo;$/;"	m	struct:LFUReplPolicy::Rank
lhBinSize	detailed_mem.h	/^        uint32_t lhBinSize;$/;"	m	class:MemControllerBase
lhNumBins	detailed_mem.h	/^        uint32_t lhNumBins;$/;"	m	class:MemControllerBase
libconfig	config.h	/^namespace libconfig {$/;"	n
libconfig Namespace Reference	latex/namespacelibconfig.tex	/^\\hypertarget{namespacelibconfig}{\\section{libconfig Namespace Reference}$/;"	s
libzsimAddrs	zsim.h	/^    struct LibInfo libzsimAddrs;$/;"	m	struct:GlobSimInfo	typeref:struct:GlobSimInfo::LibInfo
likely	log.h	49;"	d
limit	contention_sim.h	/^        volatile uint64_t limit;$/;"	m	class:ContentionSim
lineAddr	access_tracing.h	/^    Address lineAddr;$/;"	m	struct:AccessRecord
lineAddr	access_tracing.h	/^    uint64_t lineAddr;$/;"	m	struct:PackedAccessRecord
lineAddr	ideal_arrays.h	/^            Address lineAddr;$/;"	m	struct:IdealLRUArray::Entry
lineAddr	memory_hierarchy.h	/^    Address lineAddr;$/;"	m	struct:InvReq
lineAddr	memory_hierarchy.h	/^    Address lineAddr;$/;"	m	struct:MemReq
lineAddrs	ideal_arrays.h	/^        Address* lineAddrs; \/\/lineId -> address, for replacements$/;"	m	class:IdealLRUPartArray
lineBits	zsim.cpp	/^uint32_t lineBits; \/\/process-local for performance, but logically global$/;"	v
lineId	cache_arrays.h	/^    uint32_t lineId;$/;"	m	struct:ZWalkInfo
lineId	ideal_arrays.h	/^            const uint32_t lineId;$/;"	m	struct:IdealLRUArray::Entry
lineId	ideal_arrays.h	/^            const uint32_t lineId;$/;"	m	struct:IdealLRUPartReplPolicy::Entry
lineMap	ideal_arrays.h	/^        g_unordered_map<Address, uint32_t> lineMap; \/\/address->lineId; if too slow, try an AATree, which does not alloc dynamically$/;"	m	class:IdealLRUArray
lineMap	ideal_arrays.h	/^        g_unordered_map<Address, uint32_t> lineMap; \/\/address->lineId; if too slow, try an AATree, which does not alloc dynamically$/;"	m	class:IdealLRUPartArray
lineSize	ddr_mem.h	/^        const uint32_t lineSize, ranksPerChannel, banksPerRank;$/;"	m	class:DDRMemory
lineSize	zsim.h	/^    uint32_t lineSize;$/;"	m	struct:GlobSimInfo
linkPrev	intrusive_list.h	/^    void linkPrev(T* p, InList<T>* lst) {$/;"	f	struct:InListNode
linuxPid	scheduler.h	/^            const uint32_t linuxPid;$/;"	m	struct:Scheduler::ThreadInfo
linuxTid	scheduler.h	/^            const uint32_t linuxTid;$/;"	m	struct:Scheduler::ThreadInfo
listdir	virt/fs.cpp	/^vector<string> listdir(string dir) {$/;"	f
liveElems	slab_alloc.h	/^    volatile uint32_t liveElems;$/;"	m	struct:slab::Slab
liveSlabs	slab_alloc.h	/^        uint32_t liveSlabs;$/;"	m	class:slab::SlabAlloc
loBit	mtrand.h	/^        uint64_t loBit(const uint64_t u) const { return u & 0x00000001UL; }$/;"	f	class:MTRand
loBits	mtrand.h	/^        uint64_t loBits(const uint64_t u) const { return u & 0x7fffffffUL; }$/;"	f	class:MTRand
load	filter_cache.h	/^        inline uint64_t load(Address vAddr, uint64_t curCycle) {$/;"	f	class:FilterCache
load	mtrand.h	/^inline void MTRand::load(uint64_t *const loadArray) {$/;"	f	class:MTRand
load	ooo_core.cpp	/^inline void OOOCore::load(Address addr) {$/;"	f	class:OOOCore
load	simple_core.cpp	/^void SimpleCore::load(Address addr) {$/;"	f	class:SimpleCore
loadAddrs	ooo_core.h	/^        Address loadAddrs[256];$/;"	m	class:OOOCore
loadAndRecord	timing_core.cpp	/^void TimingCore::loadAndRecord(Address addr) {$/;"	f	class:TimingCore
loadOps	decoder.h	/^            uint32_t loadOps[MAX_INSTR_LOADS];$/;"	m	struct:Decoder::Instr
loadPtr	core.h	/^    void (*loadPtr)(THREADID, ADDRINT);$/;"	m	struct:InstrFuncPtrs
loadQueue	ooo_core.h	/^        ReorderBuffer<32, 4> loadQueue;$/;"	m	class:OOOCore
loader	pin_cmd.h	/^            g_string loader;$/;"	m	struct:PinCmd::ProcCmdInfo
loads	ooo_core.h	/^        uint32_t loads;$/;"	m	class:OOOCore
loc	ddr_mem.h	/^            AddrLoc loc;$/;"	m	struct:DDRMemory::Request
lock	coherence_ctrls.h	/^        inline void lock() {$/;"	f	class:MESIBottomCC
lock	coherence_ctrls.h	/^        inline void lock() {$/;"	f	class:MESITopCC
lock	galloc.cpp	/^    lock_t lock;$/;"	m	struct:gm_segment	file:
lock	mutex.h	/^        void lock() {$/;"	f	class:mutex
lock	trace_driver.h	/^        lock_t lock; \/\/NOTE: not needed for now$/;"	m	class:TraceDriver
lock	virt/port_virtualizer.h	/^        void lock() { futex_lock(&pvLock); }$/;"	f	class:PortVirtualizer
lock	zsim.h	/^    lock_t lock;$/;"	m	struct:ClockDomainInfo
lock_t	locks.h	/^typedef volatile uint32_t lock_t;$/;"	t
logFdErr	log.cpp	/^FILE* logFdErr = stderr;$/;"	v
logFdOut	log.cpp	/^FILE* logFdOut = stdout;$/;"	v
logHeader	log.cpp	/^const char* logHeader = "";$/;"	v
logTypeNames	log.cpp	/^const char* logTypeNames[] = {"Harness", "Config", "Process", "Cache", "Mem", "Sched", "FSVirt", "TimeVirt"};$/;"	v
logVec	contention_sim.h	/^            std::vector<std::pair<uint64_t, TimingEvent*> > logVec;$/;"	m	struct:ContentionSim::SimThreadData
log_lock	log.h	39;"	d
log_lock	log.h	42;"	d
log_printLock	log.cpp	/^static lock_t log_printLock;$/;"	v	file:
log_unlock	log.h	40;"	d
log_unlock	log.h	43;"	d
longAdvance	ooo_core.h	/^        void longAdvance(uint64_t& curCycle, uint64_t targetCycle) {$/;"	f	class:WindowStructure
longTermTargetSize	part_repl_policies.h	/^            uint64_t longTermTargetSize; \/\/in lines$/;"	m	struct:VantageReplPolicy::VantagePartInfo
lookahead	lookahead.cpp	/^namespace lookahead {$/;"	n	file:
lookahead	partitioner.h	/^namespace lookahead {$/;"	n
lookup	cache_arrays.cpp	/^int32_t SetAssocArray::lookup(const Address lineAddr, const MemReq* req, bool updateReplacement) {$/;"	f	class:SetAssocArray
lookup	cache_arrays.cpp	/^int32_t ZArray::lookup(const Address lineAddr, const MemReq* req, bool updateReplacement) {$/;"	f	class:ZArray
lookup	ideal_arrays.h	/^        int32_t lookup(const Address lineAddr, const MemReq* req, bool updateReplacement) {$/;"	f	class:IdealLRUArray
lookup	ideal_arrays.h	/^        int32_t lookup(const Address lineAddr, const MemReq* req, bool updateReplacement) {$/;"	f	class:IdealLRUPartArray
lookupArray	cache_arrays.h	/^        uint32_t* lookupArray; \/\/maps physical position to lineId$/;"	m	class:ZArray
lookupReal	virt/port_virtualizer.h	/^        int lookupReal(int virt) {$/;"	f	class:PortVirtualizer
lookupVirt	virt/port_virtualizer.h	/^        int lookupVirt(int real) {$/;"	f	class:PortVirtualizer
lru	mc.h	/^	uint32_t lru;$/;"	m	class:TagBufferEntry
lruList	ideal_arrays.h	/^            InList<Entry> lruList;$/;"	m	struct:IdealLRUPartReplPolicy::IdPartInfo
lruList	ideal_arrays.h	/^        InList<Entry> lruList;$/;"	m	class:IdealLRUArray
mChnl	detailed_mem.h	/^        MemChannelBase* mChnl;$/;"	m	class:MemSchedulerBase
mParam	detailed_mem.h	/^        MemParam *mParam;$/;"	m	class:MemChannelBase
mParam	detailed_mem.h	/^        MemParam* mParam;$/;"	m	class:MemControllerBase
mParam	detailed_mem.h	/^        MemParam* mParam;$/;"	m	class:MemSchedulerBase
magic	g_heap/dlmalloc.h.c	/^  size_t     magic;$/;"	m	struct:malloc_state	file:
magic	g_heap/dlmalloc.h.c	/^  volatile size_t magic; \/\/dsm: Note that this is a fixed number now$/;"	m	struct:malloc_params	file:
magic	mtrand.h	/^        uint64_t magic(const uint64_t u) const { return loBit(u) ? 0x9908b0dfUL : 0x0UL; }$/;"	f	class:MTRand
main	dumptrace.cpp	/^int main(int argc, const char* argv[]) {$/;"	f
main	fftoggle.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	sorttrace.cpp	/^int main(int argc, const char* argv[]) {$/;"	f
main	zsim.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	zsim_harness.cpp	/^int main(int argc, char *argv[]) {$/;"	f
makeAdaptiveEvent	event_queue.h	/^AdaptiveEvent<G, F>* makeAdaptiveEvent(G get, F fire, uint64_t start, uint64_t target, uint64_t maxRate) {$/;"	f
makeImmutable	stats.h	/^        bool makeImmutable() {$/;"	f	class:AggregateStat
makeLambdaStat	stats.h	/^LambdaStat<F>* makeLambdaStat(F f) { return new LambdaStat<F>(f); }$/;"	f
makeLambdaVectorStat	stats.h	/^LambdaVectorStat<F>* makeLambdaVectorStat(F f, uint32_t size) { return new LambdaVectorStat<F>(f, size); }$/;"	f
mallinfo	g_heap/dlmalloc.h.c	/^struct mallinfo {$/;"	s	file:
malloc_chunk	g_heap/dlmalloc.h.c	/^struct malloc_chunk {$/;"	s	file:
malloc_corruption_error_count	g_heap/dlmalloc.h.c	/^int malloc_corruption_error_count;$/;"	v
malloc_getpagesize	g_heap/dlmalloc.h.c	1447;"	d	file:
malloc_getpagesize	g_heap/dlmalloc.h.c	1451;"	d	file:
malloc_getpagesize	g_heap/dlmalloc.h.c	1454;"	d	file:
malloc_getpagesize	g_heap/dlmalloc.h.c	1460;"	d	file:
malloc_getpagesize	g_heap/dlmalloc.h.c	1464;"	d	file:
malloc_getpagesize	g_heap/dlmalloc.h.c	1466;"	d	file:
malloc_getpagesize	g_heap/dlmalloc.h.c	1470;"	d	file:
malloc_getpagesize	g_heap/dlmalloc.h.c	1473;"	d	file:
malloc_getpagesize	g_heap/dlmalloc.h.c	1475;"	d	file:
malloc_global_mutex	g_heap/dlmalloc.h.c	/^static MLOCK_T malloc_global_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
malloc_global_mutex	g_heap/dlmalloc.h.c	/^static MLOCK_T malloc_global_mutex = { 0, 0, 0};$/;"	v	file:
malloc_global_mutex	g_heap/dlmalloc.h.c	/^static MLOCK_T malloc_global_mutex = { 0, 0, NULL_THREAD};$/;"	v	file:
malloc_global_mutex	g_heap/dlmalloc.h.c	/^static MLOCK_T malloc_global_mutex;$/;"	v	file:
malloc_global_mutex_status	g_heap/dlmalloc.h.c	/^static volatile long malloc_global_mutex_status;$/;"	v	file:
malloc_params	g_heap/dlmalloc.h.c	/^struct malloc_params {$/;"	s	file:
malloc_segment	g_heap/dlmalloc.h.c	/^struct malloc_segment {$/;"	s	file:
malloc_state	g_heap/dlmalloc.h.c	/^struct malloc_state {$/;"	s	file:
malloc_tree_chunk	g_heap/dlmalloc.h.c	/^struct malloc_tree_chunk {$/;"	s	file:
mapLineAddr	ddr_mem.cpp	/^DDRMemory::AddrLoc DDRMemory::mapLineAddr(Address lineAddr) {$/;"	f	class:DDRMemory
mapper	part_repl_policies.h	/^        PartMapper* mapper;$/;"	m	class:PartReplPolicy
markForSleep	scheduler.h	/^        volatile uint32_t* markForSleep(uint32_t pid, uint32_t tid, uint64_t wakeupPhase) {$/;"	f	class:Scheduler
markLeave	ooo_core.h	/^        inline void markLeave(uint64_t leaveCycle) {$/;"	f	class:CycleQueue
markRetire	ooo_core.h	/^        inline void markRetire(uint64_t minRetireCycle) {$/;"	f	class:ReorderBuffer
markSrcEventDone	timing_event.cpp	/^void CrossingEvent::markSrcEventDone(uint64_t cycle) {$/;"	f	class:CrossingEvent
mark_inuse_foot	g_heap/dlmalloc.h.c	2997;"	d	file:
mark_inuse_foot	g_heap/dlmalloc.h.c	3018;"	d	file:
mark_smallmap	g_heap/dlmalloc.h.c	2868;"	d	file:
mark_treemap	g_heap/dlmalloc.h.c	2872;"	d	file:
markedForSleep	scheduler.h	/^            bool markedForSleep; \/\/if true, we will go to sleep on the next leave()$/;"	m	struct:Scheduler::ThreadInfo
mask	process_tree.h	/^        const g_vector<bool> mask;$/;"	m	class:ProcessTreeNode
mask	scheduler.h	/^            g_vector<bool> mask;$/;"	m	struct:Scheduler::ThreadInfo
matchingMemToSysCycle	ddr_mem.h	/^        inline uint64_t matchingMemToSysCycle(uint64_t memCycle) {$/;"	f	class:DDRMemory
max	access_tracing.h	/^        uint32_t max;$/;"	m	class:AccessTraceReader
max	access_tracing.h	/^        uint32_t max;$/;"	m	class:AccessTraceWriter
maxAllowedFutexWakeups	scheduler.h	/^        volatile uint32_t maxAllowedFutexWakeups;$/;"	m	class:Scheduler
maxAperture	part_repl_policies.h	/^        double maxAperture; \/\/Maximum aperture allowed in each partition, must be < 1.0$/;"	m	class:VantageReplPolicy
maxBandwidth	detailed_mem.h	/^        uint64_t maxBandwidth;$/;"	m	class:MemControllerBase
maxMinInstrs	zsim.h	/^    uint64_t maxMinInstrs; \/\/terminate when all threads have reached this many instructions$/;"	m	struct:GlobSimInfo
maxN	bithacks.h	/^template <typename T, typename U, typename ... V> static inline T maxN(T a, U b, V... c) {$/;"	f
maxN	bithacks.h	/^template <typename T> static inline T maxN(T a) { return a; }$/;"	f
maxPhases	zsim.h	/^    uint64_t maxPhases; \/\/terminate when this many phases have been reached$/;"	m	struct:GlobSimInfo
maxProcEventualDumps	zsim.h	/^    uint64_t maxProcEventualDumps; \/\/term if the number of heartbeat-triggered process dumps reached this (MP\/MT)$/;"	m	struct:GlobSimInfo
maxRate	event_queue.h	/^        uint64_t maxRate;$/;"	m	class:AdaptiveEvent
maxRequestsPerCycle	mem_ctrls.h	/^        double maxRequestsPerCycle;$/;"	m	class:MD1Memory
maxSimTimeNs	zsim.h	/^    uint64_t maxSimTimeNs; \/\/terminate when the simulation time (bound+weave) exceeds this many ns$/;"	m	struct:GlobSimInfo
maxTotalInstrs	zsim.h	/^    uint64_t maxTotalInstrs; \/\/terminate when the aggregate number of instructions reaches this number$/;"	m	struct:GlobSimInfo
maxWakes	scheduler.h	/^            uint32_t maxWakes;$/;"	m	struct:Scheduler::FutexJoinInfo
max_footprint	g_heap/dlmalloc.h.c	/^  size_t     max_footprint;$/;"	m	struct:malloc_state	file:
max_size	g_std/stl_galloc.h	/^        size_type max_size() const { return size_t(-1); }$/;"	f	class:StlGlobAlloc
mchunk	g_heap/dlmalloc.h.c	/^typedef struct malloc_chunk  mchunk;$/;"	t	typeref:struct:malloc_chunk	file:
mchunkptr	g_heap/dlmalloc.h.c	/^typedef struct malloc_chunk* mchunkptr;$/;"	t	typeref:struct:malloc_chunk	file:
mem	ddr_mem.cpp	/^        DDRMemory* const mem;$/;"	m	class:SchedEvent	file:
mem	ddr_mem.cpp	/^        DDRMemory* mem;$/;"	m	class:DDRMemoryAccEvent	file:
mem	ddr_mem.cpp	/^        DDRMemory* mem;$/;"	m	class:RefreshEvent	file:
mem2chunk	g_heap/dlmalloc.h.c	2182;"	d	file:
memFreqKHz	ddr_mem.h	/^        uint64_t sysFreqKHz, memFreqKHz;$/;"	m	class:DDRMemory
memFreqKHz	detailed_mem.h	/^        uint64_t memFreqKHz;$/;"	m	class:MemControllerBase
memMinLatency	detailed_mem.h	/^        uint32_t memMinLatency[NUM_ACCESS_TYPES];$/;"	m	class:MemControllerBase
memToMicroSec	detailed_mem.h	/^        inline uint64_t memToMicroSec(uint64_t memCycle) { return memCycle*1000\/memFreqKHz; }$/;"	f	class:MemControllerBase
memToSysCycle	ddr_mem.h	/^        inline uint64_t memToSysCycle(uint64_t memCycle) { return (memCycle+1)*sysFreqKHz\/memFreqKHz; }$/;"	f	class:DDRMemory
memToSysCycle	detailed_mem.h	/^        inline uint64_t memToSysCycle(uint64_t memCycle) { return memCycle*sysFreqKHz\/memFreqKHz; }$/;"	f	class:MemControllerBase
member	Callback.h	/^	const PtrMember  member;$/;"	m	class:DRAMSim::Callback
memoizedHashes	hash.h	/^        uint32_t* memoizedHashes;$/;"	m	class:SHA1HashFamily
memoizedVal	hash.h	/^        uint64_t memoizedVal;$/;"	m	class:SHA1HashFamily
mems	dramsim_mem_ctrl.h	/^        const g_vector<MemObject*> mems;$/;"	m	class:SplitAddrMemory
mergeContinuous	detailed_mem_params.h	/^        bool mergeContinuous;$/;"	m	class:MemParam
mesiStateNames	memory_hierarchy.cpp	/^static const char* mesiStateNames[] = {"I", "S", "E", "M"};$/;"	v	file:
mflags	g_heap/dlmalloc.h.c	/^  flag_t     mflags;$/;"	m	struct:malloc_state	file:
min	config.cpp	/^    int32_t min;$/;"	m	struct:Range	file:
minActCycle	ddr_mem.h	/^        inline uint64_t minActCycle() const {$/;"	f	class:ActWindow
minAlloc	partitioner.h	/^        uint32_t minAlloc;$/;"	m	class:Partitioner
minAllocCycle	ooo_core.h	/^        inline uint64_t minAllocCycle() {$/;"	f	class:CycleQueue
minAllocCycle	ooo_core.h	/^        inline uint64_t minAllocCycle() {$/;"	f	class:ReorderBuffer
minBandwidth	detailed_mem.h	/^        uint64_t minBandwidth;$/;"	m	class:MemControllerBase
minLatency	detailed_mem.h	/^        uint32_t minLatency[NUM_ACCESS_TYPES];$/;"	m	class:MemControllerBase
minLatency	dramsim_mem_ctrl.h	/^        uint32_t minLatency;$/;"	m	class:DRAMSimMemory
minN	bithacks.h	/^template <typename T, typename U, typename ... V> static inline T minN(T a, U b, V... c) {$/;"	f
minN	bithacks.h	/^template <typename T> static inline T minN(T a) { return a; }$/;"	f
minPreCycle	ddr_mem.h	/^            uint64_t minPreCycle;   \/\/ if !open, time of last PRE; if open, min cycle PRE can be issued$/;"	m	struct:DDRMemory::Bank
minRdLatency	ddr_mem.h	/^        uint32_t minRdLatency;$/;"	m	class:DDRMemory
minRespCycle	ddr_mem.h	/^        uint64_t minRespCycle;$/;"	m	class:DDRMemory
minSchedCycle	ddr_mem.h	/^        uint64_t minSchedCycle; \/\/ TODO: delayed commands still not implemented$/;"	m	class:DDRMemory
minStartCycle	timing_event.h	/^        uint64_t minStartCycle;$/;"	m	class:TimingEvent
minWrLatency	ddr_mem.h	/^        uint32_t minWrLatency;$/;"	m	class:DDRMemory
minsize_for_tree_index	g_heap/dlmalloc.h.c	2857;"	d	file:
mispredBranches	ooo_core.h	/^        uint64_t instrs, uops, bbls, approxInstrs, mispredBranches;$/;"	m	class:OOOCore
missCache	partitioner.h	/^        mutable uint32_t* missCache;$/;"	m	class:UMonMonitor
missCacheValid	partitioner.h	/^        mutable bool missCacheValid;$/;"	m	class:UMonMonitor
mixBits	mtrand.h	/^        uint64_t mixBits(const uint64_t u, const uint64_t v) const { return hiBit(u) | loBits(v); }$/;"	f	class:MTRand
mmap_align	g_heap/dlmalloc.h.c	2629;"	d	file:
mmap_align	g_heap/dlmalloc.h.c	2631;"	d	file:
mmap_alloc	g_heap/dlmalloc.h.c	/^static void* mmap_alloc(mstate m, size_t nb) {$/;"	f	file:
mmap_resize	g_heap/dlmalloc.h.c	/^static mchunkptr mmap_resize(mstate m, mchunkptr oldp, size_t nb) {$/;"	f	file:
mmap_threshold	g_heap/dlmalloc.h.c	/^  size_t mmap_threshold;$/;"	m	struct:malloc_params	file:
monitor	part_repl_policies.h	/^        PartitionMonitor* monitor;$/;"	m	class:PartReplPolicy
monitors	partitioner.h	/^        g_vector<UMon*> monitors;       \/\/ individual monitors per partition$/;"	m	class:UMonMonitor
monotonicOffsetNs	zsim.h	/^    uint64_t monotonicOffsetNs;$/;"	m	struct:ClockDomainInfo
mparams	g_heap/dlmalloc.h.c	/^static struct malloc_params mparams;$/;"	v	typeref:struct:malloc_params	file:
mse	timing_cache.cpp	/^        MissStartEvent* mse;$/;"	m	class:MissResponseEvent	file:
mse	timing_cache.cpp	/^        MissStartEvent* mse;$/;"	m	class:MissWritebackEvent	file:
msegment	g_heap/dlmalloc.h.c	/^typedef struct malloc_segment  msegment;$/;"	t	typeref:struct:malloc_segment	file:
msegmentptr	g_heap/dlmalloc.h.c	/^typedef struct malloc_segment* msegmentptr;$/;"	t	typeref:struct:malloc_segment	file:
mspace	g_heap/dlmalloc.h.c	/^typedef void* mspace;$/;"	t	file:
mspace_calloc	g_heap/dlmalloc.h.c	/^void* mspace_calloc(mspace msp, size_t n_elements, size_t elem_size) {$/;"	f
mspace_footprint	g_heap/dlmalloc.h.c	/^size_t mspace_footprint(mspace msp) {$/;"	f
mspace_free	g_heap/dlmalloc.h.c	/^void mspace_free(mspace msp, void* mem) {$/;"	f
mspace_independent_calloc	g_heap/dlmalloc.h.c	/^void** mspace_independent_calloc(mspace msp, size_t n_elements,$/;"	f
mspace_independent_comalloc	g_heap/dlmalloc.h.c	/^void** mspace_independent_comalloc(mspace msp, size_t n_elements,$/;"	f
mspace_mallinfo	g_heap/dlmalloc.h.c	/^struct mallinfo mspace_mallinfo(mspace msp) {$/;"	f
mspace_malloc	g_heap/dlmalloc.h.c	/^void* mspace_malloc(mspace msp, size_t bytes) {$/;"	f
mspace_malloc_stats	g_heap/dlmalloc.h.c	/^void mspace_malloc_stats(mspace msp) {$/;"	f
mspace_mallopt	g_heap/dlmalloc.h.c	/^int mspace_mallopt(int param_number, int value) {$/;"	f
mspace_max_footprint	g_heap/dlmalloc.h.c	/^size_t mspace_max_footprint(mspace msp) {$/;"	f
mspace_memalign	g_heap/dlmalloc.h.c	/^void* mspace_memalign(mspace msp, size_t alignment, size_t bytes) {$/;"	f
mspace_ptr	galloc.cpp	/^    mspace mspace_ptr;$/;"	m	struct:gm_segment	file:
mspace_realloc	g_heap/dlmalloc.h.c	/^void* mspace_realloc(mspace msp, void* oldmem, size_t bytes) {$/;"	f
mspace_track_large_chunks	g_heap/dlmalloc.h.c	/^int mspace_track_large_chunks(mspace msp, int enable) {$/;"	f
mspace_trim	g_heap/dlmalloc.h.c	/^int mspace_trim(mspace msp, size_t pad) {$/;"	f
mspace_usable_size	g_heap/dlmalloc.h.c	/^size_t mspace_usable_size(void* mem) {$/;"	f
mstate	g_heap/dlmalloc.h.c	/^typedef struct malloc_state*    mstate;$/;"	t	typeref:struct:malloc_state	file:
mut	mutex.h	/^        mutex* mut;$/;"	m	class:scoped_mutex
mutex	g_heap/dlmalloc.h.c	/^  MLOCK_T    mutex;     \/* locate lock among fields that rarely change *\/$/;"	m	struct:malloc_state	file:
mutex	mutex.h	/^        mutex() {$/;"	f	class:mutex
mutex	mutex.h	/^class mutex : public GlobAlloc {$/;"	c
mutex Class Reference	latex/classmutex.tex	/^\\hypertarget{classmutex}{\\section{mutex Class Reference}$/;"	s
myId	detailed_mem.h	/^        uint32_t myId;$/;"	m	class:MemChannelBase
myId	detailed_mem.h	/^        uint32_t myId;$/;"	m	class:MemRankBase
n	ddr_mem.h	/^            Node* n;$/;"	m	struct:RequestQueue::iterator
name	cache.h	/^        g_string name;$/;"	m	class:Cache
name	coherence_ctrls.h	/^        g_string name;$/;"	m	class:MESICC
name	coherence_ctrls.h	/^        g_string name;$/;"	m	class:MESITerminalCC
name	core.h	/^        g_string name;$/;"	m	class:Core
name	core_recorder.h	/^        g_string name;$/;"	m	class:CoreRecorder
name	ddr_mem.h	/^        const g_string name;$/;"	m	class:DDRMemory
name	detailed_mem.h	/^        g_string name;$/;"	m	class:MemControllerBase
name	dramsim_mem_ctrl.h	/^        const g_string name;$/;"	m	class:SplitAddrMemory
name	dramsim_mem_ctrl.h	/^        g_string name;$/;"	m	class:DRAMSimMemory
name	mem_ctrls.h	/^        g_string name; \/\/barely used$/;"	m	class:MD1Memory
name	mem_ctrls.h	/^        g_string name;$/;"	m	class:SimpleMemory
name	ooo_core_recorder.h	/^        g_string name;$/;"	m	class:OOOCoreRecorder
name	prefetcher.h	/^        g_string name;$/;"	m	class:StreamPrefetcher
name	stats.h	/^        const char* name() const {$/;"	f	class:Stat
name	trace_driver.h	/^        g_string name;$/;"	m	class:TraceDriverProxyCache
needsJoin	scheduler.h	/^            volatile bool needsJoin; \/\/after waiting on the scheduler, should we join the barrier, or is our cid good to go already?$/;"	m	struct:Scheduler::ThreadInfo
nested-classes	html/classIdealLRUPartReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	html/classMemControllerBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	html/classMemParam.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	html/classPartitioner.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	html/classProcStats.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	html/classRequestQueue.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	html/namespaceDRAMSim.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	html/structSetAssocCands.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	html/structZCands.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
next	ddr_mem.cpp	/^        SchedEvent* next;  $/;"	m	class:SchedEvent	file:
next	g_heap/dlmalloc.h.c	/^  struct malloc_segment* next;   \/* ptr to next segment *\/$/;"	m	struct:malloc_segment	typeref:struct:malloc_segment::malloc_segment	file:
next	intrusive_list.h	/^    T* next;$/;"	m	struct:InListNode
next	timing_event.h	/^        TimingEvent* next; \/\/used by PrioQueue --- PRIVATE$/;"	m	class:TimingEvent
next	timing_event.h	/^    TimingEventBlock* next;$/;"	m	struct:TimingEventBlock
next	utility_monitor.h	/^            struct Node* next;$/;"	m	struct:UMon::Node	typeref:struct:UMon::Node::Node
nextChunk	access_tracing.cpp	/^void AccessTraceReader::nextChunk() {$/;"	f	class:AccessTraceReader
nextSchedCycle	ddr_mem.h	/^        uint64_t nextSchedCycle;$/;"	m	class:DDRMemory
nextSchedEvent	ddr_mem.h	/^        SchedEvent* nextSchedEvent;$/;"	m	class:DDRMemory
nextSysTick	detailed_mem.h	/^        uint64_t nextSysTick;$/;"	m	class:MemControllerBase
nextWin	ooo_core.h	/^        WinCycle* nextWin;$/;"	m	class:WindowStructure
next_chunk	g_heap/dlmalloc.h.c	2233;"	d	file:
next_pinuse	g_heap/dlmalloc.h.c	2237;"	d	file:
nonInclusiveHack	coherence_ctrls.h	/^        bool nonInclusiveHack;$/;"	m	class:MESIBottomCC
nonInclusiveHack	coherence_ctrls.h	/^        bool nonInclusiveHack;$/;"	m	class:MESICC
nonInclusiveHack	coherence_ctrls.h	/^        bool nonInclusiveHack;$/;"	m	class:MESITopCC
nopPtrs	zsim.cpp	/^static const InstrFuncPtrs nopPtrs = {NOPLoadStoreSingle, NOPLoadStoreSingle, NOPBasicBlock, NOPRecordBranch, NOPPredLoadStoreSingle, NOPPredLoadStoreSingle, FPTR_NOP};$/;"	v	file:
notifyDeschedule	proc_stats.cpp	/^void ProcStats::notifyDeschedule() {$/;"	f	class:ProcStats
notifyDeschedule	process_stats.cpp	/^void ProcessStats::notifyDeschedule(uint32_t cid, uint32_t outgoingPid) {$/;"	f	class:ProcessStats
notifyEnd	process_tree.cpp	/^bool ProcessTreeNode::notifyEnd() {$/;"	f	class:ProcessTreeNode
notifyFutexWaitWoken	scheduler.cpp	/^void Scheduler::notifyFutexWaitWoken(uint32_t pid, uint32_t tid) {$/;"	f	class:Scheduler
notifyFutexWakeEnd	scheduler.cpp	/^void Scheduler::notifyFutexWakeEnd(uint32_t pid, uint32_t tid, uint32_t wokenUp) {$/;"	f	class:Scheduler
notifyFutexWakeStart	scheduler.cpp	/^void Scheduler::notifyFutexWakeStart(uint32_t pid, uint32_t tid, uint32_t maxWakes) {$/;"	f	class:Scheduler
notifyHarnessForDebugger	debug_zsim.cpp	/^void notifyHarnessForDebugger(int harnessPid) {$/;"	f
notifyJoin	core_recorder.cpp	/^uint64_t CoreRecorder::notifyJoin(uint64_t curCycle) {$/;"	f	class:CoreRecorder
notifyJoin	ooo_core_recorder.cpp	/^uint64_t OOOCoreRecorder::notifyJoin(uint64_t curCycle) {$/;"	f	class:OOOCoreRecorder
notifyLeave	core_recorder.cpp	/^void CoreRecorder::notifyLeave(uint64_t curCycle) {$/;"	f	class:CoreRecorder
notifyLeave	ooo_core_recorder.cpp	/^void OOOCoreRecorder::notifyLeave(uint64_t curCycle) {$/;"	f	class:OOOCoreRecorder
notifySleepEnd	scheduler.h	/^        void notifySleepEnd(uint32_t pid, uint32_t tid) {$/;"	f	class:Scheduler
notifyStart	process_tree.cpp	/^bool ProcessTreeNode::notifyStart() {$/;"	f	class:ProcessTreeNode
notifyTermination	scheduler.h	/^        void notifyTermination() {$/;"	f	class:Scheduler
nsToCycles	virt/time_conv.h	/^static inline uint64_t nsToCycles(uint64_t cycles) {$/;"	f
nsToTimespec	virt/time_conv.h	/^static inline struct timespec nsToTimespec(uint64_t ns) {$/;"	f
nsToTimeval	virt/time_conv.h	/^static inline struct timeval nsToTimeval(uint64_t ns) {$/;"	f
numBuckets	ideal_arrays.h	/^        uint32_t numBuckets;$/;"	m	class:IdealLRUPartReplPolicy
numBuffers	prefetcher.h	/^        uint32_t numBuffers;$/;"	m	class:StreamPrefetcher
numCands	cache_arrays.h	/^    inline uint32_t numCands() const { return e-b; }$/;"	f	struct:SetAssocCands
numCands	cache_arrays.h	/^    inline uint32_t numCands() const { return e-b; }$/;"	f	struct:ZCands
numCands	repl_policies.h	/^        uint32_t numCands;$/;"	m	class:NRUReplPolicy
numCands	repl_policies.h	/^        uint32_t numCands;$/;"	m	class:RandReplPolicy
numCands	repl_policies.h	/^        uint32_t numCands;$/;"	m	class:TreeLRUReplPolicy
numChildren	access_tracing.h	/^        uint32_t numChildren; \/\/i.e., how many parallel streams does this file contain?$/;"	m	class:AccessTraceReader
numChildren	timing_event.h	/^        uint32_t numChildren;$/;"	m	class:TimingEvent
numChildren	trace_driver.h	/^        uint32_t numChildren;$/;"	m	class:TraceDriver
numCores	partition_mapper.h	/^        uint32_t numCores;$/;"	m	class:CorePartMapper
numCores	partition_mapper.h	/^        uint32_t numCores;$/;"	m	class:InstrDataCorePartMapper
numCores	scheduler.h	/^        uint32_t numCores;$/;"	m	class:Scheduler
numCores	zsim.h	/^    uint32_t numCores;$/;"	m	struct:GlobSimInfo
numDomains	contention_sim.h	/^        uint32_t numDomains;$/;"	m	class:ContentionSim
numDomains	zsim.h	/^    uint32_t numDomains;$/;"	m	struct:GlobSimInfo
numFuncs	hash.h	/^        int numFuncs;$/;"	m	class:SHA1HashFamily
numFuncs	hash.h	/^        uint32_t numFuncs;$/;"	m	class:H3HashFamily
numInRegs	decoder.h	/^            uint32_t numInRegs;$/;"	m	struct:Decoder::Instr
numInfos	virt/fs.cpp	/^static uint32_t numInfos = 0;$/;"	v	file:
numLines	cache.h	/^        uint32_t numLines;$/;"	m	class:Cache
numLines	cache_arrays.h	/^        uint32_t numLines;$/;"	m	class:SetAssocArray
numLines	cache_arrays.h	/^        uint32_t numLines;$/;"	m	class:ZArray
numLines	coherence_ctrls.h	/^        uint32_t numLines;$/;"	m	class:MESIBottomCC
numLines	coherence_ctrls.h	/^        uint32_t numLines;$/;"	m	class:MESICC
numLines	coherence_ctrls.h	/^        uint32_t numLines;$/;"	m	class:MESITerminalCC
numLines	coherence_ctrls.h	/^        uint32_t numLines;$/;"	m	class:MESITopCC
numLines	ideal_arrays.h	/^        uint32_t numLines;$/;"	m	class:IdealLRUArray
numLines	ideal_arrays.h	/^        uint32_t numLines;$/;"	m	class:IdealLRUPartArray
numLines	ideal_arrays.h	/^        uint32_t numLines;$/;"	m	class:IdealLRUPartReplPolicy
numLines	repl_policies.h	/^        uint32_t numLines;$/;"	m	class:LFUReplPolicy
numLines	repl_policies.h	/^        uint32_t numLines;$/;"	m	class:LRUReplPolicy
numLines	repl_policies.h	/^        uint32_t numLines;$/;"	m	class:NRUReplPolicy
numLoads	decoder.h	/^            uint32_t numLoads;$/;"	m	struct:Decoder::Instr
numMSHRs	timing_cache.h	/^        uint32_t numMSHRs, activeMisses;$/;"	m	class:TimingCache
numOutRegs	decoder.h	/^            uint32_t numOutRegs;$/;"	m	struct:Decoder::Instr
numParents	timing_event.h	/^        uint32_t numParents;$/;"	m	class:TimingEvent
numPartitions	partitioner.h	/^        uint32_t numPartitions;$/;"	m	class:LookaheadPartitioner
numPasses	hash.h	/^        int numPasses;$/;"	m	class:SHA1HashFamily
numPhases	zsim.h	/^    uint64_t numPhases;$/;"	m	struct:GlobSimInfo
numProcGroups	zsim.h	/^    uint32_t numProcGroups;$/;"	m	struct:GlobSimInfo
numProcs	partition_mapper.h	/^        uint32_t numProcs;$/;"	m	class:InstrDataProcessPartMapper
numProcs	partition_mapper.h	/^        uint32_t numProcs;$/;"	m	class:ProcessPartMapper
numProcs	zsim.h	/^    uint32_t numProcs;$/;"	m	struct:GlobSimInfo
numRecords	access_tracing.h	/^        uint64_t numRecords;$/;"	m	class:AccessTraceReader
numSets	cache_arrays.h	/^        uint32_t numSets;$/;"	m	class:SetAssocArray
numSets	cache_arrays.h	/^        uint32_t numSets;$/;"	m	class:ZArray
numSets	filter_cache.h	/^        uint32_t numSets;$/;"	m	class:FilterCache
numSharers	coherence_ctrls.h	/^            uint32_t numSharers;$/;"	m	struct:MESITopCC::Entry
numSharers	coherence_ctrls.h	/^        inline uint32_t numSharers(uint32_t lineId) {$/;"	f	class:MESITopCC
numSharers	coherence_ctrls.h	/^        uint32_t numSharers(uint32_t lineId) {return 0;} \/\/no sharers$/;"	f	class:MESITerminalCC
numSharers	coherence_ctrls.h	/^        uint32_t numSharers(uint32_t lineId) {return tcc->numSharers(lineId);}$/;"	f	class:MESICC
numSimThreads	contention_sim.h	/^        uint32_t numSimThreads;$/;"	m	class:ContentionSim
numStores	decoder.h	/^            uint32_t numStores;$/;"	m	struct:Decoder::Instr
num_hits	page_placement.h	/^		uint64_t num_hits;$/;"	m	struct:PagePlacementPolicy::ChunkInfo
num_misses	page_placement.h	/^		uint64_t num_misses;$/;"	m	struct:PagePlacementPolicy::ChunkInfo
num_ways	mc.h	/^   uint32_t num_ways;$/;"	m	class:Set
obj	tick_event.h	/^        T* obj;$/;"	m	class:TickEvent
object	Callback.h	/^	ConsumerT* const object;$/;"	m	class:DRAMSim::Callback
occ	prio_queue.h	/^        uint64_t occ; \/\/ bit i is 1 if array[i] is populated$/;"	m	struct:PrioQueue::PQBlock
occHist	scheduler.h	/^        VectorCounter occHist, runQueueHist;$/;"	m	class:Scheduler
occUnits	ooo_core.h	/^            uint8_t occUnits;$/;"	m	struct:WindowStructure::WinCycle
occupancy	ooo_core.h	/^        uint32_t occupancy;  \/\/ elements scheduled in the future$/;"	m	class:WindowStructure
ok_address	g_heap/dlmalloc.h.c	2959;"	d	file:
ok_address	g_heap/dlmalloc.h.c	2968;"	d	file:
ok_inuse	g_heap/dlmalloc.h.c	2963;"	d	file:
ok_inuse	g_heap/dlmalloc.h.c	2970;"	d	file:
ok_magic	g_heap/dlmalloc.h.c	2976;"	d	file:
ok_magic	g_heap/dlmalloc.h.c	2978;"	d	file:
ok_next	g_heap/dlmalloc.h.c	2961;"	d	file:
ok_next	g_heap/dlmalloc.h.c	2969;"	d	file:
ok_pinuse	g_heap/dlmalloc.h.c	2965;"	d	file:
ok_pinuse	g_heap/dlmalloc.h.c	2971;"	d	file:
oooBbl	core.h	/^    DynBbl oooBbl[0]; \/\/0 bytes, but will be 1-sized when we have an element (and that element has variable size as well)$/;"	m	struct:BblInfo
oooDecode	zsim.h	/^    bool oooDecode; \/\/if true, Decoder does OOO (instr->uop) decoding$/;"	m	struct:GlobSimInfo
op	part_repl_policies.h	/^            uint32_t op; \/\/original partition id: same as partition id when in partition, but does not change when moved to FFA (unmanaged region)$/;"	m	struct:VantageReplPolicy::LineInfo
op	virt/timeout.cpp	/^    int op;$/;"	m	struct:FutexInfo	file:
open	ddr_mem.h	/^            bool open;  \/\/ false indicates a PRE has been issued$/;"	m	struct:DDRMemory::Bank
openRow	ddr_mem.h	/^            uint64_t openRow;$/;"	m	struct:DDRMemory::Bank
operator !=	cache_arrays.h	/^        inline bool operator!=(const iterator& it) const { return it.x != x; }$/;"	f	struct:SetAssocCands::iterator
operator !=	cache_arrays.h	/^        inline bool operator!=(const iterator& it) const { return it.x != x; }$/;"	f	struct:ZCands::iterator
operator !=	ddr_mem.h	/^            inline bool operator!=(const iterator& it) const { return it.n != n; }$/;"	f	struct:RequestQueue::iterator
operator !=	g_std/stl_galloc.h	/^        template <class U> bool operator!=(const StlGlobAlloc<U>&) const { return false; }$/;"	f	class:StlGlobAlloc
operator !=	log.h	/^        const PrintExpr operator != (std::nullptr_t t) const { ss << " != nullptr"; return *this; }$/;"	f	class:PrintExpr
operator !=	log.h	/^        template<typename T> const PrintExpr operator != (T t) const { ss << " != " << t; return *this; }$/;"	f	class:PrintExpr
operator %	log.h	/^        template<typename T> const PrintExpr operator %  (T t) const { ss << " % "  << t; return *this; }$/;"	f	class:PrintExpr
operator &	log.h	/^        template<typename T> const PrintExpr operator &  (T t) const { ss << " & "  << t; return *this; }$/;"	f	class:PrintExpr
operator &&	log.h	/^        template<typename T> const PrintExpr operator && (T t) const { ss << " && " << t; return *this; }$/;"	f	class:PrintExpr
operator ()	Callback.h	/^	ReturnT operator()(Param1T param1, Param2T param2, Param3T param3)$/;"	f	class:DRAMSim::Callback
operator ()	contention_sim.cpp	/^bool ContentionSim::CompareDomains::operator()(DomainData* d1, DomainData* d2) const {$/;"	f	class:ContentionSim::CompareDomains
operator ()	contention_sim.cpp	/^bool ContentionSim::CompareEvents::operator()(TimingEvent* lhs, TimingEvent* rhs) const {$/;"	f	class:ContentionSim::CompareEvents
operator ()	mtrand.h	/^inline double MTRand::operator()() {$/;"	f	class:MTRand
operator ()	ooo_core_recorder.cpp	/^bool OOOCoreRecorder::CompareRespEvents::operator()(const FutureResponse& e1, const FutureResponse& e2) const {$/;"	f	class:OOOCoreRecorder::CompareRespEvents
operator *	cache_arrays.h	/^        inline uint32_t operator*() const { return x->lineId; }$/;"	f	struct:ZCands::iterator
operator *	cache_arrays.h	/^        inline uint32_t operator*() const { return x; }$/;"	f	struct:SetAssocCands::iterator
operator *	ddr_mem.h	/^            inline T* operator*() const { return &(n->elem); }$/;"	f	struct:RequestQueue::iterator
operator *	log.h	/^        template<typename T> const PrintExpr operator *  (T t) const { ss << " * "  << t; return *this; }$/;"	f	class:PrintExpr
operator +	log.h	/^        template<typename T> const PrintExpr operator +  (T t) const { ss << " + "  << t; return *this; }$/;"	f	class:PrintExpr
operator -	log.h	/^        template<typename T> const PrintExpr operator -  (T t) const { ss << " - "  << t; return *this; }$/;"	f	class:PrintExpr
operator ->*	log.h	/^        const PrintExpr operator->* (std::nullptr_t t) const { ss << "nullptr"; return *this; }$/;"	f	class:PrintExpr
operator ->*	log.h	/^        template<typename T> const PrintExpr operator->* (T t) const { ss << t; return *this; }$/;"	f	class:PrintExpr
operator /	log.h	/^        template<typename T> const PrintExpr operator \/  (T t) const { ss << " \/ "  << t; return *this; }$/;"	f	class:PrintExpr
operator <	cpuid.h	/^    bool operator< (const CpuIdRecord& other) const {$/;"	f	struct:CpuIdRecord
operator <	log.h	/^        template<typename T> const PrintExpr operator <  (T t) const { ss << " < "  << t; return *this; }$/;"	f	class:PrintExpr
operator <<	log.h	/^        template<typename T> const PrintExpr operator << (T t) const { ss << " << " << t; return *this; }$/;"	f	class:PrintExpr
operator <<	mtrand.h	/^inline std::ostream& operator<<(std::ostream& os, const MTRand& mtrand) {$/;"	f
operator <=	log.h	/^        template<typename T> const PrintExpr operator <= (T t) const { ss << " <= " << t; return *this; }$/;"	f	class:PrintExpr
operator =	g_std/stl_galloc.h	/^        StlGlobAlloc<T>& operator=(const StlGlobAlloc&) { return *this; }$/;"	f	class:StlGlobAlloc
operator =	g_std/stl_galloc.h	/^        template <class U> StlGlobAlloc& operator=(const StlGlobAlloc<U>&) { return *this; }$/;"	f	class:StlGlobAlloc
operator =	mtrand.h	/^inline MTRand& MTRand::operator=(const MTRand& o) {$/;"	f	class:MTRand
operator =	mutex.h	/^        scoped_mutex& operator=(scoped_mutex&& that) {$/;"	f	class:scoped_mutex
operator ==	cache_arrays.h	/^        inline bool operator==(const iterator& it) const { return it.x == x; }$/;"	f	struct:SetAssocCands::iterator
operator ==	cache_arrays.h	/^        inline bool operator==(const iterator& it) const { return it.x == x; }$/;"	f	struct:ZCands::iterator
operator ==	ddr_mem.h	/^            inline bool operator==(const iterator& it) const { return it.n == n; }$/;"	f	struct:RequestQueue::iterator
operator ==	g_std/stl_galloc.h	/^        template <class U> bool operator==(const StlGlobAlloc<U>&) const { return true; }$/;"	f	class:StlGlobAlloc
operator ==	log.h	/^        const PrintExpr operator == (std::nullptr_t t) const { ss << " == nullptr"; return *this; }$/;"	f	class:PrintExpr
operator ==	log.h	/^        template<typename T> const PrintExpr operator == (T t) const { ss << " == " << t; return *this; }$/;"	f	class:PrintExpr
operator >	log.h	/^        template<typename T> const PrintExpr operator >  (T t) const { ss << " > "  << t; return *this; }$/;"	f	class:PrintExpr
operator >=	log.h	/^        template<typename T> const PrintExpr operator >= (T t) const { ss << " >= " << t; return *this; }$/;"	f	class:PrintExpr
operator >>	log.h	/^        template<typename T> const PrintExpr operator >> (T t) const { ss << " >> " << t; return *this; }$/;"	f	class:PrintExpr
operator >>	mtrand.h	/^inline std::istream& operator>>(std::istream& is, MTRand& mtrand) {$/;"	f
operator ^	log.h	/^        template<typename T> const PrintExpr operator ^  (T t) const { ss << " ^ "  << t; return *this; }$/;"	f	class:PrintExpr
operator delete	galloc.h	/^        inline void operator delete(void *p, size_t sz) {$/;"	f	class:GlobAlloc
operator delete	galloc.h	/^        void operator delete (void* p, void* ptr) {}$/;"	f	class:GlobAlloc
operator delete	timing_event.h	/^        void operator delete (void* p, EventRecorder& evRec) {$/;"	f	class:TimingEvent
operator delete	timing_event.h	/^        void operator delete (void* p, EventRecorder* evRec) {$/;"	f	class:TimingEvent
operator delete	timing_event.h	/^        void operator delete(void*, size_t) {$/;"	f	class:TimingEvent
operator delete	timing_event.h	/^    void operator delete (void* p, EventRecorder* evRec) {$/;"	f	struct:TimingEventBlock
operator delete	timing_event.h	/^    void operator delete(void*, size_t) {$/;"	f	struct:TimingEventBlock
operator new	galloc.h	/^        inline void* operator new (size_t sz) {$/;"	f	class:GlobAlloc
operator new	galloc.h	/^        inline void* operator new (size_t sz, void* ptr) {$/;"	f	class:GlobAlloc
operator new	timing_event.h	/^        void* operator new (size_t sz, EventRecorder& evRec) {$/;"	f	class:TimingEvent
operator new	timing_event.h	/^        void* operator new (size_t sz, EventRecorder* evRec) {$/;"	f	class:TimingEvent
operator new	timing_event.h	/^    void* operator new (size_t sz, EventRecorder* evRec) {$/;"	f	struct:TimingEventBlock
operator |	log.h	/^        template<typename T> const PrintExpr operator |  (T t) const { ss << " | "  << t; return *this; }$/;"	f	class:PrintExpr
operator ||	log.h	/^        template<typename T> const PrintExpr operator || (T t) const { ss << " || " << t; return *this; }$/;"	f	class:PrintExpr
ordblks	g_heap/dlmalloc.h.c	/^  MALLINFO_FIELD_TYPE ordblks;  \/* number of free chunks *\/$/;"	m	struct:mallinfo	file:
origStartCycle	core_recorder.cpp	/^        uint64_t origStartCycle;$/;"	m	class:TimingCoreEvent	file:
origStartCycle	timing_event.h	/^        uint64_t origStartCycle;$/;"	m	class:CrossingEvent
other	g_std/stl_galloc.h	/^        template <class U> struct rebind { typedef StlGlobAlloc<U> other; };$/;"	t	struct:StlGlobAlloc::rebind
outCfg	config.h	/^        libconfig::Config* outCfg;$/;"	m	class:Config
outQueue	scheduler.h	/^        InList<ThreadInfo> outQueue;$/;"	m	class:Scheduler
outRegs	decoder.h	/^            uint32_t outRegs[MAX_INSTR_REG_WRITES];$/;"	m	struct:Decoder::Instr
outputDir	zsim.h	/^    const char* outputDir; \/\/all the output files mst be dumped here. Stored because complex workloads often change dir, then spawn...$/;"	m	struct:GlobSimInfo
overflowQueue	ddr_mem.h	/^        std::deque<Request> overflowQueue;$/;"	m	class:DDRMemory
overhead_for	g_heap/dlmalloc.h.c	2252;"	d	file:
owner	intrusive_list.h	/^    InList<T>* owner;$/;"	m	struct:InListNode
p	ideal_arrays.h	/^            uint32_t p;$/;"	m	struct:IdealLRUPartReplPolicy::Entry
p	part_repl_policies.h	/^            uint32_t p; \/\/partition ID$/;"	m	struct:VantageReplPolicy::LineInfo
p	part_repl_policies.h	/^            uint32_t p;$/;"	m	struct:WayPartReplPolicy::WayPartInfo
pNext	mtrand.h	/^        uint64_t *pNext;     \/\/ next value to get from state$/;"	m	class:MTRand
pad	barrier.h	/^            uint32_t pad;$/;"	m	struct:Barrier::ThreadSyncInfo
pad	barrier.h	/^        uint32_t pad[16];$/;"	m	class:Barrier
pad	core.h	/^    uint64_t pad[1];$/;"	m	struct:InstrFuncPtrs
pad	decoder.h	/^    uint8_t pad; \/\/pad to 4-byte multiple$/;"	m	struct:DynUop
pad_request	g_heap/dlmalloc.h.c	2191;"	d	file:
page_align	g_heap/dlmalloc.h.c	2618;"	d	file:
page_size	g_heap/dlmalloc.h.c	/^  size_t page_size;$/;"	m	struct:malloc_params	file:
panic	log.h	122;"	d
parallelThreads	barrier.h	/^        uint32_t parallelThreads;$/;"	m	class:Barrier
parent	g_heap/dlmalloc.h.c	/^  struct malloc_tree_chunk* parent;$/;"	m	struct:malloc_tree_chunk	typeref:struct:malloc_tree_chunk::malloc_tree_chunk	file:
parent	prefetcher.h	/^        MemObject* parent;$/;"	m	class:StreamPrefetcher
parent	trace_driver.h	/^        MemObject* parent;$/;"	m	class:TraceDriver
parent	trace_driver.h	/^        MemObject* parent;$/;"	m	class:TraceDriverProxyCache
parent -Done	latex/classCrossingEvent.tex	/^\\index{parent\\-Done@{parent\\-Done}!CrossingEvent@{Crossing\\-Event}}$/;"	b
parent -Done	latex/classDelayEvent.tex	/^\\index{parent\\-Done@{parent\\-Done}!DelayEvent@{Delay\\-Event}}$/;"	b
parent -Done	latex/classRefreshEvent.tex	/^\\index{parent\\-Done@{parent\\-Done}!RefreshEvent@{Refresh\\-Event}}$/;"	b
parent -Done	latex/classSchedEvent.tex	/^\\index{parent\\-Done@{parent\\-Done}!SchedEvent@{Sched\\-Event}}$/;"	b
parent -Done	latex/classTimingEvent.tex	/^\\index{parent\\-Done@{parent\\-Done}!TimingEvent@{Timing\\-Event}}$/;"	b
parentDone	ddr_mem.cpp	/^        void parentDone(uint64_t startCycle) {$/;"	f	class:RefreshEvent
parentDone	ddr_mem.cpp	/^        void parentDone(uint64_t startCycle) {$/;"	f	class:SchedEvent
parentDone	tick_event.h	/^        void parentDone(uint64_t startCycle) {$/;"	f	class:TickEvent
parentDone	timing_event.cpp	/^void CrossingEvent::parentDone(uint64_t startCycle) {$/;"	f	class:CrossingEvent
parentDone	timing_event.cpp	/^void TimingEvent::parentDone(uint64_t startCycle) {$/;"	f	class:TimingEvent
parentDone	timing_event.h	/^                virtual void parentDone(uint64_t startCycle) {$/;"	f	class:CrossingEvent::CrossingSrcEvent
parentDone	timing_event.h	/^        virtual void parentDone(uint64_t startCycle) {$/;"	f	class:DelayEvent
parentEv	timing_event.h	/^        TimingEvent* parentEv; \/\/stored exclusively for resp-req xing chaining$/;"	m	class:CrossingEvent
parentId	detailed_mem.h	/^        uint32_t parentId;$/;"	m	class:MemRankBase
parentIdx	cache_arrays.h	/^    int32_t parentIdx;$/;"	m	struct:ZWalkInfo
parentRTTs	coherence_ctrls.h	/^        g_vector<uint32_t> parentRTTs;$/;"	m	class:MESIBottomCC
parents	coherence_ctrls.h	/^        g_vector<MemObject*> parents;$/;"	m	class:MESIBottomCC
part	partitioner.h	/^                Partitioner* part;$/;"	m	class:Partitioner::PartitionEvent
partGranularity	part_repl_policies.h	/^        uint32_t partGranularity; \/\/number of partitions that UMON\/LookaheadPartitioner expects$/;"	m	class:VantageReplPolicy
partInfo	ideal_arrays.h	/^        IdPartInfo* partInfo;$/;"	m	class:IdealLRUPartReplPolicy
partInfo	part_repl_policies.h	/^        PartInfo* partInfo;$/;"	m	class:WayPartReplPolicy
partInfo	part_repl_policies.h	/^        VantagePartInfo* partInfo;$/;"	m	class:VantageReplPolicy
partPortion	part_repl_policies.h	/^        double partPortion; \/\/how much of the cache do we devote to the partition's target sizes?$/;"	m	class:VantageReplPolicy
partSlack	part_repl_policies.h	/^        double partSlack; \/\/how much the aperture curve reacts to "cushion" the load. partSlack+targetSize sets aperture to 1.0$/;"	m	class:VantageReplPolicy
partition	lookahead.cpp	/^void LookaheadPartitioner::partition() {$/;"	f	class:LookaheadPartitioner
partitionBuffers	prefetcher.h	/^        bool partitionBuffers; \/\/ partition stream buffer among data classes$/;"	m	class:StreamPrefetcher
partitions	ideal_arrays.h	/^        uint32_t partitions;$/;"	m	class:IdealLRUPartReplPolicy
partitions	part_repl_policies.h	/^        uint32_t partitions;$/;"	m	class:VantageReplPolicy
partitions	part_repl_policies.h	/^        uint32_t partitions;$/;"	m	class:WayPartReplPolicy
partitions	prefetcher.h	/^        uint32_t partitions;$/;"	m	class:StreamPrefetcher
patchRoot	process_tree.h	/^        const char* patchRoot; \/\/used in syscall patching$/;"	m	class:ProcessTreeNode
patchRoot	virt/common.h	/^    const char* patchRoot;$/;"	m	struct:PrePatchArgs
pauseLocks	zsim.h	/^    lock_t pauseLocks[256]; \/\/per-process pauses$/;"	m	struct:GlobSimInfo
pc	scheduler.h	/^            const uint64_t pc;$/;"	m	struct:Scheduler::FakeLeaveInfo
pendingPidCleanups	scheduler.h	/^        g_vector<std::pair<uint32_t, uint32_t>> pendingPidCleanups; \/\/(pid, osPid) pairs of abruptly terminated processes$/;"	m	class:Scheduler
pendingQueue	timing_cache.h	/^        g_vector<TimingEvent*> pendingQueue;$/;"	m	class:TimingCache
perProcessCpuEnum	zsim.h	/^    bool perProcessCpuEnum; \/\/if true, cpus are enumerated according to per-process masks (e.g., a 16-core mask in a 64-core sim sees 16 cores)$/;"	m	struct:GlobSimInfo
perProcessDir	zsim_harness.cpp	/^bool perProcessDir, aslr;$/;"	v
perProcessEndFlag	zsim.cpp	/^volatile uint32_t perProcessEndFlag;$/;"	v
period	event_queue.h	/^        uint64_t period;$/;"	m	class:Event
periodicStatsBackend	zsim.h	/^    StatsBackend* periodicStatsBackend;$/;"	m	struct:GlobSimInfo
pf	prefetcher.cpp	/^        StreamPrefetcher* pf;$/;"	m	class:PrefetchResponseEvent	file:
phaseCount	barrier.h	/^        uint32_t phaseCount; \/\/INTERNAL, for LEFT->OFFLINE bookkeeping overhead reduction purposes$/;"	m	class:Barrier
phaseEndCycle	null_core.h	/^        uint64_t phaseEndCycle; \/\/next stopping point$/;"	m	class:NullCore
phaseEndCycle	ooo_core.h	/^        uint64_t phaseEndCycle; \/\/next stopping point$/;"	m	class:OOOCore
phaseEndCycle	simple_core.h	/^        uint64_t phaseEndCycle; \/\/next stopping point$/;"	m	class:SimpleCore
phaseEndCycle	timing_core.h	/^        uint64_t phaseEndCycle; \/\/phase 1 end clock$/;"	m	class:TimingCore
phaseLength	zsim.h	/^    uint32_t phaseLength;$/;"	m	struct:GlobSimInfo
pht	ooo_core.h	/^        uint8_t pht[1 << LB];$/;"	m	class:BranchPredictorPAg
pickVictimWay	page_placement.cpp	/^PagePlacementPolicy::pickVictimWay(ChunkInfo * chunk_info)$/;"	f	class:PagePlacementPolicy
pid	g_heap/dlmalloc.h.c	/^    pid_t pid;$/;"	m	struct:threadid_t	file:
pid	zsim_harness.cpp	/^    int pid;$/;"	m	struct:ProcInfo	file:
pinCmd	zsim.h	/^    PinCmd* pinCmd; \/\/enables calls to exec() to modify Pin's calling arguments, see zsim.cpp$/;"	m	struct:GlobSimInfo
pinCmd	zsim_harness.cpp	/^PinCmd* pinCmd;$/;"	v
pinuse	g_heap/dlmalloc.h.c	2220;"	d	file:
playAllGets	trace_driver.h	/^        bool playAllGets; \/\/If true, if we have a get to an address that we already have, issue a put immediately before.$/;"	m	class:TraceDriver
playPuts	trace_driver.h	/^        bool playPuts; \/\/If true, issues PUTS\/PUTX requests as they appear in the trace. If false, it just issues the GETS\/X requests, leaving it up to the parent to decide when to evict something (NOTE: if the parent is running OPT, it knows better!)$/;"	m	class:TraceDriver
pointer	g_std/stl_galloc.h	/^        typedef T* pointer;$/;"	t	class:StlGlobAlloc
poisonRange	ooo_core.h	/^        void poisonRange(uint64_t curCycle, uint64_t targetCycle, uint8_t portMask) {$/;"	f	class:WindowStructure
popRecord	event_recorder.h	/^        inline TimingRecord popRecord() __attribute__((always_inline)) {$/;"	f	class:EventRecorder
pop_back	intrusive_list.h	/^        void pop_back() {$/;"	f	class:InList
pop_front	intrusive_list.h	/^        void pop_front() {$/;"	f	class:InList
populateRegArrays	decoder.cpp	/^void Decoder::populateRegArrays(Instr& instr, uint32_t* srcRegs, uint32_t* dstRegs) {$/;"	f	class:Decoder
portDomain	process_tree.h	/^        const uint32_t portDomain;$/;"	m	class:ProcessTreeNode
portMask	decoder.h	/^    uint8_t portMask;$/;"	m	struct:DynUop
portVirt	zsim.h	/^    PortVirtualizer* portVirt[MAX_PORT_DOMAINS];$/;"	m	struct:GlobSimInfo
pos	cache_arrays.h	/^    uint32_t pos;$/;"	m	struct:ZWalkInfo
postDelay	detailed_mem.h	/^        uint32_t postDelay[NUM_ACCESS_TYPES];$/;"	m	class:MemControllerBase
postDelay	timing_event.h	/^        uint32_t postDelay; \/\/we could get by with one delay, but pre\/post makes it easier to code$/;"	m	class:TimingEvent
postDelay	weave_md1_mem.h	/^        uint32_t preDelay, postDelay;$/;"	m	class:WeaveMD1Memory
postDelay	weave_md1_mem.h	/^        uint32_t preDelay, postDelay;$/;"	m	class:WeaveSimpleMemory
postDelayRd	ddr_mem.h	/^        uint32_t preDelay, postDelayRd, postDelayWr;$/;"	m	class:DDRMemory
postDelayWr	ddr_mem.h	/^        uint32_t preDelay, postDelayRd, postDelayWr;$/;"	m	class:DDRMemory
postInit	contention_sim.cpp	/^void ContentionSim::postInit() {$/;"	f	class:ContentionSim
postMortemLock	contention_sim.h	/^        lock_t postMortemLock;$/;"	m	class:ContentionSim
postPatchFunctions	virt/virt.cpp	/^PostPatchFn postPatchFunctions[MAX_THREADS];$/;"	v
postSlack	timing_event.h	/^        uint32_t preSlack, postSlack;$/;"	m	class:CrossingEvent
postinsert	cache_arrays.cpp	/^void SetAssocArray::postinsert(const Address lineAddr, const MemReq* req, uint32_t candidate) {$/;"	f	class:SetAssocArray
postinsert	cache_arrays.cpp	/^void ZArray::postinsert(const Address lineAddr, const MemReq* req, uint32_t candidate) {$/;"	f	class:ZArray
postinsert	ideal_arrays.h	/^        void postinsert(const Address lineAddr, const MemReq* req, uint32_t lineId) {$/;"	f	class:IdealLRUArray
postinsert	ideal_arrays.h	/^        void postinsert(const Address lineAddr, const MemReq* req, uint32_t lineId) {$/;"	f	class:IdealLRUPartArray
powerDownCycle	detailed_mem_params.h	/^        uint32_t powerDownCycle;$/;"	m	class:MemParam
powerValue	detailed_mem.h	/^        struct powerValue {$/;"	s	class:MemControllerBase
pp_callback	debug_zsim.cpp	/^static int pp_callback(dl_phdr_info* info, size_t size, void* data) {$/;"	f	file:
pq	contention_sim.h	/^            PrioQueue<TimingEvent, PQ_BLOCKS> pq;$/;"	m	struct:ContentionSim::DomainData
pqLock	contention_sim.h	/^            lock_t pqLock; \/\/used on phase 1 enqueues$/;"	m	struct:ContentionSim::DomainData
preDelay	ddr_mem.h	/^        uint32_t preDelay, postDelayRd, postDelayWr;$/;"	m	class:DDRMemory
preDelay	detailed_mem.h	/^        uint32_t preDelay[NUM_ACCESS_TYPES];$/;"	m	class:MemControllerBase
preDelay	timing_event.h	/^        uint32_t preDelay;$/;"	m	class:TimingEvent
preDelay	weave_md1_mem.h	/^        uint32_t preDelay, postDelay;$/;"	m	class:WeaveMD1Memory
preDelay	weave_md1_mem.h	/^        uint32_t preDelay, postDelay;$/;"	m	class:WeaveSimpleMemory
prePatchFunctions	virt/virt.cpp	/^PrePatchFn prePatchFunctions[MAX_SYSCALLS];$/;"	v
preSlack	timing_event.h	/^        uint32_t preSlack, postSlack;$/;"	m	class:CrossingEvent
prechargeCount	detailed_mem.h	/^        uint64_t prechargeCount;$/;"	m	class:MemRankBase
pred	prefetcher.h	/^        bool pred() const { return count >= T; }$/;"	f	class:SatCounter
predFalseMemOp	ooo_core.cpp	/^void OOOCore::predFalseMemOp() {$/;"	f	class:OOOCore
predLoadPtr	core.h	/^    void (*predLoadPtr)(THREADID, ADDRINT, BOOL);$/;"	m	struct:InstrFuncPtrs
predStorePtr	core.h	/^    void (*predStorePtr)(THREADID, ADDRINT, BOOL);$/;"	m	struct:InstrFuncPtrs
predict	ooo_core.h	/^        inline bool predict(Address branchPc, bool taken) {$/;"	f	class:BranchPredictorPAg
prefetchPos	prefetcher.cpp	/^        const uint32_t prefetchPos;$/;"	m	class:PrefetchResponseEvent	file:
preinsert	cache_arrays.cpp	/^uint32_t SetAssocArray::preinsert(const Address lineAddr, const MemReq* req, Address* wbLineAddr) { \/\/TODO: Give out valid bit of wb cand?$/;"	f	class:SetAssocArray
preinsert	cache_arrays.cpp	/^uint32_t ZArray::preinsert(const Address lineAddr, const MemReq* req, Address* wbLineAddr) {$/;"	f	class:ZArray
preinsert	ideal_arrays.h	/^        uint32_t preinsert(const Address lineAddr, const MemReq* req, Address* wbLineAddr) {$/;"	f	class:IdealLRUArray
preinsert	ideal_arrays.h	/^        uint32_t preinsert(const Address lineAddr, const MemReq* req, Address* wbLineAddr) {$/;"	f	class:IdealLRUPartArray
prepend_alloc	g_heap/dlmalloc.h.c	/^static void* prepend_alloc(mstate m, char* newbase, char* oldbase,$/;"	f	file:
prev	intrusive_list.h	/^    T* prev;$/;"	m	struct:InListNode
prevActvPowerDownCycle	detailed_mem.h	/^        uint64_t prevActvPowerDownCycle;$/;"	m	class:MemRankBase
prevBbl	ooo_core.h	/^        BblInfo* prevBbl;$/;"	m	class:OOOCore
prevIdlePowerDownCycle	detailed_mem.h	/^        uint64_t prevIdlePowerDownCycle;$/;"	m	class:MemRankBase
prevIdleStandbyCycle	detailed_mem.h	/^        uint64_t prevIdleStandbyCycle;$/;"	m	class:MemRankBase
prevRespCycle	core_recorder.h	/^        uint64_t prevRespCycle;$/;"	m	class:CoreRecorder
prevRespEvent	core_recorder.h	/^        TimingEvent* prevRespEvent;$/;"	m	class:CoreRecorder
prev_chunk	g_heap/dlmalloc.h.c	2234;"	d	file:
prev_foot	g_heap/dlmalloc.h.c	/^  size_t                    prev_foot;$/;"	m	struct:malloc_tree_chunk	file:
prev_foot	g_heap/dlmalloc.h.c	/^  size_t               prev_foot;  \/* Size of previous chunk (if free).  *\/$/;"	m	struct:malloc_chunk	file:
printHeartbeat	zsim_harness.cpp	/^static void printHeartbeat(GlobSimInfo* zinfo) {$/;"	f	file:
printProgress	sorttrace.cpp	/^void printProgress(uint64_t read, uint64_t written, uint64_t total) {$/;"	f
printState	scheduler.h	/^        void printState() {$/;"	f	class:Scheduler
printThreadState	scheduler.h	/^        void printThreadState(uint32_t pid, uint32_t tid) {$/;"	f	class:Scheduler
prio	contention_sim.h	/^            uint32_t prio;$/;"	m	struct:ContentionSim::DomainData
prioritizedAccessType	detailed_mem.h	/^        MemAccessType prioritizedAccessType;$/;"	m	class:MemSchedulerDefault
privCycle	timing_event.h	/^        uint64_t privCycle; \/\/only touched by ContentionSim$/;"	m	class:TimingEvent
pro-attribs	html/classCache.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classIdealLRUPartReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classLRUReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classMTRand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classMemChannelBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classMemControllerBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classMemParam.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classMemRankBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classMemSchedulerBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classNullCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classPartReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classPartitionMonitor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classPartitioner.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classSetAssocArray.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classSimpleCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-attribs	html/classVectorStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pro-methods	html/classCache.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	html/classLegacyReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	html/classMTRand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	html/classMemChannelBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	html/classMemControllerBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	html/classMemParam.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	html/classNullCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	html/classSimpleCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	html/classStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-methods	html/classTimingEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"><\/a>$/;"	a
pro-static-attribs	html/classMemControllerBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-attribs"><\/a>$/;"	a
pro-static-methods	html/classMTRand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"><\/a>$/;"	a
pro-static-methods	html/classNullCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"><\/a>$/;"	a
pro-static-methods	html/classSimpleCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"><\/a>$/;"	a
pro-types	html/classMTRand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-types"><\/a>$/;"	a
pro-types	html/classMemParam.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-types"><\/a>$/;"	a
pro-types	html/classMemSchedulerBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-types"><\/a>$/;"	a
procArray	zsim.h	/^    ProcessTreeNode** procArray; \/\/a flat view of the process tree, where each process is indexed by procIdx$/;"	m	struct:GlobSimInfo
procEventualDumps	zsim.h	/^    uint64_t procEventualDumps;$/;"	m	struct:GlobSimInfo
procExited	zsim.h	/^    ProcExitStatus* procExited; \/\/starts with all set to PROC_RUNNING, each process sets to PROC_EXITED or PROC_RESTARTME on exit. Used to detect untimely deaths (that don;t go thropugh SimEnd) in the harness and abort.$/;"	m	struct:GlobSimInfo
procIdx	process_tree.h	/^        uint32_t procIdx;$/;"	m	class:ProcessTreeNode
procIdx	zsim.cpp	/^uint32_t procIdx;$/;"	v
procInfo	pin_cmd.h	/^        g_vector<ProcCmdInfo> procInfo; \/\/one entry for each process that the harness launches (not for child procs)$/;"	m	class:PinCmd
procMask	zsim.cpp	/^Address procMask;$/;"	v
procStats	proc_stats.h	/^        AggregateStat* procStats;  \/\/ stats produced$/;"	m	class:ProcStats
procStats	zsim.h	/^    ProcStats* procStats;$/;"	m	struct:GlobSimInfo
procTree	zsim.h	/^    ProcessTreeNode* procTree;$/;"	m	struct:GlobSimInfo
procTreeNode	zsim.cpp	/^static ProcessTreeNode* procTreeNode;$/;"	v	file:
processAccess	coherence_ctrls.cpp	/^uint64_t MESIBottomCC::processAccess(Address lineAddr, uint32_t lineId, AccessType type, uint64_t cycle, uint32_t srcId, uint32_t flags) {$/;"	f	class:MESIBottomCC
processAccess	coherence_ctrls.cpp	/^uint64_t MESITopCC::processAccess(Address lineAddr, uint32_t lineId, AccessType type, uint32_t childId, bool haveExclusive,$/;"	f	class:MESITopCC
processAccess	coherence_ctrls.h	/^        uint64_t processAccess(const MemReq& req, int32_t lineId, uint64_t startCycle,  uint64_t* getDoneCycle = nullptr) {$/;"	f	class:MESITerminalCC
processAccess	coherence_ctrls.h	/^        uint64_t processAccess(const MemReq& req, int32_t lineId, uint64_t startCycle, uint64_t* getDoneCycle = nullptr) {$/;"	f	class:MESICC
processCleanup	scheduler.h	/^        void processCleanup(uint32_t pid) {$/;"	f	class:Scheduler
processCycles	process_stats.h	/^        g_vector<uint64_t> processCycles, processInstrs;$/;"	m	class:ProcessStats
processEviction	coherence_ctrls.cpp	/^uint64_t MESIBottomCC::processEviction(Address wbLineAddr, uint32_t lineId, bool lowerLevelWriteback, uint64_t cycle, uint32_t srcId) {$/;"	f	class:MESIBottomCC
processEviction	coherence_ctrls.cpp	/^uint64_t MESITopCC::processEviction(Address wbLineAddr, uint32_t lineId, bool* reqWriteback, uint64_t cycle, uint32_t srcId) {$/;"	f	class:MESITopCC
processEviction	coherence_ctrls.h	/^        uint64_t processEviction(const MemReq& triggerReq, Address wbLineAddr, int32_t lineId, uint64_t startCycle) {$/;"	f	class:MESICC
processEviction	coherence_ctrls.h	/^        uint64_t processEviction(const MemReq& triggerReq, Address wbLineAddr, int32_t lineId, uint64_t startCycle) {$/;"	f	class:MESITerminalCC
processInstrs	process_stats.h	/^        g_vector<uint64_t> processCycles, processInstrs;$/;"	m	class:ProcessStats
processInv	coherence_ctrls.h	/^        uint64_t processInv(const InvReq& req, int32_t lineId, uint64_t startCycle) {$/;"	f	class:MESICC
processInv	coherence_ctrls.h	/^        uint64_t processInv(const InvReq& req, int32_t lineId, uint64_t startCycle) {$/;"	f	class:MESITerminalCC
processInval	coherence_ctrls.cpp	/^uint64_t MESITopCC::processInval(Address lineAddr, uint32_t lineId, InvType type, bool* reqWriteback, uint64_t cycle, uint32_t srcId) {$/;"	f	class:MESITopCC
processInval	coherence_ctrls.cpp	/^void MESIBottomCC::processInval(Address lineAddr, uint32_t lineId, InvType type, bool* reqWriteback) {$/;"	f	class:MESIBottomCC
processNonInclusiveWriteback	coherence_ctrls.cpp	/^uint64_t MESIBottomCC::processNonInclusiveWriteback(Address lineAddr, AccessType type, uint64_t cycle, MESIState* state, uint32_t srcId, uint32_t flags) {$/;"	f	class:MESIBottomCC
processOffsetNs	zsim.h	/^    uint64_t processOffsetNs;$/;"	m	struct:ClockDomainInfo
processStats	zsim.h	/^    ProcessStats* processStats;$/;"	m	struct:GlobSimInfo
processWritebackOnAccess	coherence_ctrls.cpp	/^void MESIBottomCC::processWritebackOnAccess(Address lineAddr, uint32_t lineId, AccessType type) {$/;"	f	class:MESIBottomCC
produceCrossings	timing_event.cpp	/^void TimingEvent::produceCrossings(EventRecorder* evRec) {$/;"	f	class:TimingEvent
profAAE	repl_policies.h	/^        Counter profAAE, profNoViolEv; \/\/access after eviction violation$/;"	m	class:ProfViolReplPolicy
profAccAvgPower	detailed_mem.h	/^        Counter profAccAvgPower[pwCounterNum];$/;"	m	class:MemControllerBase
profAccesses	prefetcher.h	/^        Counter profAccesses, profPrefetches, profDoublePrefetches, profPageHits, profHits, profShortHits, profStrideSwitches, profLowConfAccs;$/;"	m	class:StreamPrefetcher
profActivate	detailed_mem.h	/^        Counter profActivate;$/;"	m	class:MemControllerBase
profBandwidth	detailed_mem.h	/^        Counter profBandwidth[bwCounterNum];$/;"	m	class:MemControllerBase
profClampedLoads	mem_ctrls.h	/^        Counter profClampedLoads;$/;"	m	class:MD1Memory
profCrossInv	trace_driver.h	/^            Counter profCrossInv; \/\/invalidations in response to another access$/;"	m	struct:TraceDriver::ChildInfo
profCurAvgPower	detailed_mem.h	/^        Counter profCurAvgPower[pwCounterNum];$/;"	m	class:MemControllerBase
profDecodeStalls	ooo_core.h	/^        Counter profFetchStalls, profDecodeStalls, profIssueStalls;$/;"	m	class:OOOCore
profDemotions	part_repl_policies.h	/^            Counter profDemotions;$/;"	m	struct:VantageReplPolicy::VantagePartInfo
profDoublePrefetches	prefetcher.h	/^        Counter profAccesses, profPrefetches, profDoublePrefetches, profPageHits, profHits, profShortHits, profStrideSwitches, profLowConfAccs;$/;"	m	class:StreamPrefetcher
profEvictions	part_repl_policies.h	/^            Counter profEvictions;$/;"	m	struct:VantageReplPolicy::VantagePartInfo
profExtEvictions	part_repl_policies.h	/^    Counter profExtEvictions; \/\/ from other partitions (if too large, we're probably doing something wrong, e.g., too small an adjustment period)$/;"	m	struct:PartInfo
profExtendedSizeCycles	part_repl_policies.h	/^            Counter profExtendedSizeCycles;$/;"	m	struct:VantageReplPolicy::VantagePartInfo
profFWD	coherence_ctrls.h	/^        Counter profINV, profINVX, profFWD \/*received from upstream*\/;$/;"	m	class:MESIBottomCC
profFetchStalls	ooo_core.h	/^        Counter profFetchStalls, profDecodeStalls, profIssueStalls;$/;"	m	class:OOOCore
profGETNetLat	coherence_ctrls.h	/^        Counter profGETNextLevelLat, profGETNetLat;$/;"	m	class:MESIBottomCC
profGETNextLevelLat	coherence_ctrls.h	/^        Counter profGETNextLevelLat, profGETNetLat;$/;"	m	class:MESIBottomCC
profGETSHit	coherence_ctrls.h	/^        Counter profGETSHit, profGETSMiss, profGETXHit, profGETXMissIM \/*from invalid*\/, profGETXMissSM \/*from S, i.e. upgrade misses*\/;$/;"	m	class:MESIBottomCC
profGETSMiss	coherence_ctrls.h	/^        Counter profGETSHit, profGETSMiss, profGETXHit, profGETXMissIM \/*from invalid*\/, profGETXMissSM \/*from S, i.e. upgrade misses*\/;$/;"	m	class:MESIBottomCC
profGETXHit	coherence_ctrls.h	/^        Counter profGETSHit, profGETSMiss, profGETXHit, profGETXMissIM \/*from invalid*\/, profGETXMissSM \/*from S, i.e. upgrade misses*\/;$/;"	m	class:MESIBottomCC
profGETXMissIM	coherence_ctrls.h	/^        Counter profGETSHit, profGETSMiss, profGETXHit, profGETXMissIM \/*from invalid*\/, profGETXMissSM \/*from S, i.e. upgrade misses*\/;$/;"	m	class:MESIBottomCC
profGETXMissSM	coherence_ctrls.h	/^        Counter profGETSHit, profGETSMiss, profGETXHit, profGETXMissIM \/*from invalid*\/, profGETXMissSM \/*from S, i.e. upgrade misses*\/;$/;"	m	class:MESIBottomCC
profHeartbeats	zsim.h	/^    VectorCounter* profHeartbeats; \/\/global b\/c number of processes cannot be inferred at init time; we just size to max$/;"	m	struct:GlobSimInfo
profHitLat	timing_cache.h	/^        Counter profHitLat, profMissRespLat, profMissLat;$/;"	m	class:TimingCache
profHits	part_repl_policies.h	/^    Counter profHits;$/;"	m	struct:PartInfo
profHits	prefetcher.h	/^        Counter profAccesses, profPrefetches, profDoublePrefetches, profPageHits, profHits, profShortHits, profStrideSwitches, profLowConfAccs;$/;"	m	class:StreamPrefetcher
profHits	utility_monitor.h	/^        Counter profHits;$/;"	m	class:UMon
profINV	coherence_ctrls.h	/^        Counter profINV, profINVX, profFWD \/*received from upstream*\/;$/;"	m	class:MESIBottomCC
profINVX	coherence_ctrls.h	/^        Counter profINV, profINVX, profFWD \/*received from upstream*\/;$/;"	m	class:MESIBottomCC
profIncomingCrossingHist	contention_sim.h	/^            VectorCounter profIncomingCrossingHist;$/;"	m	struct:ContentionSim::DomainData
profIncomingCrossingSims	contention_sim.h	/^            VectorCounter profIncomingCrossingSims;$/;"	m	struct:ContentionSim::DomainData
profIncomingCrossings	contention_sim.h	/^            VectorCounter profIncomingCrossings;$/;"	m	struct:ContentionSim::DomainData
profInvx	trace_driver.h	/^            Counter profInvx;$/;"	m	struct:TraceDriver::ChildInfo
profIssueStalls	ooo_core.h	/^        Counter profFetchStalls, profDecodeStalls, profIssueStalls;$/;"	m	class:OOOCore
profLat	trace_driver.h	/^            Counter profLat;$/;"	m	struct:TraceDriver::ChildInfo
profLoad	mem_ctrls.h	/^        Counter profLoad;$/;"	m	class:MD1Memory
profLowConfAccs	prefetcher.h	/^        Counter profAccesses, profPrefetches, profDoublePrefetches, profPageHits, profHits, profShortHits, profStrideSwitches, profLowConfAccs;$/;"	m	class:StreamPrefetcher
profMissLat	timing_cache.h	/^        Counter profHitLat, profMissRespLat, profMissLat;$/;"	m	class:TimingCache
profMissRespLat	timing_cache.h	/^        Counter profHitLat, profMissRespLat, profMissLat;$/;"	m	class:TimingCache
profMisses	part_repl_policies.h	/^    Counter profMisses;$/;"	m	struct:PartInfo
profMisses	utility_monitor.h	/^        Counter profMisses;$/;"	m	class:UMon
profNoViolAcc	repl_policies.h	/^        Counter profRAW, profWAR, profRAR, profWAW, profNoViolAcc;$/;"	m	class:ProfViolReplPolicy
profNoViolEv	repl_policies.h	/^        Counter profAAE, profNoViolEv; \/\/access after eviction violation$/;"	m	class:ProfViolReplPolicy
profOccHist	timing_cache.h	/^        CycleBreakdownStat profOccHist;$/;"	m	class:TimingCache
profPUTS	coherence_ctrls.h	/^        Counter profPUTS, profPUTX \/*received from downstream*\/;$/;"	m	class:MESIBottomCC
profPUTX	coherence_ctrls.h	/^        Counter profPUTS, profPUTX \/*received from downstream*\/;$/;"	m	class:MESIBottomCC
profPageHits	prefetcher.h	/^        Counter profAccesses, profPrefetches, profDoublePrefetches, profPageHits, profHits, profShortHits, profStrideSwitches, profLowConfAccs;$/;"	m	class:StreamPrefetcher
profPrecharge	detailed_mem.h	/^        Counter profPrecharge;$/;"	m	class:MemControllerBase
profPrefetches	prefetcher.h	/^        Counter profAccesses, profPrefetches, profDoublePrefetches, profPageHits, profHits, profShortHits, profStrideSwitches, profLowConfAccs;$/;"	m	class:StreamPrefetcher
profPromotions	part_repl_policies.h	/^        Counter profPromotions;$/;"	m	class:VantageReplPolicy
profRAR	repl_policies.h	/^        Counter profRAW, profWAR, profRAR, profWAW, profNoViolAcc;$/;"	m	class:ProfViolReplPolicy
profRAW	repl_policies.h	/^        Counter profRAW, profWAR, profRAR, profWAW, profNoViolAcc;$/;"	m	class:ProfViolReplPolicy
profReadHits	ddr_mem.h	/^        Counter profReadHits, profWriteHits;  \/\/ row buffer hits$/;"	m	class:DDRMemory
profReads	ddr_mem.h	/^        Counter profReads, profWrites;$/;"	m	class:DDRMemory
profReads	detailed_mem.h	/^        Counter profReads;$/;"	m	class:MemControllerBase
profReads	dramsim_mem_ctrl.h	/^        Counter profReads;$/;"	m	class:DRAMSimMemory
profReads	mem_ctrls.h	/^        Counter profReads;$/;"	m	class:MD1Memory
profRefresh	detailed_mem.h	/^        Counter profRefresh;$/;"	m	class:MemControllerBase
profSelfEvictions	part_repl_policies.h	/^    Counter profSelfEvictions; \/\/ from our same partition$/;"	m	struct:PartInfo
profSelfInv	trace_driver.h	/^            Counter profSelfInv; \/\/invalidations in response to our own access$/;"	m	struct:TraceDriver::ChildInfo
profShortHits	prefetcher.h	/^        Counter profAccesses, profPrefetches, profDoublePrefetches, profPageHits, profHits, profShortHits, profStrideSwitches, profLowConfAccs;$/;"	m	class:StreamPrefetcher
profSimTime	zsim.h	/^    TimeBreakdownStat* profSimTime;$/;"	m	struct:GlobSimInfo
profSizeCycles	part_repl_policies.h	/^            Counter profSizeCycles;$/;"	m	struct:VantageReplPolicy::VantagePartInfo
profStrideSwitches	prefetcher.h	/^        Counter profAccesses, profPrefetches, profDoublePrefetches, profPageHits, profHits, profShortHits, profStrideSwitches, profLowConfAccs;$/;"	m	class:StreamPrefetcher
profTime	contention_sim.h	/^            ClockStat profTime;$/;"	m	struct:ContentionSim::DomainData
profTotalRdLat	ddr_mem.h	/^        Counter profTotalRdLat, profTotalWrLat;$/;"	m	class:DDRMemory
profTotalRdLat	detailed_mem.h	/^        Counter profTotalRdLat;$/;"	m	class:MemControllerBase
profTotalRdLat	dramsim_mem_ctrl.h	/^        Counter profTotalRdLat;$/;"	m	class:DRAMSimMemory
profTotalRdLat	mem_ctrls.h	/^        Counter profTotalRdLat;$/;"	m	class:MD1Memory
profTotalWrLat	ddr_mem.h	/^        Counter profTotalRdLat, profTotalWrLat;$/;"	m	class:DDRMemory
profTotalWrLat	detailed_mem.h	/^        Counter profTotalWrLat;$/;"	m	class:MemControllerBase
profTotalWrLat	dramsim_mem_ctrl.h	/^        Counter profTotalWrLat;$/;"	m	class:DRAMSimMemory
profTotalWrLat	mem_ctrls.h	/^        Counter profTotalWrLat;$/;"	m	class:MD1Memory
profUpdateCycles	part_repl_policies.h	/^        Counter profUpdateCycles;$/;"	m	class:VantageReplPolicy
profUpdates	mem_ctrls.h	/^        Counter profUpdates;$/;"	m	class:MD1Memory
profWAR	repl_policies.h	/^        Counter profRAW, profWAR, profRAR, profWAW, profNoViolAcc;$/;"	m	class:ProfViolReplPolicy
profWAW	repl_policies.h	/^        Counter profRAW, profWAR, profRAR, profWAW, profNoViolAcc;$/;"	m	class:ProfViolReplPolicy
profWayHits	utility_monitor.h	/^        VectorCounter profWayHits;$/;"	m	class:UMon
profWriteHits	ddr_mem.h	/^        Counter profReadHits, profWriteHits;  \/\/ row buffer hits$/;"	m	class:DDRMemory
profWrites	ddr_mem.h	/^        Counter profReads, profWrites;$/;"	m	class:DDRMemory
profWrites	detailed_mem.h	/^        Counter profWrites;$/;"	m	class:MemControllerBase
profWrites	dramsim_mem_ctrl.h	/^        Counter profWrites;$/;"	m	class:DRAMSimMemory
profWrites	mem_ctrls.h	/^        Counter profWrites;$/;"	m	class:MD1Memory
profileBbl	decoder.cpp	/^void Decoder::profileBbl(uint64_t bblIdx) {$/;"	f	class:Decoder
profileCrossing	contention_sim.h	/^        void profileCrossing(uint32_t srcDomain, uint32_t dstDomain, uint32_t count) {$/;"	f	class:ContentionSim
propagateDomain	timing_event.h	/^        void propagateDomain(int32_t dom) {$/;"	f	class:TimingEvent
ps	proc_stats.cpp	/^        ProcStats* ps;$/;"	m	class:ProcStats::ProcessCounter	file:
ps	proc_stats.cpp	/^        ProcStats* ps;$/;"	m	class:ProcStats::ProcessVectorCounter	file:
pthread_acquire_lock	g_heap/dlmalloc.h.c	/^static FORCEINLINE int pthread_acquire_lock (MLOCK_T *sl) {$/;"	f	file:
pthread_init_lock	g_heap/dlmalloc.h.c	/^static int pthread_init_lock (MLOCK_T *sl) {$/;"	f	file:
pthread_mlock_t	g_heap/dlmalloc.h.c	/^struct pthread_mlock_t {$/;"	s	file:
pthread_mutexattr_settype	g_heap/dlmalloc.h.c	1929;"	d	file:
pthread_release_lock	g_heap/dlmalloc.h.c	/^static FORCEINLINE void pthread_release_lock (MLOCK_T *sl) {$/;"	f	file:
pthread_try_lock	g_heap/dlmalloc.h.c	/^static FORCEINLINE int pthread_try_lock (MLOCK_T *sl) {$/;"	f	file:
pub-attribs	html/classIdealLRUPartReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classLRUReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classLegacyReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classMemParam.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classMemoryController.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classMissStartEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classPrefetchResponseEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classReplAccessEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classSchedEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classSet.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classTLBEntry.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classTagBufferEntry.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classTimingEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/classWay.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structAccessRecord.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structBblInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structClockDomainInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structCpuIdRecord.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structDynBbl.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structDynUop.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structGlobSimInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structIdealLRUPartReplPolicy_1_1Entry.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structIdealLRUPartReplPolicy_1_1IdPartInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structInListNode.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structInstrFuncPtrs.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structInvReq.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structLibInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structMemControllerBase_1_1powerValue.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structMemParam_1_1IDDs.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structMemReq.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structPackedAccessRecord.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structPartInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structProcInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structRange.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structRequestQueue_1_1iterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structSection.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structSetAssocCands.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structSetAssocCands_1_1iterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structStreamPrefetcher_1_1Entry_1_1AccessTimes.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structTimingEventBlock.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structTimingRecord.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structVdsoPatchData.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structZCands.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structZCands_1_1iterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structZWalkInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structgm__segment.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	html/structslab_1_1Slab.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-methods	html/classAccessTraceReader.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classAccessTraceWriter.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classActWindow.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classAdaptiveEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classAggregateStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classBarrier.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classBaseCache.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classBranchPredictorPAg.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classCC.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classCache.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classCacheArray.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classCallee.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classClockStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classConfig.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classContentionSim.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classCorePartMapper.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classCoreRecorder.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classCounter.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classCrossingEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classCycleBreakdownStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classCycleQueue.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classDDRMemory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classDDRMemoryAccEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classDRAMSimMemory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classDRAMSim_1_1Callback.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classDRAMSim_1_1CallbackBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classDRAMSim_1_1MultiChannelMemorySystem.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classDelayEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classEventQueue.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classEventRecorder.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classFilterCache.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classGlobAlloc.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classH3HashFamily.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classHDF5Backend.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classHDF5BackendImpl.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classHashFamily.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classHitEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classIdHashFamily.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classIdealLRUArray.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classIdealLRUPartArray.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classIdealLRUPartReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classInList.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classInstrDataCorePartMapper.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classInstrDataPartMapper.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classInstrDataProcessPartMapper.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classLFUReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classLRUReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classLambdaStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classLambdaVectorStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classLegacyReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classLinePlacementPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classLookaheadPartitioner.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMD1Memory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMESIBottomCC.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMESICC.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMESITerminalCC.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMESITopCC.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMTRand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMemAccessEventBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMemChannelBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMemControllerBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMemObject.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMemParam.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMemRankBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMemSchedulerBase.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMemSchedulerDefault.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMemoryController.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMissResponseEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMissStartEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classMissWritebackEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classNRUReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classNetwork.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classNullCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classOOOCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classOOOCoreRecorder.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classOOODispatchEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classOOOIssueEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classOOORespEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classOSPlacementPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classPagePlacementPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classPartMapper.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classPartReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classPartitionMonitor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classPartitioner.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classPartitioner_1_1PartitionEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classPinCmd.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classPrefetchResponseEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classPrintExpr.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classPrioQueue.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classProcStats.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classProcStats_1_1ProcessCounter.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classProcStats_1_1ProcessVectorCounter.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classProcessGroupPartMapper.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classProcessPartMapper.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classProcessStats.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classProcessTreeNode.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classProfViolReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classProxyFuncStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classProxyStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classRandReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classRefreshEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classReorderBuffer.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classReplAccessEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classRequestQueue.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classSHA1HashFamily.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classSatCounter.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classScalarStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classSchedEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classScheduler.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classSet.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classSetAssocArray.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classSimpleCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classSimpleMemory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classSplitAddrMemory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classStatsBackend.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classStreamPrefetcher.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classSyncEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTagBuffer.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTextBackend.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTextBackendImpl.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTickEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTimeBreakdownStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTimingCache.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTimingCore.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTimingCoreEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTimingEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTraceDriver.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTraceDriverProxyCache.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTracingCache.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classTreeLRUReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classUMon.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classUMonMonitor.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classVantageReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classVectorCounter.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classVectorStat.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classWayPartReplPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classWeaveMD1Memory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classWeaveMemAccEvent.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classWeaveSimpleMemory.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classWindowStructure.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classZArray.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classmutex.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classrwmutex.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classscoped__mutex.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/classslab_1_1SlabAlloc.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structCpuIdRecord.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structDynBbl.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structDynUop.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structGlobSimInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structIdealLRUPartReplPolicy_1_1Entry.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structInListNode.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structMemReq.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structRange.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structRequestQueue_1_1iterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structSetAssocCands.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structSetAssocCands_1_1iterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structStreamPrefetcher_1_1Entry_1_1AccessTimes.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structTimingEventBlock.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structTimingRecord.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structZCands.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structZCands_1_1iterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structZWalkInfo.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structgm__segment.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	html/structslab_1_1Slab.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-static-methods	html/classDecoder.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-static-methods	html/structDynBbl.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"><\/a>$/;"	a
pub-types	html/classMTRand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	html/classPagePlacementPolicy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pub-types	html/structMemReq.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
pushRecord	event_recorder.h	/^        void pushRecord(const TimingRecord& rec) {$/;"	f	class:EventRecorder
push_back	intrusive_list.h	/^        void push_back(T* e) {$/;"	f	class:InList
push_front	intrusive_list.h	/^        void push_front(T* e) {$/;"	f	class:InList
pvLock	virt/port_virtualizer.h	/^        lock_t pvLock;$/;"	m	class:PortVirtualizer
pwCounterNum	detailed_mem.h	/^        static const uint32_t pwCounterNum = 7;$/;"	m	class:MemControllerBase
qLock	event_queue.h	/^        lock_t qLock;$/;"	m	class:EventQueue
queue	ddr_mem.cpp	/^void DDRMemory::queue(Request* req, uint64_t memCycle) {$/;"	f	class:DDRMemory
queue	tick_event.h	/^        void queue(uint64_t startCycle) {$/;"	f	class:TickEvent
queue	timing_event.cpp	/^void TimingEvent::queue(uint64_t nextCycle) {$/;"	f	class:TimingEvent
queueDepth	ddr_mem.h	/^        const uint32_t queueDepth;$/;"	m	class:DDRMemory
queuePrio	contention_sim.h	/^            uint64_t queuePrio;$/;"	m	struct:ContentionSim::DomainData
queueProcessCleanup	scheduler.h	/^        void queueProcessCleanup(uint32_t pid, uint32_t osPid) {$/;"	f	class:Scheduler
rand	mtrand.h	/^inline double MTRand::rand() { return double(randInt()) * (1.0\/4294967295.0); }$/;"	f	class:MTRand
rand	mtrand.h	/^inline double MTRand::rand(const double n) { return rand() * n; }$/;"	f	class:MTRand
rand53	mtrand.h	/^inline double MTRand::rand53() {$/;"	f	class:MTRand
randDblExc	mtrand.h	/^inline double MTRand::randDblExc() { return (double(randInt()) + 0.5) * (1.0\/4294967296.0); }$/;"	f	class:MTRand
randDblExc	mtrand.h	/^inline double MTRand::randDblExc(const double n) { return randDblExc() * n; }$/;"	f	class:MTRand
randExc	mtrand.h	/^inline double MTRand::randExc() { return double(randInt()) * (1.0\/4294967296.0); }$/;"	f	class:MTRand
randExc	mtrand.h	/^inline double MTRand::randExc(const double n) { return randExc() * n; }$/;"	f	class:MTRand
randInt	mtrand.h	/^inline uint64_t MTRand::randInt() {$/;"	f	class:MTRand
randInt	mtrand.h	/^inline uint64_t MTRand::randInt(const uint64_t n) {$/;"	f	class:MTRand
randNorm	mtrand.h	/^inline double MTRand::randNorm(const double mean, const double stddev) {$/;"	f	class:MTRand
rank	ddr_mem.h	/^            uint32_t rank;$/;"	m	struct:DDRMemory::AddrLoc
rank	ideal_arrays.h	/^                template <typename C> uint32_t rank(const MemReq* req, C cands) {panic("!!!");}$/;"	f	class:IdealLRUArray::ProxyReplPolicy
rank	ideal_arrays.h	/^        template <typename C> uint32_t rank(const MemReq* req, C cands) {panic("!!");}$/;"	f	class:IdealLRUPartReplPolicy
rank	ideal_arrays.h	/^        uint32_t rank(const MemReq* req) {$/;"	f	class:IdealLRUPartReplPolicy
rank	repl_policies.h	/^        template <typename C> inline uint32_t rank(const MemReq* req, C cands) {$/;"	f	class:LRUReplPolicy
rank	repl_policies.h	/^        template <typename C> inline uint32_t rank(const MemReq* req, C cands) {$/;"	f	class:LegacyReplPolicy
rankActWindows	ddr_mem.h	/^        g_vector<ActWindow> rankActWindows;$/;"	m	class:DDRMemory
rankCount	detailed_mem_params.h	/^        uint32_t rankCount;$/;"	m	class:MemParam
rankMask	ddr_mem.h	/^        uint32_t rankShift, rankMask;$/;"	m	class:DDRMemory
rankShift	ddr_mem.h	/^        uint32_t rankShift, rankMask;$/;"	m	class:DDRMemory
rankWidth	detailed_mem_params.h	/^        uint32_t rankWidth;$/;"	m	class:MemParam
ranks	detailed_mem.h	/^        g_vector <MemRankBase*> ranks;$/;"	m	class:MemChannelBase
ranksPerChannel	ddr_mem.h	/^        const uint32_t lineSize, ranksPerChannel, banksPerRank;$/;"	m	class:DDRMemory
rb	mutex.h	/^        mutex rb;$/;"	m	class:rwmutex
rd	decoder.h	/^    uint16_t rd[MAX_UOP_DST_REGS];$/;"	m	struct:DynUop
rdAddr	filter_cache.h	/^            volatile Address rdAddr;$/;"	m	struct:FilterCache::FilterEntry
rdLock	mutex.h	/^        void rdLock() {$/;"	f	class:rwmutex
rdQueue	ddr_mem.h	/^        RequestQueue<Request> rdQueue, wrQueue;$/;"	m	class:DDRMemory
rdQueue	detailed_mem.h	/^        g_vector <MemSchedQueueElem> rdQueue;$/;"	m	class:MemSchedulerDefault
rdReqs	ddr_mem.h	/^            InList<Request> rdReqs;$/;"	m	struct:DDRMemory::Bank
rdUnlock	mutex.h	/^        void rdUnlock() {$/;"	f	class:rwmutex
rdtsc	rdtsc.h	/^static inline uint64_t rdtsc() {$/;"	f
rdtscOffset	zsim.h	/^    uint64_t rdtscOffset;$/;"	m	struct:ClockDomainInfo
read	access_tracing.h	/^        inline AccessRecord read() {$/;"	f	class:AccessTraceReader
read	repl_policies.h	/^            uint64_t read;$/;"	m	struct:ProfViolReplPolicy::AccTimes
readBurstCount	detailed_mem.h	/^        uint64_t readBurstCount;$/;"	m	class:MemRankBase
readDqPin	detailed_mem_params.h	/^        uint32_t readDqPin;$/;"	m	class:MemParam
readTermPin	detailed_mem_params.h	/^        uint32_t readTermPin;$/;"	m	class:MemParam
readers	mutex.h	/^        volatile uint32_t readers;$/;"	m	class:rwmutex
realToVirt	virt/port_virtualizer.h	/^        g_unordered_map<int, int> realToVirt;$/;"	m	class:PortVirtualizer
realtimeOffsetNs	zsim.h	/^    uint64_t realtimeOffsetNs;$/;"	m	struct:ClockDomainInfo
rebind	g_std/stl_galloc.h	/^        template <class U> struct rebind { typedef StlGlobAlloc<U> other; };$/;"	s	class:StlGlobAlloc
record	core_recorder.h	/^        inline void record(uint64_t startCycle) {$/;"	f	class:CoreRecorder
record	ooo_core_recorder.h	/^        inline void record(uint64_t curCycle, uint64_t dispatchCycle, uint64_t respCycle) {$/;"	f	class:OOOCoreRecorder
recordAccess	core_recorder.cpp	/^void CoreRecorder::recordAccess(uint64_t startCycle) {$/;"	f	class:CoreRecorder
recordAccess	ooo_core_recorder.cpp	/^void OOOCoreRecorder::recordAccess(uint64_t curCycle, uint64_t dispatchCycle, uint64_t respCycle) {$/;"	f	class:OOOCoreRecorder
recordCandidate	part_repl_policies.h	/^        void recordCandidate(uint32_t id) {$/;"	f	class:VantageReplPolicy
recordCandidate	part_repl_policies.h	/^        void recordCandidate(uint32_t id) {$/;"	f	class:WayPartReplPolicy
recordCandidate	repl_policies.h	/^        void recordCandidate(uint32_t id) {$/;"	f	class:LFUReplPolicy
recordCandidate	repl_policies.h	/^        void recordCandidate(uint32_t id) {$/;"	f	class:NRUReplPolicy
recordCandidate	repl_policies.h	/^        void recordCandidate(uint32_t id) {$/;"	f	class:RandReplPolicy
recordCandidate	repl_policies.h	/^        void recordCandidate(uint32_t id) {$/;"	f	class:TreeLRUReplPolicy
recordSize	hdf5_stats.cpp	/^        uint64_t recordSize; \/\/ in bytes$/;"	m	class:HDF5BackendImpl	file:
recordsPerWrite	hdf5_stats.cpp	/^        uint32_t recordsPerWrite; \/\/how many records to buffer; determines chunk size as well$/;"	m	class:HDF5BackendImpl	file:
recycleEvent	ddr_mem.cpp	/^void DDRMemory::recycleEvent(SchedEvent* ev) {$/;"	f	class:DDRMemory
refInterval	ddr_mem.cpp	/^        uint32_t refInterval;  \/\/ in sysCycles$/;"	m	class:RefreshEvent	file:
reference	g_std/stl_galloc.h	/^        typedef T& reference;$/;"	t	class:StlGlobAlloc
refresh	ddr_mem.cpp	/^void DDRMemory::refresh(uint64_t sysCycle) {$/;"	f	class:DDRMemory
refresh	detailed_mem.cpp	/^void MemRankBase::refresh(uint64_t lastCycle) {$/;"	f	class:MemRankBase
refresh	detailed_mem.h	/^            uint64_t refresh;$/;"	m	struct:MemControllerBase::powerValue
refreshNum	detailed_mem.h	/^        uint32_t refreshNum;$/;"	m	class:MemRankBase
regScoreboard	ooo_core.h	/^        uint64_t regScoreboard[MAX_REGISTERS]; \/\/contains timestamp of next issue cycles where each reg can be sourced$/;"	m	class:OOOCore
registerBind	virt/port_virtualizer.h	/^        void registerBind(int virt, int real) {$/;"	f	class:PortVirtualizer
registerThreads	zsim.h	/^    bool registerThreads;$/;"	m	struct:GlobSimInfo
regsToString	decoder.cpp	/^static std::string regsToString(uint32_t* regs, uint32_t numRegs) {$/;"	f	file:
release	mutex.h	/^        void release() {$/;"	f	class:scoped_mutex
release	timing_event.h	/^        inline void release() {$/;"	f	class:TimingEvent
release_checks	g_heap/dlmalloc.h.c	/^  size_t     release_checks;$/;"	m	struct:malloc_state	file:
release_unused_segments	g_heap/dlmalloc.h.c	/^static size_t release_unused_segments(mstate m) {$/;"	f	file:
reload	mtrand.h	/^inline void MTRand::reload() {$/;"	f	class:MTRand
remap	mc.h	/^	bool remap;$/;"	m	class:TagBufferEntry
remapPages	os_placement.cpp	/^OSPlacementPolicy::remapPages() $/;"	f	class:OSPlacementPolicy
remove	ddr_mem.h	/^        inline void remove(iterator i) {$/;"	f	class:RequestQueue
remove	intrusive_list.h	/^        void remove(T* e) {$/;"	f	class:InList
reorderRegs	decoder.cpp	/^void Decoder::Instr::reorderRegs(uint32_t* array, uint32_t regs) {$/;"	f	class:Decoder::Instr
repl	partitioner.h	/^        PartReplPolicy* repl;$/;"	m	class:LookaheadPartitioner
replCycle	repl_policies.h	/^        uint64_t replCycle;$/;"	m	class:ProfViolReplPolicy
replStat	proc_stats.cpp	/^Stat* ProcStats::replStat(Stat* s, const char* name, const char* desc) {$/;"	f	class:ProcStats
replace	filter_cache.h	/^        uint64_t replace(Address vLineAddr, uint32_t idx, bool isLoad, uint64_t curCycle) {$/;"	f	class:FilterCache
replace_dv	g_heap/dlmalloc.h.c	3568;"	d	file:
replaced	ideal_arrays.h	/^                void replaced(uint32_t id) {panic("!!");}$/;"	f	class:IdealLRUArray::ProxyReplPolicy
replaced	ideal_arrays.h	/^        void replaced(uint32_t id) {$/;"	f	class:IdealLRUPartReplPolicy
replaced	part_repl_policies.h	/^        void replaced(uint32_t id) {$/;"	f	class:VantageReplPolicy
replaced	part_repl_policies.h	/^        void replaced(uint32_t id) {$/;"	f	class:WayPartReplPolicy
replaced	repl_policies.h	/^        void replaced(uint32_t id) {$/;"	f	class:LFUReplPolicy
replaced	repl_policies.h	/^        void replaced(uint32_t id) {$/;"	f	class:LRUReplPolicy
replaced	repl_policies.h	/^        void replaced(uint32_t id) {$/;"	f	class:NRUReplPolicy
replaced	repl_policies.h	/^        void replaced(uint32_t id) {$/;"	f	class:ProfViolReplPolicy
replaced	repl_policies.h	/^        void replaced(uint32_t id) {$/;"	f	class:RandReplPolicy
replaced	repl_policies.h	/^        void replaced(uint32_t id) {$/;"	f	class:TreeLRUReplPolicy
reportEventSimulated	core_recorder.cpp	/^void CoreRecorder::reportEventSimulated(TimingCoreEvent* ev) {$/;"	f	class:CoreRecorder
reportFinish	detailed_mem_params.h	/^        uint64_t reportFinish;$/;"	m	class:MemParam
reportIssueEventSimulated	ooo_core_recorder.cpp	/^void OOOCoreRecorder::reportIssueEventSimulated(OOOIssueEvent* ev, uint64_t startCycle) {$/;"	f	class:OOOCoreRecorder
reportPeriodCycle	detailed_mem.h	/^        uint64_t reportPeriodCycle;$/;"	m	class:MemControllerBase
reportPhase	detailed_mem_params.h	/^        uint32_t reportPhase;$/;"	m	class:MemParam
reportStart	detailed_mem_params.h	/^        uint64_t reportStart;$/;"	m	class:MemParam
reportUnhandledCase	decoder.cpp	/^void Decoder::reportUnhandledCase(Instr& instr, const char* desc) {$/;"	f	class:Decoder
reqCycle	access_tracing.h	/^    uint64_t reqCycle;$/;"	m	struct:AccessRecord
reqCycle	access_tracing.h	/^    uint64_t reqCycle;$/;"	m	struct:PackedAccessRecord
reqCycle	event_recorder.h	/^    uint64_t reqCycle;$/;"	m	struct:TimingRecord
reqFlags	filter_cache.h	/^        uint32_t reqFlags;$/;"	m	class:FilterCache
reqList	ddr_mem.h	/^        InList<Node> reqList;  \/\/ FIFO$/;"	m	class:RequestQueue
request2size	g_heap/dlmalloc.h.c	2195;"	d	file:
requeue	timing_event.cpp	/^void TimingEvent::requeue(uint64_t nextCycle) {$/;"	f	class:TimingEvent
resShift	hash.h	/^        uint32_t resShift;$/;"	m	class:H3HashFamily
reset	monitor.cpp	/^void UMonMonitor::reset() {$/;"	f	class:UMonMonitor
reset	prefetcher.h	/^        void reset() { count = I; }$/;"	f	class:SatCounter
reset	repl_policies.h	/^            void reset() {$/;"	f	struct:LFUReplPolicy::Rank
reset_on_error	g_heap/dlmalloc.h.c	/^static void reset_on_error(mstate m) {$/;"	f	file:
resolvepath	virt/fs.cpp	/^string resolvepath(const string& path) {$/;"	f
respCycle	event_recorder.h	/^    uint64_t respCycle;$/;"	m	struct:TimingRecord
respCycle	prefetcher.h	/^                uint64_t respCycle;$/;"	m	struct:StreamPrefetcher::Entry::AccessTimes
respEvents	prefetcher.h	/^            std::array<PrefetchResponseEvent*, 64> respEvents;$/;"	m	struct:StreamPrefetcher::Entry
restartsLeft	process_tree.h	/^        uint32_t restartsLeft;$/;"	m	class:ProcessTreeNode
retryPtrs	zsim.cpp	/^static const InstrFuncPtrs retryPtrs = {NOPLoadStoreSingle, NOPLoadStoreSingle, NOPBasicBlock, NOPRecordBranch, NOPPredLoadStoreSingle, NOPPredLoadStoreSingle, FPTR_RETRY};$/;"	v	file:
rnd	barrier.h	/^        MTRand rnd;$/;"	m	class:Barrier
rnd	repl_policies.h	/^        MTRand rnd;$/;"	m	class:RandReplPolicy
rnd	scheduler.h	/^        MTRand rnd;$/;"	m	class:Scheduler
rng	part_repl_policies.h	/^        MTRand rng;$/;"	m	class:VantageReplPolicy
rob	ooo_core.h	/^        ReorderBuffer<128, 4> rob;$/;"	m	class:OOOCore
rootStat	hdf5_stats.cpp	/^        AggregateStat* rootStat;$/;"	m	class:HDF5BackendImpl	file:
rootStat	text_stats.cpp	/^        AggregateStat* rootStat;$/;"	m	class:TextBackendImpl	file:
rootStat	zsim.h	/^    AggregateStat* rootStat;$/;"	m	struct:GlobSimInfo
row	ddr_mem.h	/^            uint64_t row;$/;"	m	struct:DDRMemory::AddrLoc
rowAddrWidth	detailed_mem_params.h	/^        uint32_t rowAddrWidth;$/;"	m	class:MemParam
rowBufferPolicy	detailed_mem_params.h	/^        uint32_t rowBufferPolicy;$/;"	m	class:MemParam
rowHitLimit	ddr_mem.h	/^        const uint32_t rowHitLimit; \/\/ row hits not prioritized in FR-FCFS beyond this point$/;"	m	class:DDRMemory
rowHitSeq	ddr_mem.h	/^            uint64_t rowHitSeq; \/\/ sequence number used to throttle max # row hits$/;"	m	struct:DDRMemory::Request
rowShift	ddr_mem.h	/^        uint64_t rowShift;  \/\/ row's always top$/;"	m	class:DDRMemory
rp	cache.h	/^        ReplPolicy* rp;$/;"	m	class:Cache
rp	cache_arrays.h	/^        ReplPolicy* rp;$/;"	m	class:SetAssocArray
rp	cache_arrays.h	/^        ReplPolicy* rp;$/;"	m	class:ZArray
rp	ideal_arrays.h	/^        IdealLRUPartReplPolicy* rp;$/;"	m	class:IdealLRUPartArray
rp	ideal_arrays.h	/^        ProxyReplPolicy* rp;$/;"	m	class:IdealLRUArray
rs	decoder.h	/^    uint16_t rs[MAX_UOP_SRC_REGS];$/;"	m	struct:DynUop
run	timing_event.h	/^        inline void run(uint64_t startCycle) {$/;"	f	class:TimingEvent
runList	barrier.h	/^        uint32_t* runList;$/;"	m	class:Barrier
runListSize	barrier.h	/^        uint32_t runListSize;$/;"	m	class:Barrier
runQueue	scheduler.h	/^        InList<ThreadInfo> runQueue;$/;"	m	class:Scheduler
runQueueHist	scheduler.h	/^        VectorCounter occHist, runQueueHist;$/;"	m	class:Scheduler
runningThreads	barrier.h	/^        uint32_t runningThreads; \/\/threads in RUNNING state$/;"	m	class:Barrier
rwmutex	mutex.h	/^        rwmutex() {$/;"	f	class:rwmutex
rwmutex	mutex.h	/^class rwmutex : public GlobAlloc {$/;"	c
rwmutex Class Reference	latex/classrwmutex.tex	/^\\hypertarget{classrwmutex}{\\section{rwmutex Class Reference}$/;"	s
s	stats.h	/^        uint32_t s;$/;"	m	class:LambdaVectorStat
sCycle	dramsim_mem_ctrl.cpp	/^        uint64_t sCycle;$/;"	m	class:DRAMSimAccEvent	file:
safeCopy	virt/common.h	/^static inline bool safeCopy(const T* src, T* dst, const char* file = __FILE__, int line = __LINE__) {$/;"	f
same_or_left_bits	g_heap/dlmalloc.h.c	2883;"	d	file:
sampleOrNot	page_placement.cpp	/^PagePlacementPolicy::sampleOrNot(double sample_rate, bool miss_rate_tune)$/;"	f	class:PagePlacementPolicy
samplingFactor	utility_monitor.h	/^        uint32_t samplingFactor; \/\/Size of sampled cache (lines)\/size of umon. Should be power of 2$/;"	m	class:UMon
samplingFactorBits	utility_monitor.h	/^        uint64_t samplingFactorBits;$/;"	m	class:UMon
save	mtrand.h	/^inline void MTRand::save(uint64_t* saveArray) const {$/;"	f	class:MTRand
sbinptr	g_heap/dlmalloc.h.c	/^typedef struct malloc_chunk* sbinptr;  \/* The type of bins of chunks *\/$/;"	t	typeref:struct:malloc_chunk	file:
sched	barrier.h	/^        Callee* sched; \/\/FIXME: I don't like this organization, but don't have time to refactor the barrier code, this is used for a callback when the phase is done$/;"	m	class:Barrier
sched	zsim.h	/^    Scheduler* sched;$/;"	m	struct:GlobSimInfo
schedContext	scheduler.h	/^        ThreadInfo* schedContext(ContextInfo* ctx) {$/;"	f	class:Scheduler
schedLock	scheduler.h	/^        lock_t schedLock;$/;"	m	class:Scheduler
schedQuantum	scheduler.h	/^        uint32_t schedQuantum; \/\/in phases$/;"	m	class:Scheduler
schedThread	scheduler.h	/^        ContextInfo* schedThread(ThreadInfo* th) {$/;"	f	class:Scheduler
schedTick	scheduler.h	/^        void schedTick() {$/;"	f	class:Scheduler
schedule	ooo_core.h	/^        void schedule(uint64_t& curCycle, uint64_t& schedCycle, uint8_t portMask, uint32_t extraSlots = 0) {$/;"	f	class:WindowStructure
schedule	scheduler.h	/^        void schedule(ThreadInfo* th, ContextInfo* ctx) {$/;"	f	class:Scheduler
scheduleEvents	scheduler.h	/^        Counter scheduleEvents, waitEvents, handoffEvents, sleepEvents;$/;"	m	class:Scheduler
scheduleInternal	ooo_core.h	/^        void scheduleInternal(uint64_t& curCycle, uint64_t& schedCycle, uint8_t portMask) {$/;"	f	class:WindowStructure
scheduledThreads	scheduler.h	/^        uint32_t scheduledThreads;$/;"	m	class:Scheduler
schedulerQueueCount	detailed_mem_params.h	/^        uint32_t schedulerQueueCount;$/;"	m	class:MemParam
sches	detailed_mem.h	/^        g_vector <MemSchedulerBase*> sches;$/;"	m	class:MemControllerBase
scoped  -  _  -mutex Class Reference	latex/classscoped__mutex.tex	/^\\hypertarget{classscoped__mutex}{\\section{scoped\\-\\_\\-mutex Class Reference}$/;"	s
scoped_mutex	mutex.h	/^        scoped_mutex()$/;"	f	class:scoped_mutex
scoped_mutex	mutex.h	/^        scoped_mutex(mutex& _mut)$/;"	f	class:scoped_mutex
scoped_mutex	mutex.h	/^        scoped_mutex(scoped_mutex&& that) {$/;"	f	class:scoped_mutex
scoped_mutex	mutex.h	/^class scoped_mutex : public GlobAlloc {$/;"	c
score	repl_policies.h	/^        inline uint64_t score(uint32_t id) { \/\/higher is least evictable$/;"	f	class:LRUReplPolicy
searchData	html/search/all_0.js	/^var searchData=$/;"	v
searchData	html/search/all_1.js	/^var searchData=$/;"	v
searchData	html/search/all_10.js	/^var searchData=$/;"	v
searchData	html/search/all_11.js	/^var searchData=$/;"	v
searchData	html/search/all_12.js	/^var searchData=$/;"	v
searchData	html/search/all_13.js	/^var searchData=$/;"	v
searchData	html/search/all_14.js	/^var searchData=$/;"	v
searchData	html/search/all_2.js	/^var searchData=$/;"	v
searchData	html/search/all_3.js	/^var searchData=$/;"	v
searchData	html/search/all_4.js	/^var searchData=$/;"	v
searchData	html/search/all_5.js	/^var searchData=$/;"	v
searchData	html/search/all_6.js	/^var searchData=$/;"	v
searchData	html/search/all_7.js	/^var searchData=$/;"	v
searchData	html/search/all_8.js	/^var searchData=$/;"	v
searchData	html/search/all_9.js	/^var searchData=$/;"	v
searchData	html/search/all_a.js	/^var searchData=$/;"	v
searchData	html/search/all_b.js	/^var searchData=$/;"	v
searchData	html/search/all_c.js	/^var searchData=$/;"	v
searchData	html/search/all_d.js	/^var searchData=$/;"	v
searchData	html/search/all_e.js	/^var searchData=$/;"	v
searchData	html/search/all_f.js	/^var searchData=$/;"	v
searchData	html/search/classes_0.js	/^var searchData=$/;"	v
searchData	html/search/classes_1.js	/^var searchData=$/;"	v
searchData	html/search/classes_10.js	/^var searchData=$/;"	v
searchData	html/search/classes_11.js	/^var searchData=$/;"	v
searchData	html/search/classes_12.js	/^var searchData=$/;"	v
searchData	html/search/classes_13.js	/^var searchData=$/;"	v
searchData	html/search/classes_14.js	/^var searchData=$/;"	v
searchData	html/search/classes_2.js	/^var searchData=$/;"	v
searchData	html/search/classes_3.js	/^var searchData=$/;"	v
searchData	html/search/classes_4.js	/^var searchData=$/;"	v
searchData	html/search/classes_5.js	/^var searchData=$/;"	v
searchData	html/search/classes_6.js	/^var searchData=$/;"	v
searchData	html/search/classes_7.js	/^var searchData=$/;"	v
searchData	html/search/classes_8.js	/^var searchData=$/;"	v
searchData	html/search/classes_9.js	/^var searchData=$/;"	v
searchData	html/search/classes_a.js	/^var searchData=$/;"	v
searchData	html/search/classes_b.js	/^var searchData=$/;"	v
searchData	html/search/classes_c.js	/^var searchData=$/;"	v
searchData	html/search/classes_d.js	/^var searchData=$/;"	v
searchData	html/search/classes_e.js	/^var searchData=$/;"	v
searchData	html/search/classes_f.js	/^var searchData=$/;"	v
searchData	html/search/functions_0.js	/^var searchData=$/;"	v
searchData	html/search/functions_1.js	/^var searchData=$/;"	v
searchData	html/search/functions_2.js	/^var searchData=$/;"	v
searchData	html/search/functions_3.js	/^var searchData=$/;"	v
searchData	html/search/functions_4.js	/^var searchData=$/;"	v
searchData	html/search/functions_5.js	/^var searchData=$/;"	v
searchData	html/search/functions_6.js	/^var searchData=$/;"	v
searchData	html/search/functions_7.js	/^var searchData=$/;"	v
searchData	html/search/functions_8.js	/^var searchData=$/;"	v
searchData	html/search/namespaces_0.js	/^var searchData=$/;"	v
searchData	html/search/namespaces_1.js	/^var searchData=$/;"	v
searchData	html/search/variables_0.js	/^var searchData=$/;"	v
secondary_regp	galloc.cpp	/^    volatile void* secondary_regp; \/\/secondary data structure, used to exchange information between harness and initializing process$/;"	m	struct:gm_segment	file:
seed	mtrand.h	/^inline void MTRand::seed() {$/;"	f	class:MTRand
seed	mtrand.h	/^inline void MTRand::seed(const uint64_t oneSeed) {$/;"	f	class:MTRand
seed	mtrand.h	/^inline void MTRand::seed(uint64_t *const bigSeed, const uint64_t seedLength) {$/;"	f	class:MTRand
seg	g_heap/dlmalloc.h.c	/^  msegment   seg;$/;"	m	struct:malloc_state	file:
segment_holding	g_heap/dlmalloc.h.c	/^static msegmentptr segment_holding(mstate m, char* addr) {$/;"	f	file:
segment_holds	g_heap/dlmalloc.h.c	2643;"	d	file:
selfId	coherence_ctrls.h	/^        uint32_t selfId;$/;"	m	class:MESIBottomCC
sendInvalidates	coherence_ctrls.cpp	/^uint64_t MESITopCC::sendInvalidates(Address lineAddr, uint32_t lineId, InvType type, bool* reqWriteback, uint64_t cycle, uint32_t srcId) {$/;"	f	class:MESITopCC
set	cache_arrays.h	/^    inline void set(uint32_t p, uint32_t i, int32_t x) {pos = p; lineId = i; parentIdx = x;}$/;"	f	struct:ZWalkInfo
set	memory_hierarchy.h	/^    inline void set(Flag f) {flags |= f;}$/;"	f	struct:MemReq
set	ooo_core.h	/^            inline void set(uint8_t o, uint8_t c) {occUnits = o; count = c;}$/;"	f	struct:WindowStructure::WinCycle
set	ooo_core.h	/^            void set(Address a, uint64_t c) {addr = a; storeCycle = c;}$/;"	f	struct:OOOCore::FwdEntry
set	stats.h	/^        inline void set(uint64_t data) {$/;"	f	class:Counter
setCC	ideal_arrays.h	/^                void setCC(CC* _cc) {a->setCC(cc);}$/;"	f	class:IdealLRUArray::ProxyReplPolicy
setCC	ideal_arrays.h	/^        void setCC(CC* _cc) {cc = _cc;}$/;"	f	class:IdealLRUArray
setCC	repl_policies.h	/^        virtual void setCC(CC* _cc) {cc = _cc;}$/;"	f	class:ReplPolicy
setChildren	cache.cpp	/^void Cache::setChildren(const g_vector<BaseCache*>& children, Network* network) {$/;"	f	class:Cache
setChildren	coherence_ctrls.h	/^        void setChildren(const g_vector<BaseCache*>& children, Network* network) {$/;"	f	class:MESICC
setChildren	coherence_ctrls.h	/^        void setChildren(const g_vector<BaseCache*>& children, Network* network) {$/;"	f	class:MESITerminalCC
setChildren	prefetcher.cpp	/^void StreamPrefetcher::setChildren(const g_vector<BaseCache*>& children, Network* network) {$/;"	f	class:StreamPrefetcher
setChildren	trace_driver.h	/^        void setChildren(const g_vector<BaseCache*>& children, Network* network) {panic("Should not be called, this must be terminal");};$/;"	f	class:TraceDriverProxyCache
setChildren	tracing_cache.cpp	/^void TracingCache::setChildren(const g_vector<BaseCache*>& children, Network* network) {$/;"	f	class:TracingCache
setCid	zsim.cpp	/^static inline void setCid(uint32_t tid, uint32_t cid) {$/;"	f	file:
setClassAttr	html/search/search.js	/^function setClassAttr(elem,attr)$/;"	f
setClearTime	mc.h	/^	void setClearTime(uint64_t time) { _last_clear_time = time; };$/;"	f	class:TagBuffer
setDriver	trace_driver.h	/^        void setDriver(TraceDriver* driver) {drv = driver;}$/;"	f	class:TraceDriverProxyCache
setEnvVars	pin_cmd.cpp	/^void PinCmd::setEnvVars(uint32_t procIdx) {$/;"	f	class:PinCmd
setFlags	filter_cache.h	/^        void setFlags(uint32_t flags) {$/;"	f	class:FilterCache
setGapCycles	event_recorder.h	/^        void setGapCycles(uint64_t gapCycles) {$/;"	f	class:EventRecorder
setKeyActions	html/search/search.js	/^function setKeyActions(elem,action)$/;"	f
setMask	cache_arrays.h	/^        uint32_t setMask;$/;"	m	class:SetAssocArray
setMask	cache_arrays.h	/^        uint32_t setMask;$/;"	m	class:ZArray
setMask	filter_cache.h	/^        Address setMask;$/;"	m	class:FilterCache
setMinStartCycle	timing_event.h	/^        inline void setMinStartCycle(uint64_t c) {minStartCycle = c;}$/;"	f	class:TimingEvent
setParent	trace_driver.cpp	/^void TraceDriver::setParent(MemObject* _parent) {$/;"	f	class:TraceDriver
setParents	cache.cpp	/^void Cache::setParents(uint32_t childId, const g_vector<MemObject*>& parents, Network* network) {$/;"	f	class:Cache
setParents	coherence_ctrls.h	/^        void setParents(uint32_t childId, const g_vector<MemObject*>& parents, Network* network) {$/;"	f	class:MESICC
setParents	coherence_ctrls.h	/^        void setParents(uint32_t childId, const g_vector<MemObject*>& parents, Network* network) {$/;"	f	class:MESITerminalCC
setParents	prefetcher.cpp	/^void StreamPrefetcher::setParents(uint32_t _childId, const g_vector<MemObject*>& parents, Network* network) {$/;"	f	class:StreamPrefetcher
setParents	trace_driver.h	/^        void setParents(uint32_t _childId, const g_vector<MemObject*>& parents, Network* network) {id = _childId; assert(parents.size() == 1); parent = parents[0];}; \/\/FIXME: Support multi-banked caches...$/;"	f	class:TraceDriverProxyCache
setPartitionSizes	ideal_arrays.h	/^        void setPartitionSizes(const uint32_t* sizes) {$/;"	f	class:IdealLRUPartReplPolicy
setPartitionSizes	part_repl_policies.h	/^        void setPartitionSizes(const uint32_t* sizes) {$/;"	f	class:VantageReplPolicy
setPartitionSizes	part_repl_policies.h	/^        void setPartitionSizes(const uint32_t* waysPart) {$/;"	f	class:WayPartReplPolicy
setPostDelay	timing_event.h	/^        inline void setPostDelay(uint32_t d) {postDelay = d;}$/;"	f	class:TimingEvent
setPreDelay	timing_event.h	/^        inline void setPreDelay(uint32_t d) {preDelay = d;}$/;"	f	class:TimingEvent
setPrio	contention_sim.h	/^        void setPrio(uint32_t domain, uint32_t prio) {domains[domain].prio = prio;}$/;"	f	class:ContentionSim
setRunning	timing_event.h	/^        void setRunning() {$/;"	f	class:TimingEvent
setSourceId	event_recorder.h	/^        void setSourceId(uint32_t i) {srcId = i;}$/;"	f	class:EventRecorder
setSourceId	filter_cache.h	/^        void setSourceId(uint32_t id) {$/;"	f	class:FilterCache
setStartSlack	event_recorder.h	/^        inline void setStartSlack(uint64_t startSlack) {$/;"	f	class:EventRecorder
set_foot	g_heap/dlmalloc.h.c	2241;"	d	file:
set_free_with_pinuse	g_heap/dlmalloc.h.c	2248;"	d	file:
set_inuse	g_heap/dlmalloc.h.c	3002;"	d	file:
set_inuse	g_heap/dlmalloc.h.c	3025;"	d	file:
set_inuse_and_pinuse	g_heap/dlmalloc.h.c	3007;"	d	file:
set_inuse_and_pinuse	g_heap/dlmalloc.h.c	3030;"	d	file:
set_lock	g_heap/dlmalloc.h.c	2612;"	d	file:
set_size_and_pinuse_of_free_chunk	g_heap/dlmalloc.h.c	2244;"	d	file:
set_size_and_pinuse_of_inuse_chunk	g_heap/dlmalloc.h.c	3012;"	d	file:
set_size_and_pinuse_of_inuse_chunk	g_heap/dlmalloc.h.c	3035;"	d	file:
setpointAdjs	part_repl_policies.h	/^            uint64_t setpointAdjs; \/\/ setpoint adjustments so far, just for profiling purposes$/;"	m	struct:VantageReplPolicy::VantagePartInfo
setpointBts	part_repl_policies.h	/^            uint64_t setpointBts; \/\/ setpoint coarse-grain timestamp (SetpointTS in paper)$/;"	m	struct:VantageReplPolicy::VantagePartInfo
sets	utility_monitor.h	/^        uint32_t sets; \/\/umon sets. Should be power of 2.$/;"	m	class:UMon
setsBits	utility_monitor.h	/^        uint64_t setsBits;$/;"	m	class:UMon
sflags	g_heap/dlmalloc.h.c	/^  flag_t       sflags;           \/* mmap and extern flag *\/$/;"	m	struct:malloc_segment	file:
sharers	coherence_ctrls.h	/^            std::bitset<MAX_CACHE_CHILDREN> sharers;$/;"	m	struct:MESITopCC::Entry
sharers	repl_policies.h	/^            uint32_t sharers;$/;"	m	struct:LFUReplPolicy::Rank
shouldAllocate	coherence_ctrls.h	/^        bool shouldAllocate(const MemReq& req) {$/;"	f	class:MESICC
shouldAllocate	coherence_ctrls.h	/^        bool shouldAllocate(const MemReq& req) {$/;"	f	class:MESITerminalCC
should_trim	g_heap/dlmalloc.h.c	2669;"	d	file:
should_trim	g_heap/dlmalloc.h.c	2671;"	d	file:
sigHandler	zsim_harness.cpp	/^void sigHandler(int sig) {$/;"	f
signal	zsim.cpp	/^        void signal() {$/;"	f	class:SyncEvent
simCount	timing_event.h	/^        uint64_t simCount;$/;"	m	class:CrossingEvent
simThreadLoop	contention_sim.cpp	/^void ContentionSim::simThreadLoop(uint32_t thid) {$/;"	f	class:ContentionSim
simThreads	contention_sim.h	/^        SimThreadData* simThreads;$/;"	m	class:ContentionSim
simulate	core_recorder.cpp	/^        void simulate(uint64_t _startCycle) {$/;"	f	class:TimingCoreEvent
simulate	ddr_mem.cpp	/^        void simulate(uint64_t startCycle) {$/;"	f	class:DDRMemoryAccEvent
simulate	ddr_mem.cpp	/^        void simulate(uint64_t startCycle) {$/;"	f	class:RefreshEvent
simulate	ddr_mem.cpp	/^        void simulate(uint64_t startCycle) {$/;"	f	class:SchedEvent
simulate	detailed_mem.h	/^        void simulate(uint64_t startCycle) { dram->enqueue(this, startCycle); }$/;"	f	class:MemAccessEventBase
simulate	dramsim_mem_ctrl.cpp	/^        void simulate(uint64_t startCycle) {$/;"	f	class:DRAMSimAccEvent
simulate	ooo_core_recorder.cpp	/^        void simulate(uint64_t _startCycle) {$/;"	f	class:OOORespEvent
simulate	ooo_core_recorder.cpp	/^        void simulate(uint64_t startCycle) {$/;"	f	class:OOODispatchEvent
simulate	ooo_core_recorder.cpp	/^        void simulate(uint64_t startCycle) {$/;"	f	class:OOOIssueEvent
simulate	prefetcher.cpp	/^        void simulate(uint64_t startCycle) {$/;"	f	class:PrefetchResponseEvent
simulate	tick_event.h	/^        void simulate(uint64_t startCycle) {$/;"	f	class:TickEvent
simulate	timing_cache.cpp	/^        void simulate(uint64_t startCycle) {$/;"	f	class:HitEvent
simulate	timing_cache.cpp	/^        void simulate(uint64_t startCycle) {cache->simulateMissResponse(this, startCycle, mse);}$/;"	f	class:MissResponseEvent
simulate	timing_cache.cpp	/^        void simulate(uint64_t startCycle) {cache->simulateMissStart(this, startCycle);}$/;"	f	class:MissStartEvent
simulate	timing_cache.cpp	/^        void simulate(uint64_t startCycle) {cache->simulateMissWriteback(this, startCycle, mse);}$/;"	f	class:MissWritebackEvent
simulate	timing_cache.cpp	/^        void simulate(uint64_t startCycle) {cache->simulateReplAccess(this, startCycle);}$/;"	f	class:ReplAccessEvent
simulate	timing_event.cpp	/^void CrossingEvent::simulate(uint64_t simCycle) {$/;"	f	class:CrossingEvent
simulate	timing_event.h	/^                virtual void simulate(uint64_t simCycle) {$/;"	f	class:CrossingEvent::CrossingSrcEvent
simulate	timing_event.h	/^        virtual void simulate(uint64_t simCycle) {$/;"	f	class:DelayEvent
simulate	weave_md1_mem.h	/^        void simulate(uint64_t startCycle) {$/;"	f	class:WeaveMemAccEvent
simulateHit	timing_cache.cpp	/^void TimingCache::simulateHit(HitEvent* ev, uint64_t cycle) {$/;"	f	class:TimingCache
simulateMissResponse	timing_cache.cpp	/^void TimingCache::simulateMissResponse(MissResponseEvent* ev, uint64_t cycle, MissStartEvent* mse) {$/;"	f	class:TimingCache
simulateMissStart	timing_cache.cpp	/^void TimingCache::simulateMissStart(MissStartEvent* ev, uint64_t cycle) {$/;"	f	class:TimingCache
simulateMissWriteback	timing_cache.cpp	/^void TimingCache::simulateMissWriteback(MissWritebackEvent* ev, uint64_t cycle, MissStartEvent* mse) {$/;"	f	class:TimingCache
simulatePhase	contention_sim.cpp	/^void ContentionSim::simulatePhase(uint64_t limit) {$/;"	f	class:ContentionSim
simulatePhaseThread	contention_sim.cpp	/^void ContentionSim::simulatePhaseThread(uint32_t thid) {$/;"	f	class:ContentionSim
simulatePrefetchResponse	prefetcher.cpp	/^void StreamPrefetcher::simulatePrefetchResponse(PrefetchResponseEvent* ev, uint64_t cycle) {$/;"	f	class:StreamPrefetcher
simulateReplAccess	timing_cache.cpp	/^void TimingCache::simulateReplAccess(ReplAccessEvent* ev, uint64_t cycle) {$/;"	f	class:TimingCache
size	ddr_mem.h	/^        inline size_t size() const { return reqList.size(); }$/;"	f	class:RequestQueue
size	g_heap/dlmalloc.h.c	/^  size_t       size;             \/* allocated size *\/$/;"	m	struct:malloc_segment	file:
size	intrusive_list.h	/^        size_t size() const {$/;"	f	class:InList
size	part_repl_policies.h	/^    uint64_t size; \/\/in lines$/;"	m	struct:PartInfo
size	prio_queue.h	/^        inline uint64_t size() const {$/;"	f	class:PrioQueue
size	stats.h	/^        inline uint32_t size() const {$/;"	f	class:VectorCounter
size	stats.h	/^        uint32_t size() const { return s; }$/;"	f	class:LambdaVectorStat
size	stats.h	/^        uint32_t size() const {$/;"	f	class:AggregateStat
size_type	g_std/stl_galloc.h	/^        typedef size_t size_type;$/;"	t	class:StlGlobAlloc
skew	trace_driver.h	/^            int64_t skew;$/;"	m	struct:TraceDriver::ChildInfo
skipContention	contention_sim.h	/^        bool skipContention;$/;"	m	class:ContentionSim
skipStat	hdf5_stats.cpp	/^        bool skipStat(Stat* s) {$/;"	f	class:HDF5BackendImpl	file:
skipStatsVectors	zsim.h	/^    bool skipStatsVectors;$/;"	m	struct:GlobSimInfo
skipVectors	hdf5_stats.cpp	/^        bool skipVectors;$/;"	m	class:HDF5BackendImpl	file:
slab	slab_alloc.h	/^namespace slab {$/;"	n
slab  -   -  Slab  -Alloc Class Reference	latex/classslab_1_1SlabAlloc.tex	/^\\hypertarget{classslab_1_1SlabAlloc}{\\section{slab\\-:\\-:Slab\\-Alloc Class Reference}$/;"	s
slab  -   -  Slab Struct Reference	latex/structslab_1_1Slab.tex	/^\\hypertarget{structslab_1_1Slab}{\\section{slab\\-:\\-:Slab Struct Reference}$/;"	s
slabAlloc	event_recorder.h	/^        slab::SlabAlloc slabAlloc;$/;"	m	class:EventRecorder
sleepEvents	scheduler.h	/^        Counter scheduleEvents, waitEvents, handoffEvents, sleepEvents;$/;"	m	class:Scheduler
sleepQueue	scheduler.h	/^        InList<ThreadInfo> sleepQueue; \/\/contains all the sleeping threads, it is ORDERED by wakeup time$/;"	m	class:Scheduler
small_index	g_heap/dlmalloc.h.c	2774;"	d	file:
small_index2size	g_heap/dlmalloc.h.c	2775;"	d	file:
smallbin_at	g_heap/dlmalloc.h.c	2779;"	d	file:
smallbins	g_heap/dlmalloc.h.c	/^  mchunkptr  smallbins[(NSMALLBINS+1)*2];$/;"	m	struct:malloc_state	file:
smallmap	g_heap/dlmalloc.h.c	/^  binmap_t   smallmap;$/;"	m	struct:malloc_state	file:
smallmap_is_marked	g_heap/dlmalloc.h.c	2870;"	d	file:
smblks	g_heap/dlmalloc.h.c	/^  MALLINFO_FIELD_TYPE smblks;   \/* always 0 *\/$/;"	m	struct:mallinfo	file:
smoothTransients	part_repl_policies.h	/^        bool smoothTransients; \/\/if set, keeps all growing partitions at targetSz = actualSz + 1 until they reach their actual target; takes space away slowly from the shrinking partitions instead of aggressively demoting them to the unmanaged region, which turns the whole thing into a shared cache if transients are frequent$/;"	m	class:VantageReplPolicy
smoothedPhaseAccesses	mem_ctrls.h	/^        double smoothedPhaseAccesses;$/;"	m	class:MD1Memory
spin_destroy	locks.h	/^static inline void spin_destroy(volatile uint32_t* lock) {}$/;"	f
spin_init	locks.h	/^static inline void spin_init(volatile uint32_t* lock) {$/;"	f
spin_lock	locks.h	/^static inline void spin_lock(volatile uint32_t* lock) {$/;"	f
spin_trylock	locks.h	/^static inline int spin_trylock(volatile uint32_t* lock) {$/;"	f
spin_unlock	locks.h	/^static inline void spin_unlock(volatile uint32_t* lock) {$/;"	f
srcDomain	timing_event.h	/^        uint32_t srcDomain;$/;"	m	class:CrossingEvent
srcDomainCycleAtDone	timing_event.h	/^        volatile uint64_t srcDomainCycleAtDone;$/;"	m	class:CrossingEvent
srcId	event_recorder.h	/^        uint32_t srcId;$/;"	m	class:EventRecorder
srcId	filter_cache.h	/^        uint32_t srcId; \/\/should match the core$/;"	m	class:FilterCache
srcId	memory_hierarchy.h	/^    uint32_t srcId;$/;"	m	struct:InvReq
srcId	memory_hierarchy.h	/^    uint32_t srcId;$/;"	m	struct:MemReq
ss	log.h	/^        std::stringstream& ss;$/;"	m	class:PrintExpr
start	profile_stats.h	/^        void start() {$/;"	f	class:ClockStat
start	scheduler.h	/^        void start(uint32_t pid, uint32_t tid, const g_vector<bool>& mask) {$/;"	f	class:Scheduler
start	zsim.cpp	/^    uintptr_t start;$/;"	m	struct:Section	file:
startAccess	coherence_ctrls.h	/^        bool startAccess(MemReq& req) {$/;"	f	class:MESICC
startAccess	coherence_ctrls.h	/^        bool startAccess(MemReq& req) {$/;"	f	class:MESITerminalCC
startCycle	core_recorder.cpp	/^        uint64_t startCycle;$/;"	m	class:TimingCoreEvent	file:
startCycle	prefetcher.h	/^                uint64_t startCycle;  \/\/ FIXME: Dead for now, we should use it for profiling$/;"	m	struct:StreamPrefetcher::Entry::AccessTimes
startCycle	timing_cache.cpp	/^        uint64_t startCycle; \/\/for profiling purposes$/;"	m	class:MissStartEvent	file:
startEvent	event_recorder.h	/^    TimingEvent* startEvent;$/;"	m	struct:TimingRecord
startInv	coherence_ctrls.h	/^        void startInv() {$/;"	f	class:MESICC
startInv	coherence_ctrls.h	/^        void startInv() {$/;"	f	class:MESITerminalCC
startInvalidate	cache.cpp	/^void Cache::startInvalidate() {$/;"	f	class:Cache
startNextInterval	utility_monitor.cpp	/^void UMon::startNextInterval() {$/;"	f	class:UMon
startNs	profile_stats.h	/^        uint64_t startNs;$/;"	m	class:ClockStat
startNs	profile_stats.h	/^        uint64_t startNs;$/;"	m	class:TimeBreakdownStat
startReplacement	part_repl_policies.h	/^        void startReplacement(const MemReq* req) {$/;"	f	class:VantageReplPolicy
startReplacement	part_repl_policies.h	/^        void startReplacement(const MemReq* req) {$/;"	f	class:WayPartReplPolicy
startReplacement	repl_policies.h	/^        virtual void startReplacement(const MemReq* req) {} \/\/many policies don't need it$/;"	f	class:LegacyReplPolicy
startReplacement	repl_policies.h	/^        void startReplacement(const MemReq* req) {$/;"	f	class:ProfViolReplPolicy
startSysCycle	ddr_mem.h	/^            uint64_t startSysCycle;  \/\/ in sysCycles$/;"	m	struct:DDRMemory::Request
startTime	zsim_harness.cpp	/^static time_t startTime;$/;"	v	file:
startWatchdogThread	scheduler.cpp	/^void Scheduler::startWatchdogThread() {$/;"	f	class:Scheduler
started	process_tree.h	/^        bool started;$/;"	m	class:ProcessTreeNode
statSwaps	cache_arrays.h	/^        Counter statSwaps;$/;"	m	class:ZArray
state	barrier.h	/^            volatile State state;$/;"	m	struct:Barrier::ThreadSyncInfo
state	core_recorder.h	/^        State state;$/;"	m	class:CoreRecorder
state	ddr_mem.cpp	/^        State state;$/;"	m	class:SchedEvent	file:
state	memory_hierarchy.h	/^    MESIState* state;$/;"	m	struct:MemReq
state	mtrand.h	/^        uint64_t state[N];   \/\/ internal state$/;"	m	class:MTRand
state	ooo_core_recorder.h	/^        State state;$/;"	m	class:OOOCoreRecorder
state	scheduler.h	/^            ContextState state;$/;"	m	struct:Scheduler::ContextInfo
state	scheduler.h	/^            ThreadState state;$/;"	m	struct:Scheduler::ThreadInfo
state	timing_event.h	/^        EventState state;$/;"	m	class:TimingEvent
statsBackends	zsim.h	/^    g_vector<StatsBackend*>* statsBackends; \/\/ used for termination dumps$/;"	m	struct:GlobSimInfo
statsPhaseInterval	zsim.h	/^    uint32_t statsPhaseInterval;$/;"	m	struct:GlobSimInfo
status	zsim_harness.cpp	/^    volatile ProcStatus status;$/;"	m	struct:ProcInfo	file:
std	virt/common.h	/^    SYSCALL_STANDARD std;$/;"	m	struct:PostPatchArgs
std	virt/common.h	/^    SYSCALL_STANDARD std;$/;"	m	struct:PrePatchArgs
step	config.cpp	/^    int32_t step;$/;"	m	struct:Range	file:
store	filter_cache.h	/^        inline uint64_t store(Address vAddr, uint64_t curCycle) {$/;"	f	class:FilterCache
store	ooo_core.cpp	/^void OOOCore::store(Address addr) {$/;"	f	class:OOOCore
store	simple_core.cpp	/^void SimpleCore::store(Address addr) {$/;"	f	class:SimpleCore
storeAddrs	ooo_core.h	/^        Address storeAddrs[256];$/;"	m	class:OOOCore
storeAndRecord	timing_core.cpp	/^void TimingCore::storeAndRecord(Address addr) {$/;"	f	class:TimingCore
storeCycle	ooo_core.h	/^            uint64_t storeCycle;$/;"	m	struct:OOOCore::FwdEntry
storeOps	decoder.h	/^            uint32_t storeOps[MAX_INSTR_STORES];$/;"	m	struct:Decoder::Instr
storePtr	core.h	/^    void (*storePtr)(THREADID, ADDRINT);$/;"	m	struct:InstrFuncPtrs
storeQueue	ooo_core.h	/^        ReorderBuffer<32, 4> storeQueue;$/;"	m	class:OOOCore
stores	ooo_core.h	/^        uint32_t stores;$/;"	m	class:OOOCore
str	ooo_core_recorder.cpp	/^        virtual std::string str() {$/;"	f	class:OOOIssueEvent
str	timing_event.h	/^        virtual std::string str() { std::string res; return res; }$/;"	f	class:TimingEvent
stride	prefetcher.h	/^            int32_t stride;$/;"	m	struct:StreamPrefetcher::Entry
subgroups	config.cpp	/^void Config::subgroups(const char* key, std::vector<const char*>& grps) {$/;"	f	class:Config
subgroups	config.h	/^        void subgroups(const std::string& key, std::vector<const char*>& grps) {subgroups(key.c_str(), grps);}$/;"	f	class:Config
sumRegularAggregates	hdf5_stats.cpp	/^        bool sumRegularAggregates;$/;"	m	class:HDF5BackendImpl	file:
sup	config.cpp	/^    int32_t sup;$/;"	m	struct:Range	file:
supDomain	contention_sim.h	/^            uint32_t supDomain; \/\/supreme, ie first not included$/;"	m	struct:ContentionSim::SimThreadData
swapArray	cache_arrays.h	/^        uint32_t* swapArray; \/\/contains physical positions$/;"	m	class:ZArray
swapArrayLen	cache_arrays.h	/^        uint32_t swapArrayLen; \/\/set in preinsert()$/;"	m	class:ZArray
sync	barrier.h	/^        void sync(uint32_t tid, lock_t* schedLock) {$/;"	f	class:Barrier
sync	scheduler.h	/^        uint32_t sync(uint32_t pid, uint32_t tid, uint32_t cid) {$/;"	f	class:Scheduler
syncedFastForward	process_tree.h	/^        const SyncedFastForwardMode syncedFastForward;$/;"	m	class:ProcessTreeNode
sysFreqKHz	ddr_mem.h	/^        uint64_t sysFreqKHz, memFreqKHz;$/;"	m	class:DDRMemory
sysFreqKHz	detailed_mem.h	/^        uint64_t sysFreqKHz;$/;"	m	class:MemControllerBase
sysToMemCycle	ddr_mem.h	/^        inline uint64_t sysToMemCycle(uint64_t sysCycle) { return sysCycle*memFreqKHz\/sysFreqKHz+1; }$/;"	f	class:DDRMemory
sysToMemCycle	detailed_mem.h	/^        inline uint64_t sysToMemCycle(uint64_t sysCycle) { return sysCycle*memFreqKHz\/sysFreqKHz; }$/;"	f	class:MemControllerBase
sysToMicroSec	detailed_mem.h	/^        inline uint64_t sysToMicroSec(uint64_t sysCycle) { return sysCycle*1000\/sysFreqKHz; }$/;"	f	class:MemControllerBase
sys_alloc	g_heap/dlmalloc.h.c	/^static void* sys_alloc(mstate m, size_t nb) {$/;"	f	file:
sys_trim	g_heap/dlmalloc.h.c	/^static int sys_trim(mstate m, size_t pad) {$/;"	f	file:
syscallBlacklistRegex	process_tree.h	/^        const g_string syscallBlacklistRegex;$/;"	m	class:ProcessTreeNode
syscallLeave	scheduler.cpp	/^void Scheduler::syscallLeave(uint32_t pid, uint32_t tid, uint32_t cid, uint64_t pc, int syscallNumber, uint64_t arg0, uint64_t arg1) {$/;"	f	class:Scheduler
syscallNumber	scheduler.h	/^            const int syscallNumber;$/;"	m	struct:Scheduler::FakeLeaveInfo
tBL	ddr_mem.h	/^        uint32_t tBL;    \/\/ burst length (== tTrans)$/;"	m	class:DDRMemory
tCAS	detailed_mem_params.h	/^        uint32_t tCAS;$/;"	m	class:MemParam
tCCD	detailed_mem_params.h	/^        uint32_t tCCD;$/;"	m	class:MemParam
tCK	detailed_mem_params.h	/^        double tCK;$/;"	m	class:MemParam
tCL	ddr_mem.h	/^        uint32_t tCL;    \/\/ CAS latency$/;"	m	class:DDRMemory
tCMD	detailed_mem_params.h	/^        uint32_t tCMD;$/;"	m	class:MemParam
tCWD	detailed_mem_params.h	/^        uint32_t tCWD;$/;"	m	class:MemParam
tFAW	ddr_mem.h	/^        uint32_t tFAW;   \/\/ No more than 4 ACTs per rank in this window$/;"	m	class:DDRMemory
tFAW	detailed_mem_params.h	/^        uint32_t tFAW;$/;"	m	class:MemParam
tFAWCycle	detailed_mem.h	/^        uint64_t *tFAWCycle;$/;"	m	class:MemRankBase
tFAWIndex	detailed_mem.h	/^        uint32_t tFAWIndex;$/;"	m	class:MemRankBase
tRAS	ddr_mem.h	/^        uint32_t tRAS;   \/\/ ACT to PRE$/;"	m	class:DDRMemory
tRAS	detailed_mem_params.h	/^        uint32_t tRAS;$/;"	m	class:MemParam
tRC	detailed_mem_params.h	/^        uint32_t tRC;$/;"	m	class:MemParam
tRCD	ddr_mem.h	/^        uint32_t tRCD;   \/\/ ACT to CAS$/;"	m	class:DDRMemory
tRCD	detailed_mem_params.h	/^        uint32_t tRCD;$/;"	m	class:MemParam
tREFI	ddr_mem.h	/^        uint32_t tREFI;  \/\/ Refresh interval$/;"	m	class:DDRMemory
tREFI	detailed_mem_params.h	/^        uint32_t tREFI;$/;"	m	class:MemParam
tRFC	ddr_mem.h	/^        uint32_t tRFC;   \/\/ Refresh to ACT (refresh leaves rows closed)$/;"	m	class:DDRMemory
tRFC	detailed_mem_params.h	/^        uint32_t tRFC;$/;"	m	class:MemParam
tRP	ddr_mem.h	/^        uint32_t tRP;    \/\/ PRE to ACT$/;"	m	class:DDRMemory
tRP	detailed_mem_params.h	/^        uint32_t tRP;$/;"	m	class:MemParam
tRPab	detailed_mem_params.h	/^        uint32_t tRPab;$/;"	m	class:MemParam
tRRD	ddr_mem.h	/^        uint32_t tRRD;   \/\/ ACT to ACT$/;"	m	class:DDRMemory
tRRD	detailed_mem_params.h	/^        uint32_t tRRD;$/;"	m	class:MemParam
tRTP	ddr_mem.h	/^        uint32_t tRTP;   \/\/ RD to PRE$/;"	m	class:DDRMemory
tRTP	detailed_mem_params.h	/^        uint32_t tRTP;$/;"	m	class:MemParam
tRTRS	detailed_mem_params.h	/^        uint32_t tRTRS;$/;"	m	class:MemParam
tTrans	detailed_mem_params.h	/^        uint32_t tTrans;$/;"	m	class:MemParam
tTransCrit	detailed_mem_params.h	/^        uint32_t tTransCrit;$/;"	m	class:MemParam
tWR	ddr_mem.h	/^        uint32_t tWR;    \/\/ end of WR burst to PRE$/;"	m	class:DDRMemory
tWR	detailed_mem_params.h	/^        uint32_t tWR;$/;"	m	class:MemParam
tWTR	ddr_mem.h	/^        uint32_t tWTR;   \/\/ end of WR burst to RD command$/;"	m	class:DDRMemory
tWTR	detailed_mem_params.h	/^        uint32_t tWTR;$/;"	m	class:MemParam
tXP	detailed_mem_params.h	/^        uint32_t tXP;$/;"	m	class:MemParam
tag	mc.h	/^	Address tag;$/;"	m	class:TagBufferEntry
tag	mc.h	/^   Address tag;$/;"	m	class:Way
tag	mc.h	/^   uint64_t tag;$/;"	m	class:TLBEntry
tag	page_placement.h	/^		Address tag;$/;"	m	struct:PagePlacementPolicy::ChunkEntry
tag	prefetcher.h	/^        Address* tag;$/;"	m	class:StreamPrefetcher
tagLat	timing_cache.h	/^        uint32_t tagLat, ways, cands;$/;"	m	class:TimingCache
tail	intrusive_list.h	/^        T* tail;$/;"	m	class:InList
takeOneLine	part_repl_policies.h	/^        void takeOneLine() {$/;"	f	class:VantageReplPolicy
target	event_queue.h	/^        uint64_t target;$/;"	m	class:AdaptiveEvent
targetSize	part_repl_policies.h	/^    uint64_t targetSize; \/\/in lines$/;"	m	struct:PartInfo
tbinptr	g_heap/dlmalloc.h.c	/^typedef struct malloc_tree_chunk* tbinptr; \/* The type of bins of trees *\/$/;"	t	typeref:struct:malloc_tree_chunk	file:
tcc	coherence_ctrls.h	/^        MESITopCC* tcc;$/;"	m	class:MESICC
tchunk	g_heap/dlmalloc.h.c	/^typedef struct malloc_tree_chunk  tchunk;$/;"	t	typeref:struct:malloc_tree_chunk	file:
tchunkptr	g_heap/dlmalloc.h.c	/^typedef struct malloc_tree_chunk* tchunkptr;$/;"	t	typeref:struct:malloc_tree_chunk	file:
temp	mem_ctrls.h	/^		Chunk * temp;$/;"	m	class:SimpleMemory
template$  $class T$  $class Tick  -Event$  $ T $  $	latex/classTickEvent.tex	/^\\subsection{Detailed Description}$/;"	b
template$  $int32  -  _  -t M  int32  -  _  -t T  int32  -  _  -t I$  $class Sat  -Counter$  $ M  T  I $  $	latex/classSatCounter.tex	/^\\subsection{Detailed Description}$/;"	b
template$  $typename T  uint32  -  _  -t B$  $class Prio  -Queue$  $ T  B $  $	latex/classPrioQueue.tex	/^\\subsection{Detailed Description}$/;"	b
template$  $typename T$  $class In  -List$  $ T $  $	latex/classInList.tex	/^\\subsection{Detailed Description}$/;"	b
termStatus	zsim_harness.cpp	/^TerminationStatus termStatus = OK;$/;"	v
terminate	contention_sim.h	/^        volatile bool terminate;$/;"	m	class:ContentionSim
terminate	detailed_mem.h	/^            uint64_t terminate;$/;"	m	struct:MemControllerBase::powerValue
terminateWatchdogThread	scheduler.h	/^        volatile bool terminateWatchdogThread;$/;"	m	class:Scheduler
terminationConditionMet	zsim.h	/^    volatile bool terminationConditionMet;$/;"	m	struct:GlobSimInfo
testMode	part_repl_policies.h	/^        bool testMode;$/;"	m	class:WayPartReplPolicy
textAddr	debug.h	/^    void* textAddr;$/;"	m	struct:LibInfo
th	scheduler.h	/^            ThreadInfo* const th;$/;"	m	struct:Scheduler::FakeLeaveInfo
threadList	barrier.h	/^        ThreadSyncInfo threadList[MAX_THREADS];$/;"	m	class:Barrier
threadTicket	contention_sim.h	/^        volatile uint32_t threadTicket; \/\/used only at init$/;"	m	class:ContentionSim
threadTrampoline	scheduler.cpp	/^void Scheduler::threadTrampoline(void* arg) {$/;"	f	class:Scheduler
threadid	g_heap/dlmalloc.h.c	/^  long threadid;$/;"	m	struct:win32_mlock_t	file:
threadid	g_heap/dlmalloc.h.c	/^  threadid_t threadid;$/;"	m	struct:pthread_mlock_t	file:
threadid_t	g_heap/dlmalloc.h.c	/^struct threadid_t {$/;"	s	file:
threadsCreated	scheduler.h	/^        Counter threadsCreated, threadsFinished;$/;"	m	class:Scheduler
threadsDone	contention_sim.h	/^        volatile uint32_t threadsDone;$/;"	m	class:ContentionSim
threadsFinished	scheduler.h	/^        Counter threadsCreated, threadsFinished;$/;"	m	class:Scheduler
tick	ddr_mem.cpp	/^uint64_t DDRMemory::tick(uint64_t sysCycle) {$/;"	f	class:DDRMemory
tick	detailed_mem.cpp	/^uint32_t MemControllerBase::tick(uint64_t sysCycle) {$/;"	f	class:MemControllerBase
tick	dramsim_mem_ctrl.cpp	/^uint32_t DRAMSimMemory::tick(uint64_t cycle) { panic("???"); return 0; }$/;"	f	class:DRAMSimMemory
tick	dramsim_mem_ctrl.cpp	/^uint32_t DRAMSimMemory::tick(uint64_t cycle) {$/;"	f	class:DRAMSimMemory
tick	event_queue.h	/^        void tick() {$/;"	f	class:EventQueue
ticket_destroy	locks.h	/^static inline void ticket_destroy(volatile uint32_t* lock) {}$/;"	f
ticket_init	locks.h	/^static inline void ticket_init(volatile uint32_t* lock) {$/;"	f
ticket_lock	locks.h	/^static inline void ticket_lock(volatile uint32_t* lock) {$/;"	f
ticket_trylock	locks.h	/^static inline int ticket_trylock(volatile uint32_t* lock) {$/;"	f
ticket_unlock	locks.h	/^static inline void ticket_unlock(volatile uint32_t* lock) {$/;"	f
tid	g_heap/dlmalloc.h.c	/^    pthread_t tid;$/;"	m	struct:threadid_t	file:
tid	virt/common.h	/^    uint32_t tid;$/;"	m	struct:PostPatchArgs
tid	virt/common.h	/^    uint32_t tid;$/;"	m	struct:PrePatchArgs
times	prefetcher.h	/^            AccessTimes times[64];$/;"	m	struct:StreamPrefetcher::Entry
timespecToNs	virt/time_conv.h	/^static inline uint64_t timespecToNs(struct timespec ts) {$/;"	f
timestamp	part_repl_policies.h	/^        uint64_t timestamp;$/;"	m	class:VantageReplPolicy
timestamp	part_repl_policies.h	/^        uint64_t timestamp;$/;"	m	class:WayPartReplPolicy
timestamp	prefetcher.h	/^        uint64_t timestamp;  \/\/ for LRU$/;"	m	class:StreamPrefetcher
timestamp	repl_policies.h	/^        uint64_t timestamp; \/\/ incremented on each access$/;"	m	class:LFUReplPolicy
timestamp	repl_policies.h	/^        uint64_t timestamp; \/\/ incremented on each access$/;"	m	class:LRUReplPolicy
timevalToNs	virt/time_conv.h	/^static inline uint64_t timevalToNs(struct timeval tv) {$/;"	f
tmalloc_large	g_heap/dlmalloc.h.c	/^static void* tmalloc_large(mstate m, size_t nb) {$/;"	f	file:
tmalloc_small	g_heap/dlmalloc.h.c	/^static void* tmalloc_small(mstate m, size_t nb) {$/;"	f	file:
toggleFolder	html/dynsections.js	/^function toggleFolder(id)$/;"	f
toggleInherit	html/dynsections.js	/^function toggleInherit(id)$/;"	f
toggleLevel	html/dynsections.js	/^function toggleLevel(level)$/;"	f
toggleVisibility	html/dynsections.js	/^function toggleVisibility(linkObj)$/;"	f
top	g_heap/dlmalloc.h.c	/^  mchunkptr  top;$/;"	m	struct:malloc_state	file:
topLock	timing_cache.h	/^        lock_t topLock;$/;"	m	class:TimingCache
topsize	g_heap/dlmalloc.h.c	/^  size_t     topsize;$/;"	m	struct:malloc_state	file:
total	detailed_mem.h	/^            uint64_t total;$/;"	m	struct:MemControllerBase::powerValue
totalCapacity	detailed_mem_params.h	/^        uint32_t totalCapacity; \/\/ mega byte$/;"	m	class:MemParam
totalGapCycles	core_recorder.h	/^        uint64_t totalGapCycles; \/\/does not include gapCycles$/;"	m	class:CoreRecorder
totalGapCycles	ooo_core_recorder.h	/^        uint64_t totalGapCycles; \/\/does not include gapCycles$/;"	m	class:OOOCoreRecorder
totalHaltedCycles	core_recorder.h	/^        uint64_t totalHaltedCycles; \/\/does not include cycles since last transition to HALTED$/;"	m	class:CoreRecorder
totalHaltedCycles	ooo_core_recorder.h	/^        uint64_t totalHaltedCycles; \/\/does not include cycles since last transition to HALTED$/;"	m	class:OOOCoreRecorder
totalNs	profile_stats.h	/^        uint64_t totalNs;$/;"	m	class:ClockStat
totalSize	part_repl_policies.h	/^        uint32_t totalSize;$/;"	m	class:VantageReplPolicy
totalSize	part_repl_policies.h	/^        uint32_t totalSize;$/;"	m	class:WayPartReplPolicy
touch_bitvec	mc.h	/^   uint64_t touch_bitvec; \/\/ whether a line is touched in a page$/;"	m	class:TLBEntry
tr	event_recorder.h	/^        TimingRecord tr;$/;"	m	class:EventRecorder
tr	trace_driver.h	/^        AccessTraceReader tr;$/;"	m	class:TraceDriver
trace	log.h	157;"	d
trace	log.h	169;"	d
traceDriven	zsim.h	/^    bool traceDriven;$/;"	m	struct:GlobSimInfo
traceDriver	zsim.h	/^    TraceDriver* traceDriver;$/;"	m	struct:GlobSimInfo
traceLock	tracing_cache.h	/^        lock_t traceLock;$/;"	m	class:TracingCache
traceWriters	zsim.h	/^    g_vector<AccessTraceWriter*>* traceWriters;$/;"	m	struct:GlobSimInfo
tracefile	tracing_cache.h	/^        g_string tracefile;$/;"	m	class:TracingCache
transMCAddress	mc.cpp	/^MemoryController::transMCAddress(Address mc_addr)$/;"	f	class:MemoryController
transMCAddressPage	mc.cpp	/^MemoryController::transMCAddressPage(uint64_t set_num, uint32_t way_num)$/;"	f	class:MemoryController
transition	breakdown_stats.h	/^        void transition(uint32_t newState, uint64_t cycle) {$/;"	f	class:CycleBreakdownStat
transition	profile_stats.h	/^        void transition(uint32_t newState) {$/;"	f	class:TimeBreakdownStat
traverse_and_check	g_heap/dlmalloc.h.c	/^static size_t traverse_and_check(mstate m) {$/;"	f	file:
treebin_at	g_heap/dlmalloc.h.c	2780;"	d	file:
treebins	g_heap/dlmalloc.h.c	/^  tbinptr    treebins[NTREEBINS];$/;"	m	struct:malloc_state	file:
treemap	g_heap/dlmalloc.h.c	/^  binmap_t   treemap;$/;"	m	struct:malloc_state	file:
treemap_is_marked	g_heap/dlmalloc.h.c	2874;"	d	file:
trigger	zsim.h	/^    uint64_t trigger; \/\/code with what triggered the current stats dump$/;"	m	struct:GlobSimInfo
trim_check	g_heap/dlmalloc.h.c	/^  size_t     trim_check;$/;"	m	struct:malloc_state	file:
trim_threshold	g_heap/dlmalloc.h.c	/^  size_t trim_threshold;$/;"	m	struct:malloc_params	file:
tryLowPrioAccess	timing_cache.cpp	/^uint64_t TimingCache::tryLowPrioAccess(uint64_t cycle) {$/;"	f	class:TimingCache
trySchedule	ddr_mem.cpp	/^uint64_t DDRMemory::trySchedule(uint64_t curCycle, uint64_t sysCycle) {$/;"	f	class:DDRMemory
trySchedule	ooo_core.h	/^        inline uint8_t trySchedule(WinCycle& wc, uint8_t portMask) {$/;"	f	class:WindowStructure
tryWakeNext	barrier.h	/^        void tryWakeNext(uint32_t tid) {$/;"	f	class:Barrier
ts	part_repl_policies.h	/^            uint64_t ts; \/\/timestamp, >0 if in the cache, == 0 if line is empty (little significance otherwise)$/;"	m	struct:VantageReplPolicy::LineInfo
ts	part_repl_policies.h	/^            uint64_t ts; \/\/timestamp, >0 if in the cache, == 0 if line is empty$/;"	m	struct:WayPartReplPolicy::WayPartInfo
ts	prefetcher.h	/^            uint64_t ts;$/;"	m	struct:StreamPrefetcher::Entry
ts	repl_policies.h	/^            uint64_t ts;$/;"	m	struct:LFUReplPolicy::LFUInfo
twist	mtrand.h	/^        uint64_t twist(const uint64_t m, const uint64_t s0, const uint64_t s1) const {$/;"	f	class:MTRand
type	access_tracing.h	/^    AccessType type;$/;"	m	struct:AccessRecord
type	access_tracing.h	/^    uint16_t type;  \/\/ could be uint8_t, but causes corruption in HDF5? (wtf...)$/;"	m	struct:PackedAccessRecord
type	core.h	/^    uint64_t type;$/;"	m	struct:InstrFuncPtrs
type	decoder.h	/^    UopType type; \/\/1 byte$/;"	m	struct:DynUop
type	detailed_mem.h	/^        MemAccessType type;$/;"	m	class:MemAccessEventBase
type	event_recorder.h	/^    AccessType type;$/;"	m	struct:TimingRecord
type	memory_hierarchy.h	/^    AccessType type;$/;"	m	struct:MemReq
type	memory_hierarchy.h	/^    InvType type;$/;"	m	struct:InvReq
typedef-members	html/namespaceDRAMSim.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"><\/a>$/;"	a
ubWin	ooo_core.h	/^        UBWin ubWin;$/;"	m	class:WindowStructure
uint8_t	decoder.h	/^enum UopType : uint8_t {UOP_GENERAL, UOP_LOAD, UOP_STORE, UOP_STORE_ADDR, UOP_FENCE};$/;"	g
umonLines	utility_monitor.h	/^        uint32_t umonLines;$/;"	m	class:UMon
uniqueTypes	hdf5_stats.cpp	/^        std::vector<hid_t> uniqueTypes;$/;"	m	class:HDF5BackendImpl	file:
unlikely	log.h	50;"	d
unlink	intrusive_list.h	/^    void unlink(InList<T>* lst) {$/;"	f	struct:InListNode
unlink_chunk	g_heap/dlmalloc.h.c	3727;"	d	file:
unlink_first_small_chunk	g_heap/dlmalloc.h.c	3548;"	d	file:
unlink_large_chunk	g_heap/dlmalloc.h.c	3650;"	d	file:
unlink_small_chunk	g_heap/dlmalloc.h.c	3528;"	d	file:
unlock	coherence_ctrls.h	/^        inline void unlock() {$/;"	f	class:MESIBottomCC
unlock	coherence_ctrls.h	/^        inline void unlock() {$/;"	f	class:MESITopCC
unlock	mutex.h	/^        void unlock() {$/;"	f	class:mutex
unlock	virt/port_virtualizer.h	/^        void unlock() { futex_unlock(&pvLock); }$/;"	f	class:PortVirtualizer
unmatchedFutexWakeups	scheduler.h	/^        volatile uint32_t unmatchedFutexWakeups;$/;"	m	class:Scheduler
uop	decoder.h	/^    DynUop uop[1];$/;"	m	struct:DynBbl
uopQueue	ooo_core.h	/^        CycleQueue<28> uopQueue;  \/\/ models issue queue$/;"	m	class:OOOCore
uops	decoder.h	/^    uint32_t uops;$/;"	m	struct:DynBbl
uops	ooo_core.h	/^        uint64_t instrs, uops, bbls, approxInstrs, mispredBranches;$/;"	m	class:OOOCore
uordblks	g_heap/dlmalloc.h.c	/^  MALLINFO_FIELD_TYPE uordblks; \/* total allocated space *\/$/;"	m	struct:mallinfo	file:
update	ideal_arrays.h	/^                void update(uint32_t id, const MemReq* req) {panic("!")}$/;"	f	class:IdealLRUArray::ProxyReplPolicy
update	ideal_arrays.h	/^        void update(uint32_t id, const MemReq* req) {$/;"	f	class:IdealLRUPartReplPolicy
update	part_repl_policies.h	/^        void update(uint32_t id, const MemReq* req) {$/;"	f	class:VantageReplPolicy
update	part_repl_policies.h	/^        void update(uint32_t id, const MemReq* req) {$/;"	f	class:WayPartReplPolicy
update	proc_stats.cpp	/^void ProcStats::update() {$/;"	f	class:ProcStats
update	process_stats.cpp	/^void ProcessStats::update() {$/;"	f	class:ProcessStats
update	repl_policies.h	/^        void update(uint32_t id, const MemReq* req) {$/;"	f	class:LFUReplPolicy
update	repl_policies.h	/^        void update(uint32_t id, const MemReq* req) {$/;"	f	class:LRUReplPolicy
update	repl_policies.h	/^        void update(uint32_t id, const MemReq* req) {$/;"	f	class:NRUReplPolicy
update	repl_policies.h	/^        void update(uint32_t id, const MemReq* req) {$/;"	f	class:ProfViolReplPolicy
update	repl_policies.h	/^        void update(uint32_t id, const MemReq* req) {}$/;"	f	class:RandReplPolicy
updateCore	process_stats.cpp	/^void ProcessStats::updateCore(uint32_t cid, uint32_t p) {$/;"	f	class:ProcessStats
updateLRU	mc.cpp	/^TagBuffer::updateLRU(uint32_t set_num, uint32_t way)$/;"	f	class:TagBuffer
updateLRU	page_placement.cpp	/^PagePlacementPolicy::updateLRU(uint64_t set_num, uint32_t way_num)$/;"	f	class:PagePlacementPolicy
updateLatency	mem_ctrls.cpp	/^void MD1Memory::updateLatency() {$/;"	f	class:MD1Memory
updateLock	detailed_mem.h	/^        lock_t updateLock;$/;"	m	class:MemControllerBase
updateLock	mem_ctrls.h	/^        lock_t updateLock;$/;"	m	class:MD1Memory
updateStats	detailed_mem.cpp	/^void MemControllerBase::updateStats(void) {$/;"	f	class:MemControllerBase
updateStripes	html/dynsections.js	/^function updateStripes()$/;"	f
upgrade	mutex.h	/^        void upgrade() {$/;"	f	class:rwmutex
useSkews	trace_driver.h	/^        bool useSkews; \/\/If false, replays the trace using its request cycles. If true, it skews the simulated child. Can only be true with a single child.$/;"	m	class:TraceDriver
use_lock	g_heap/dlmalloc.h.c	2601;"	d	file:
use_mmap	g_heap/dlmalloc.h.c	2605;"	d	file:
use_noncontiguous	g_heap/dlmalloc.h.c	2609;"	d	file:
usecToSysCycle	detailed_mem.h	/^        inline uint64_t usecToSysCycle(uint64_t usec)    { return usec*sysFreqKHz\/1000; }$/;"	f	class:MemControllerBase
used	ideal_arrays.h	/^            bool used; \/\/careful, true except when just evicted, even if invalid$/;"	m	struct:IdealLRUPartReplPolicy::Entry
usedBytes	slab_alloc.h	/^    uint32_t usedBytes;$/;"	m	struct:slab::Slab
usmblks	g_heap/dlmalloc.h.c	/^  MALLINFO_FIELD_TYPE usmblks;  \/* maximum total allocated space *\/$/;"	m	struct:mallinfo	file:
val	virt/timeout.cpp	/^    int val;$/;"	m	struct:FutexInfo	file:
valid	mc.h	/^   bool valid;$/;"	m	class:Way
valid	page_placement.h	/^		bool valid;$/;"	m	struct:PagePlacementPolicy::ChunkEntry
valid	prefetcher.h	/^            std::bitset<64> valid;$/;"	m	struct:StreamPrefetcher::Entry
valid	repl_policies.h	/^            bool valid;$/;"	m	struct:LFUReplPolicy::Rank
value_type	g_std/stl_galloc.h	/^        typedef T value_type;$/;"	t	class:StlGlobAlloc
vdsoEnd	zsim.cpp	/^static uintptr_t vdsoEnd;$/;"	v	file:
vdsoEntryMap	zsim.cpp	/^static std::unordered_map<ADDRINT, VdsoFunc> vdsoEntryMap;$/;"	v	file:
vdsoPatchData	zsim.cpp	/^VdsoPatchData vdsoPatchData[MAX_THREADS];$/;"	v
vdsoStart	zsim.cpp	/^static uintptr_t vdsoStart;$/;"	v	file:
virtToReal	virt/port_virtualizer.h	/^        g_unordered_map<int, int> virtToReal;$/;"	m	class:PortVirtualizer
visitChildren	timing_event.h	/^        inline void visitChildren(F f) {$/;"	f	class:TimingEvent
vsyscallEnd	zsim.cpp	/^static uintptr_t vsyscallEnd;$/;"	v	file:
vsyscallStart	zsim.cpp	/^static uintptr_t vsyscallStart;$/;"	v	file:
vsyscallWarned	zsim.cpp	/^static bool vsyscallWarned = false;$/;"	v	file:
wait	zsim.cpp	/^        void wait() {$/;"	f	class:SyncEvent
waitEvents	scheduler.h	/^        Counter scheduleEvents, waitEvents, handoffEvents, sleepEvents;$/;"	m	class:Scheduler
waitForContext	scheduler.h	/^        void waitForContext(ThreadInfo* th) {$/;"	f	class:Scheduler
waitLock	contention_sim.h	/^        lock_t waitLock;$/;"	m	class:ContentionSim
waitUntilQueued	scheduler.cpp	/^void Scheduler::waitUntilQueued(ThreadInfo* th) {$/;"	f	class:Scheduler
wakeLock	contention_sim.h	/^            lock_t wakeLock; \/\/used to sleep\/wake up simulation thread$/;"	m	struct:ContentionSim::SimThreadData
wakeup	scheduler.h	/^        void wakeup(ThreadInfo* th, bool needsJoin) {$/;"	f	class:Scheduler
wakeupPhase	scheduler.h	/^            uint64_t wakeupPhase; \/\/if SLEEPING, when do we have to wake up?$/;"	m	struct:Scheduler::ThreadInfo
warn	log.h	132;"	d
watchdogThreadFunc	scheduler.cpp	/^void Scheduler::watchdogThreadFunc() {$/;"	f	class:Scheduler
way	mc.h	/^   uint64_t way;$/;"	m	class:TLBEntry
wayPartIndex	part_repl_policies.h	/^        uint32_t* wayPartIndex; \/\/stores partition of each way$/;"	m	class:WayPartReplPolicy
waySize	part_repl_policies.h	/^        uint32_t waySize;$/;"	m	class:WayPartReplPolicy
ways	cache_arrays.h	/^        uint32_t ways;$/;"	m	class:ZArray
ways	mc.h	/^   Way * ways;$/;"	m	class:Set
ways	part_repl_policies.h	/^        uint32_t ways;$/;"	m	class:WayPartReplPolicy
ways	timing_cache.h	/^        uint32_t tagLat, ways, cands;$/;"	m	class:TimingCache
win32_acquire_lock	g_heap/dlmalloc.h.c	/^static FORCEINLINE int win32_acquire_lock (MLOCK_T *sl) {$/;"	f	file:
win32_mlock_t	g_heap/dlmalloc.h.c	/^struct win32_mlock_t {$/;"	s	file:
win32_release_lock	g_heap/dlmalloc.h.c	/^static FORCEINLINE void win32_release_lock (MLOCK_T *sl) {$/;"	f	file:
win32_try_lock	g_heap/dlmalloc.h.c	/^static FORCEINLINE int win32_try_lock (MLOCK_T *sl) {$/;"	f	file:
win32direct_mmap	g_heap/dlmalloc.h.c	/^static FORCEINLINE void* win32direct_mmap(size_t size) {$/;"	f	file:
win32mmap	g_heap/dlmalloc.h.c	/^static FORCEINLINE void* win32mmap(size_t size) {$/;"	f	file:
win32munmap	g_heap/dlmalloc.h.c	/^static FORCEINLINE int win32munmap(void* ptr, size_t size) {$/;"	f	file:
wokenUp	scheduler.h	/^            uint32_t wokenUp;$/;"	m	struct:Scheduler::FutexJoinInfo
wq	mutex.h	/^        mutex wq;$/;"	m	class:rwmutex
wrAddr	filter_cache.h	/^            volatile Address wrAddr;$/;"	m	struct:FilterCache::FilterEntry
wrDoneQueue	detailed_mem.h	/^        g_vector <MemSchedQueueElem> wrDoneQueue;$/;"	m	class:MemSchedulerDefault
wrLock	mutex.h	/^        void wrLock() {$/;"	f	class:rwmutex
wrQueue	ddr_mem.h	/^        RequestQueue<Request> rdQueue, wrQueue;$/;"	m	class:DDRMemory
wrQueue	detailed_mem.h	/^        g_vector <MemSchedQueueElem> wrQueue;$/;"	m	class:MemSchedulerDefault
wrQueueHighWatermark	detailed_mem.h	/^        uint32_t wrQueueHighWatermark;$/;"	m	class:MemSchedulerDefault
wrQueueLowWatermark	detailed_mem.h	/^        uint32_t wrQueueLowWatermark;$/;"	m	class:MemSchedulerDefault
wrQueueSize	detailed_mem.h	/^        uint32_t wrQueueSize;$/;"	m	class:MemSchedulerDefault
wrReqs	ddr_mem.h	/^            InList<Request> wrReqs;$/;"	m	struct:DDRMemory::Bank
wrUnlock	mutex.h	/^        void wrUnlock() {$/;"	f	class:rwmutex
write	access_tracing.h	/^        inline void write(AccessRecord& acc) {$/;"	f	class:AccessTraceWriter
write	ddr_mem.cpp	/^        bool write;$/;"	m	class:DDRMemoryAccEvent	file:
write	ddr_mem.h	/^            bool write;$/;"	m	struct:DDRMemory::Request
write	dramsim_mem_ctrl.cpp	/^        bool write;$/;"	m	class:DRAMSimAccEvent	file:
write	repl_policies.h	/^            uint64_t write;$/;"	m	struct:ProfViolReplPolicy::AccTimes
writeAndClose	config.cpp	/^void Config::writeAndClose(const char* outFile, bool strictCheck) {$/;"	f	class:Config
writeBurstCount	detailed_mem.h	/^        uint64_t writeBurstCount;$/;"	m	class:MemRankBase
writeDqPin	detailed_mem_params.h	/^        uint32_t writeDqPin;$/;"	m	class:MemParam
writeTermPin	detailed_mem_params.h	/^        uint32_t writeTermPin;$/;"	m	class:MemParam
writeVar	config.cpp	/^template<typename T> static void writeVar(libconfig::Config* cfg, const char* key, T val) {$/;"	f	file:
writeVar	config.cpp	/^template<typename T> static void writeVar(libconfig::Setting& setting, const char* key, T val) {$/;"	f	file:
writeback	memory_hierarchy.h	/^    bool* writeback;$/;"	m	struct:InvReq
x	cache_arrays.h	/^        ZWalkInfo* x;$/;"	m	struct:ZCands::iterator
x	cache_arrays.h	/^        uint32_t x;$/;"	m	struct:SetAssocCands::iterator
xadd	mutex.h	/^        inline uint32_t xadd(uint32_t v) {$/;"	f	class:rwmutex
youngLines	repl_policies.h	/^        uint32_t youngLines;$/;"	m	class:NRUReplPolicy
zeroLoadLatency	mem_ctrls.h	/^        uint32_t zeroLoadLatency;$/;"	m	class:MD1Memory
zeroLoadLatency	weave_md1_mem.h	/^        const uint32_t zeroLoadLatency;$/;"	m	class:WeaveMD1Memory
zeroLoadLatency	weave_md1_mem.h	/^        uint32_t zeroLoadLatency;$/;"	m	class:WeaveSimpleMemory
zinfo	zsim.cpp	/^GlobSimInfo* zinfo;$/;"	v
zllStartCycle	ooo_core_recorder.cpp	/^        uint64_t zllStartCycle; \/\/minStartCycle - gapCycles, stable across readjustments of gapCycles$/;"	m	class:OOODispatchEvent	file:
zllStartCycle	ooo_core_recorder.cpp	/^        uint64_t zllStartCycle; \/\/minStartCycle - gapCycles, stable across readjustments of gapCycles$/;"	m	class:OOOIssueEvent	file:
zllStartCycle	ooo_core_recorder.h	/^            uint64_t zllStartCycle;$/;"	m	struct:OOOCoreRecorder::FutureResponse
~Barrier	barrier.h	/^        ~Barrier() {}$/;"	f	class:Barrier
~CallbackBase	Callback.h	/^DRAMSim::CallbackBase<Return,Param1T,Param2T,Param3T>::~CallbackBase() {}$/;"	f	class:DRAMSim::DRAMSim::CallbackBase
~Config	config.cpp	/^Config::~Config() {$/;"	f	class:Config
~FakeLeaveInfo	scheduler.h	/^            ~FakeLeaveInfo() {$/;"	f	struct:Scheduler::FakeLeaveInfo
~GlobAlloc	galloc.h	/^        virtual ~GlobAlloc() {}$/;"	f	class:GlobAlloc
~HDF5BackendImpl	hdf5_stats.cpp	/^        ~HDF5BackendImpl() {}$/;"	f	class:HDF5BackendImpl
~HashFamily	hash.h	/^        virtual ~HashFamily() {}$/;"	f	class:HashFamily
~LFUReplPolicy	repl_policies.h	/^        ~LFUReplPolicy() {$/;"	f	class:LFUReplPolicy
~LRUReplPolicy	repl_policies.h	/^        ~LRUReplPolicy() {$/;"	f	class:LRUReplPolicy
~MemChannelBase	detailed_mem.cpp	/^MemChannelBase::~MemChannelBase(void) {$/;"	f	class:MemChannelBase
~MemControllerBase	detailed_mem.cpp	/^MemControllerBase::~MemControllerBase() {$/;"	f	class:MemControllerBase
~MemParam	detailed_mem_params.cpp	/^MemParam::~MemParam()$/;"	f	class:MemParam
~MemRankBase	detailed_mem.cpp	/^MemRankBase::~MemRankBase() {$/;"	f	class:MemRankBase
~MemSchedulerBase	detailed_mem.h	/^        virtual ~MemSchedulerBase() {}$/;"	f	class:MemSchedulerBase
~MemSchedulerDefault	detailed_mem.cpp	/^MemSchedulerDefault::~MemSchedulerDefault() {}$/;"	f	class:MemSchedulerDefault
~NRUReplPolicy	repl_policies.h	/^        ~NRUReplPolicy() {$/;"	f	class:NRUReplPolicy
~PartReplPolicy	part_repl_policies.h	/^        ~PartReplPolicy() { delete monitor; }$/;"	f	class:PartReplPolicy
~RandReplPolicy	repl_policies.h	/^        ~RandReplPolicy() {$/;"	f	class:RandReplPolicy
~Scheduler	scheduler.h	/^        ~Scheduler() {}$/;"	f	class:Scheduler
~Stat	stats.h	/^        virtual ~Stat() {}$/;"	f	class:Stat
~StatsBackend	stats.h	/^        virtual ~StatsBackend() {}$/;"	f	class:StatsBackend
~StreamPrefetcher	prefetcher.cpp	/^StreamPrefetcher::~StreamPrefetcher() {$/;"	f	class:StreamPrefetcher
~TreeLRUReplPolicy	repl_policies.h	/^        ~TreeLRUReplPolicy() {$/;"	f	class:TreeLRUReplPolicy
~UMonMonitor	monitor.cpp	/^UMonMonitor::~UMonMonitor() {$/;"	f	class:UMonMonitor
~scoped_mutex	mutex.h	/^        ~scoped_mutex() {$/;"	f	class:scoped_mutex
